syntax = "proto3";

package cilium;
option go_package = "cilium";

import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/discovery.proto";
import "envoy/api/v2/route/route.proto";

import "google/api/annotations.proto";

import "validate/validate.proto";

// [#protodoc-title: Network policy management and NPDS]

// Each resource name is a network policy filter identifier.
service NetworkPolicyDiscoveryService {
  rpc StreamNetworkPolicies(stream envoy.api.v2.DiscoveryRequest)
      returns (stream envoy.api.v2.DiscoveryResponse) {
  }

  rpc FetchNetworkPolicies(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse) {
    option (google.api.http) = {
      post: "/v2/discovery:network_policies"
      body: "*"
    };
  }
}

// A subset of a network policy that is enforced by a filter on the network
// flows to/from associated hosts.
message NetworkPolicy {
  // The unique identifier of a network policy filter.
  // This uniquely identifies the subset of the network policy that is enforced
  // by the filter.
  // Required.
  string name = 1;

  // The unique identifier of the network policy this subset is part of.
  // Required.
  uint64 policy = 2;

  // The part of the policy to be enforced at ingress by the filter.
  // Optional.
  DirectionNetworkPolicy ingress = 3;

  // The part of the policy to be enforced at egress by the filter.
  // Optional.
  DirectionNetworkPolicy egress = 4;
}

// A network policy to be enforced on flows either to or from hosts.
message DirectionNetworkPolicy {
  // The set of per-port network policies, one per destination L4 port.
  // Every PortNetworkPolicy element in this set has a unique toPort.
  // Required and may not be empty.
  repeated PortNetworkPolicy per_port_policies = 1 [(validate.rules).repeated .min_items = 1];
}

// A network policy to be enforced on flows to a specific destination L4 port.
message PortNetworkPolicy {
  // The flows' destination L4 port number, as an unsigned 16-bit integer.
  // Required.
  uint32 port = 1 [(validate.rules).uint32.lte = 65535];

  // The flows' L4 transport protocol.
  // Required.
  envoy.api.v2.core.SocketAddress.Protocol protocol = 2;
  // TODO: Fix protoc-gen-validate. Adding any validate.rules to protocol above results in generating broken C++ code.

  // The network policy rules to be enforced on the flows to the port.
  // A flow is allowed if any rule matches it. If no rule matches the flow, it is denied.
  // Required and may not be empty.
  repeated PortNetworkPolicyRule rules = 3 [(validate.rules).repeated .min_items = 1];
}

// A network policy rule, as a conjunction of predicates on L3-L7 flows.
// If all the predicates of a rule match a flow, the flow is allowed.
message PortNetworkPolicyRule {
  // The set of identifiers of policies of remote hosts that are allowed by this rule.
  // This predicate matches a flow if the identifier of the policy applied on the flow's remote
  // host is contained in this set. Required and may not be empty.
  repeated uint64 remote_policies = 1 [(validate.rules).repeated = {min_items: 1, unique: true}];

  oneof l7_rules {
    // The set of HTTP network policy rules.
    // An HTTP request is allowed if any rule in this set matches it.
    // Optional.
    HttpNetworkPolicyRules http_rules = 100;
 }
}

// A set of network policy rules enforced on HTTP requests.
message HttpNetworkPolicyRules {
  // The set of HTTP network policy rules.
  // If any rule matches a request, the request is allowed. Otherwise, it is denied.
  // Required and may not be empty.
  repeated HttpNetworkPolicyRule http_rules = 1 [(validate.rules).repeated .min_items = 1];
}

// An HTTP network policy rule, as a conjunction of predicates on HTTP requests.
// If all the predicates of a rule match an HTTP request, the request is allowed. Otherwise, it is
// denied.
message HttpNetworkPolicyRule {
  // A set of matchers on the HTTP request's headers' names and values.
  // If all the matchers in this set match an HTTP request, the request is allowed by this rule.
  // Otherwise, it is denied.
  //
  // Some special header names are:
  //
  // * *:uri*: The HTTP request's URI.
  // * *:method*: The HTTP request's method.
  // * *:authority*: Also maps to the HTTP 1.1 *Host* header.
  //
  // Optional. If empty, matches any HTTP request.
  repeated envoy.api.v2.route.HeaderMatcher headers = 1;
}
