syntax = "proto3";

package cilium;

import "envoy/api/v2/core/address.proto";
import "envoy/api/v2/discovery.proto";
import "envoy/api/v2/route/route.proto";

import "google/api/annotations.proto";

import "validate/validate.proto";

// [#protodoc-title: Network policy management and NPDS]

// Each resource name is a network policy identifier.
service NetworkPolicyDiscoveryService {
  rpc StreamNetworkPolicies(stream envoy.api.v2.DiscoveryRequest)
      returns (stream envoy.api.v2.DiscoveryResponse) {
  }

  rpc FetchNetworkPolicies(envoy.api.v2.DiscoveryRequest) returns (envoy.api.v2.DiscoveryResponse) {
    option (google.api.http) = {
      post: "/v2/discovery:network_policies"
      body: "*"
    };
  }
}

// A network policy that is enforced by a filter on the network flows to/from
// associated hosts.
message NetworkPolicy {
  // The unique identifier of the network policy.
  // Required.
  string name = 1;

  // The policy identifier associated with the network policy. Corresponds to
  // remote_policies entries in PortNetworkPolicyRule.
  // Required.
  uint64 policy = 2;

  // The part of the policy to be enforced at ingress by the filter, as a set
  // of per-port network policies, one per destination L4 port.
  // Every PortNetworkPolicy element in this set has a unique port / protocol
  // combination.
  // Optional. If empty, all flows in this direction are denied.
  repeated PortNetworkPolicy ingress_per_port_policies = 3;

  // The part of the policy to be enforced at egress by the filter, as a set
  // of per-port network policies, one per destination L4 port.
  // Every PortNetworkPolicy element in this set has a unique port / protocol
  // combination.
  // Optional. If empty, all flows in this direction are denied.
  repeated PortNetworkPolicy egress_per_port_policies = 4;
}

// A network policy to whitelist flows to a specific destination L4 port,
// as a conjunction of predicates on L3/L4/L7 flows.
// If all the predicates of a policy match a flow, the flow is whitelisted.
message PortNetworkPolicy {
  // The flows' destination L4 port number, as an unsigned 16-bit integer.
  // If 0, all destination L4 port numbers are matched by this predicate.
  uint32 port = 1 [(validate.rules).uint32.lte = 65535];

  // The flows' L4 transport protocol.
  // Required.
  envoy.api.v2.core.SocketAddress.Protocol protocol = 2;

  // The network policy rules to be enforced on the flows to the port.
  // Optional. A flow is matched by this predicate if either the set of
  // rules is empty or any of the rules matches it.
  repeated PortNetworkPolicyRule rules = 3;
}

// A network policy rule, as a conjunction of predicates on L3/L7 flows.
// If all the predicates of a rule match a flow, the flow is matched by the
// rule.
message PortNetworkPolicyRule {
  // The set of identifiers of policies of remote hosts.
  // A flow is matched by this predicate if the identifier of the policy
  // applied on the flow's remote host is contained in this set.
  // Optional. If not specified, any remote host is matched by this predicate.
  repeated uint64 remote_policies = 1 [(validate.rules).repeated.unique = true];

  // Optional. If not specified, any L7 request is matched by this predicate.
  // All rules on any given port must have the same type of L7 rules!
  oneof l7_rules {
    // The set of HTTP network policy rules.
    // An HTTP request is matched by this predicate if any of its rules matches
    // the request.
    HttpNetworkPolicyRules http_rules = 100;

    // The set of Kafka network policy rules.
    // A Kafka request is matched by this predicate if any of its rules matches
    // the request.
    KafkaNetworkPolicyRules kafka_rules = 101;
 }
}

// A set of network policy rules that match HTTP requests.
message HttpNetworkPolicyRules {
  // The set of HTTP network policy rules.
  // An HTTP request is matched if any of its rules matches the request.
  // Required and may not be empty.
  repeated HttpNetworkPolicyRule http_rules = 1 [(validate.rules).repeated.min_items = 1];
}

// An HTTP network policy rule, as a conjunction of predicates on HTTP requests.
// If all the predicates of a rule match an HTTP request, the request is allowed. Otherwise, it is
// denied.
message HttpNetworkPolicyRule {
  // A set of matchers on the HTTP request's headers' names and values.
  // If all the matchers in this set match an HTTP request, the request is allowed by this rule.
  // Otherwise, it is denied.
  //
  // Some special header names are:
  //
  // * *:uri*: The HTTP request's URI.
  // * *:method*: The HTTP request's method.
  // * *:authority*: Also maps to the HTTP 1.1 *Host* header.
  //
  // Optional. If empty, matches any HTTP request.
  repeated envoy.api.v2.route.HeaderMatcher headers = 1;
}

// A set of network policy rules that match Kafka requests.
message KafkaNetworkPolicyRules {
  // The set of Kafka network policy rules.
  // A Kafka request is matched if any of its rules matches the request.
  // Required and may not be empty.
  repeated KafkaNetworkPolicyRule kafka_rules = 1 [(validate.rules).repeated.min_items = 1];
}

// A Kafka network policy rule, as a conjunction of predicates on Kafka requests.
// If all the predicates of a rule match a Kafka request, the request is allowed. Otherwise, it is
// denied.
message KafkaNetworkPolicyRule {
  // The Kafka request's API key.
  // If <0, all Kafka requests are matched by this predicate.
  int32 api_key = 1;

  // The Kafka request's API version.
  // If <0, all Kafka requests are matched by this predicate.
  int32 api_version = 2;

  // The Kafka request's topic.
  // Optional. If not specified, all Kafka requests are matched by this predicate.
  // If specified, this predicates only matches requests that contain this topic, and never
  // matches requests that don't contain any topic.
  string topic = 3 [(validate.rules).string = {max_len: 255, pattern: "^[a-zA-Z0-9._-]*$"}];

  // The Kafka request's client ID.
  // Optional. If not specified, all Kafka requests are matched by this predicate.
  // If specified, this predicates only matches requests that contain this client ID, and never
  // matches requests that don't contain any client ID.
  string client_id = 4 [(validate.rules).string.pattern = "^[a-zA-Z0-9._-]*$"];
}
