name: Multicluster

on:
  pull_request: {}
  push:
    branches:
      - master
  schedule:
    - cron:  '40 */6 * * *'

env:
  clusterName1: cilium-cli-ci-multicluster-1-${{ github.run_number }}
  clusterName2: cilium-cli-ci-multicluster-2-${{ github.run_number }}
  zone: us-west2-a

jobs:
  installation-and-connectivity:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.4

      - name: Set up Go for root
        run: |
          sudo ln -sf `which go` `sudo which go` || true
          sudo go version

      - name: Build and install cilium CLI binary
        run: sudo make install

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: gcloud info
        run: |
          gcloud info

      - name: Create GKE cluster1
        run: |
          gcloud container clusters create ${{ env.clusterName1 }} --image-type COS --num-nodes 2 --machine-type n1-standard-4 --zone ${{ env.zone }} --enable-ip-alias
          gcloud container clusters get-credentials ${{ env.clusterName1 }} --zone ${{ env.zone }}
          echo "CONTEXT1=$(kubectl config get-contexts -o name | grep ${{ env.clusterName1 }})" >> $GITHUB_ENV

      - name: Install cilium in cluster1
        run: |
          cilium install --cluster-name ${{ env.clusterName1 }} --cluster-id 1 --restart-unmanaged-pods=false --config monitor-aggregation=none --native-routing-cidr=10.0.0.0/9
          cilium hubble enable

      - name: Enable ClusterMesh cluster1
        run: |
          cilium clustermesh enable

      - name: Create GKE cluster2
        run: |
          gcloud container clusters create ${{ env.clusterName2 }} --image-type COS --num-nodes 2 --machine-type n1-standard-4 --zone ${{ env.zone }} --enable-ip-alias
          gcloud container clusters get-credentials ${{ env.clusterName2 }} --zone ${{ env.zone }}
          echo "CONTEXT2=$(kubectl config get-contexts -o name | grep ${{ env.clusterName2 }})" >> $GITHUB_ENV

      - name: Allow cross-cluster traffic
        run: |
          TAG1=$(gcloud compute firewall-rules list --filter="name~^gke-${{ env.clusterName1 }}-[0-9a-z]*-all$" --format="value(name)")
          TAG2=$(gcloud compute firewall-rules list --filter="name~^gke-${{ env.clusterName2 }}-[0-9a-z]*-all$" --format="value(name)")
          GCP_FW_RULE=cilium-cli-ci-multicluster-${{ github.run_number }}-rule
          gcloud compute firewall-rules describe $TAG1
          gcloud compute firewall-rules describe $TAG2
          gcloud compute firewall-rules create $GCP_FW_RULE --allow tcp,udp,icmp,sctp,esp,ah --priority=999 --source-ranges=10.0.0.0/9 --target-tags=${TAG1/-all/-node},${TAG2/-all/-node}
          gcloud compute firewall-rules describe $GCP_FW_RULE
          echo "GCP_FW_RULE=$GCP_FW_RULE" >> $GITHUB_ENV

      - name: Install cilium in cluster2
        run: |
          cilium install --cluster-name ${{ env.clusterName2 }} --cluster-id 2 --restart-unmanaged-pods=false --config monitor-aggregation=none --native-routing-cidr=10.0.0.0/9 --context $CONTEXT2 --inherit-ca $CONTEXT1
          cilium hubble enable --relay=false

      - name: Enable ClusterMesh cluster2
        run: |
          cilium clustermesh enable

      - name: Wait for ClusterMesh to be enabled cluster1
        run: |
          cilium --context $CONTEXT1 clustermesh status --wait

      - name: Wait for ClusterMesh to be enabled cluster2
        run: |
          cilium --context $CONTEXT2 clustermesh status --wait

      - name: Connect clusters
        run: |
          cilium --context $CONTEXT1 clustermesh connect --destination-context $CONTEXT2

      - name: Wait for ClusterMesh to be connected cluster1
        run: |
          cilium --context $CONTEXT1 clustermesh status --wait --wait-duration 5m

      - name: Wait for ClusterMesh to be connected cluster2
        run: |
          cilium --context $CONTEXT2 clustermesh status --wait --wait-duration 5m

      - name: Relay Port Forward
        run: |
          cilium hubble port-forward --context $CONTEXT1&
          sleep 5s

      - name: Connectivity test
        run: |
          cilium --context $CONTEXT1 connectivity test --multi-cluster $CONTEXT2 --test '!/pod-to-.*-nodeport' --all-flows

      - name: Cleanup
        if: ${{ always() }}
        run: |
          cilium --context $CONTEXT1 status
          cilium --context $CONTEXT1 clustermesh status
          cilium --context $CONTEXT2 status
          cilium --context $CONTEXT2 clustermesh status
          kubectl get pods --all-namespaces -o wide
          curl -sLO https://github.com/cilium/cilium-sysdump/releases/latest/download/cilium-sysdump.zip
          python cilium-sysdump.zip --output cilium-sysdump-out
          gcloud compute firewall-rules delete --quiet $GCP_FW_RULE
          gcloud container clusters delete --quiet ${{ env.clusterName1 }} --zone ${{ env.zone }}
          gcloud container clusters delete --quiet ${{ env.clusterName2 }} --zone ${{ env.zone }}
        shell: bash {0}

      - name: Upload Artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cilium-sysdump-out.zip
          path: cilium-sysdump-out.zip
          retention-days: 5
