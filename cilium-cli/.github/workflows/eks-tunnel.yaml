name: EKS (tunnel)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request_target: {}
  schedule:
    - cron:  '50 */6 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request_target.number || github.event.after || 'scheduled' }}
  cancel-in-progress: true

env:
  clusterName: cilium-cli-ci-eks-tunnel-${{ github.run_number }}
  region: us-east-2

jobs:
  installation-and-connectivity:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set job vars
        id: vars
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            PR_API_JSON=$(curl \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.issue.pull_request.url || github.event.pull_request.url }})
            SHA=$(echo "$PR_API_JSON" | jq -r ".head.sha")
            OWNER=$(echo "$PR_API_JSON" | jq -r ".number")
            IS_PR=true
          else
            SHA=${{ github.sha }}
            OWNER=${{ github.sha }}
          fi
          echo ::set-output name=sha::${SHA}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          mv /tmp/eksctl .
          chmod +x eksctl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}

      - name: Create EKS cluster
        run: |
          ./eksctl create cluster --name ${{ env.clusterName }} --without-nodegroup

      - name: Create kubeconfig and load it in configmap
        run: |
          .github/get-kubeconfig.sh
          kubectl create configmap cilium-cli-kubeconfig -n kube-system --from-file kubeconfig

      - name: Load cilium install script in configmap
        run: |
          kubectl create configmap cilium-cli-test-script-install -n kube-system --from-file=in-cluster-test-script.sh=.github/in-cluster-test-scripts/eks-tunnel-install.sh

      - name: Create cilium-cli install job
        run: |
          helm install .github/cilium-cli-test-job-chart --generate-name \
          --set tag=${{ steps.vars.outputs.sha }} \
          --set cluster_name=${{ env.clusterName }} \
          --set job_name=cilium-cli-install \
          --set test_script_cm=cilium-cli-test-script-install

      - name: Add nodegroup
        run: |
          ./eksctl create nodegroup --cluster ${{ env.clusterName }} --nodes 2 --node-private-networking --spot --managed

      - name: Load cilium cli script in configmap
        run: |
          kubectl create configmap cilium-cli-test-script -n kube-system --from-file=in-cluster-test-script.sh=.github/in-cluster-test-scripts/eks-tunnel.sh

      - name: Create cilium-cli test job
        run: |
          helm install .github/cilium-cli-test-job-chart --generate-name \
          --set tag=${{ steps.vars.outputs.sha }} \
          --set cluster_name=${{ env.clusterName }}

      - name: Wait for install job
        run: |
          kubectl -n kube-system wait job/cilium-cli --for=condition=complete --timeout=10m

      - name: Post-test installation logs
        if: ${{ always() }}
        run: |
          kubectl logs -n kube-system job/cilium-cli-install

      - name: Post-test information gathering
        if: ${{ always() }}
        run: |
          kubectl logs -n kube-system job/cilium-cli
          kubectl get pods --all-namespaces -o wide
          curl -sLO https://github.com/cilium/cilium-sysdump/releases/latest/download/cilium-sysdump.zip
          python cilium-sysdump.zip --output cilium-sysdump-out
        shell: bash {0}

      - name: Cleanup
        if: ${{ always() }}
        run: |
          ./eksctl delete cluster --name ${{ env.clusterName }}
        shell: bash {0}

      - name: Upload Artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: cilium-sysdump-out.zip
          path: cilium-sysdump-out.zip
          retention-days: 5
