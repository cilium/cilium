name: External Workloads

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request_target: {}
  # Run every 6 hours
  schedule:
    - cron:  '0 4/6 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || 'scheduled' }}
  cancel-in-progress: true

env:
  clusterName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-vm
  vmName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-vm
  zone: us-west2-a
  vmStartupScript: .github/gcp-vm-startup.sh

jobs:
  installation-and-connectivity:
    if: ${{ github.repository == 'cilium/cilium-cli' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@daadedc81d5f9d3c06d2c92f49202a3cc2b919ba
        with:
          project_id: ${{ secrets.GCP_PR_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_PR_SA_KEY }}
          export_default_credentials: true

      - name: Display gcloud CLI info
        run: |
          gcloud info

      - name: Set up job variables
        id: vars
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            PR_API_JSON=$(curl \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.issue.pull_request.url || github.event.pull_request.url }})
            SHA=$(echo "$PR_API_JSON" | jq -r ".head.sha")
            OWNER=$(echo "$PR_API_JSON" | jq -r ".number")
          else
            SHA=${{ github.sha }}
            OWNER=${{ github.sha }}
          fi

          echo ::set-output name=sha::${SHA}
          echo ::set-output name=owner::${OWNER}

      - name: Create GCP VM
        run: |
          gcloud compute instances create ${{ env.vmName }} \
            --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
            --zone ${{ env.zone }} \
            --machine-type e2-custom-2-4096 \
            --boot-disk-type pd-standard \
            --boot-disk-size 10GB \
            --preemptible \
            --image-project ubuntu-os-cloud \
            --image-family ubuntu-2010 \
            --metadata hostname=${{ env.vmName }} \
            --metadata-from-file startup-script=${{ env.vmStartupScript}}

      - name: Create GKE cluster
        id: cluster
        run: |
          gcloud container clusters create ${{ env.clusterName }} \
            --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
            --zone ${{ env.zone }} \
            --image-type COS_CONTAINERD \
            --num-nodes 2 \
            --machine-type e2-custom-2-4096 \
            --disk-type pd-standard \
            --disk-size 10GB \
            --node-taints node.cilium.io/agent-not-ready=true:NoSchedule \
            --preemptible
          CLUSTER_CIDR=$(gcloud container clusters describe ${{ env.clusterName }} --zone ${{ env.zone }} --format="value(clusterIpv4Cidr)")
          echo ::set-output name=cluster_cidr::${CLUSTER_CIDR}

      - name: Get cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.clusterName }} --zone ${{ env.zone }}

      - name: Create gcloud-free kubeconfig and load it in configmap
        run: |
          .github/get-kubeconfig.sh
          kubectl create configmap cilium-cli-kubeconfig -n kube-system --from-file kubeconfig

      - name: Load cilium install script in configmap
        run: |
          kubectl create configmap cilium-cli-test-script-install -n kube-system --from-file=in-cluster-test-script.sh=.github/in-cluster-test-scripts/external-workloads-install.sh

      - name: Create cilium-cli install job
        run: |
          helm install .github/cilium-cli-test-job-chart \
            --generate-name \
            --set tag=${{ steps.vars.outputs.sha }} \
            --set cluster_name=${{ env.clusterName }} \
            --set job_name=cilium-cli-install \
            --set test_script_cm=cilium-cli-test-script-install \
            --set vm_name=${{ env.vmName }} \
            --set cluster_cidr=${{ steps.cluster.outputs.cluster_cidr }}

      - name: Wait for install job
        run: |
          kubectl -n kube-system wait job/cilium-cli-install --for=condition=complete --timeout=10m

      - name: Copy VM install script from cilium-cli-install pod
        run: |
          kubectl -n kube-system get configmap install-external-workload-script -o go-template='{{ .data.script }}' > install-external-workload.sh
          chmod +x install-external-workload.sh

      - name: Finish installing Cilium on VM
        run: |
          gcloud compute scp install-external-workload.sh ${{ env.vmName }}:~/ --zone ${{ env.zone }}
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "~/install-external-workload.sh"
          sleep 5s
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "cilium status"

      - name: Verify cluster DNS on VM
        run: |
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "nslookup -norecurse clustermesh-apiserver.kube-system.svc.cluster.local"

      - name: Ping clustermesh-apiserver from VM
        run: |
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "ping -c 3 \$(cilium service list get -o jsonpath='{[?(@.spec.flags.name==\"clustermesh-apiserver\")].spec.backend-addresses[0].ip}')"

      - name: Load cilium test script in configmap
        run: |
          kubectl create configmap cilium-cli-test-script -n kube-system --from-file=in-cluster-test-script.sh=.github/in-cluster-test-scripts/external-workloads.sh

      - name: Create cilium-cli test job
        run: |
          helm install .github/cilium-cli-test-job-chart \
            --generate-name \
            --set tag=${{ steps.vars.outputs.sha }} \
            --set job_name=cilium-cli \
            --set test_script_cm=cilium-cli-test-script

      - name: Wait for test job
        run: |
          kubectl -n kube-system wait job/cilium-cli --for=condition=complete --timeout=10m

      - name: Post-test information gathering
        if: ${{ !success() }}
        run: |
          echo "=== Retrieve in-cluster jobs logs ==="
          kubectl logs --timestamps -n kube-system job/cilium-cli-install
          kubectl logs --timestamps -n kube-system job/cilium-cli

          echo "\n\n\n=== Retrieve VM state ==="
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} --command "cilium status"
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} --command "sudo docker logs cilium --timestamps"

          echo "\n\n\n=== Install latest stable CLI ==="
          curl -LO https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/bin
          rm cilium-linux-amd64.tar.gz

          echo "\n\n\n=== Retrieve cluster state ==="
          kubectl get pods --all-namespaces -o wide
          kubectl get cew --all-namespaces -o wide
          kubectl get cep --all-namespaces -o wide
          cilium status
          cilium clustermesh status
          cilium clustermesh vm status
          cilium sysdump --output-filename cilium-sysdump-out
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

      - name: Clean up GKE
        if: ${{ always() }}
        run: |
          gcloud container clusters delete ${{ env.clusterName }} --zone ${{ env.zone }} --quiet --async
          gcloud compute instances delete ${{ env.vmName }} --zone ${{ env.zone }} --quiet
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

      - name: Upload artifacts
        if: ${{ !success() }}
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700
        with:
          name: cilium-sysdump-out.zip
          path: cilium-sysdump-out.zip
          retention-days: 5

      - name: Send slack notification
        if: ${{ !success() && (github.event_name == 'schedule' || github.event_name == 'push') }}
        uses: 8398a7/action-slack@dcc8c8e9dd8802e21a712dc0c003db97b42efe43
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
