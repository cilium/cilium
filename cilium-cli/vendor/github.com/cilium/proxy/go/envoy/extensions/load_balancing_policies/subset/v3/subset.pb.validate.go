// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/load_balancing_policies/subset/v3/subset.proto

package subsetv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Subset with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subset) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subset with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SubsetMultiError, or nil if none found.
func (m *Subset) ValidateAll() error {
	return m.validate(true)
}

func (m *Subset) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Subset_LbSubsetFallbackPolicy_name[int32(m.GetFallbackPolicy())]; !ok {
		err := SubsetValidationError{
			field:  "FallbackPolicy",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDefaultSubset()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubsetValidationError{
					field:  "DefaultSubset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubsetValidationError{
					field:  "DefaultSubset",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefaultSubset()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubsetValidationError{
				field:  "DefaultSubset",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubsetSelectors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubsetValidationError{
						field:  fmt.Sprintf("SubsetSelectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubsetValidationError{
						field:  fmt.Sprintf("SubsetSelectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubsetValidationError{
					field:  fmt.Sprintf("SubsetSelectors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LocalityWeightAware

	// no validation rules for ScaleLocalityWeight

	// no validation rules for PanicModeAny

	// no validation rules for ListAsAny

	if _, ok := Subset_LbSubsetMetadataFallbackPolicy_name[int32(m.GetMetadataFallbackPolicy())]; !ok {
		err := SubsetValidationError{
			field:  "MetadataFallbackPolicy",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSubsetLbPolicy() == nil {
		err := SubsetValidationError{
			field:  "SubsetLbPolicy",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSubsetLbPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubsetValidationError{
					field:  "SubsetLbPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubsetValidationError{
					field:  "SubsetLbPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubsetLbPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubsetValidationError{
				field:  "SubsetLbPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubsetMultiError(errors)
	}

	return nil
}

// SubsetMultiError is an error wrapping multiple validation errors returned by
// Subset.ValidateAll() if the designated constraints aren't met.
type SubsetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubsetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubsetMultiError) AllErrors() []error { return m }

// SubsetValidationError is the validation error returned by Subset.Validate if
// the designated constraints aren't met.
type SubsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubsetValidationError) ErrorName() string { return "SubsetValidationError" }

// Error satisfies the builtin error interface
func (e SubsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubsetValidationError{}

// Validate checks the field values on Subset_LbSubsetSelector with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Subset_LbSubsetSelector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subset_LbSubsetSelector with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Subset_LbSubsetSelectorMultiError, or nil if none found.
func (m *Subset_LbSubsetSelector) ValidateAll() error {
	return m.validate(true)
}

func (m *Subset_LbSubsetSelector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SingleHostPerSubset

	if _, ok := Subset_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_name[int32(m.GetFallbackPolicy())]; !ok {
		err := Subset_LbSubsetSelectorValidationError{
			field:  "FallbackPolicy",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Subset_LbSubsetSelectorMultiError(errors)
	}

	return nil
}

// Subset_LbSubsetSelectorMultiError is an error wrapping multiple validation
// errors returned by Subset_LbSubsetSelector.ValidateAll() if the designated
// constraints aren't met.
type Subset_LbSubsetSelectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Subset_LbSubsetSelectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Subset_LbSubsetSelectorMultiError) AllErrors() []error { return m }

// Subset_LbSubsetSelectorValidationError is the validation error returned by
// Subset_LbSubsetSelector.Validate if the designated constraints aren't met.
type Subset_LbSubsetSelectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Subset_LbSubsetSelectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Subset_LbSubsetSelectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Subset_LbSubsetSelectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Subset_LbSubsetSelectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Subset_LbSubsetSelectorValidationError) ErrorName() string {
	return "Subset_LbSubsetSelectorValidationError"
}

// Error satisfies the builtin error interface
func (e Subset_LbSubsetSelectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubset_LbSubsetSelector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Subset_LbSubsetSelectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Subset_LbSubsetSelectorValidationError{}
