// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/data/tap/v3/http.proto

package tapv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HttpBufferedTrace with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HttpBufferedTrace) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpBufferedTrace with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpBufferedTraceMultiError, or nil if none found.
func (m *HttpBufferedTrace) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpBufferedTrace) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HttpBufferedTraceValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HttpBufferedTraceValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTraceValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HttpBufferedTraceValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HttpBufferedTraceValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTraceValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HttpBufferedTraceMultiError(errors)
	}

	return nil
}

// HttpBufferedTraceMultiError is an error wrapping multiple validation errors
// returned by HttpBufferedTrace.ValidateAll() if the designated constraints
// aren't met.
type HttpBufferedTraceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpBufferedTraceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpBufferedTraceMultiError) AllErrors() []error { return m }

// HttpBufferedTraceValidationError is the validation error returned by
// HttpBufferedTrace.Validate if the designated constraints aren't met.
type HttpBufferedTraceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpBufferedTraceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpBufferedTraceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpBufferedTraceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpBufferedTraceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpBufferedTraceValidationError) ErrorName() string {
	return "HttpBufferedTraceValidationError"
}

// Error satisfies the builtin error interface
func (e HttpBufferedTraceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpBufferedTrace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpBufferedTraceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpBufferedTraceValidationError{}

// Validate checks the field values on HttpStreamedTraceSegment with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HttpStreamedTraceSegment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpStreamedTraceSegment with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpStreamedTraceSegmentMultiError, or nil if none found.
func (m *HttpStreamedTraceSegment) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpStreamedTraceSegment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TraceId

	switch v := m.MessagePiece.(type) {
	case *HttpStreamedTraceSegment_RequestHeaders:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestHeaders()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestHeaders",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestHeaders",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "RequestHeaders",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_RequestBodyChunk:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestBodyChunk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestBodyChunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestBodyChunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "RequestBodyChunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_RequestTrailers:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRequestTrailers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestTrailers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "RequestTrailers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequestTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "RequestTrailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseHeaders:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponseHeaders()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseHeaders",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseHeaders",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseHeaders()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "ResponseHeaders",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseBodyChunk:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponseBodyChunk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseBodyChunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseBodyChunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseBodyChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "ResponseBodyChunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *HttpStreamedTraceSegment_ResponseTrailers:
		if v == nil {
			err := HttpStreamedTraceSegmentValidationError{
				field:  "MessagePiece",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetResponseTrailers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseTrailers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpStreamedTraceSegmentValidationError{
						field:  "ResponseTrailers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResponseTrailers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpStreamedTraceSegmentValidationError{
					field:  "ResponseTrailers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return HttpStreamedTraceSegmentMultiError(errors)
	}

	return nil
}

// HttpStreamedTraceSegmentMultiError is an error wrapping multiple validation
// errors returned by HttpStreamedTraceSegment.ValidateAll() if the designated
// constraints aren't met.
type HttpStreamedTraceSegmentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpStreamedTraceSegmentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpStreamedTraceSegmentMultiError) AllErrors() []error { return m }

// HttpStreamedTraceSegmentValidationError is the validation error returned by
// HttpStreamedTraceSegment.Validate if the designated constraints aren't met.
type HttpStreamedTraceSegmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpStreamedTraceSegmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpStreamedTraceSegmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpStreamedTraceSegmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpStreamedTraceSegmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpStreamedTraceSegmentValidationError) ErrorName() string {
	return "HttpStreamedTraceSegmentValidationError"
}

// Error satisfies the builtin error interface
func (e HttpStreamedTraceSegmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpStreamedTraceSegment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpStreamedTraceSegmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpStreamedTraceSegmentValidationError{}

// Validate checks the field values on HttpBufferedTrace_Message with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HttpBufferedTrace_Message) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HttpBufferedTrace_Message with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HttpBufferedTrace_MessageMultiError, or nil if none found.
func (m *HttpBufferedTrace_Message) ValidateAll() error {
	return m.validate(true)
}

func (m *HttpBufferedTrace_Message) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHeaders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpBufferedTrace_MessageValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpBufferedTrace_MessageValidationError{
						field:  fmt.Sprintf("Headers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpBufferedTrace_MessageValidationError{
					field:  fmt.Sprintf("Headers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetBody()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HttpBufferedTrace_MessageValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HttpBufferedTrace_MessageValidationError{
					field:  "Body",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBody()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HttpBufferedTrace_MessageValidationError{
				field:  "Body",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTrailers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HttpBufferedTrace_MessageValidationError{
						field:  fmt.Sprintf("Trailers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HttpBufferedTrace_MessageValidationError{
						field:  fmt.Sprintf("Trailers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HttpBufferedTrace_MessageValidationError{
					field:  fmt.Sprintf("Trailers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HttpBufferedTrace_MessageMultiError(errors)
	}

	return nil
}

// HttpBufferedTrace_MessageMultiError is an error wrapping multiple validation
// errors returned by HttpBufferedTrace_Message.ValidateAll() if the
// designated constraints aren't met.
type HttpBufferedTrace_MessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HttpBufferedTrace_MessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HttpBufferedTrace_MessageMultiError) AllErrors() []error { return m }

// HttpBufferedTrace_MessageValidationError is the validation error returned by
// HttpBufferedTrace_Message.Validate if the designated constraints aren't met.
type HttpBufferedTrace_MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpBufferedTrace_MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpBufferedTrace_MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpBufferedTrace_MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpBufferedTrace_MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpBufferedTrace_MessageValidationError) ErrorName() string {
	return "HttpBufferedTrace_MessageValidationError"
}

// Error satisfies the builtin error interface
func (e HttpBufferedTrace_MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpBufferedTrace_Message.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpBufferedTrace_MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpBufferedTrace_MessageValidationError{}
