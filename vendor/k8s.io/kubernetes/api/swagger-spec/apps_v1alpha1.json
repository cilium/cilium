{
  "swaggerVersion": "1.2",
  "apiVersion": "apps/v1alpha1",
  "basePath": "https://10.10.10.10:6443",
  "resourcePath": "/apis/apps/v1alpha1",
  "info": {
   "title": "",
   "description": ""
  },
  "apis": [
   {
    "path": "/apis/apps/v1alpha1/namespaces/{namespace}/statefulsets",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "v1alpha1.StatefulSetList",
      "method": "GET",
      "summary": "list or watch objects of kind StatefulSet",
      "nickname": "listNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSetList"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf",
       "application/json;stream=watch",
       "application/vnd.kubernetes.protobuf;stream=watch"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1alpha1.StatefulSet",
      "method": "POST",
      "summary": "create a StatefulSet",
      "nickname": "createNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1alpha1.StatefulSet",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "unversioned.Status",
      "method": "DELETE",
      "summary": "delete collection of StatefulSet",
      "nickname": "deletecollectionNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "unversioned.Status"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/watch/namespaces/{namespace}/statefulsets",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "versioned.Event",
      "method": "GET",
      "summary": "watch individual changes to a list of StatefulSet",
      "nickname": "watchNamespacedStatefulSetList",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "versioned.Event"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf",
       "application/json;stream=watch",
       "application/vnd.kubernetes.protobuf;stream=watch"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/namespaces/{namespace}/statefulsets/{name}",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "v1alpha1.StatefulSet",
      "method": "GET",
      "summary": "read the specified StatefulSet",
      "nickname": "readNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "export",
        "description": "Should this value be exported.  Export strips fields that a user can not specify.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "exact",
        "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1alpha1.StatefulSet",
      "method": "PUT",
      "summary": "replace the specified StatefulSet",
      "nickname": "replaceNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1alpha1.StatefulSet",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1alpha1.StatefulSet",
      "method": "PATCH",
      "summary": "partially update the specified StatefulSet",
      "nickname": "patchNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "unversioned.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     },
     {
      "type": "unversioned.Status",
      "method": "DELETE",
      "summary": "delete a StatefulSet",
      "nickname": "deleteNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1.DeleteOptions",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "gracePeriodSeconds",
        "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "orphanDependents",
        "description": "Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "unversioned.Status"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/watch/namespaces/{namespace}/statefulsets/{name}",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "versioned.Event",
      "method": "GET",
      "summary": "watch changes to an object of kind StatefulSet",
      "nickname": "watchNamespacedStatefulSet",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "versioned.Event"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf",
       "application/json;stream=watch",
       "application/vnd.kubernetes.protobuf;stream=watch"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/statefulsets",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "v1alpha1.StatefulSetList",
      "method": "GET",
      "summary": "list or watch objects of kind StatefulSet",
      "nickname": "listStatefulSetForAllNamespaces",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSetList"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf",
       "application/json;stream=watch",
       "application/vnd.kubernetes.protobuf;stream=watch"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/watch/statefulsets",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "versioned.Event",
      "method": "GET",
      "summary": "watch individual changes to a list of StatefulSet",
      "nickname": "watchStatefulSetListForAllNamespaces",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "labelSelector",
        "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "fieldSelector",
        "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "boolean",
        "paramType": "query",
        "name": "watch",
        "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "query",
        "name": "resourceVersion",
        "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "integer",
        "paramType": "query",
        "name": "timeoutSeconds",
        "description": "Timeout for the list/watch call.",
        "required": false,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "versioned.Event"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf",
       "application/json;stream=watch",
       "application/vnd.kubernetes.protobuf;stream=watch"
      ],
      "consumes": [
       "*/*"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1/namespaces/{namespace}/statefulsets/{name}/status",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "v1alpha1.StatefulSet",
      "method": "GET",
      "summary": "read status of the specified StatefulSet",
      "nickname": "readNamespacedStatefulSetStatus",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1alpha1.StatefulSet",
      "method": "PUT",
      "summary": "replace status of the specified StatefulSet",
      "nickname": "replaceNamespacedStatefulSetStatus",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "v1alpha1.StatefulSet",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "*/*"
      ]
     },
     {
      "type": "v1alpha1.StatefulSet",
      "method": "PATCH",
      "summary": "partially update status of the specified StatefulSet",
      "nickname": "patchNamespacedStatefulSetStatus",
      "parameters": [
       {
        "type": "string",
        "paramType": "query",
        "name": "pretty",
        "description": "If 'true', then the output is pretty printed.",
        "required": false,
        "allowMultiple": false
       },
       {
        "type": "unversioned.Patch",
        "paramType": "body",
        "name": "body",
        "description": "",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "namespace",
        "description": "object name and auth scope, such as for teams and projects",
        "required": true,
        "allowMultiple": false
       },
       {
        "type": "string",
        "paramType": "path",
        "name": "name",
        "description": "name of the StatefulSet",
        "required": true,
        "allowMultiple": false
       }
      ],
      "responseMessages": [
       {
        "code": 200,
        "message": "OK",
        "responseModel": "v1alpha1.StatefulSet"
       }
      ],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "application/json-patch+json",
       "application/merge-patch+json",
       "application/strategic-merge-patch+json"
      ]
     }
    ]
   },
   {
    "path": "/apis/apps/v1alpha1",
    "description": "API at /apis/apps/v1alpha1",
    "operations": [
     {
      "type": "unversioned.APIResourceList",
      "method": "GET",
      "summary": "get available resources",
      "nickname": "getAPIResources",
      "parameters": [],
      "produces": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ],
      "consumes": [
       "application/json",
       "application/yaml",
       "application/vnd.kubernetes.protobuf"
      ]
     }
    ]
   }
  ],
  "models": {
   "v1alpha1.StatefulSetList": {
    "id": "v1alpha1.StatefulSetList",
    "description": "StatefulSetList is a collection of StatefulSets.",
    "required": [
     "items"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "unversioned.ListMeta"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1alpha1.StatefulSet"
      }
     }
    }
   },
   "unversioned.ListMeta": {
    "id": "unversioned.ListMeta",
    "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
    "properties": {
     "selfLink": {
      "type": "string",
      "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
     },
     "resourceVersion": {
      "type": "string",
      "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
     }
    }
   },
   "v1alpha1.StatefulSet": {
    "id": "v1alpha1.StatefulSet",
    "description": "StatefulSet represents a set of pods with consistent identities. Identities are defined as:\n - Network: A single stable DNS and hostname.\n - Storage: As many VolumeClaims as requested.\nThe StatefulSet guarantees that a given network identity will always map to the same storage identity. StatefulSet is currently in alpha and subject to change without notice.",
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta"
     },
     "spec": {
      "$ref": "v1alpha1.StatefulSetSpec",
      "description": "Spec defines the desired identities of pods in this set."
     },
     "status": {
      "$ref": "v1alpha1.StatefulSetStatus",
      "description": "Status is the current status of Pods in this StatefulSet. This data may be out of date by some window of time."
     }
    }
   },
   "v1.ObjectMeta": {
    "id": "v1.ObjectMeta",
    "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
    "properties": {
     "name": {
      "type": "string",
      "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "generateName": {
      "type": "string",
      "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency"
     },
     "namespace": {
      "type": "string",
      "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces"
     },
     "selfLink": {
      "type": "string",
      "description": "SelfLink is a URL representing this object. Populated by the system. Read-only."
     },
     "uid": {
      "type": "string",
      "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
     },
     "resourceVersion": {
      "type": "string",
      "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency"
     },
     "generation": {
      "type": "integer",
      "format": "int64",
      "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only."
     },
     "creationTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
     },
     "deletionTimestamp": {
      "type": "string",
      "format": "date-time",
      "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource will be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field. Once set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. Once the resource is deleted in the API, the Kubelet will send a hard termination signal to the container. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
     },
     "deletionGracePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only."
     },
     "labels": {
      "type": "object",
      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels"
     },
     "annotations": {
      "type": "object",
      "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations"
     },
     "ownerReferences": {
      "type": "array",
      "items": {
       "$ref": "v1.OwnerReference"
      },
      "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller."
     },
     "finalizers": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed."
     },
     "clusterName": {
      "type": "string",
      "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request."
     }
    }
   },
   "v1.OwnerReference": {
    "id": "v1.OwnerReference",
    "description": "OwnerReference contains enough information to let you identify an owning object. Currently, an owning object must be in the same namespace, so there is no namespace field.",
    "required": [
     "apiVersion",
     "kind",
     "name",
     "uid"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "API version of the referent."
     },
     "kind": {
      "type": "string",
      "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "name": {
      "type": "string",
      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "uid": {
      "type": "string",
      "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids"
     },
     "controller": {
      "type": "boolean",
      "description": "If true, this reference points to the managing controller."
     }
    }
   },
   "v1alpha1.StatefulSetSpec": {
    "id": "v1alpha1.StatefulSetSpec",
    "description": "A StatefulSetSpec is the specification of a StatefulSet.",
    "required": [
     "template",
     "serviceName"
    ],
    "properties": {
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "Replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1."
     },
     "selector": {
      "$ref": "unversioned.LabelSelector",
      "description": "Selector is a label query over pods that should match the replica count. If empty, defaulted to labels on the pod template. More info: http://kubernetes.io/docs/user-guide/labels#label-selectors"
     },
     "template": {
      "$ref": "v1.PodTemplateSpec",
      "description": "Template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet."
     },
     "volumeClaimTemplates": {
      "type": "array",
      "items": {
       "$ref": "v1.PersistentVolumeClaim"
      },
      "description": "VolumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name."
     },
     "serviceName": {
      "type": "string",
      "description": "ServiceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller."
     }
    }
   },
   "unversioned.LabelSelector": {
    "id": "unversioned.LabelSelector",
    "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
    "properties": {
     "matchLabels": {
      "type": "object",
      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed."
     },
     "matchExpressions": {
      "type": "array",
      "items": {
       "$ref": "unversioned.LabelSelectorRequirement"
      },
      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed."
     }
    }
   },
   "unversioned.LabelSelectorRequirement": {
    "id": "unversioned.LabelSelectorRequirement",
    "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
    "required": [
     "key",
     "operator"
    ],
    "properties": {
     "key": {
      "type": "string",
      "description": "key is the label key that the selector applies to."
     },
     "operator": {
      "type": "string",
      "description": "operator represents a key's relationship to a set of values. Valid operators ard In, NotIn, Exists and DoesNotExist."
     },
     "values": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch."
     }
    }
   },
   "v1.PodTemplateSpec": {
    "id": "v1.PodTemplateSpec",
    "description": "PodTemplateSpec describes the data a pod should have when created from a template",
    "properties": {
     "metadata": {
      "$ref": "v1.ObjectMeta",
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
     },
     "spec": {
      "$ref": "v1.PodSpec",
      "description": "Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
     }
    }
   },
   "v1.PodSpec": {
    "id": "v1.PodSpec",
    "description": "PodSpec is a description of a pod.",
    "required": [
     "containers"
    ],
    "properties": {
     "volumes": {
      "type": "array",
      "items": {
       "$ref": "v1.Volume"
      },
      "description": "List of volumes that can be mounted by containers belonging to the pod. More info: http://kubernetes.io/docs/user-guide/volumes"
     },
     "containers": {
      "type": "array",
      "items": {
       "$ref": "v1.Container"
      },
      "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers"
     },
     "restartPolicy": {
      "type": "string",
      "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy"
     },
     "terminationGracePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds."
     },
     "activeDeadlineSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer."
     },
     "dnsPolicy": {
      "type": "string",
      "description": "Set DNS policy for containers within the pod. One of 'ClusterFirstWithHostNet', 'ClusterFirst' or 'Default'. Defaults to \"ClusterFirst\". To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'."
     },
     "nodeSelector": {
      "type": "object",
      "description": "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection/README"
     },
     "serviceAccountName": {
      "type": "string",
      "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md"
     },
     "serviceAccount": {
      "type": "string",
      "description": "DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead."
     },
     "nodeName": {
      "type": "string",
      "description": "NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements."
     },
     "hostNetwork": {
      "type": "boolean",
      "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false."
     },
     "hostPID": {
      "type": "boolean",
      "description": "Use the host's pid namespace. Optional: Default to false."
     },
     "hostIPC": {
      "type": "boolean",
      "description": "Use the host's ipc namespace. Optional: Default to false."
     },
     "securityContext": {
      "$ref": "v1.PodSecurityContext",
      "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
     },
     "imagePullSecrets": {
      "type": "array",
      "items": {
       "$ref": "v1.LocalObjectReference"
      },
      "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod"
     },
     "hostname": {
      "type": "string",
      "description": "Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value."
     },
     "subdomain": {
      "type": "string",
      "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all."
     },
     "affinity": {
      "$ref": "v1.Affinity"
     }
    }
   },
   "v1.Volume": {
    "id": "v1.Volume",
    "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "hostPath": {
      "$ref": "v1.HostPathVolumeSource",
      "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath"
     },
     "emptyDir": {
      "$ref": "v1.EmptyDirVolumeSource",
      "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
     },
     "gcePersistentDisk": {
      "$ref": "v1.GCEPersistentDiskVolumeSource",
      "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
     },
     "awsElasticBlockStore": {
      "$ref": "v1.AWSElasticBlockStoreVolumeSource",
      "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
     },
     "gitRepo": {
      "$ref": "v1.GitRepoVolumeSource",
      "description": "GitRepo represents a git repository at a particular revision."
     },
     "secret": {
      "$ref": "v1.SecretVolumeSource",
      "description": "Secret represents a secret that should populate this volume. More info: http://kubernetes.io/docs/user-guide/volumes#secrets"
     },
     "nfs": {
      "$ref": "v1.NFSVolumeSource",
      "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
     },
     "iscsi": {
      "$ref": "v1.ISCSIVolumeSource",
      "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: http://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md"
     },
     "glusterfs": {
      "$ref": "v1.GlusterfsVolumeSource",
      "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md"
     },
     "persistentVolumeClaim": {
      "$ref": "v1.PersistentVolumeClaimVolumeSource",
      "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
     },
     "rbd": {
      "$ref": "v1.RBDVolumeSource",
      "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md"
     },
     "flexVolume": {
      "$ref": "v1.FlexVolumeSource",
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future."
     },
     "cinder": {
      "$ref": "v1.CinderVolumeSource",
      "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
     },
     "cephfs": {
      "$ref": "v1.CephFSVolumeSource",
      "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
     },
     "flocker": {
      "$ref": "v1.FlockerVolumeSource",
      "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
     },
     "downwardAPI": {
      "$ref": "v1.DownwardAPIVolumeSource",
      "description": "DownwardAPI represents downward API about the pod that should populate this volume"
     },
     "fc": {
      "$ref": "v1.FCVolumeSource",
      "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
     },
     "azureFile": {
      "$ref": "v1.AzureFileVolumeSource",
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
     },
     "configMap": {
      "$ref": "v1.ConfigMapVolumeSource",
      "description": "ConfigMap represents a configMap that should populate this volume"
     },
     "vsphereVolume": {
      "$ref": "v1.VsphereVirtualDiskVolumeSource",
      "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
     },
     "quobyte": {
      "$ref": "v1.QuobyteVolumeSource",
      "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
     },
     "azureDisk": {
      "$ref": "v1.AzureDiskVolumeSource",
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
     },
     "photonPersistentDisk": {
      "$ref": "v1.PhotonPersistentDiskVolumeSource",
      "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
     }
    }
   },
   "v1.HostPathVolumeSource": {
    "id": "v1.HostPathVolumeSource",
    "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
    "required": [
     "path"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath"
     }
    }
   },
   "v1.EmptyDirVolumeSource": {
    "id": "v1.EmptyDirVolumeSource",
    "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
    "properties": {
     "medium": {
      "type": "string",
      "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
     }
    }
   },
   "v1.GCEPersistentDiskVolumeSource": {
    "id": "v1.GCEPersistentDiskVolumeSource",
    "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
    "required": [
     "pdName"
    ],
    "properties": {
     "pdName": {
      "type": "string",
      "description": "Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
     },
     "partition": {
      "type": "integer",
      "format": "int32",
      "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk"
     }
    }
   },
   "v1.AWSElasticBlockStoreVolumeSource": {
    "id": "v1.AWSElasticBlockStoreVolumeSource",
    "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
    "required": [
     "volumeID"
    ],
    "properties": {
     "volumeID": {
      "type": "string",
      "description": "Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
     },
     "partition": {
      "type": "integer",
      "format": "int32",
      "description": "The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty)."
     },
     "readOnly": {
      "type": "boolean",
      "description": "Specify \"true\" to force and set the ReadOnly property in VolumeMounts to \"true\". If omitted, the default is \"false\". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore"
     }
    }
   },
   "v1.GitRepoVolumeSource": {
    "id": "v1.GitRepoVolumeSource",
    "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.",
    "required": [
     "repository"
    ],
    "properties": {
     "repository": {
      "type": "string",
      "description": "Repository URL"
     },
     "revision": {
      "type": "string",
      "description": "Commit hash for the specified revision."
     },
     "directory": {
      "type": "string",
      "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name."
     }
    }
   },
   "v1.SecretVolumeSource": {
    "id": "v1.SecretVolumeSource",
    "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
    "properties": {
     "secretName": {
      "type": "string",
      "description": "Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.KeyToPath"
      },
      "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'."
     },
     "defaultMode": {
      "type": "integer",
      "format": "int32",
      "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
     }
    }
   },
   "v1.KeyToPath": {
    "id": "v1.KeyToPath",
    "description": "Maps a string key to a path within a volume.",
    "required": [
     "key",
     "path"
    ],
    "properties": {
     "key": {
      "type": "string",
      "description": "The key to project."
     },
     "path": {
      "type": "string",
      "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'."
     },
     "mode": {
      "type": "integer",
      "format": "int32",
      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
     }
    }
   },
   "v1.NFSVolumeSource": {
    "id": "v1.NFSVolumeSource",
    "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
    "required": [
     "server",
     "path"
    ],
    "properties": {
     "server": {
      "type": "string",
      "description": "Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
     },
     "path": {
      "type": "string",
      "description": "Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs"
     }
    }
   },
   "v1.ISCSIVolumeSource": {
    "id": "v1.ISCSIVolumeSource",
    "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
    "required": [
     "targetPortal",
     "iqn",
     "lun"
    ],
    "properties": {
     "targetPortal": {
      "type": "string",
      "description": "iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)."
     },
     "iqn": {
      "type": "string",
      "description": "Target iSCSI Qualified Name."
     },
     "lun": {
      "type": "integer",
      "format": "int32",
      "description": "iSCSI target lun number."
     },
     "iscsiInterface": {
      "type": "string",
      "description": "Optional: Defaults to 'default' (tcp). iSCSI interface name that uses an iSCSI transport."
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi"
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false."
     }
    }
   },
   "v1.GlusterfsVolumeSource": {
    "id": "v1.GlusterfsVolumeSource",
    "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
    "required": [
     "endpoints",
     "path"
    ],
    "properties": {
     "endpoints": {
      "type": "string",
      "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
     },
     "path": {
      "type": "string",
      "description": "Path is the Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod"
     }
    }
   },
   "v1.PersistentVolumeClaimVolumeSource": {
    "id": "v1.PersistentVolumeClaimVolumeSource",
    "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
    "required": [
     "claimName"
    ],
    "properties": {
     "claimName": {
      "type": "string",
      "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
     },
     "readOnly": {
      "type": "boolean",
      "description": "Will force the ReadOnly setting in VolumeMounts. Default false."
     }
    }
   },
   "v1.RBDVolumeSource": {
    "id": "v1.RBDVolumeSource",
    "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
    "required": [
     "monitors",
     "image"
    ],
    "properties": {
     "monitors": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     },
     "image": {
      "type": "string",
      "description": "The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd"
     },
     "pool": {
      "type": "string",
      "description": "The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it."
     },
     "user": {
      "type": "string",
      "description": "The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     },
     "keyring": {
      "type": "string",
      "description": "Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     },
     "secretRef": {
      "$ref": "v1.LocalObjectReference",
      "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it"
     }
    }
   },
   "v1.LocalObjectReference": {
    "id": "v1.LocalObjectReference",
    "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     }
    }
   },
   "v1.FlexVolumeSource": {
    "id": "v1.FlexVolumeSource",
    "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.",
    "required": [
     "driver"
    ],
    "properties": {
     "driver": {
      "type": "string",
      "description": "Driver is the name of the driver to use for this volume."
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script."
     },
     "secretRef": {
      "$ref": "v1.LocalObjectReference",
      "description": "Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
     },
     "readOnly": {
      "type": "boolean",
      "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
     },
     "options": {
      "type": "object",
      "description": "Optional: Extra command options if any."
     }
    }
   },
   "v1.CinderVolumeSource": {
    "id": "v1.CinderVolumeSource",
    "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
    "required": [
     "volumeID"
    ],
    "properties": {
     "volumeID": {
      "type": "string",
      "description": "volume id used to identify the volume in cinder More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
     },
     "readOnly": {
      "type": "boolean",
      "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
     }
    }
   },
   "v1.CephFSVolumeSource": {
    "id": "v1.CephFSVolumeSource",
    "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
    "required": [
     "monitors"
    ],
    "properties": {
     "monitors": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Required: Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
     },
     "path": {
      "type": "string",
      "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /"
     },
     "user": {
      "type": "string",
      "description": "Optional: User is the rados user name, default is admin More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
     },
     "secretFile": {
      "type": "string",
      "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
     },
     "secretRef": {
      "$ref": "v1.LocalObjectReference",
      "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
     },
     "readOnly": {
      "type": "boolean",
      "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
     }
    }
   },
   "v1.FlockerVolumeSource": {
    "id": "v1.FlockerVolumeSource",
    "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
    "properties": {
     "datasetName": {
      "type": "string",
      "description": "Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated"
     },
     "datasetUUID": {
      "type": "string",
      "description": "UUID of the dataset. This is unique identifier of a Flocker dataset"
     }
    }
   },
   "v1.DownwardAPIVolumeSource": {
    "id": "v1.DownwardAPIVolumeSource",
    "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
    "properties": {
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.DownwardAPIVolumeFile"
      },
      "description": "Items is a list of downward API volume file"
     },
     "defaultMode": {
      "type": "integer",
      "format": "int32",
      "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
     }
    }
   },
   "v1.DownwardAPIVolumeFile": {
    "id": "v1.DownwardAPIVolumeFile",
    "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
    "required": [
     "path"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'"
     },
     "fieldRef": {
      "$ref": "v1.ObjectFieldSelector",
      "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
     },
     "resourceFieldRef": {
      "$ref": "v1.ResourceFieldSelector",
      "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
     },
     "mode": {
      "type": "integer",
      "format": "int32",
      "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
     }
    }
   },
   "v1.ObjectFieldSelector": {
    "id": "v1.ObjectFieldSelector",
    "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
    "required": [
     "fieldPath"
    ],
    "properties": {
     "apiVersion": {
      "type": "string",
      "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\"."
     },
     "fieldPath": {
      "type": "string",
      "description": "Path of the field to select in the specified API version."
     }
    }
   },
   "v1.ResourceFieldSelector": {
    "id": "v1.ResourceFieldSelector",
    "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
    "required": [
     "resource"
    ],
    "properties": {
     "containerName": {
      "type": "string",
      "description": "Container name: required for volumes, optional for env vars"
     },
     "resource": {
      "type": "string",
      "description": "Required: resource to select"
     },
     "divisor": {
      "type": "string",
      "description": "Specifies the output format of the exposed resources, defaults to \"1\""
     }
    }
   },
   "v1.FCVolumeSource": {
    "id": "v1.FCVolumeSource",
    "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
    "required": [
     "targetWWNs",
     "lun"
    ],
    "properties": {
     "targetWWNs": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Required: FC target worldwide names (WWNs)"
     },
     "lun": {
      "type": "integer",
      "format": "int32",
      "description": "Required: FC target lun number"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
     },
     "readOnly": {
      "type": "boolean",
      "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
     }
    }
   },
   "v1.AzureFileVolumeSource": {
    "id": "v1.AzureFileVolumeSource",
    "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
    "required": [
     "secretName",
     "shareName"
    ],
    "properties": {
     "secretName": {
      "type": "string",
      "description": "the name of secret that contains Azure Storage Account Name and Key"
     },
     "shareName": {
      "type": "string",
      "description": "Share Name"
     },
     "readOnly": {
      "type": "boolean",
      "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
     }
    }
   },
   "v1.ConfigMapVolumeSource": {
    "id": "v1.ConfigMapVolumeSource",
    "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "items": {
      "type": "array",
      "items": {
       "$ref": "v1.KeyToPath"
      },
      "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error. Paths must be relative and may not contain the '..' path or start with '..'."
     },
     "defaultMode": {
      "type": "integer",
      "format": "int32",
      "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set."
     }
    }
   },
   "v1.VsphereVirtualDiskVolumeSource": {
    "id": "v1.VsphereVirtualDiskVolumeSource",
    "description": "Represents a vSphere volume resource.",
    "required": [
     "volumePath"
    ],
    "properties": {
     "volumePath": {
      "type": "string",
      "description": "Path that identifies vSphere volume vmdk"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
     }
    }
   },
   "v1.QuobyteVolumeSource": {
    "id": "v1.QuobyteVolumeSource",
    "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
    "required": [
     "registry",
     "volume"
    ],
    "properties": {
     "registry": {
      "type": "string",
      "description": "Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes"
     },
     "volume": {
      "type": "string",
      "description": "Volume is a string that references an already created Quobyte volume by name."
     },
     "readOnly": {
      "type": "boolean",
      "description": "ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false."
     },
     "user": {
      "type": "string",
      "description": "User to map volume access to Defaults to serivceaccount user"
     },
     "group": {
      "type": "string",
      "description": "Group to map volume access to Default is no group"
     }
    }
   },
   "v1.AzureDiskVolumeSource": {
    "id": "v1.AzureDiskVolumeSource",
    "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
    "required": [
     "diskName",
     "diskURI"
    ],
    "properties": {
     "diskName": {
      "type": "string",
      "description": "The Name of the data disk in the blob storage"
     },
     "diskURI": {
      "type": "string",
      "description": "The URI the data disk in the blob storage"
     },
     "cachingMode": {
      "$ref": "v1.AzureDataDiskCachingMode",
      "description": "Host Caching mode: None, Read Only, Read Write."
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
     },
     "readOnly": {
      "type": "boolean",
      "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts."
     }
    }
   },
   "v1.AzureDataDiskCachingMode": {
    "id": "v1.AzureDataDiskCachingMode",
    "properties": {}
   },
   "v1.PhotonPersistentDiskVolumeSource": {
    "id": "v1.PhotonPersistentDiskVolumeSource",
    "description": "Represents a Photon Controller persistent disk resource.",
    "required": [
     "pdID"
    ],
    "properties": {
     "pdID": {
      "type": "string",
      "description": "ID that identifies Photon Controller persistent disk"
     },
     "fsType": {
      "type": "string",
      "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified."
     }
    }
   },
   "v1.Container": {
    "id": "v1.Container",
    "description": "A single application container that you want to run within a pod.",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated."
     },
     "image": {
      "type": "string",
      "description": "Docker image name. More info: http://kubernetes.io/docs/user-guide/images"
     },
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands"
     },
     "args": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands"
     },
     "workingDir": {
      "type": "string",
      "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated."
     },
     "ports": {
      "type": "array",
      "items": {
       "$ref": "v1.ContainerPort"
      },
      "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Cannot be updated."
     },
     "env": {
      "type": "array",
      "items": {
       "$ref": "v1.EnvVar"
      },
      "description": "List of environment variables to set in the container. Cannot be updated."
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "Compute Resources required by this container. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources"
     },
     "volumeMounts": {
      "type": "array",
      "items": {
       "$ref": "v1.VolumeMount"
      },
      "description": "Pod volumes to mount into the container's filesystem. Cannot be updated."
     },
     "livenessProbe": {
      "$ref": "v1.Probe",
      "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes"
     },
     "readinessProbe": {
      "$ref": "v1.Probe",
      "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes"
     },
     "lifecycle": {
      "$ref": "v1.Lifecycle",
      "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
     },
     "terminationMessagePath": {
      "type": "string",
      "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated."
     },
     "imagePullPolicy": {
      "type": "string",
      "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images"
     },
     "securityContext": {
      "$ref": "v1.SecurityContext",
      "description": "Security options the pod should run with. More info: http://releases.k8s.io/HEAD/docs/design/security_context.md"
     },
     "stdin": {
      "type": "boolean",
      "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false."
     },
     "stdinOnce": {
      "type": "boolean",
      "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false"
     },
     "tty": {
      "type": "boolean",
      "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false."
     }
    }
   },
   "v1.ContainerPort": {
    "id": "v1.ContainerPort",
    "description": "ContainerPort represents a network port in a single container.",
    "required": [
     "containerPort"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services."
     },
     "hostPort": {
      "type": "integer",
      "format": "int32",
      "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this."
     },
     "containerPort": {
      "type": "integer",
      "format": "int32",
      "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536."
     },
     "protocol": {
      "type": "string",
      "description": "Protocol for port. Must be UDP or TCP. Defaults to \"TCP\"."
     },
     "hostIP": {
      "type": "string",
      "description": "What host IP to bind the external port to."
     }
    }
   },
   "v1.EnvVar": {
    "id": "v1.EnvVar",
    "description": "EnvVar represents an environment variable present in a Container.",
    "required": [
     "name"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the environment variable. Must be a C_IDENTIFIER."
     },
     "value": {
      "type": "string",
      "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\"."
     },
     "valueFrom": {
      "$ref": "v1.EnvVarSource",
      "description": "Source for the environment variable's value. Cannot be used if value is not empty."
     }
    }
   },
   "v1.EnvVarSource": {
    "id": "v1.EnvVarSource",
    "description": "EnvVarSource represents a source for the value of an EnvVar.",
    "properties": {
     "fieldRef": {
      "$ref": "v1.ObjectFieldSelector",
      "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.podIP."
     },
     "resourceFieldRef": {
      "$ref": "v1.ResourceFieldSelector",
      "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
     },
     "configMapKeyRef": {
      "$ref": "v1.ConfigMapKeySelector",
      "description": "Selects a key of a ConfigMap."
     },
     "secretKeyRef": {
      "$ref": "v1.SecretKeySelector",
      "description": "Selects a key of a secret in the pod's namespace"
     }
    }
   },
   "v1.ConfigMapKeySelector": {
    "id": "v1.ConfigMapKeySelector",
    "description": "Selects a key from a ConfigMap.",
    "required": [
     "key"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "key": {
      "type": "string",
      "description": "The key to select."
     }
    }
   },
   "v1.SecretKeySelector": {
    "id": "v1.SecretKeySelector",
    "description": "SecretKeySelector selects a key of a Secret.",
    "required": [
     "key"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names"
     },
     "key": {
      "type": "string",
      "description": "The key of the secret to select from.  Must be a valid secret key."
     }
    }
   },
   "v1.ResourceRequirements": {
    "id": "v1.ResourceRequirements",
    "description": "ResourceRequirements describes the compute resource requirements.",
    "properties": {
     "limits": {
      "type": "object",
      "description": "Limits describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/"
     },
     "requests": {
      "type": "object",
      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: http://kubernetes.io/docs/user-guide/compute-resources/"
     }
    }
   },
   "v1.VolumeMount": {
    "id": "v1.VolumeMount",
    "description": "VolumeMount describes a mounting of a Volume within a container.",
    "required": [
     "name",
     "mountPath"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "This must match the Name of a Volume."
     },
     "readOnly": {
      "type": "boolean",
      "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false."
     },
     "mountPath": {
      "type": "string",
      "description": "Path within the container at which the volume should be mounted.  Must not contain ':'."
     },
     "subPath": {
      "type": "string",
      "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
     }
    }
   },
   "v1.Probe": {
    "id": "v1.Probe",
    "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
    "properties": {
     "exec": {
      "$ref": "v1.ExecAction",
      "description": "One and only one of the following should be specified. Exec specifies the action to take."
     },
     "httpGet": {
      "$ref": "v1.HTTPGetAction",
      "description": "HTTPGet specifies the http request to perform."
     },
     "tcpSocket": {
      "$ref": "v1.TCPSocketAction",
      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
     },
     "initialDelaySeconds": {
      "type": "integer",
      "format": "int32",
      "description": "Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes"
     },
     "timeoutSeconds": {
      "type": "integer",
      "format": "int32",
      "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes"
     },
     "periodSeconds": {
      "type": "integer",
      "format": "int32",
      "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1."
     },
     "successThreshold": {
      "type": "integer",
      "format": "int32",
      "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1."
     },
     "failureThreshold": {
      "type": "integer",
      "format": "int32",
      "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1."
     }
    }
   },
   "v1.ExecAction": {
    "id": "v1.ExecAction",
    "description": "ExecAction describes a \"run in container\" action.",
    "properties": {
     "command": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy."
     }
    }
   },
   "v1.HTTPGetAction": {
    "id": "v1.HTTPGetAction",
    "description": "HTTPGetAction describes an action based on HTTP Get requests.",
    "required": [
     "port"
    ],
    "properties": {
     "path": {
      "type": "string",
      "description": "Path to access on the HTTP server."
     },
     "port": {
      "type": "string",
      "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
     },
     "host": {
      "type": "string",
      "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead."
     },
     "scheme": {
      "type": "string",
      "description": "Scheme to use for connecting to the host. Defaults to HTTP."
     },
     "httpHeaders": {
      "type": "array",
      "items": {
       "$ref": "v1.HTTPHeader"
      },
      "description": "Custom headers to set in the request. HTTP allows repeated headers."
     }
    }
   },
   "v1.HTTPHeader": {
    "id": "v1.HTTPHeader",
    "description": "HTTPHeader describes a custom header to be used in HTTP probes",
    "required": [
     "name",
     "value"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "The header field name"
     },
     "value": {
      "type": "string",
      "description": "The header field value"
     }
    }
   },
   "v1.TCPSocketAction": {
    "id": "v1.TCPSocketAction",
    "description": "TCPSocketAction describes an action based on opening a socket",
    "required": [
     "port"
    ],
    "properties": {
     "port": {
      "type": "string",
      "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
     }
    }
   },
   "v1.Lifecycle": {
    "id": "v1.Lifecycle",
    "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
    "properties": {
     "postStart": {
      "$ref": "v1.Handler",
      "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details"
     },
     "preStop": {
      "$ref": "v1.Handler",
      "description": "PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated. Other management of the container blocks until the hook completes. More info: http://kubernetes.io/docs/user-guide/container-environment#hook-details"
     }
    }
   },
   "v1.Handler": {
    "id": "v1.Handler",
    "description": "Handler defines a specific action that should be taken",
    "properties": {
     "exec": {
      "$ref": "v1.ExecAction",
      "description": "One and only one of the following should be specified. Exec specifies the action to take."
     },
     "httpGet": {
      "$ref": "v1.HTTPGetAction",
      "description": "HTTPGet specifies the http request to perform."
     },
     "tcpSocket": {
      "$ref": "v1.TCPSocketAction",
      "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
     }
    }
   },
   "v1.SecurityContext": {
    "id": "v1.SecurityContext",
    "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
    "properties": {
     "capabilities": {
      "$ref": "v1.Capabilities",
      "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
     },
     "privileged": {
      "type": "boolean",
      "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false."
     },
     "seLinuxOptions": {
      "$ref": "v1.SELinuxOptions",
      "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
     },
     "runAsUser": {
      "type": "integer",
      "format": "int64",
      "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
     },
     "runAsNonRoot": {
      "type": "boolean",
      "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
     },
     "readOnlyRootFilesystem": {
      "type": "boolean",
      "description": "Whether this container has a read-only root filesystem. Default is false."
     }
    }
   },
   "v1.Capabilities": {
    "id": "v1.Capabilities",
    "description": "Adds and removes POSIX capabilities from running containers.",
    "properties": {
     "add": {
      "type": "array",
      "items": {
       "$ref": "v1.Capability"
      },
      "description": "Added capabilities"
     },
     "drop": {
      "type": "array",
      "items": {
       "$ref": "v1.Capability"
      },
      "description": "Removed capabilities"
     }
    }
   },
   "v1.Capability": {
    "id": "v1.Capability",
    "properties": {}
   },
   "v1.SELinuxOptions": {
    "id": "v1.SELinuxOptions",
    "description": "SELinuxOptions are the labels to be applied to the container",
    "properties": {
     "user": {
      "type": "string",
      "description": "User is a SELinux user label that applies to the container."
     },
     "role": {
      "type": "string",
      "description": "Role is a SELinux role label that applies to the container."
     },
     "type": {
      "type": "string",
      "description": "Type is a SELinux type label that applies to the container."
     },
     "level": {
      "type": "string",
      "description": "Level is SELinux level label that applies to the container."
     }
    }
   },
   "v1.PodSecurityContext": {
    "id": "v1.PodSecurityContext",
    "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
    "properties": {
     "seLinuxOptions": {
      "$ref": "v1.SELinuxOptions",
      "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
     },
     "runAsUser": {
      "type": "integer",
      "format": "int64",
      "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
     },
     "runAsNonRoot": {
      "type": "boolean",
      "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
     },
     "supplementalGroups": {
      "type": "array",
      "items": {
       "type": "integer"
      },
      "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container."
     },
     "fsGroup": {
      "type": "integer",
      "format": "int64",
      "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw "
     }
    }
   },
   "v1.Affinity": {
    "id": "v1.Affinity",
    "description": "Affinity is a group of affinity scheduling rules.",
    "properties": {
     "nodeAffinity": {
      "$ref": "v1.NodeAffinity",
      "description": "Describes node affinity scheduling rules for the pod."
     },
     "podAffinity": {
      "$ref": "v1.PodAffinity",
      "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
     },
     "podAntiAffinity": {
      "$ref": "v1.PodAntiAffinity",
      "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
     }
    }
   },
   "v1.NodeAffinity": {
    "id": "v1.NodeAffinity",
    "description": "Node affinity is a group of node affinity scheduling rules.",
    "properties": {
     "requiredDuringSchedulingIgnoredDuringExecution": {
      "$ref": "v1.NodeSelector",
      "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
     },
     "preferredDuringSchedulingIgnoredDuringExecution": {
      "type": "array",
      "items": {
       "$ref": "v1.PreferredSchedulingTerm"
      },
      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred."
     }
    }
   },
   "v1.NodeSelector": {
    "id": "v1.NodeSelector",
    "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
    "required": [
     "nodeSelectorTerms"
    ],
    "properties": {
     "nodeSelectorTerms": {
      "type": "array",
      "items": {
       "$ref": "v1.NodeSelectorTerm"
      },
      "description": "Required. A list of node selector terms. The terms are ORed."
     }
    }
   },
   "v1.NodeSelectorTerm": {
    "id": "v1.NodeSelectorTerm",
    "description": "A null or empty node selector term matches no objects.",
    "required": [
     "matchExpressions"
    ],
    "properties": {
     "matchExpressions": {
      "type": "array",
      "items": {
       "$ref": "v1.NodeSelectorRequirement"
      },
      "description": "Required. A list of node selector requirements. The requirements are ANDed."
     }
    }
   },
   "v1.NodeSelectorRequirement": {
    "id": "v1.NodeSelectorRequirement",
    "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
    "required": [
     "key",
     "operator"
    ],
    "properties": {
     "key": {
      "type": "string",
      "description": "The label key that the selector applies to."
     },
     "operator": {
      "type": "string",
      "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt."
     },
     "values": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch."
     }
    }
   },
   "v1.PreferredSchedulingTerm": {
    "id": "v1.PreferredSchedulingTerm",
    "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
    "required": [
     "weight",
     "preference"
    ],
    "properties": {
     "weight": {
      "type": "integer",
      "format": "int32",
      "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100."
     },
     "preference": {
      "$ref": "v1.NodeSelectorTerm",
      "description": "A node selector term, associated with the corresponding weight."
     }
    }
   },
   "v1.PodAffinity": {
    "id": "v1.PodAffinity",
    "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
    "properties": {
     "requiredDuringSchedulingIgnoredDuringExecution": {
      "type": "array",
      "items": {
       "$ref": "v1.PodAffinityTerm"
      },
      "description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
     },
     "preferredDuringSchedulingIgnoredDuringExecution": {
      "type": "array",
      "items": {
       "$ref": "v1.WeightedPodAffinityTerm"
      },
      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
     }
    }
   },
   "v1.PodAffinityTerm": {
    "id": "v1.PodAffinityTerm",
    "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e tches that of any node on which a pod of the set of pods is running",
    "required": [
     "namespaces"
    ],
    "properties": {
     "labelSelector": {
      "$ref": "unversioned.LabelSelector",
      "description": "A label query over a set of resources, in this case pods."
     },
     "namespaces": {
      "type": "array",
      "items": {
       "type": "string"
      },
      "description": "namespaces specifies which namespaces the labelSelector applies to (matches against); nil list means \"this pod's namespace,\" empty list means \"all namespaces\" The json tag here is not \"omitempty\" since we need to distinguish nil and empty. See https://golang.org/pkg/encoding/json/#Marshal for more details."
     },
     "topologyKey": {
      "type": "string",
      "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. For PreferredDuringScheduling pod anti-affinity, empty topologyKey is interpreted as \"all topologies\" (\"all topologies\" here means all the topologyKeys indicated by scheduler command-line argument --failure-domains); for affinity and for RequiredDuringScheduling pod anti-affinity, empty topologyKey is not allowed."
     }
    }
   },
   "v1.WeightedPodAffinityTerm": {
    "id": "v1.WeightedPodAffinityTerm",
    "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
    "required": [
     "weight",
     "podAffinityTerm"
    ],
    "properties": {
     "weight": {
      "type": "integer",
      "format": "int32",
      "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100."
     },
     "podAffinityTerm": {
      "$ref": "v1.PodAffinityTerm",
      "description": "Required. A pod affinity term, associated with the corresponding weight."
     }
    }
   },
   "v1.PodAntiAffinity": {
    "id": "v1.PodAntiAffinity",
    "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
    "properties": {
     "requiredDuringSchedulingIgnoredDuringExecution": {
      "type": "array",
      "items": {
       "$ref": "v1.PodAffinityTerm"
      },
      "description": "NOT YET IMPLEMENTED. TODO: Uncomment field once it is implemented. If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system will try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied. RequiredDuringSchedulingRequiredDuringExecution []PodAffinityTerm  `json:\"requiredDuringSchedulingRequiredDuringExecution,omitempty\"` If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied."
     },
     "preferredDuringSchedulingIgnoredDuringExecution": {
      "type": "array",
      "items": {
       "$ref": "v1.WeightedPodAffinityTerm"
      },
      "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred."
     }
    }
   },
   "v1.PersistentVolumeClaim": {
    "id": "v1.PersistentVolumeClaim",
    "description": "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "v1.ObjectMeta",
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
     },
     "spec": {
      "$ref": "v1.PersistentVolumeClaimSpec",
      "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
     },
     "status": {
      "$ref": "v1.PersistentVolumeClaimStatus",
      "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#persistentvolumeclaims"
     }
    }
   },
   "v1.PersistentVolumeClaimSpec": {
    "id": "v1.PersistentVolumeClaimSpec",
    "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
    "properties": {
     "accessModes": {
      "type": "array",
      "items": {
       "$ref": "v1.PersistentVolumeAccessMode"
      },
      "description": "AccessModes contains the desired access modes the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1"
     },
     "selector": {
      "$ref": "unversioned.LabelSelector",
      "description": "A label query over volumes to consider for binding."
     },
     "resources": {
      "$ref": "v1.ResourceRequirements",
      "description": "Resources represents the minimum resources the volume should have. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#resources"
     },
     "volumeName": {
      "type": "string",
      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
     }
    }
   },
   "v1.PersistentVolumeAccessMode": {
    "id": "v1.PersistentVolumeAccessMode",
    "properties": {}
   },
   "v1.PersistentVolumeClaimStatus": {
    "id": "v1.PersistentVolumeClaimStatus",
    "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
    "properties": {
     "phase": {
      "type": "string",
      "description": "Phase represents the current phase of PersistentVolumeClaim."
     },
     "accessModes": {
      "type": "array",
      "items": {
       "$ref": "v1.PersistentVolumeAccessMode"
      },
      "description": "AccessModes contains the actual access modes the volume backing the PVC has. More info: http://kubernetes.io/docs/user-guide/persistent-volumes#access-modes-1"
     },
     "capacity": {
      "type": "object",
      "description": "Represents the actual resources of the underlying volume."
     }
    }
   },
   "v1alpha1.StatefulSetStatus": {
    "id": "v1alpha1.StatefulSetStatus",
    "description": "StatefulSetStatus represents the current state of a StatefulSet.",
    "required": [
     "replicas"
    ],
    "properties": {
     "observedGeneration": {
      "type": "integer",
      "format": "int64",
      "description": "most recent generation observed by this autoscaler."
     },
     "replicas": {
      "type": "integer",
      "format": "int32",
      "description": "Replicas is the number of actual replicas."
     }
    }
   },
   "unversioned.Status": {
    "id": "unversioned.Status",
    "description": "Status is a return value for calls that don't return other objects.",
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "metadata": {
      "$ref": "unversioned.ListMeta",
      "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "status": {
      "type": "string",
      "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status"
     },
     "message": {
      "type": "string",
      "description": "A human-readable description of the status of this operation."
     },
     "reason": {
      "type": "string",
      "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it."
     },
     "details": {
      "$ref": "unversioned.StatusDetails",
      "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
     },
     "code": {
      "type": "integer",
      "format": "int32",
      "description": "Suggested HTTP return code for this status, 0 if not set."
     }
    }
   },
   "unversioned.StatusDetails": {
    "id": "unversioned.StatusDetails",
    "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
    "properties": {
     "name": {
      "type": "string",
      "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described)."
     },
     "group": {
      "type": "string",
      "description": "The group attribute of the resource associated with the status StatusReason."
     },
     "kind": {
      "type": "string",
      "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "causes": {
      "type": "array",
      "items": {
       "$ref": "unversioned.StatusCause"
      },
      "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes."
     },
     "retryAfterSeconds": {
      "type": "integer",
      "format": "int32",
      "description": "If specified, the time in seconds before the operation should be retried."
     }
    }
   },
   "unversioned.StatusCause": {
    "id": "unversioned.StatusCause",
    "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
    "properties": {
     "reason": {
      "type": "string",
      "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available."
     },
     "message": {
      "type": "string",
      "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader."
     },
     "field": {
      "type": "string",
      "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\""
     }
    }
   },
   "versioned.Event": {
    "id": "versioned.Event",
    "required": [
     "type",
     "object"
    ],
    "properties": {
     "type": {
      "type": "string"
     },
     "object": {
      "type": "string"
     }
    }
   },
   "unversioned.Patch": {
    "id": "unversioned.Patch",
    "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
    "properties": {}
   },
   "v1.DeleteOptions": {
    "id": "v1.DeleteOptions",
    "description": "DeleteOptions may be provided when deleting an API object",
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "gracePeriodSeconds": {
      "type": "integer",
      "format": "int64",
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately."
     },
     "preconditions": {
      "$ref": "v1.Preconditions",
      "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
     },
     "orphanDependents": {
      "type": "boolean",
      "description": "Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list."
     }
    }
   },
   "v1.Preconditions": {
    "id": "v1.Preconditions",
    "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
    "properties": {
     "uid": {
      "$ref": "types.UID",
      "description": "Specifies the target UID."
     }
    }
   },
   "types.UID": {
    "id": "types.UID",
    "properties": {}
   },
   "unversioned.APIResourceList": {
    "id": "unversioned.APIResourceList",
    "description": "APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
    "required": [
     "groupVersion",
     "resources"
    ],
    "properties": {
     "kind": {
      "type": "string",
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"
     },
     "apiVersion": {
      "type": "string",
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"
     },
     "groupVersion": {
      "type": "string",
      "description": "groupVersion is the group and version this APIResourceList is for."
     },
     "resources": {
      "type": "array",
      "items": {
       "$ref": "unversioned.APIResource"
      },
      "description": "resources contains the name of the resources and if they are namespaced."
     }
    }
   },
   "unversioned.APIResource": {
    "id": "unversioned.APIResource",
    "description": "APIResource specifies the name of a resource and whether it is namespaced.",
    "required": [
     "name",
     "namespaced",
     "kind"
    ],
    "properties": {
     "name": {
      "type": "string",
      "description": "name is the name of the resource."
     },
     "namespaced": {
      "type": "boolean",
      "description": "namespaced indicates if a resource is namespaced or not."
     },
     "kind": {
      "type": "string",
      "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')"
     }
    }
   }
  }
 }
