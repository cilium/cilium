package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeVpnGateways invokes the vpc.DescribeVpnGateways API synchronously
func (client *Client) DescribeVpnGateways(request *DescribeVpnGatewaysRequest) (response *DescribeVpnGatewaysResponse, err error) {
	response = CreateDescribeVpnGatewaysResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeVpnGatewaysWithChan invokes the vpc.DescribeVpnGateways API asynchronously
func (client *Client) DescribeVpnGatewaysWithChan(request *DescribeVpnGatewaysRequest) (<-chan *DescribeVpnGatewaysResponse, <-chan error) {
	responseChan := make(chan *DescribeVpnGatewaysResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeVpnGateways(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeVpnGatewaysWithCallback invokes the vpc.DescribeVpnGateways API asynchronously
func (client *Client) DescribeVpnGatewaysWithCallback(request *DescribeVpnGatewaysRequest, callback func(response *DescribeVpnGatewaysResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeVpnGatewaysResponse
		var err error
		defer close(result)
		response, err = client.DescribeVpnGateways(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeVpnGatewaysRequest is the request struct for api DescribeVpnGateways
type DescribeVpnGatewaysRequest struct {
	*requests.RpcRequest
	ResourceOwnerId        requests.Integer          `position:"Query" name:"ResourceOwnerId"`
	IncludeReservationData requests.Boolean          `position:"Query" name:"IncludeReservationData"`
	PageNumber             requests.Integer          `position:"Query" name:"PageNumber"`
	PageSize               requests.Integer          `position:"Query" name:"PageSize"`
	Tag                    *[]DescribeVpnGatewaysTag `position:"Query" name:"Tag"  type:"Repeated"`
	BusinessStatus         string                    `position:"Query" name:"BusinessStatus"`
	ResourceOwnerAccount   string                    `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount           string                    `position:"Query" name:"OwnerAccount"`
	VpnGatewayId           string                    `position:"Query" name:"VpnGatewayId"`
	OwnerId                requests.Integer          `position:"Query" name:"OwnerId"`
	VpcId                  string                    `position:"Query" name:"VpcId"`
	Status                 string                    `position:"Query" name:"Status"`
}

// DescribeVpnGatewaysTag is a repeated param struct in DescribeVpnGatewaysRequest
type DescribeVpnGatewaysTag struct {
	Value string `name:"Value"`
	Key   string `name:"Key"`
}

// DescribeVpnGatewaysResponse is the response struct for api DescribeVpnGateways
type DescribeVpnGatewaysResponse struct {
	*responses.BaseResponse
	PageSize    int         `json:"PageSize" xml:"PageSize"`
	RequestId   string      `json:"RequestId" xml:"RequestId"`
	PageNumber  int         `json:"PageNumber" xml:"PageNumber"`
	TotalCount  int         `json:"TotalCount" xml:"TotalCount"`
	VpnGateways VpnGateways `json:"VpnGateways" xml:"VpnGateways"`
}

// CreateDescribeVpnGatewaysRequest creates a request to invoke DescribeVpnGateways API
func CreateDescribeVpnGatewaysRequest() (request *DescribeVpnGatewaysRequest) {
	request = &DescribeVpnGatewaysRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "DescribeVpnGateways", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeVpnGatewaysResponse creates a response to parse from DescribeVpnGateways response
func CreateDescribeVpnGatewaysResponse() (response *DescribeVpnGatewaysResponse) {
	response = &DescribeVpnGatewaysResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
