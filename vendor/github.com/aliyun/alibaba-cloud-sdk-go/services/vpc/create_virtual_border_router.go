package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateVirtualBorderRouter invokes the vpc.CreateVirtualBorderRouter API synchronously
func (client *Client) CreateVirtualBorderRouter(request *CreateVirtualBorderRouterRequest) (response *CreateVirtualBorderRouterResponse, err error) {
	response = CreateCreateVirtualBorderRouterResponse()
	err = client.DoAction(request, response)
	return
}

// CreateVirtualBorderRouterWithChan invokes the vpc.CreateVirtualBorderRouter API asynchronously
func (client *Client) CreateVirtualBorderRouterWithChan(request *CreateVirtualBorderRouterRequest) (<-chan *CreateVirtualBorderRouterResponse, <-chan error) {
	responseChan := make(chan *CreateVirtualBorderRouterResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateVirtualBorderRouter(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateVirtualBorderRouterWithCallback invokes the vpc.CreateVirtualBorderRouter API asynchronously
func (client *Client) CreateVirtualBorderRouterWithCallback(request *CreateVirtualBorderRouterRequest, callback func(response *CreateVirtualBorderRouterResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateVirtualBorderRouterResponse
		var err error
		defer close(result)
		response, err = client.CreateVirtualBorderRouter(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateVirtualBorderRouterRequest is the request struct for api CreateVirtualBorderRouter
type CreateVirtualBorderRouterRequest struct {
	*requests.RpcRequest
	ResourceOwnerId       requests.Integer                 `position:"Query" name:"ResourceOwnerId"`
	CircuitCode           string                           `position:"Query" name:"CircuitCode"`
	VlanId                requests.Integer                 `position:"Query" name:"VlanId"`
	ClientToken           string                           `position:"Query" name:"ClientToken"`
	EnableIpv6            requests.Boolean                 `position:"Query" name:"EnableIpv6"`
	Description           string                           `position:"Query" name:"Description"`
	PeerGatewayIp         string                           `position:"Query" name:"PeerGatewayIp"`
	PeerIpv6GatewayIp     string                           `position:"Query" name:"PeerIpv6GatewayIp"`
	ResourceGroupId       string                           `position:"Query" name:"ResourceGroupId"`
	PeeringSubnetMask     string                           `position:"Query" name:"PeeringSubnetMask"`
	LocalGatewayIp        string                           `position:"Query" name:"LocalGatewayIp"`
	PeeringIpv6SubnetMask string                           `position:"Query" name:"PeeringIpv6SubnetMask"`
	ResourceOwnerAccount  string                           `position:"Query" name:"ResourceOwnerAccount"`
	Bandwidth             requests.Integer                 `position:"Query" name:"Bandwidth"`
	OwnerAccount          string                           `position:"Query" name:"OwnerAccount"`
	OwnerId               requests.Integer                 `position:"Query" name:"OwnerId"`
	Tags                  *[]CreateVirtualBorderRouterTags `position:"Query" name:"Tags"  type:"Repeated"`
	PhysicalConnectionId  string                           `position:"Query" name:"PhysicalConnectionId"`
	LocalIpv6GatewayIp    string                           `position:"Query" name:"LocalIpv6GatewayIp"`
	Name                  string                           `position:"Query" name:"Name"`
	VbrOwnerId            requests.Integer                 `position:"Query" name:"VbrOwnerId"`
}

// CreateVirtualBorderRouterTags is a repeated param struct in CreateVirtualBorderRouterRequest
type CreateVirtualBorderRouterTags struct {
	Value string `name:"Value"`
	Key   string `name:"Key"`
}

// CreateVirtualBorderRouterResponse is the response struct for api CreateVirtualBorderRouter
type CreateVirtualBorderRouterResponse struct {
	*responses.BaseResponse
	VbrId     string `json:"VbrId" xml:"VbrId"`
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateCreateVirtualBorderRouterRequest creates a request to invoke CreateVirtualBorderRouter API
func CreateCreateVirtualBorderRouterRequest() (request *CreateVirtualBorderRouterRequest) {
	request = &CreateVirtualBorderRouterRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "CreateVirtualBorderRouter", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateCreateVirtualBorderRouterResponse creates a response to parse from CreateVirtualBorderRouter response
func CreateCreateVirtualBorderRouterResponse() (response *CreateVirtualBorderRouterResponse) {
	response = &CreateVirtualBorderRouterResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
