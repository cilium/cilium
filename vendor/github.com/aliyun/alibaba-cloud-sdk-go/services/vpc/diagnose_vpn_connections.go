package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DiagnoseVpnConnections invokes the vpc.DiagnoseVpnConnections API synchronously
func (client *Client) DiagnoseVpnConnections(request *DiagnoseVpnConnectionsRequest) (response *DiagnoseVpnConnectionsResponse, err error) {
	response = CreateDiagnoseVpnConnectionsResponse()
	err = client.DoAction(request, response)
	return
}

// DiagnoseVpnConnectionsWithChan invokes the vpc.DiagnoseVpnConnections API asynchronously
func (client *Client) DiagnoseVpnConnectionsWithChan(request *DiagnoseVpnConnectionsRequest) (<-chan *DiagnoseVpnConnectionsResponse, <-chan error) {
	responseChan := make(chan *DiagnoseVpnConnectionsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DiagnoseVpnConnections(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DiagnoseVpnConnectionsWithCallback invokes the vpc.DiagnoseVpnConnections API asynchronously
func (client *Client) DiagnoseVpnConnectionsWithCallback(request *DiagnoseVpnConnectionsRequest, callback func(response *DiagnoseVpnConnectionsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DiagnoseVpnConnectionsResponse
		var err error
		defer close(result)
		response, err = client.DiagnoseVpnConnections(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DiagnoseVpnConnectionsRequest is the request struct for api DiagnoseVpnConnections
type DiagnoseVpnConnectionsRequest struct {
	*requests.RpcRequest
	TunnelIds        *[]string        `position:"Query" name:"TunnelIds"  type:"Repeated"`
	ResourceOwnerId  requests.Integer `position:"Query" name:"ResourceOwnerId"`
	VpnGatewayId     string           `position:"Query" name:"VpnGatewayId"`
	PageNumber       requests.Integer `position:"Query" name:"PageNumber"`
	VpnConnectionIds *[]string        `position:"Query" name:"VpnConnectionIds"  type:"Repeated"`
	PageSize         requests.Integer `position:"Query" name:"PageSize"`
}

// DiagnoseVpnConnectionsResponse is the response struct for api DiagnoseVpnConnections
type DiagnoseVpnConnectionsResponse struct {
	*responses.BaseResponse
	RequestId      string          `json:"RequestId" xml:"RequestId"`
	PageNumber     int             `json:"PageNumber" xml:"PageNumber"`
	PageSize       int             `json:"PageSize" xml:"PageSize"`
	TotalCount     int             `json:"TotalCount" xml:"TotalCount"`
	VpnConnections []VpnConnection `json:"VpnConnections" xml:"VpnConnections"`
}

// CreateDiagnoseVpnConnectionsRequest creates a request to invoke DiagnoseVpnConnections API
func CreateDiagnoseVpnConnectionsRequest() (request *DiagnoseVpnConnectionsRequest) {
	request = &DiagnoseVpnConnectionsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "DiagnoseVpnConnections", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDiagnoseVpnConnectionsResponse creates a response to parse from DiagnoseVpnConnections response
func CreateDiagnoseVpnConnectionsResponse() (response *DiagnoseVpnConnectionsResponse) {
	response = &DiagnoseVpnConnectionsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
