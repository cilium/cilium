package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeNatGateways invokes the vpc.DescribeNatGateways API synchronously
func (client *Client) DescribeNatGateways(request *DescribeNatGatewaysRequest) (response *DescribeNatGatewaysResponse, err error) {
	response = CreateDescribeNatGatewaysResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeNatGatewaysWithChan invokes the vpc.DescribeNatGateways API asynchronously
func (client *Client) DescribeNatGatewaysWithChan(request *DescribeNatGatewaysRequest) (<-chan *DescribeNatGatewaysResponse, <-chan error) {
	responseChan := make(chan *DescribeNatGatewaysResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeNatGateways(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeNatGatewaysWithCallback invokes the vpc.DescribeNatGateways API asynchronously
func (client *Client) DescribeNatGatewaysWithCallback(request *DescribeNatGatewaysRequest, callback func(response *DescribeNatGatewaysResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeNatGatewaysResponse
		var err error
		defer close(result)
		response, err = client.DescribeNatGateways(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeNatGatewaysRequest is the request struct for api DescribeNatGateways
type DescribeNatGatewaysRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer          `position:"Query" name:"ResourceOwnerId"`
	NetworkType          string                    `position:"Query" name:"NetworkType"`
	Spec                 string                    `position:"Query" name:"Spec"`
	PageNumber           requests.Integer          `position:"Query" name:"PageNumber"`
	ResourceGroupId      string                    `position:"Query" name:"ResourceGroupId"`
	NatType              string                    `position:"Query" name:"NatType"`
	PageSize             requests.Integer          `position:"Query" name:"PageSize"`
	NatGatewayId         string                    `position:"Query" name:"NatGatewayId"`
	Tag                  *[]DescribeNatGatewaysTag `position:"Query" name:"Tag"  type:"Repeated"`
	InstanceChargeType   string                    `position:"Query" name:"InstanceChargeType"`
	NatGatewayIds        *[]string                 `position:"Query" name:"NatGatewayIds"  type:"Repeated"`
	DryRun               requests.Boolean          `position:"Query" name:"DryRun"`
	ResourceOwnerAccount string                    `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string                    `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer          `position:"Query" name:"OwnerId"`
	VSwitchId            string                    `position:"Query" name:"VSwitchId"`
	VpcId                string                    `position:"Query" name:"VpcId"`
	Name                 string                    `position:"Query" name:"Name"`
	PrivateLinkEnabled   requests.Boolean          `position:"Query" name:"PrivateLinkEnabled"`
	ZoneId               string                    `position:"Query" name:"ZoneId"`
	Status               string                    `position:"Query" name:"Status"`
}

// DescribeNatGatewaysTag is a repeated param struct in DescribeNatGatewaysRequest
type DescribeNatGatewaysTag struct {
	Value string `name:"Value"`
	Key   string `name:"Key"`
}

// DescribeNatGatewaysResponse is the response struct for api DescribeNatGateways
type DescribeNatGatewaysResponse struct {
	*responses.BaseResponse
	PageSize    int         `json:"PageSize" xml:"PageSize"`
	RequestId   string      `json:"RequestId" xml:"RequestId"`
	PageNumber  int         `json:"PageNumber" xml:"PageNumber"`
	TotalCount  int         `json:"TotalCount" xml:"TotalCount"`
	NatGateways NatGateways `json:"NatGateways" xml:"NatGateways"`
}

// CreateDescribeNatGatewaysRequest creates a request to invoke DescribeNatGateways API
func CreateDescribeNatGatewaysRequest() (request *DescribeNatGatewaysRequest) {
	request = &DescribeNatGatewaysRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "DescribeNatGateways", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeNatGatewaysResponse creates a response to parse from DescribeNatGateways response
func CreateDescribeNatGatewaysResponse() (response *DescribeNatGatewaysResponse) {
	response = &DescribeNatGatewaysResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
