package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeExpressCloudConnections invokes the vpc.DescribeExpressCloudConnections API synchronously
func (client *Client) DescribeExpressCloudConnections(request *DescribeExpressCloudConnectionsRequest) (response *DescribeExpressCloudConnectionsResponse, err error) {
	response = CreateDescribeExpressCloudConnectionsResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeExpressCloudConnectionsWithChan invokes the vpc.DescribeExpressCloudConnections API asynchronously
func (client *Client) DescribeExpressCloudConnectionsWithChan(request *DescribeExpressCloudConnectionsRequest) (<-chan *DescribeExpressCloudConnectionsResponse, <-chan error) {
	responseChan := make(chan *DescribeExpressCloudConnectionsResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeExpressCloudConnections(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeExpressCloudConnectionsWithCallback invokes the vpc.DescribeExpressCloudConnections API asynchronously
func (client *Client) DescribeExpressCloudConnectionsWithCallback(request *DescribeExpressCloudConnectionsRequest, callback func(response *DescribeExpressCloudConnectionsResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeExpressCloudConnectionsResponse
		var err error
		defer close(result)
		response, err = client.DescribeExpressCloudConnections(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeExpressCloudConnectionsRequest is the request struct for api DescribeExpressCloudConnections
type DescribeExpressCloudConnectionsRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer                         `position:"Query" name:"ResourceOwnerId"`
	PageNumber           requests.Integer                         `position:"Query" name:"PageNumber"`
	PageSize             requests.Integer                         `position:"Query" name:"PageSize"`
	ResourceOwnerAccount string                                   `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string                                   `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer                         `position:"Query" name:"OwnerId"`
	Filter               *[]DescribeExpressCloudConnectionsFilter `position:"Query" name:"Filter"  type:"Repeated"`
}

// DescribeExpressCloudConnectionsFilter is a repeated param struct in DescribeExpressCloudConnectionsRequest
type DescribeExpressCloudConnectionsFilter struct {
	Value *[]string `name:"Value" type:"Repeated"`
	Key   string    `name:"Key"`
}

// DescribeExpressCloudConnectionsResponse is the response struct for api DescribeExpressCloudConnections
type DescribeExpressCloudConnectionsResponse struct {
	*responses.BaseResponse
	RequestId                 string                    `json:"RequestId" xml:"RequestId"`
	PageNumber                int                       `json:"PageNumber" xml:"PageNumber"`
	PageSize                  int                       `json:"PageSize" xml:"PageSize"`
	TotalCount                int                       `json:"TotalCount" xml:"TotalCount"`
	ExpressCloudConnectionSet ExpressCloudConnectionSet `json:"ExpressCloudConnectionSet" xml:"ExpressCloudConnectionSet"`
}

// CreateDescribeExpressCloudConnectionsRequest creates a request to invoke DescribeExpressCloudConnections API
func CreateDescribeExpressCloudConnectionsRequest() (request *DescribeExpressCloudConnectionsRequest) {
	request = &DescribeExpressCloudConnectionsRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "DescribeExpressCloudConnections", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeExpressCloudConnectionsResponse creates a response to parse from DescribeExpressCloudConnections response
func CreateDescribeExpressCloudConnectionsResponse() (response *DescribeExpressCloudConnectionsResponse) {
	response = &DescribeExpressCloudConnectionsResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
