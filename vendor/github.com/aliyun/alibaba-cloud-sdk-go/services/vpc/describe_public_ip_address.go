package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribePublicIpAddress invokes the vpc.DescribePublicIpAddress API synchronously
func (client *Client) DescribePublicIpAddress(request *DescribePublicIpAddressRequest) (response *DescribePublicIpAddressResponse, err error) {
	response = CreateDescribePublicIpAddressResponse()
	err = client.DoAction(request, response)
	return
}

// DescribePublicIpAddressWithChan invokes the vpc.DescribePublicIpAddress API asynchronously
func (client *Client) DescribePublicIpAddressWithChan(request *DescribePublicIpAddressRequest) (<-chan *DescribePublicIpAddressResponse, <-chan error) {
	responseChan := make(chan *DescribePublicIpAddressResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribePublicIpAddress(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribePublicIpAddressWithCallback invokes the vpc.DescribePublicIpAddress API asynchronously
func (client *Client) DescribePublicIpAddressWithCallback(request *DescribePublicIpAddressRequest, callback func(response *DescribePublicIpAddressResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribePublicIpAddressResponse
		var err error
		defer close(result)
		response, err = client.DescribePublicIpAddress(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribePublicIpAddressRequest is the request struct for api DescribePublicIpAddress
type DescribePublicIpAddressRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	PageNumber           requests.Integer `position:"Query" name:"PageNumber"`
	ResourceUid          requests.Integer `position:"Query" name:"ResourceUid"`
	PageSize             requests.Integer `position:"Query" name:"PageSize"`
	Bandwidth            string           `position:"Query" name:"Bandwidth"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	KbpsBandwidth        string           `position:"Query" name:"KbpsBandwidth"`
	ResourceBid          string           `position:"Query" name:"ResourceBid"`
}

// DescribePublicIpAddressResponse is the response struct for api DescribePublicIpAddress
type DescribePublicIpAddressResponse struct {
	*responses.BaseResponse
	RequestId       string   `json:"RequestId" xml:"RequestId"`
	Success         bool     `json:"Success" xml:"Success"`
	Code            string   `json:"Code" xml:"Code"`
	Message         string   `json:"Message" xml:"Message"`
	PageSize        int      `json:"PageSize" xml:"PageSize"`
	PageNumber      int      `json:"PageNumber" xml:"PageNumber"`
	TotalCount      int      `json:"TotalCount" xml:"TotalCount"`
	RegionId        string   `json:"RegionId" xml:"RegionId"`
	IpRange         []string `json:"IpRange" xml:"IpRange"`
	PublicIpAddress []string `json:"PublicIpAddress" xml:"PublicIpAddress"`
}

// CreateDescribePublicIpAddressRequest creates a request to invoke DescribePublicIpAddress API
func CreateDescribePublicIpAddressRequest() (request *DescribePublicIpAddressRequest) {
	request = &DescribePublicIpAddressRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "DescribePublicIpAddress", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribePublicIpAddressResponse creates a response to parse from DescribePublicIpAddress response
func CreateDescribePublicIpAddressResponse() (response *DescribePublicIpAddressResponse) {
	response = &DescribePublicIpAddressResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
