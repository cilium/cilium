package vpc

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListFullNatEntries invokes the vpc.ListFullNatEntries API synchronously
func (client *Client) ListFullNatEntries(request *ListFullNatEntriesRequest) (response *ListFullNatEntriesResponse, err error) {
	response = CreateListFullNatEntriesResponse()
	err = client.DoAction(request, response)
	return
}

// ListFullNatEntriesWithChan invokes the vpc.ListFullNatEntries API asynchronously
func (client *Client) ListFullNatEntriesWithChan(request *ListFullNatEntriesRequest) (<-chan *ListFullNatEntriesResponse, <-chan error) {
	responseChan := make(chan *ListFullNatEntriesResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListFullNatEntries(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListFullNatEntriesWithCallback invokes the vpc.ListFullNatEntries API asynchronously
func (client *Client) ListFullNatEntriesWithCallback(request *ListFullNatEntriesRequest, callback func(response *ListFullNatEntriesResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListFullNatEntriesResponse
		var err error
		defer close(result)
		response, err = client.ListFullNatEntries(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListFullNatEntriesRequest is the request struct for api ListFullNatEntries
type ListFullNatEntriesRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer `position:"Query" name:"ResourceOwnerId"`
	ClientToken          string           `position:"Query" name:"ClientToken"`
	NetworkInterfaceIds  *[]string        `position:"Query" name:"NetworkInterfaceIds"  type:"Repeated"`
	FullNatEntryStatus   string           `position:"Query" name:"FullNatEntryStatus"`
	FullNatEntryId       string           `position:"Query" name:"FullNatEntryId"`
	FullNatTableId       string           `position:"Query" name:"FullNatTableId"`
	NextToken            string           `position:"Query" name:"NextToken"`
	FullNatEntryNames    *[]string        `position:"Query" name:"FullNatEntryNames"  type:"Repeated"`
	NatGatewayId         string           `position:"Query" name:"NatGatewayId"`
	ResourceOwnerAccount string           `position:"Query" name:"ResourceOwnerAccount"`
	IpProtocol           string           `position:"Query" name:"IpProtocol"`
	OwnerAccount         string           `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer `position:"Query" name:"OwnerId"`
	MaxResults           requests.Integer `position:"Query" name:"MaxResults"`
}

// ListFullNatEntriesResponse is the response struct for api ListFullNatEntries
type ListFullNatEntriesResponse struct {
	*responses.BaseResponse
	RequestId      string         `json:"RequestId" xml:"RequestId"`
	NatGatewayId   string         `json:"NatGatewayId" xml:"NatGatewayId"`
	FullNatTableId string         `json:"FullNatTableId" xml:"FullNatTableId"`
	TotalCount     int64          `json:"TotalCount" xml:"TotalCount"`
	NextToken      string         `json:"NextToken" xml:"NextToken"`
	MaxResults     int64          `json:"MaxResults" xml:"MaxResults"`
	FullNatEntries []FullNatEntry `json:"FullNatEntries" xml:"FullNatEntries"`
}

// CreateListFullNatEntriesRequest creates a request to invoke ListFullNatEntries API
func CreateListFullNatEntriesRequest() (request *ListFullNatEntriesRequest) {
	request = &ListFullNatEntriesRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Vpc", "2016-04-28", "ListFullNatEntries", "vpc", "openAPI")
	request.Method = requests.POST
	return
}

// CreateListFullNatEntriesResponse creates a response to parse from ListFullNatEntries response
func CreateListFullNatEntriesResponse() (response *ListFullNatEntriesResponse) {
	response = &ListFullNatEntriesResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
