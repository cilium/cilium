package ecs

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// DescribeInstanceModificationPrice invokes the ecs.DescribeInstanceModificationPrice API synchronously
func (client *Client) DescribeInstanceModificationPrice(request *DescribeInstanceModificationPriceRequest) (response *DescribeInstanceModificationPriceResponse, err error) {
	response = CreateDescribeInstanceModificationPriceResponse()
	err = client.DoAction(request, response)
	return
}

// DescribeInstanceModificationPriceWithChan invokes the ecs.DescribeInstanceModificationPrice API asynchronously
func (client *Client) DescribeInstanceModificationPriceWithChan(request *DescribeInstanceModificationPriceRequest) (<-chan *DescribeInstanceModificationPriceResponse, <-chan error) {
	responseChan := make(chan *DescribeInstanceModificationPriceResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.DescribeInstanceModificationPrice(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// DescribeInstanceModificationPriceWithCallback invokes the ecs.DescribeInstanceModificationPrice API asynchronously
func (client *Client) DescribeInstanceModificationPriceWithCallback(request *DescribeInstanceModificationPriceRequest, callback func(response *DescribeInstanceModificationPriceResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *DescribeInstanceModificationPriceResponse
		var err error
		defer close(result)
		response, err = client.DescribeInstanceModificationPrice(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// DescribeInstanceModificationPriceRequest is the request struct for api DescribeInstanceModificationPrice
type DescribeInstanceModificationPriceRequest struct {
	*requests.RpcRequest
	ResourceOwnerId      requests.Integer                             `position:"Query" name:"ResourceOwnerId"`
	SystemDiskCategory   string                                       `position:"Query" name:"SystemDisk.Category"`
	InstanceType         string                                       `position:"Query" name:"InstanceType"`
	ResourceOwnerAccount string                                       `position:"Query" name:"ResourceOwnerAccount"`
	OwnerAccount         string                                       `position:"Query" name:"OwnerAccount"`
	OwnerId              requests.Integer                             `position:"Query" name:"OwnerId"`
	DataDisk             *[]DescribeInstanceModificationPriceDataDisk `position:"Query" name:"DataDisk"  type:"Repeated"`
	InstanceId           string                                       `position:"Query" name:"InstanceId"`
}

// DescribeInstanceModificationPriceDataDisk is a repeated param struct in DescribeInstanceModificationPriceRequest
type DescribeInstanceModificationPriceDataDisk struct {
	PerformanceLevel string `name:"PerformanceLevel"`
	Size             string `name:"Size"`
	Category         string `name:"Category"`
}

// DescribeInstanceModificationPriceResponse is the response struct for api DescribeInstanceModificationPrice
type DescribeInstanceModificationPriceResponse struct {
	*responses.BaseResponse
	RequestId string    `json:"RequestId" xml:"RequestId"`
	PriceInfo PriceInfo `json:"PriceInfo" xml:"PriceInfo"`
}

// CreateDescribeInstanceModificationPriceRequest creates a request to invoke DescribeInstanceModificationPrice API
func CreateDescribeInstanceModificationPriceRequest() (request *DescribeInstanceModificationPriceRequest) {
	request = &DescribeInstanceModificationPriceRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Ecs", "2014-05-26", "DescribeInstanceModificationPrice", "ecs", "openAPI")
	request.Method = requests.POST
	return
}

// CreateDescribeInstanceModificationPriceResponse creates a response to parse from DescribeInstanceModificationPrice response
func CreateDescribeInstanceModificationPriceResponse() (response *DescribeInstanceModificationPriceResponse) {
	response = &DescribeInstanceModificationPriceResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
