// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/extensions/filters/network/meta_protocol_proxy/matcher/v3/matcher.proto

package matcherv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ServiceMatchInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ServiceMatchInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceMatchInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServiceMatchInputMultiError, or nil if none found.
func (m *ServiceMatchInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceMatchInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ServiceMatchInputMultiError(errors)
	}
	return nil
}

// ServiceMatchInputMultiError is an error wrapping multiple validation errors
// returned by ServiceMatchInput.ValidateAll() if the designated constraints
// aren't met.
type ServiceMatchInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMatchInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMatchInputMultiError) AllErrors() []error { return m }

// ServiceMatchInputValidationError is the validation error returned by
// ServiceMatchInput.Validate if the designated constraints aren't met.
type ServiceMatchInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceMatchInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceMatchInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceMatchInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceMatchInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceMatchInputValidationError) ErrorName() string {
	return "ServiceMatchInputValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceMatchInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceMatchInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceMatchInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceMatchInputValidationError{}

// Validate checks the field values on MethodMatchInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MethodMatchInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MethodMatchInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MethodMatchInputMultiError, or nil if none found.
func (m *MethodMatchInput) ValidateAll() error {
	return m.validate(true)
}

func (m *MethodMatchInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MethodMatchInputMultiError(errors)
	}
	return nil
}

// MethodMatchInputMultiError is an error wrapping multiple validation errors
// returned by MethodMatchInput.ValidateAll() if the designated constraints
// aren't met.
type MethodMatchInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MethodMatchInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MethodMatchInputMultiError) AllErrors() []error { return m }

// MethodMatchInputValidationError is the validation error returned by
// MethodMatchInput.Validate if the designated constraints aren't met.
type MethodMatchInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MethodMatchInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MethodMatchInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MethodMatchInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MethodMatchInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MethodMatchInputValidationError) ErrorName() string { return "MethodMatchInputValidationError" }

// Error satisfies the builtin error interface
func (e MethodMatchInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMethodMatchInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MethodMatchInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MethodMatchInputValidationError{}

// Validate checks the field values on PropertyMatchInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PropertyMatchInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PropertyMatchInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PropertyMatchInputMultiError, or nil if none found.
func (m *PropertyMatchInput) ValidateAll() error {
	return m.validate(true)
}

func (m *PropertyMatchInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPropertyName()) < 1 {
		err := PropertyMatchInputValidationError{
			field:  "PropertyName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PropertyMatchInputMultiError(errors)
	}
	return nil
}

// PropertyMatchInputMultiError is an error wrapping multiple validation errors
// returned by PropertyMatchInput.ValidateAll() if the designated constraints
// aren't met.
type PropertyMatchInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PropertyMatchInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PropertyMatchInputMultiError) AllErrors() []error { return m }

// PropertyMatchInputValidationError is the validation error returned by
// PropertyMatchInput.Validate if the designated constraints aren't met.
type PropertyMatchInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PropertyMatchInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PropertyMatchInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PropertyMatchInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PropertyMatchInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PropertyMatchInputValidationError) ErrorName() string {
	return "PropertyMatchInputValidationError"
}

// Error satisfies the builtin error interface
func (e PropertyMatchInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPropertyMatchInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PropertyMatchInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PropertyMatchInputValidationError{}
