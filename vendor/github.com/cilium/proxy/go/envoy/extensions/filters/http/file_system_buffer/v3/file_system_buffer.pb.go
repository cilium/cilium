// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.23.1
// source: envoy/extensions/filters/http/file_system_buffer/v3/file_system_buffer.proto

package file_system_bufferv3

import (
	v3 "github.com/cilium/proxy/go/envoy/extensions/common/async_files/v3"
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The behavior of the filter for a stream.
// [#next-free-field: 6]
type BufferBehavior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Behavior:
	//
	//	*BufferBehavior_StreamWhenPossible_
	//	*BufferBehavior_Bypass_
	//	*BufferBehavior_InjectContentLengthIfNecessary_
	//	*BufferBehavior_FullyBufferAndAlwaysInjectContentLength_
	//	*BufferBehavior_FullyBuffer_
	Behavior isBufferBehavior_Behavior `protobuf_oneof:"behavior"`
}

func (x *BufferBehavior) Reset() {
	*x = BufferBehavior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior) ProtoMessage() {}

func (x *BufferBehavior) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior.ProtoReflect.Descriptor instead.
func (*BufferBehavior) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0}
}

func (m *BufferBehavior) GetBehavior() isBufferBehavior_Behavior {
	if m != nil {
		return m.Behavior
	}
	return nil
}

func (x *BufferBehavior) GetStreamWhenPossible() *BufferBehavior_StreamWhenPossible {
	if x, ok := x.GetBehavior().(*BufferBehavior_StreamWhenPossible_); ok {
		return x.StreamWhenPossible
	}
	return nil
}

func (x *BufferBehavior) GetBypass() *BufferBehavior_Bypass {
	if x, ok := x.GetBehavior().(*BufferBehavior_Bypass_); ok {
		return x.Bypass
	}
	return nil
}

func (x *BufferBehavior) GetInjectContentLengthIfNecessary() *BufferBehavior_InjectContentLengthIfNecessary {
	if x, ok := x.GetBehavior().(*BufferBehavior_InjectContentLengthIfNecessary_); ok {
		return x.InjectContentLengthIfNecessary
	}
	return nil
}

func (x *BufferBehavior) GetFullyBufferAndAlwaysInjectContentLength() *BufferBehavior_FullyBufferAndAlwaysInjectContentLength {
	if x, ok := x.GetBehavior().(*BufferBehavior_FullyBufferAndAlwaysInjectContentLength_); ok {
		return x.FullyBufferAndAlwaysInjectContentLength
	}
	return nil
}

func (x *BufferBehavior) GetFullyBuffer() *BufferBehavior_FullyBuffer {
	if x, ok := x.GetBehavior().(*BufferBehavior_FullyBuffer_); ok {
		return x.FullyBuffer
	}
	return nil
}

type isBufferBehavior_Behavior interface {
	isBufferBehavior_Behavior()
}

type BufferBehavior_StreamWhenPossible_ struct {
	// Don't inject “content-length“ header.
	// Output immediately, buffer only if output is slower than input.
	StreamWhenPossible *BufferBehavior_StreamWhenPossible `protobuf:"bytes,1,opt,name=stream_when_possible,json=streamWhenPossible,proto3,oneof"`
}

type BufferBehavior_Bypass_ struct {
	// Never buffer, do nothing.
	Bypass *BufferBehavior_Bypass `protobuf:"bytes,2,opt,name=bypass,proto3,oneof"`
}

type BufferBehavior_InjectContentLengthIfNecessary_ struct {
	// If “content-length“ is not present, buffer the entire input,
	// inject “content-length“ header, then output.
	// If “content-length“ is already present, act like “stream_when_possible“.
	InjectContentLengthIfNecessary *BufferBehavior_InjectContentLengthIfNecessary `protobuf:"bytes,3,opt,name=inject_content_length_if_necessary,json=injectContentLengthIfNecessary,proto3,oneof"`
}

type BufferBehavior_FullyBufferAndAlwaysInjectContentLength_ struct {
	// Always buffer the entire input, and inject “content-length“,
	// overwriting any provided content-length header.
	FullyBufferAndAlwaysInjectContentLength *BufferBehavior_FullyBufferAndAlwaysInjectContentLength `protobuf:"bytes,4,opt,name=fully_buffer_and_always_inject_content_length,json=fullyBufferAndAlwaysInjectContentLength,proto3,oneof"`
}

type BufferBehavior_FullyBuffer_ struct {
	// Always buffer the entire input, do not modify “content-length“.
	FullyBuffer *BufferBehavior_FullyBuffer `protobuf:"bytes,5,opt,name=fully_buffer,json=fullyBuffer,proto3,oneof"`
}

func (*BufferBehavior_StreamWhenPossible_) isBufferBehavior_Behavior() {}

func (*BufferBehavior_Bypass_) isBufferBehavior_Behavior() {}

func (*BufferBehavior_InjectContentLengthIfNecessary_) isBufferBehavior_Behavior() {}

func (*BufferBehavior_FullyBufferAndAlwaysInjectContentLength_) isBufferBehavior_Behavior() {}

func (*BufferBehavior_FullyBuffer_) isBufferBehavior_Behavior() {}

// The configuration for one direction of the filter behavior.
type StreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to bypass / stream / fully buffer / etc.
	// If unset in route, vhost and listener config, the default is “stream_when_possible“.
	Behavior *BufferBehavior `protobuf:"bytes,1,opt,name=behavior,proto3" json:"behavior,omitempty"`
	// The amount stored in the memory buffer before buffering to disk.
	// If unset in route, vhost and listener config, defaults to a hardcoded value of 1MiB
	MemoryBufferBytesLimit *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=memory_buffer_bytes_limit,json=memoryBufferBytesLimit,proto3" json:"memory_buffer_bytes_limit,omitempty"`
	// The maximum storage (excluding memory) to be buffered in this filter.
	// If unset in route, vhost and listener config, defaults to a hardcoded value of 32MiB
	StorageBufferBytesLimit *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=storage_buffer_bytes_limit,json=storageBufferBytesLimit,proto3" json:"storage_buffer_bytes_limit,omitempty"`
	// The maximum amount that can be queued for writing to storage, above which the
	// source is requested to pause. If unset, defaults to the same value as
	// “memory_buffer_bytes_limit“.
	//
	// For example, assuming the recipient is not consuming data at all, if
	// “memory_buffer_bytes_limit“ was 32MiB, and “storage_buffer_queue_high_watermark_bytes“
	// was 64MiB, and the filesystem is backed up so writes are not occurring promptly,
	// then:
	//
	//   - Any request less than 32MiB will eventually pass through without ever attempting
	//     to write to disk.
	//   - Any request with over 32MiB buffered will start trying to write to disk.
	//     If it reaches (32+64)MiB buffered in memory (write to disk isn't keeping up), a high
	//     watermark signal is sent to the source.
	//   - Any stream whose total size exceeds
	//     “memory_buffer_bytes_limit + storage_buffer_bytes_limit“ will provoke an error.
	//     (Note, if the recipient *is* consuming data then it is possible for such an
	//     oversized request to pass through the buffer filter, provided the recipient
	//     isn't consuming data too slowly.)
	//
	// The low watermark signal is sent when the memory buffer is at size
	// “memory_buffer_bytes_limit + (storage_buffer_queue_high_watermark_bytes / 2)“.
	StorageBufferQueueHighWatermarkBytes *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=storage_buffer_queue_high_watermark_bytes,json=storageBufferQueueHighWatermarkBytes,proto3" json:"storage_buffer_queue_high_watermark_bytes,omitempty"`
}

func (x *StreamConfig) Reset() {
	*x = StreamConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamConfig) ProtoMessage() {}

func (x *StreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamConfig.ProtoReflect.Descriptor instead.
func (*StreamConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{1}
}

func (x *StreamConfig) GetBehavior() *BufferBehavior {
	if x != nil {
		return x.Behavior
	}
	return nil
}

func (x *StreamConfig) GetMemoryBufferBytesLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MemoryBufferBytesLimit
	}
	return nil
}

func (x *StreamConfig) GetStorageBufferBytesLimit() *wrapperspb.UInt64Value {
	if x != nil {
		return x.StorageBufferBytesLimit
	}
	return nil
}

func (x *StreamConfig) GetStorageBufferQueueHighWatermarkBytes() *wrapperspb.UInt64Value {
	if x != nil {
		return x.StorageBufferQueueHighWatermarkBytes
	}
	return nil
}

// A :ref:`file system buffer <config_http_filters_file_system_buffer>` filter configuration.
//
// Route-specific configs override only the fields they explicitly include; unset
// fields inherit from the vhost or listener-level config, or, if never set,
// and not required, use a default value.
type FileSystemBufferFilterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A configuration for an AsyncFileManager.
	//
	// If unset in route, vhost and listener, and the behavior is not “bypass“
	// in both directions, an Internal Server Error response will be sent.
	ManagerConfig *v3.AsyncFileManagerConfig `protobuf:"bytes,1,opt,name=manager_config,json=managerConfig,proto3" json:"manager_config,omitempty"`
	// An optional path to which the unlinked files should be written - this may
	// determine which physical storage device will be used.
	//
	// If unset in route, vhost and listener, will use the environment variable
	// “TMPDIR“, or, if that's also unset, will use “/tmp“.
	StorageBufferPath *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=storage_buffer_path,json=storageBufferPath,proto3" json:"storage_buffer_path,omitempty"`
	// Optional configuration for how to buffer (or not) requests.
	// If unset in route, vhost and listener, “StreamConfig“ default values will be used
	// (with behavior “stream_when_possible“)
	Request *StreamConfig `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	// Optional configuration for how to buffer (or not) responses.
	// If unset in route, vhost and listener, “StreamConfig“ default values will be used
	// (with behavior “stream_when_possible“)
	Response *StreamConfig `protobuf:"bytes,4,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FileSystemBufferFilterConfig) Reset() {
	*x = FileSystemBufferFilterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileSystemBufferFilterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileSystemBufferFilterConfig) ProtoMessage() {}

func (x *FileSystemBufferFilterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileSystemBufferFilterConfig.ProtoReflect.Descriptor instead.
func (*FileSystemBufferFilterConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{2}
}

func (x *FileSystemBufferFilterConfig) GetManagerConfig() *v3.AsyncFileManagerConfig {
	if x != nil {
		return x.ManagerConfig
	}
	return nil
}

func (x *FileSystemBufferFilterConfig) GetStorageBufferPath() *wrapperspb.StringValue {
	if x != nil {
		return x.StorageBufferPath
	}
	return nil
}

func (x *FileSystemBufferFilterConfig) GetRequest() *StreamConfig {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *FileSystemBufferFilterConfig) GetResponse() *StreamConfig {
	if x != nil {
		return x.Response
	}
	return nil
}

type BufferBehavior_StreamWhenPossible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BufferBehavior_StreamWhenPossible) Reset() {
	*x = BufferBehavior_StreamWhenPossible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior_StreamWhenPossible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior_StreamWhenPossible) ProtoMessage() {}

func (x *BufferBehavior_StreamWhenPossible) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior_StreamWhenPossible.ProtoReflect.Descriptor instead.
func (*BufferBehavior_StreamWhenPossible) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0, 0}
}

type BufferBehavior_Bypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BufferBehavior_Bypass) Reset() {
	*x = BufferBehavior_Bypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior_Bypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior_Bypass) ProtoMessage() {}

func (x *BufferBehavior_Bypass) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior_Bypass.ProtoReflect.Descriptor instead.
func (*BufferBehavior_Bypass) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0, 1}
}

type BufferBehavior_InjectContentLengthIfNecessary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BufferBehavior_InjectContentLengthIfNecessary) Reset() {
	*x = BufferBehavior_InjectContentLengthIfNecessary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior_InjectContentLengthIfNecessary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior_InjectContentLengthIfNecessary) ProtoMessage() {}

func (x *BufferBehavior_InjectContentLengthIfNecessary) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior_InjectContentLengthIfNecessary.ProtoReflect.Descriptor instead.
func (*BufferBehavior_InjectContentLengthIfNecessary) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0, 2}
}

type BufferBehavior_FullyBufferAndAlwaysInjectContentLength struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BufferBehavior_FullyBufferAndAlwaysInjectContentLength) Reset() {
	*x = BufferBehavior_FullyBufferAndAlwaysInjectContentLength{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior_FullyBufferAndAlwaysInjectContentLength) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior_FullyBufferAndAlwaysInjectContentLength) ProtoMessage() {}

func (x *BufferBehavior_FullyBufferAndAlwaysInjectContentLength) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior_FullyBufferAndAlwaysInjectContentLength.ProtoReflect.Descriptor instead.
func (*BufferBehavior_FullyBufferAndAlwaysInjectContentLength) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0, 3}
}

type BufferBehavior_FullyBuffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BufferBehavior_FullyBuffer) Reset() {
	*x = BufferBehavior_FullyBuffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferBehavior_FullyBuffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferBehavior_FullyBuffer) ProtoMessage() {}

func (x *BufferBehavior_FullyBuffer) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferBehavior_FullyBuffer.ProtoReflect.Descriptor instead.
func (*BufferBehavior_FullyBuffer) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP(), []int{0, 4}
}

var File_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDesc = []byte{
	0x0a, 0x4c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x1a, 0x3f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x61, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x07,
	0x0a, 0x0e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x12, 0x8a, 0x01, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x77, 0x68, 0x65, 0x6e,
	0x5f, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x56, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x68, 0x65, 0x6e, 0x50,
	0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a,
	0x06, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x48, 0x00, 0x52, 0x06, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x22, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x69, 0x66,
	0x5f, 0x6e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x62, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x66, 0x4e, 0x65, 0x63, 0x65, 0x73,
	0x73, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x1e, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x66, 0x4e, 0x65, 0x63,
	0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x12, 0xcd, 0x01, 0x0a, 0x2d, 0x66, 0x75, 0x6c, 0x6c, 0x79,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x6c, 0x77, 0x61,
	0x79, 0x73, 0x5f, 0x69, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x6b,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x48, 0x00, 0x52, 0x27, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x74, 0x0a, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f,
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x1a, 0x14, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x1a, 0x08, 0x0a, 0x06, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x1a, 0x20, 0x0a, 0x1e,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x49, 0x66, 0x4e, 0x65, 0x63, 0x65, 0x73, 0x73, 0x61, 0x72, 0x79, 0x1a, 0x29,
	0x0a, 0x27, 0x46, 0x75, 0x6c, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x1a, 0x0d, 0x0a, 0x0b, 0x46, 0x75, 0x6c,
	0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa3, 0x03, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x08, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x19, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x59, 0x0a,
	0x1a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x17, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x75, 0x0a, 0x29, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x24, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x65, 0x75, 0x65, 0x48, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x8f, 0x03, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x65, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x76,
	0x33, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0xdd, 0x01, 0x0a, 0x41, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x42, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x6f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x3b, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x76,
	0x33, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescData = file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDesc
)

func file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDescData
}

var file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_goTypes = []interface{}{
	(*BufferBehavior)(nil),                                         // 0: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior
	(*StreamConfig)(nil),                                           // 1: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig
	(*FileSystemBufferFilterConfig)(nil),                           // 2: envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig
	(*BufferBehavior_StreamWhenPossible)(nil),                      // 3: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.StreamWhenPossible
	(*BufferBehavior_Bypass)(nil),                                  // 4: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Bypass
	(*BufferBehavior_InjectContentLengthIfNecessary)(nil),          // 5: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.InjectContentLengthIfNecessary
	(*BufferBehavior_FullyBufferAndAlwaysInjectContentLength)(nil), // 6: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBufferAndAlwaysInjectContentLength
	(*BufferBehavior_FullyBuffer)(nil),                             // 7: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBuffer
	(*wrapperspb.UInt64Value)(nil),                                 // 8: google.protobuf.UInt64Value
	(*v3.AsyncFileManagerConfig)(nil),                              // 9: envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
	(*wrapperspb.StringValue)(nil),                                 // 10: google.protobuf.StringValue
}
var file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_depIdxs = []int32{
	3,  // 0: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.stream_when_possible:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.StreamWhenPossible
	4,  // 1: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.bypass:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.Bypass
	5,  // 2: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.inject_content_length_if_necessary:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.InjectContentLengthIfNecessary
	6,  // 3: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.fully_buffer_and_always_inject_content_length:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBufferAndAlwaysInjectContentLength
	7,  // 4: envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.fully_buffer:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior.FullyBuffer
	0,  // 5: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.behavior:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.BufferBehavior
	8,  // 6: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.memory_buffer_bytes_limit:type_name -> google.protobuf.UInt64Value
	8,  // 7: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.storage_buffer_bytes_limit:type_name -> google.protobuf.UInt64Value
	8,  // 8: envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig.storage_buffer_queue_high_watermark_bytes:type_name -> google.protobuf.UInt64Value
	9,  // 9: envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig.manager_config:type_name -> envoy.extensions.common.async_files.v3.AsyncFileManagerConfig
	10, // 10: envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig.storage_buffer_path:type_name -> google.protobuf.StringValue
	1,  // 11: envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig.request:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig
	1,  // 12: envoy.extensions.filters.http.file_system_buffer.v3.FileSystemBufferFilterConfig.response:type_name -> envoy.extensions.filters.http.file_system_buffer.v3.StreamConfig
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_init() }
func file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_init() {
	if File_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileSystemBufferFilterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior_StreamWhenPossible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior_Bypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior_InjectContentLengthIfNecessary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior_FullyBufferAndAlwaysInjectContentLength); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferBehavior_FullyBuffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BufferBehavior_StreamWhenPossible_)(nil),
		(*BufferBehavior_Bypass_)(nil),
		(*BufferBehavior_InjectContentLengthIfNecessary_)(nil),
		(*BufferBehavior_FullyBufferAndAlwaysInjectContentLength_)(nil),
		(*BufferBehavior_FullyBuffer_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_depIdxs,
		MessageInfos:      file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto = out.File
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_rawDesc = nil
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_goTypes = nil
	file_envoy_extensions_filters_http_file_system_buffer_v3_file_system_buffer_proto_depIdxs = nil
}
