// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/core/v3/health_check.proto

package envoy_config_core_v3

import (
	fmt "fmt"
	_ "github.com/cilium/proxy/go/envoy/annotations"
	v31 "github.com/cilium/proxy/go/envoy/type/matcher/v3"
	v3 "github.com/cilium/proxy/go/envoy/type/v3"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Endpoint health status.
type HealthStatus int32

const (
	// The health status is not known. This is interpreted by Envoy as *HEALTHY*.
	HealthStatus_UNKNOWN HealthStatus = 0
	// Healthy.
	HealthStatus_HEALTHY HealthStatus = 1
	// Unhealthy.
	HealthStatus_UNHEALTHY HealthStatus = 2
	// Connection draining in progress. E.g.,
	// `<https://aws.amazon.com/blogs/aws/elb-connection-draining-remove-instances-from-service-with-care/>`_
	// or
	// `<https://cloud.google.com/compute/docs/load-balancing/enabling-connection-draining>`_.
	// This is interpreted by Envoy as *UNHEALTHY*.
	HealthStatus_DRAINING HealthStatus = 3
	// Health check timed out. This is part of HDS and is interpreted by Envoy as
	// *UNHEALTHY*.
	HealthStatus_TIMEOUT HealthStatus = 4
	// Degraded.
	HealthStatus_DEGRADED HealthStatus = 5
)

var HealthStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "HEALTHY",
	2: "UNHEALTHY",
	3: "DRAINING",
	4: "TIMEOUT",
	5: "DEGRADED",
}

var HealthStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"HEALTHY":   1,
	"UNHEALTHY": 2,
	"DRAINING":  3,
	"TIMEOUT":   4,
	"DEGRADED":  5,
}

func (x HealthStatus) String() string {
	return proto.EnumName(HealthStatus_name, int32(x))
}

func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0}
}

// [#next-free-field: 22]
type HealthCheck struct {
	// The time to wait for a health check response. If the timeout is reached the
	// health check attempt will be considered a failure.
	Timeout *duration.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// The interval between health checks.
	Interval *duration.Duration `protobuf:"bytes,2,opt,name=interval,proto3" json:"interval,omitempty"`
	// An optional jitter amount in milliseconds. If specified, Envoy will start health
	// checking after for a random time in ms between 0 and initial_jitter. This only
	// applies to the first health check.
	InitialJitter *duration.Duration `protobuf:"bytes,20,opt,name=initial_jitter,json=initialJitter,proto3" json:"initial_jitter,omitempty"`
	// An optional jitter amount in milliseconds. If specified, during every
	// interval Envoy will add interval_jitter to the wait time.
	IntervalJitter *duration.Duration `protobuf:"bytes,3,opt,name=interval_jitter,json=intervalJitter,proto3" json:"interval_jitter,omitempty"`
	// An optional jitter amount as a percentage of interval_ms. If specified,
	// during every interval Envoy will add interval_ms *
	// interval_jitter_percent / 100 to the wait time.
	//
	// If interval_jitter_ms and interval_jitter_percent are both set, both of
	// them will be used to increase the wait time.
	IntervalJitterPercent uint32 `protobuf:"varint,18,opt,name=interval_jitter_percent,json=intervalJitterPercent,proto3" json:"interval_jitter_percent,omitempty"`
	// The number of unhealthy health checks required before a host is marked
	// unhealthy. Note that for *http* health checking if a host responds with 503
	// this threshold is ignored and the host is considered unhealthy immediately.
	UnhealthyThreshold *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=unhealthy_threshold,json=unhealthyThreshold,proto3" json:"unhealthy_threshold,omitempty"`
	// The number of healthy health checks required before a host is marked
	// healthy. Note that during startup, only a single successful health check is
	// required to mark a host healthy.
	HealthyThreshold *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=healthy_threshold,json=healthyThreshold,proto3" json:"healthy_threshold,omitempty"`
	// [#not-implemented-hide:] Non-serving port for health checking.
	AltPort *wrappers.UInt32Value `protobuf:"bytes,6,opt,name=alt_port,json=altPort,proto3" json:"alt_port,omitempty"`
	// Reuse health check connection between health checks. Default is true.
	ReuseConnection *wrappers.BoolValue `protobuf:"bytes,7,opt,name=reuse_connection,json=reuseConnection,proto3" json:"reuse_connection,omitempty"`
	// Types that are valid to be assigned to HealthChecker:
	//	*HealthCheck_HttpHealthCheck_
	//	*HealthCheck_TcpHealthCheck_
	//	*HealthCheck_GrpcHealthCheck_
	//	*HealthCheck_CustomHealthCheck_
	HealthChecker isHealthCheck_HealthChecker `protobuf_oneof:"health_checker"`
	// The "no traffic interval" is a special health check interval that is used when a cluster has
	// never had traffic routed to it. This lower interval allows cluster information to be kept up to
	// date, without sending a potentially large amount of active health checking traffic for no
	// reason. Once a cluster has been used for traffic routing, Envoy will shift back to using the
	// standard health check interval that is defined. Note that this interval takes precedence over
	// any other.
	//
	// The default value for "no traffic interval" is 60 seconds.
	NoTrafficInterval *duration.Duration `protobuf:"bytes,12,opt,name=no_traffic_interval,json=noTrafficInterval,proto3" json:"no_traffic_interval,omitempty"`
	// The "unhealthy interval" is a health check interval that is used for hosts that are marked as
	// unhealthy. As soon as the host is marked as healthy, Envoy will shift back to using the
	// standard health check interval that is defined.
	//
	// The default value for "unhealthy interval" is the same as "interval".
	UnhealthyInterval *duration.Duration `protobuf:"bytes,14,opt,name=unhealthy_interval,json=unhealthyInterval,proto3" json:"unhealthy_interval,omitempty"`
	// The "unhealthy edge interval" is a special health check interval that is used for the first
	// health check right after a host is marked as unhealthy. For subsequent health checks
	// Envoy will shift back to using either "unhealthy interval" if present or the standard health
	// check interval that is defined.
	//
	// The default value for "unhealthy edge interval" is the same as "unhealthy interval".
	UnhealthyEdgeInterval *duration.Duration `protobuf:"bytes,15,opt,name=unhealthy_edge_interval,json=unhealthyEdgeInterval,proto3" json:"unhealthy_edge_interval,omitempty"`
	// The "healthy edge interval" is a special health check interval that is used for the first
	// health check right after a host is marked as healthy. For subsequent health checks
	// Envoy will shift back to using the standard health check interval that is defined.
	//
	// The default value for "healthy edge interval" is the same as the default interval.
	HealthyEdgeInterval *duration.Duration `protobuf:"bytes,16,opt,name=healthy_edge_interval,json=healthyEdgeInterval,proto3" json:"healthy_edge_interval,omitempty"`
	// Specifies the path to the :ref:`health check event log <arch_overview_health_check_logging>`.
	// If empty, no event log will be written.
	EventLogPath string `protobuf:"bytes,17,opt,name=event_log_path,json=eventLogPath,proto3" json:"event_log_path,omitempty"`
	// If set to true, health check failure events will always be logged. If set to false, only the
	// initial health check failure event will be logged.
	// The default value is false.
	AlwaysLogHealthCheckFailures bool `protobuf:"varint,19,opt,name=always_log_health_check_failures,json=alwaysLogHealthCheckFailures,proto3" json:"always_log_health_check_failures,omitempty"`
	// This allows overriding the cluster TLS settings, just for health check connections.
	TlsOptions           *HealthCheck_TlsOptions `protobuf:"bytes,21,opt,name=tls_options,json=tlsOptions,proto3" json:"tls_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HealthCheck) Reset()         { *m = HealthCheck{} }
func (m *HealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck) ProtoMessage()    {}
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0}
}

func (m *HealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck.Merge(m, src)
}
func (m *HealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck.Size(m)
}
func (m *HealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck proto.InternalMessageInfo

func (m *HealthCheck) GetTimeout() *duration.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *HealthCheck) GetInterval() *duration.Duration {
	if m != nil {
		return m.Interval
	}
	return nil
}

func (m *HealthCheck) GetInitialJitter() *duration.Duration {
	if m != nil {
		return m.InitialJitter
	}
	return nil
}

func (m *HealthCheck) GetIntervalJitter() *duration.Duration {
	if m != nil {
		return m.IntervalJitter
	}
	return nil
}

func (m *HealthCheck) GetIntervalJitterPercent() uint32 {
	if m != nil {
		return m.IntervalJitterPercent
	}
	return 0
}

func (m *HealthCheck) GetUnhealthyThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return nil
}

func (m *HealthCheck) GetHealthyThreshold() *wrappers.UInt32Value {
	if m != nil {
		return m.HealthyThreshold
	}
	return nil
}

func (m *HealthCheck) GetAltPort() *wrappers.UInt32Value {
	if m != nil {
		return m.AltPort
	}
	return nil
}

func (m *HealthCheck) GetReuseConnection() *wrappers.BoolValue {
	if m != nil {
		return m.ReuseConnection
	}
	return nil
}

type isHealthCheck_HealthChecker interface {
	isHealthCheck_HealthChecker()
}

type HealthCheck_HttpHealthCheck_ struct {
	HttpHealthCheck *HealthCheck_HttpHealthCheck `protobuf:"bytes,8,opt,name=http_health_check,json=httpHealthCheck,proto3,oneof"`
}

type HealthCheck_TcpHealthCheck_ struct {
	TcpHealthCheck *HealthCheck_TcpHealthCheck `protobuf:"bytes,9,opt,name=tcp_health_check,json=tcpHealthCheck,proto3,oneof"`
}

type HealthCheck_GrpcHealthCheck_ struct {
	GrpcHealthCheck *HealthCheck_GrpcHealthCheck `protobuf:"bytes,11,opt,name=grpc_health_check,json=grpcHealthCheck,proto3,oneof"`
}

type HealthCheck_CustomHealthCheck_ struct {
	CustomHealthCheck *HealthCheck_CustomHealthCheck `protobuf:"bytes,13,opt,name=custom_health_check,json=customHealthCheck,proto3,oneof"`
}

func (*HealthCheck_HttpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_TcpHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_GrpcHealthCheck_) isHealthCheck_HealthChecker() {}

func (*HealthCheck_CustomHealthCheck_) isHealthCheck_HealthChecker() {}

func (m *HealthCheck) GetHealthChecker() isHealthCheck_HealthChecker {
	if m != nil {
		return m.HealthChecker
	}
	return nil
}

func (m *HealthCheck) GetHttpHealthCheck() *HealthCheck_HttpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_HttpHealthCheck_); ok {
		return x.HttpHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetTcpHealthCheck() *HealthCheck_TcpHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_TcpHealthCheck_); ok {
		return x.TcpHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetGrpcHealthCheck() *HealthCheck_GrpcHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_GrpcHealthCheck_); ok {
		return x.GrpcHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetCustomHealthCheck() *HealthCheck_CustomHealthCheck {
	if x, ok := m.GetHealthChecker().(*HealthCheck_CustomHealthCheck_); ok {
		return x.CustomHealthCheck
	}
	return nil
}

func (m *HealthCheck) GetNoTrafficInterval() *duration.Duration {
	if m != nil {
		return m.NoTrafficInterval
	}
	return nil
}

func (m *HealthCheck) GetUnhealthyInterval() *duration.Duration {
	if m != nil {
		return m.UnhealthyInterval
	}
	return nil
}

func (m *HealthCheck) GetUnhealthyEdgeInterval() *duration.Duration {
	if m != nil {
		return m.UnhealthyEdgeInterval
	}
	return nil
}

func (m *HealthCheck) GetHealthyEdgeInterval() *duration.Duration {
	if m != nil {
		return m.HealthyEdgeInterval
	}
	return nil
}

func (m *HealthCheck) GetEventLogPath() string {
	if m != nil {
		return m.EventLogPath
	}
	return ""
}

func (m *HealthCheck) GetAlwaysLogHealthCheckFailures() bool {
	if m != nil {
		return m.AlwaysLogHealthCheckFailures
	}
	return false
}

func (m *HealthCheck) GetTlsOptions() *HealthCheck_TlsOptions {
	if m != nil {
		return m.TlsOptions
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_HttpHealthCheck_)(nil),
		(*HealthCheck_TcpHealthCheck_)(nil),
		(*HealthCheck_GrpcHealthCheck_)(nil),
		(*HealthCheck_CustomHealthCheck_)(nil),
	}
}

// Describes the encoding of the payload bytes in the payload.
type HealthCheck_Payload struct {
	// Types that are valid to be assigned to Payload:
	//	*HealthCheck_Payload_Text
	//	*HealthCheck_Payload_Binary
	Payload              isHealthCheck_Payload_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *HealthCheck_Payload) Reset()         { *m = HealthCheck_Payload{} }
func (m *HealthCheck_Payload) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_Payload) ProtoMessage()    {}
func (*HealthCheck_Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 0}
}

func (m *HealthCheck_Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_Payload.Unmarshal(m, b)
}
func (m *HealthCheck_Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_Payload.Marshal(b, m, deterministic)
}
func (m *HealthCheck_Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_Payload.Merge(m, src)
}
func (m *HealthCheck_Payload) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_Payload.Size(m)
}
func (m *HealthCheck_Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_Payload proto.InternalMessageInfo

type isHealthCheck_Payload_Payload interface {
	isHealthCheck_Payload_Payload()
}

type HealthCheck_Payload_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type HealthCheck_Payload_Binary struct {
	Binary []byte `protobuf:"bytes,2,opt,name=binary,proto3,oneof"`
}

func (*HealthCheck_Payload_Text) isHealthCheck_Payload_Payload() {}

func (*HealthCheck_Payload_Binary) isHealthCheck_Payload_Payload() {}

func (m *HealthCheck_Payload) GetPayload() isHealthCheck_Payload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *HealthCheck_Payload) GetText() string {
	if x, ok := m.GetPayload().(*HealthCheck_Payload_Text); ok {
		return x.Text
	}
	return ""
}

func (m *HealthCheck_Payload) GetBinary() []byte {
	if x, ok := m.GetPayload().(*HealthCheck_Payload_Binary); ok {
		return x.Binary
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck_Payload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_Payload_Text)(nil),
		(*HealthCheck_Payload_Binary)(nil),
	}
}

// [#next-free-field: 12]
type HealthCheck_HttpHealthCheck struct {
	// The value of the host header in the HTTP health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Specifies the HTTP path that will be requested during health checking. For example
	// */healthcheck*.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// [#not-implemented-hide:] HTTP specific payload.
	Send *HealthCheck_Payload `protobuf:"bytes,3,opt,name=send,proto3" json:"send,omitempty"`
	// [#not-implemented-hide:] HTTP specific response.
	Receive *HealthCheck_Payload `protobuf:"bytes,4,opt,name=receive,proto3" json:"receive,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request that is sent to the
	// health checked cluster. For more information, including details on header value syntax, see
	// the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each request that is sent to the
	// health checked cluster.
	RequestHeadersToRemove []string `protobuf:"bytes,8,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// Specifies a list of HTTP response statuses considered healthy. If provided, replaces default
	// 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open
	// semantics of :ref:`Int64Range <envoy_api_msg_type.v3.Int64Range>`. The start and end of each
	// range are required. Only statuses in the range [100, 600) are allowed.
	ExpectedStatuses []*v3.Int64Range `protobuf:"bytes,9,rep,name=expected_statuses,json=expectedStatuses,proto3" json:"expected_statuses,omitempty"`
	// Use specified application protocol for health checks.
	CodecClientType v3.CodecClientType `protobuf:"varint,10,opt,name=codec_client_type,json=codecClientType,proto3,enum=envoy.type.v3.CodecClientType" json:"codec_client_type,omitempty"`
	// An optional service name parameter which is used to validate the identity of
	// the health checked cluster using a :ref:`StringMatcher
	// <envoy_api_msg_type.matcher.v3.StringMatcher>`. See the :ref:`architecture overview
	// <arch_overview_health_checking_identity>` for more information.
	ServiceNameMatcher   *v31.StringMatcher `protobuf:"bytes,11,opt,name=service_name_matcher,json=serviceNameMatcher,proto3" json:"service_name_matcher,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HealthCheck_HttpHealthCheck) Reset()         { *m = HealthCheck_HttpHealthCheck{} }
func (m *HealthCheck_HttpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_HttpHealthCheck) ProtoMessage()    {}
func (*HealthCheck_HttpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 1}
}

func (m *HealthCheck_HttpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_HttpHealthCheck.Merge(m, src)
}
func (m *HealthCheck_HttpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_HttpHealthCheck.Size(m)
}
func (m *HealthCheck_HttpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_HttpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_HttpHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_HttpHealthCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *HealthCheck_HttpHealthCheck) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HealthCheck_HttpHealthCheck) GetSend() *HealthCheck_Payload {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetReceive() *HealthCheck_Payload {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetExpectedStatuses() []*v3.Int64Range {
	if m != nil {
		return m.ExpectedStatuses
	}
	return nil
}

func (m *HealthCheck_HttpHealthCheck) GetCodecClientType() v3.CodecClientType {
	if m != nil {
		return m.CodecClientType
	}
	return v3.CodecClientType_HTTP1
}

func (m *HealthCheck_HttpHealthCheck) GetServiceNameMatcher() *v31.StringMatcher {
	if m != nil {
		return m.ServiceNameMatcher
	}
	return nil
}

type HealthCheck_TcpHealthCheck struct {
	// Empty payloads imply a connect-only health check.
	Send *HealthCheck_Payload `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	// When checking the response, “fuzzy” matching is performed such that each
	// binary block must be found, and in the order specified, but not
	// necessarily contiguous.
	Receive              []*HealthCheck_Payload `protobuf:"bytes,2,rep,name=receive,proto3" json:"receive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *HealthCheck_TcpHealthCheck) Reset()         { *m = HealthCheck_TcpHealthCheck{} }
func (m *HealthCheck_TcpHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_TcpHealthCheck) ProtoMessage()    {}
func (*HealthCheck_TcpHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 2}
}

func (m *HealthCheck_TcpHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_TcpHealthCheck.Merge(m, src)
}
func (m *HealthCheck_TcpHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_TcpHealthCheck.Size(m)
}
func (m *HealthCheck_TcpHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_TcpHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_TcpHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_TcpHealthCheck) GetSend() *HealthCheck_Payload {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *HealthCheck_TcpHealthCheck) GetReceive() []*HealthCheck_Payload {
	if m != nil {
		return m.Receive
	}
	return nil
}

type HealthCheck_RedisHealthCheck struct {
	// If set, optionally perform ``EXISTS <key>`` instead of ``PING``. A return value
	// from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
	// than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
	// by setting the specified key to any value and waiting for traffic to drain.
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_RedisHealthCheck) Reset()         { *m = HealthCheck_RedisHealthCheck{} }
func (m *HealthCheck_RedisHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_RedisHealthCheck) ProtoMessage()    {}
func (*HealthCheck_RedisHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 3}
}

func (m *HealthCheck_RedisHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_RedisHealthCheck.Merge(m, src)
}
func (m *HealthCheck_RedisHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_RedisHealthCheck.Size(m)
}
func (m *HealthCheck_RedisHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_RedisHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_RedisHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_RedisHealthCheck) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// `grpc.health.v1.Health
// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto>`_-based
// healthcheck. See `gRPC doc <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_
// for details.
type HealthCheck_GrpcHealthCheck struct {
	// An optional service name parameter which will be sent to gRPC service in
	// `grpc.health.v1.HealthCheckRequest
	// <https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto#L20>`_.
	// message. See `gRPC health-checking overview
	// <https://github.com/grpc/grpc/blob/master/doc/health-checking.md>`_ for more information.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// The value of the :authority header in the gRPC health check request. If
	// left empty (default value), the name of the cluster this health check is associated
	// with will be used.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_GrpcHealthCheck) Reset()         { *m = HealthCheck_GrpcHealthCheck{} }
func (m *HealthCheck_GrpcHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_GrpcHealthCheck) ProtoMessage()    {}
func (*HealthCheck_GrpcHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 4}
}

func (m *HealthCheck_GrpcHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_GrpcHealthCheck.Merge(m, src)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_GrpcHealthCheck.Size(m)
}
func (m *HealthCheck_GrpcHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_GrpcHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_GrpcHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_GrpcHealthCheck) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *HealthCheck_GrpcHealthCheck) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// Custom health check.
type HealthCheck_CustomHealthCheck struct {
	// The registered name of the custom health checker.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A custom health checker specific configuration which depends on the custom health checker
	// being instantiated. See :api:`envoy/config/health_checker` for reference.
	//
	// Types that are valid to be assigned to ConfigType:
	//	*HealthCheck_CustomHealthCheck_TypedConfig
	ConfigType           isHealthCheck_CustomHealthCheck_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *HealthCheck_CustomHealthCheck) Reset()         { *m = HealthCheck_CustomHealthCheck{} }
func (m *HealthCheck_CustomHealthCheck) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_CustomHealthCheck) ProtoMessage()    {}
func (*HealthCheck_CustomHealthCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 5}
}

func (m *HealthCheck_CustomHealthCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Unmarshal(m, b)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Marshal(b, m, deterministic)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_CustomHealthCheck.Merge(m, src)
}
func (m *HealthCheck_CustomHealthCheck) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_CustomHealthCheck.Size(m)
}
func (m *HealthCheck_CustomHealthCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_CustomHealthCheck.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_CustomHealthCheck proto.InternalMessageInfo

func (m *HealthCheck_CustomHealthCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isHealthCheck_CustomHealthCheck_ConfigType interface {
	isHealthCheck_CustomHealthCheck_ConfigType()
}

type HealthCheck_CustomHealthCheck_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*HealthCheck_CustomHealthCheck_TypedConfig) isHealthCheck_CustomHealthCheck_ConfigType() {}

func (m *HealthCheck_CustomHealthCheck) GetConfigType() isHealthCheck_CustomHealthCheck_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *HealthCheck_CustomHealthCheck) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*HealthCheck_CustomHealthCheck_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HealthCheck_CustomHealthCheck) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HealthCheck_CustomHealthCheck_TypedConfig)(nil),
	}
}

// Health checks occur over the transport socket specified for the cluster. This implies that if a
// cluster is using a TLS-enabled transport socket, the health check will also occur over TLS.
//
// This allows overriding the cluster TLS settings, just for health check connections.
type HealthCheck_TlsOptions struct {
	// Specifies the ALPN protocols for health check connections. This is useful if the
	// corresponding upstream is using ALPN-based :ref:`FilterChainMatch
	// <envoy_api_msg_config.listener.v3.FilterChainMatch>` along with different protocols for health checks
	// versus data connections. If empty, no ALPN protocols will be set on health check connections.
	AlpnProtocols        []string `protobuf:"bytes,1,rep,name=alpn_protocols,json=alpnProtocols,proto3" json:"alpn_protocols,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheck_TlsOptions) Reset()         { *m = HealthCheck_TlsOptions{} }
func (m *HealthCheck_TlsOptions) String() string { return proto.CompactTextString(m) }
func (*HealthCheck_TlsOptions) ProtoMessage()    {}
func (*HealthCheck_TlsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_2ba40dc0efbf9537, []int{0, 6}
}

func (m *HealthCheck_TlsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheck_TlsOptions.Unmarshal(m, b)
}
func (m *HealthCheck_TlsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheck_TlsOptions.Marshal(b, m, deterministic)
}
func (m *HealthCheck_TlsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheck_TlsOptions.Merge(m, src)
}
func (m *HealthCheck_TlsOptions) XXX_Size() int {
	return xxx_messageInfo_HealthCheck_TlsOptions.Size(m)
}
func (m *HealthCheck_TlsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheck_TlsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheck_TlsOptions proto.InternalMessageInfo

func (m *HealthCheck_TlsOptions) GetAlpnProtocols() []string {
	if m != nil {
		return m.AlpnProtocols
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.core.v3.HealthStatus", HealthStatus_name, HealthStatus_value)
	proto.RegisterType((*HealthCheck)(nil), "envoy.config.core.v3.HealthCheck")
	proto.RegisterType((*HealthCheck_Payload)(nil), "envoy.config.core.v3.HealthCheck.Payload")
	proto.RegisterType((*HealthCheck_HttpHealthCheck)(nil), "envoy.config.core.v3.HealthCheck.HttpHealthCheck")
	proto.RegisterType((*HealthCheck_TcpHealthCheck)(nil), "envoy.config.core.v3.HealthCheck.TcpHealthCheck")
	proto.RegisterType((*HealthCheck_RedisHealthCheck)(nil), "envoy.config.core.v3.HealthCheck.RedisHealthCheck")
	proto.RegisterType((*HealthCheck_GrpcHealthCheck)(nil), "envoy.config.core.v3.HealthCheck.GrpcHealthCheck")
	proto.RegisterType((*HealthCheck_CustomHealthCheck)(nil), "envoy.config.core.v3.HealthCheck.CustomHealthCheck")
	proto.RegisterType((*HealthCheck_TlsOptions)(nil), "envoy.config.core.v3.HealthCheck.TlsOptions")
}

func init() {
	proto.RegisterFile("envoy/config/core/v3/health_check.proto", fileDescriptor_2ba40dc0efbf9537)
}

var fileDescriptor_2ba40dc0efbf9537 = []byte{
	// 1451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x41, 0x53, 0x1b, 0xc9,
	0x15, 0x66, 0x24, 0x81, 0xa4, 0x27, 0x10, 0xa3, 0x06, 0xec, 0x41, 0xc1, 0xb6, 0xec, 0xd8, 0x65,
	0x85, 0x72, 0x24, 0x1b, 0x1c, 0x27, 0xa6, 0x2a, 0x95, 0x30, 0x80, 0x2d, 0x88, 0x8d, 0xa9, 0x46,
	0xd8, 0x95, 0x72, 0xaa, 0x26, 0xcd, 0x4c, 0x23, 0x4d, 0x3c, 0x4c, 0x4f, 0x7a, 0x5a, 0xb2, 0x75,
	0x4b, 0x72, 0x72, 0xe5, 0x98, 0x63, 0x7e, 0x82, 0xff, 0xc2, 0x5e, 0xf6, 0xb2, 0x87, 0xfd, 0x27,
	0xfb, 0x13, 0xb6, 0x38, 0x6d, 0x75, 0xcf, 0x48, 0x1a, 0x09, 0x8c, 0x60, 0xf7, 0x36, 0xfd, 0xde,
	0xfb, 0xbe, 0xf7, 0x75, 0xf7, 0xeb, 0xf7, 0x06, 0x1e, 0x52, 0xbf, 0xcb, 0x7a, 0x75, 0x9b, 0xf9,
	0x27, 0x6e, 0xab, 0x6e, 0x33, 0x4e, 0xeb, 0xdd, 0xf5, 0x7a, 0x9b, 0x12, 0x4f, 0xb4, 0x2d, 0xbb,
	0x4d, 0xed, 0x0f, 0xb5, 0x80, 0x33, 0xc1, 0xd0, 0xa2, 0x0a, 0xac, 0x45, 0x81, 0x35, 0x19, 0x58,
	0xeb, 0xae, 0x97, 0xef, 0x5c, 0x08, 0x3f, 0x26, 0x21, 0x8d, 0x60, 0xe5, 0x7b, 0x51, 0x80, 0xe8,
	0x05, 0xb4, 0x7e, 0x4a, 0x84, 0xdd, 0xa6, 0x5c, 0x46, 0x84, 0x82, 0xbb, 0x7e, 0x2b, 0x8e, 0x31,
	0x12, 0x31, 0x32, 0xb9, 0x10, 0x41, 0xec, 0x59, 0x1e, 0xf5, 0x70, 0xe2, 0xb7, 0xfa, 0xc4, 0xcb,
	0x2d, 0xc6, 0x5a, 0x1e, 0xad, 0xab, 0xd5, 0x71, 0xe7, 0xa4, 0x4e, 0xfc, 0x5e, 0xec, 0xba, 0x3d,
	0xee, 0x72, 0x3a, 0x9c, 0x08, 0x97, 0xf9, 0xb1, 0x7f, 0x65, 0xdc, 0x1f, 0x0a, 0xde, 0xb1, 0xc5,
	0xd7, 0xd0, 0x1f, 0x39, 0x09, 0x02, 0xca, 0xc3, 0xd8, 0x7f, 0xb7, 0xe3, 0x04, 0xa4, 0x4e, 0x7c,
	0x9f, 0x09, 0x45, 0x1a, 0xd6, 0xbb, 0x94, 0x87, 0x2e, 0xf3, 0x87, 0x1b, 0xfa, 0x75, 0x24, 0x3b,
	0x19, 0xe3, 0xd0, 0x80, 0x53, 0x3b, 0xa9, 0xe2, 0x66, 0x97, 0x78, 0xae, 0x43, 0x04, 0xad, 0xf7,
	0x3f, 0x22, 0xc7, 0xbd, 0x7f, 0x2f, 0x43, 0xa1, 0xa1, 0x2e, 0x60, 0x4b, 0x9e, 0x3f, 0xfa, 0x13,
	0x64, 0x85, 0x7b, 0x4a, 0x59, 0x47, 0x18, 0x5a, 0x45, 0xab, 0x16, 0xd6, 0x96, 0x6b, 0x91, 0xc4,
	0x5a, 0x5f, 0x62, 0x6d, 0x3b, 0xde, 0xa0, 0x09, 0x67, 0x66, 0xf6, 0x8b, 0x96, 0xc9, 0x69, 0xab,
	0x53, 0xb8, 0x8f, 0x42, 0x9b, 0x90, 0x73, 0x7d, 0x41, 0x79, 0x97, 0x78, 0x46, 0xea, 0x3a, 0x0c,
	0x03, 0x18, 0xfa, 0x33, 0x14, 0x5d, 0xdf, 0x15, 0x2e, 0xf1, 0xac, 0x7f, 0xb8, 0x42, 0x50, 0x6e,
	0x2c, 0x4e, 0x20, 0xc2, 0x73, 0x31, 0x60, 0x4f, 0xc5, 0x23, 0x13, 0xe6, 0xfb, 0x6c, 0x7d, 0x8a,
	0xf4, 0x24, 0x8a, 0x62, 0x1f, 0x11, 0x73, 0x3c, 0x83, 0x9b, 0x63, 0x1c, 0x56, 0x40, 0xb9, 0x4d,
	0x7d, 0x61, 0xa0, 0x8a, 0x56, 0x9d, 0xc3, 0x4b, 0xa3, 0x80, 0x83, 0xc8, 0x89, 0xde, 0xc1, 0x42,
	0xc7, 0x8f, 0x6a, 0xba, 0x67, 0x89, 0x36, 0xa7, 0x61, 0x9b, 0x79, 0x8e, 0x91, 0x51, 0xf9, 0x57,
	0xce, 0xe5, 0x3f, 0xda, 0xf5, 0xc5, 0xfa, 0xda, 0x5b, 0xe2, 0x75, 0xa8, 0x99, 0x3b, 0x33, 0xa7,
	0xff, 0xab, 0xa5, 0x74, 0x0d, 0xa3, 0x01, 0x45, 0xb3, 0xcf, 0x80, 0x0e, 0xa1, 0x74, 0x9e, 0x76,
	0xfa, 0x5a, 0xb4, 0xfa, 0x39, 0xd2, 0xdf, 0x43, 0x8e, 0x78, 0xc2, 0x0a, 0x18, 0x17, 0xc6, 0xcc,
	0x64, 0x2e, 0x9c, 0x25, 0x9e, 0x38, 0x60, 0x5c, 0xa0, 0x1d, 0xd0, 0x39, 0xed, 0x84, 0xd4, 0xb2,
	0x99, 0xef, 0x53, 0x5b, 0x1e, 0xa1, 0x91, 0x55, 0x04, 0xe5, 0x73, 0x04, 0x26, 0x63, 0x5e, 0x04,
	0x9f, 0x57, 0x98, 0xad, 0x01, 0x04, 0x59, 0x50, 0x92, 0x4f, 0xd0, 0x4a, 0x36, 0x01, 0x23, 0xa7,
	0x78, 0x9e, 0xd4, 0x2e, 0xea, 0x02, 0xb5, 0x44, 0xb5, 0xd6, 0x1a, 0x42, 0x04, 0x89, 0x75, 0x63,
	0x0a, 0xcf, 0xb7, 0x47, 0x4d, 0xe8, 0x6f, 0xa0, 0x0b, 0x7b, 0x8c, 0x3f, 0xaf, 0xf8, 0x1f, 0x4f,
	0xe6, 0x6f, 0xda, 0x63, 0xf4, 0x45, 0x31, 0x62, 0x91, 0xf2, 0x5b, 0x3c, 0xb0, 0x47, 0xe9, 0x0b,
	0x57, 0x95, 0xff, 0x92, 0x07, 0xf6, 0x98, 0xfc, 0xd6, 0xa8, 0x09, 0x51, 0x58, 0xb0, 0x3b, 0xa1,
	0x60, 0xa7, 0xa3, 0x29, 0xe6, 0x54, 0x8a, 0xf5, 0xc9, 0x29, 0xb6, 0x14, 0x78, 0x34, 0x49, 0xc9,
	0x1e, 0x37, 0xa2, 0x43, 0x58, 0xf0, 0x99, 0x25, 0x38, 0x39, 0x39, 0x71, 0x6d, 0x6b, 0xf0, 0x80,
	0x67, 0x27, 0x3d, 0x60, 0x59, 0x5a, 0x5f, 0xb4, 0xd4, 0xea, 0x14, 0x2e, 0xf9, 0xac, 0x19, 0xc1,
	0x77, 0xfb, 0xef, 0x18, 0xc3, 0xb0, 0x8c, 0x87, 0x9c, 0xc5, 0x6b, 0x70, 0x0e, 0xe0, 0x03, 0xce,
	0xf7, 0x70, 0x73, 0xc8, 0x49, 0x9d, 0x16, 0x1d, 0x12, 0xcf, 0x5f, 0x9d, 0x78, 0x69, 0xc0, 0xb1,
	0xe3, 0xb4, 0xe8, 0x80, 0xfc, 0x1d, 0x2c, 0x5d, 0x4c, 0xad, 0x5f, 0x9d, 0x7a, 0xe1, 0x22, 0xe2,
	0xfb, 0x50, 0xa4, 0x5d, 0xea, 0x0b, 0xcb, 0x63, 0x2d, 0x2b, 0x20, 0xa2, 0x6d, 0x94, 0x2a, 0x5a,
	0x35, 0x8f, 0x67, 0x95, 0xf5, 0x15, 0x6b, 0x1d, 0x10, 0xd1, 0x46, 0x2f, 0xa0, 0x42, 0xbc, 0x8f,
	0xa4, 0x17, 0xaa, 0xb0, 0xe4, 0x7d, 0x5b, 0x27, 0xc4, 0xf5, 0x3a, 0x9c, 0x86, 0xc6, 0x42, 0x45,
	0xab, 0xe6, 0xf0, 0x4a, 0x14, 0xf7, 0x8a, 0xb5, 0x12, 0x97, 0xf8, 0x22, 0x8e, 0x41, 0xaf, 0xa1,
	0x20, 0xbc, 0xd0, 0x62, 0x81, 0x9a, 0x06, 0xc6, 0x92, 0x12, 0xff, 0xe8, 0x0a, 0xd5, 0xee, 0x85,
	0x6f, 0x22, 0x0c, 0x06, 0x31, 0xf8, 0x2e, 0xff, 0x4b, 0x83, 0xec, 0x01, 0xe9, 0x79, 0x8c, 0x38,
	0xe8, 0x16, 0x64, 0x04, 0xfd, 0x14, 0xcd, 0x86, 0xbc, 0x99, 0x3d, 0x33, 0x33, 0x3c, 0x55, 0xd1,
	0x1a, 0x53, 0x58, 0x99, 0x91, 0x01, 0x33, 0xc7, 0xae, 0x4f, 0x78, 0x4f, 0xb5, 0xfe, 0xd9, 0xc6,
	0x14, 0x8e, 0xd7, 0x1b, 0x8f, 0xfe, 0xff, 0xdd, 0xe7, 0xdb, 0x0f, 0xe1, 0x41, 0x24, 0x82, 0x04,
	0x6e, 0xad, 0xbb, 0x16, 0x89, 0x48, 0x2a, 0x88, 0xd3, 0x98, 0x45, 0xc8, 0x06, 0x71, 0xc6, 0xf4,
	0x8f, 0xa6, 0x56, 0xfe, 0x66, 0x1a, 0xe6, 0xc7, 0xde, 0x3a, 0x42, 0x90, 0x69, 0xb3, 0x30, 0x96,
	0x82, 0xd5, 0x37, 0xfa, 0x15, 0x64, 0xd4, 0xe9, 0xa6, 0x46, 0xe4, 0x61, 0x65, 0x44, 0x7f, 0x84,
	0x4c, 0x48, 0x7d, 0x27, 0x9e, 0x04, 0xbf, 0x99, 0x7c, 0x1e, 0xb1, 0x1a, 0xac, 0x60, 0x68, 0x0b,
	0xb2, 0x9c, 0xda, 0xd4, 0xed, 0xd2, 0xb8, 0x97, 0x5f, 0x83, 0xa1, 0x8f, 0x44, 0x2d, 0xb8, 0xc1,
	0xe9, 0x3f, 0x3b, 0x34, 0x14, 0xf2, 0x7e, 0x1d, 0xca, 0x43, 0x4b, 0x30, 0x8b, 0x38, 0x8e, 0x31,
	0x53, 0x49, 0x57, 0x0b, 0x6b, 0x0f, 0xbf, 0xca, 0xe9, 0x50, 0xae, 0x5a, 0x68, 0x74, 0x2b, 0x66,
	0xfe, 0xcc, 0x9c, 0xf9, 0x9f, 0x96, 0xd6, 0x7f, 0xc8, 0xe2, 0x85, 0x98, 0x31, 0x0a, 0x0a, 0x9b,
	0x6c, 0xd3, 0x71, 0xd0, 0x73, 0x58, 0xbe, 0x20, 0x11, 0xa7, 0xa7, 0xac, 0x4b, 0x8d, 0x5c, 0x25,
	0x5d, 0xcd, 0xe3, 0x1b, 0xe3, 0x38, 0xac, 0xbc, 0xe8, 0x05, 0x94, 0xe8, 0xa7, 0x80, 0xda, 0x82,
	0x3a, 0x56, 0x28, 0x88, 0xe8, 0x84, 0x34, 0x34, 0xf2, 0x4a, 0xde, 0x72, 0x2c, 0x4f, 0xfe, 0x23,
	0x49, 0x5d, 0xbb, 0xbe, 0x78, 0xf6, 0x14, 0xcb, 0x1f, 0x25, 0xac, 0xf7, 0x31, 0x87, 0x31, 0x04,
	0x35, 0xa1, 0x64, 0x33, 0x87, 0xda, 0x96, 0xed, 0xb9, 0xb2, 0xf6, 0x25, 0xc8, 0x80, 0x8a, 0x56,
	0x2d, 0xae, 0xdd, 0x1e, 0xe3, 0xd9, 0x92, 0x71, 0x5b, 0x2a, 0xac, 0xd9, 0x0b, 0xa2, 0x89, 0xf5,
	0x1f, 0x35, 0xb1, 0xe6, 0xed, 0x51, 0x17, 0x7a, 0x0b, 0x8b, 0x21, 0xe5, 0x5d, 0xd7, 0xa6, 0x96,
	0x4f, 0x4e, 0xa9, 0x15, 0xff, 0xe7, 0xc5, 0x4d, 0xf7, 0x7e, 0x92, 0x38, 0x76, 0xc9, 0x04, 0x87,
	0xea, 0x17, 0xf0, 0x75, 0x64, 0xc0, 0x28, 0x66, 0xd8, 0x27, 0xa7, 0x34, 0xb6, 0x6d, 0x3c, 0x95,
	0x05, 0x5a, 0x87, 0xdf, 0x5e, 0x5e, 0xa0, 0x63, 0x45, 0xb8, 0x97, 0xc9, 0x4d, 0xeb, 0x33, 0x7b,
	0x99, 0x5c, 0x56, 0xcf, 0xe1, 0xd9, 0xa4, 0x2e, 0x9c, 0x97, 0xb3, 0x51, 0x0e, 0xa3, 0xb5, 0xf2,
	0xf7, 0x1a, 0x14, 0x47, 0x27, 0xc9, 0xa0, 0x16, 0xb5, 0x5f, 0x5c, 0x8b, 0x29, 0x75, 0x31, 0x3f,
	0xa3, 0x16, 0x37, 0xd6, 0xe5, 0x8e, 0x6b, 0xf0, 0xe8, 0xf2, 0x1d, 0x8f, 0x0a, 0x2f, 0xbf, 0x07,
	0x1d, 0x53, 0xc7, 0x0d, 0x93, 0x9b, 0xd1, 0x21, 0xfd, 0x81, 0xf6, 0xe2, 0x87, 0x28, 0x3f, 0x37,
	0x7e, 0x27, 0xa9, 0x1f, 0x43, 0xed, 0x72, 0xea, 0x71, 0xa2, 0xf2, 0x67, 0x0d, 0xe6, 0xc7, 0x66,
	0x22, 0xba, 0x0b, 0x23, 0xe7, 0x1a, 0x67, 0x29, 0x24, 0x6e, 0x10, 0xad, 0x40, 0x9e, 0x74, 0x44,
	0x9b, 0x71, 0x57, 0x44, 0x8d, 0x27, 0x8f, 0x87, 0x86, 0x2b, 0x5e, 0xec, 0x58, 0xda, 0xf2, 0xb7,
	0x1a, 0x94, 0xce, 0xcd, 0x4e, 0xd9, 0x5f, 0x86, 0x22, 0x12, 0xfd, 0x45, 0x1a, 0xd1, 0x73, 0x98,
	0x95, 0x65, 0xe7, 0x58, 0xd1, 0x25, 0xc4, 0x7d, 0x66, 0xf1, 0xdc, 0xd0, 0xd8, 0xf4, 0x7b, 0x8d,
	0x29, 0x5c, 0x50, 0xb1, 0x5b, 0x2a, 0x74, 0xe3, 0x99, 0xd4, 0xf8, 0x04, 0xea, 0x97, 0x6b, 0x3c,
	0xa7, 0xc7, 0x9c, 0x83, 0x42, 0x94, 0x4c, 0x3d, 0xae, 0xbd, 0x4c, 0x2e, 0xa5, 0xa7, 0xf1, 0x4c,
	0x64, 0x2a, 0x3b, 0x00, 0xc3, 0x8e, 0x8e, 0x1e, 0x40, 0x91, 0x78, 0x81, 0x6f, 0x29, 0x19, 0x36,
	0xf3, 0x42, 0x43, 0x53, 0x5d, 0x60, 0x4e, 0x5a, 0x0f, 0xfa, 0xc6, 0x8d, 0xba, 0x54, 0xb2, 0x0a,
	0xd5, 0x09, 0x45, 0x31, 0xe0, 0xdd, 0xb8, 0x2f, 0x01, 0x77, 0xe0, 0xd6, 0xa5, 0x00, 0x73, 0x09,
	0x8a, 0xc9, 0x79, 0x46, 0xb9, 0xea, 0xeb, 0x7b, 0x99, 0x1c, 0xe8, 0x85, 0xd5, 0xbf, 0xc3, 0x6c,
	0x14, 0x1b, 0xb5, 0x0e, 0x54, 0x80, 0xec, 0xd1, 0xfe, 0x5f, 0xf6, 0xdf, 0xbc, 0xdb, 0xd7, 0xa7,
	0xe4, 0xa2, 0xb1, 0xb3, 0xf9, 0xaa, 0xd9, 0xf8, 0xab, 0xae, 0xa1, 0x39, 0xc8, 0x1f, 0xed, 0xf7,
	0x97, 0x29, 0x34, 0x0b, 0xb9, 0x6d, 0xbc, 0xb9, 0xbb, 0xbf, 0xbb, 0xff, 0x52, 0x4f, 0xcb, 0xc8,
	0xe6, 0xee, 0xeb, 0x9d, 0x37, 0x47, 0x4d, 0x3d, 0xa3, 0x5c, 0x3b, 0x2f, 0xf1, 0xe6, 0xf6, 0xce,
	0xb6, 0x3e, 0x6d, 0xfe, 0x01, 0xee, 0xb9, 0x2c, 0xaa, 0xc6, 0x80, 0xb3, 0x4f, 0xbd, 0x0b, 0x5f,
	0x8b, 0xa9, 0x27, 0x14, 0xab, 0x13, 0x39, 0xd0, 0x8e, 0x67, 0xd4, 0x79, 0xad, 0xff, 0x14, 0x00,
	0x00, 0xff, 0xff, 0x0e, 0xda, 0x2a, 0xf6, 0xbb, 0x0e, 0x00, 0x00,
}
