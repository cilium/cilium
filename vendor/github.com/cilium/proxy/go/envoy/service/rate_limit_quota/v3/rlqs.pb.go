// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v4.23.1
// source: envoy/service/rate_limit_quota/v3/rlqs.proto

package rate_limit_quotav3

import (
	context "context"
	v3 "github.com/cilium/proxy/go/envoy/type/v3"
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type RateLimitQuotaUsageReports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All quota requests must specify the domain. This enables sharing the quota
	// server between different applications without fear of overlap.
	// E.g., "envoy".
	//
	// Should only be provided in the first report, all subsequent messages on the same
	// stream are considered to be in the same domain. In case the domain needs to be
	// changes, close the stream, and reopen a new one with the different domain.
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A list of quota usage reports. The list is processed by the RLQS server in the same order
	// it's provided by the client.
	BucketQuotaUsages []*RateLimitQuotaUsageReports_BucketQuotaUsage `protobuf:"bytes,2,rep,name=bucket_quota_usages,json=bucketQuotaUsages,proto3" json:"bucket_quota_usages,omitempty"`
}

func (x *RateLimitQuotaUsageReports) Reset() {
	*x = RateLimitQuotaUsageReports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaUsageReports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaUsageReports) ProtoMessage() {}

func (x *RateLimitQuotaUsageReports) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaUsageReports.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaUsageReports) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{0}
}

func (x *RateLimitQuotaUsageReports) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *RateLimitQuotaUsageReports) GetBucketQuotaUsages() []*RateLimitQuotaUsageReports_BucketQuotaUsage {
	if x != nil {
		return x.BucketQuotaUsages
	}
	return nil
}

type RateLimitQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ordered list of actions to be applied to the buckets. The actions are applied in the
	// given order, from top to bottom.
	BucketAction []*RateLimitQuotaResponse_BucketAction `protobuf:"bytes,1,rep,name=bucket_action,json=bucketAction,proto3" json:"bucket_action,omitempty"`
}

func (x *RateLimitQuotaResponse) Reset() {
	*x = RateLimitQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse) ProtoMessage() {}

func (x *RateLimitQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1}
}

func (x *RateLimitQuotaResponse) GetBucketAction() []*RateLimitQuotaResponse_BucketAction {
	if x != nil {
		return x.BucketAction
	}
	return nil
}

// The identifier for the bucket. Used to match the bucket between the control plane (RLQS server),
// and the data plane (RLQS client), f.e.:
//
//   - the data plane sends a usage report for requests matched into the bucket with “BucketId“
//     to the control plane
//   - the control plane sends an assignment for the bucket with “BucketId“ to the data plane
//     Bucket ID.
//
// Example:
//
// .. validated-code-block:: yaml
//
//	:type-name: envoy.service.rate_limit_quota.v3.BucketId
//
//	bucket:
//	  name: my_bucket
//	  env: staging
//
// .. note::
//
//	The order of ``BucketId`` keys do not matter. Buckets ``{ a: 'A', b: 'B' }`` and
//	``{ b: 'B', a: 'A' }`` are identical.
type BucketId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bucket map[string]string `protobuf:"bytes,1,rep,name=bucket,proto3" json:"bucket,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BucketId) Reset() {
	*x = BucketId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketId) ProtoMessage() {}

func (x *BucketId) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketId.ProtoReflect.Descriptor instead.
func (*BucketId) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{2}
}

func (x *BucketId) GetBucket() map[string]string {
	if x != nil {
		return x.Bucket
	}
	return nil
}

// The usage report for a bucket.
//
// .. note::
//
//	Note that the first report sent for a ``BucketId`` indicates to the RLQS server that
//	the RLQS client is subscribing for the future assignments for this ``BucketId``.
type RateLimitQuotaUsageReports_BucketQuotaUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// “BucketId“ for which request quota usage is reported.
	BucketId *BucketId `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Time elapsed since the last report.
	TimeElapsed *durationpb.Duration `protobuf:"bytes,2,opt,name=time_elapsed,json=timeElapsed,proto3" json:"time_elapsed,omitempty"`
	// Requests the data plane has allowed through.
	NumRequestsAllowed uint64 `protobuf:"varint,3,opt,name=num_requests_allowed,json=numRequestsAllowed,proto3" json:"num_requests_allowed,omitempty"`
	// Requests throttled.
	NumRequestsDenied uint64 `protobuf:"varint,4,opt,name=num_requests_denied,json=numRequestsDenied,proto3" json:"num_requests_denied,omitempty"`
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) Reset() {
	*x = RateLimitQuotaUsageReports_BucketQuotaUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaUsageReports_BucketQuotaUsage) ProtoMessage() {}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaUsageReports_BucketQuotaUsage.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaUsageReports_BucketQuotaUsage) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{0, 0}
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetBucketId() *BucketId {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetTimeElapsed() *durationpb.Duration {
	if x != nil {
		return x.TimeElapsed
	}
	return nil
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetNumRequestsAllowed() uint64 {
	if x != nil {
		return x.NumRequestsAllowed
	}
	return 0
}

func (x *RateLimitQuotaUsageReports_BucketQuotaUsage) GetNumRequestsDenied() uint64 {
	if x != nil {
		return x.NumRequestsDenied
	}
	return 0
}

// Commands the data plane to apply one of the actions to the bucket with the
// :ref:`bucket_id <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
type RateLimitQuotaResponse_BucketAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// “BucketId“ for which request the action is applied.
	BucketId *BucketId `protobuf:"bytes,1,opt,name=bucket_id,json=bucketId,proto3" json:"bucket_id,omitempty"`
	// Types that are assignable to BucketAction:
	//
	//	*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_
	//	*RateLimitQuotaResponse_BucketAction_AbandonAction_
	BucketAction isRateLimitQuotaResponse_BucketAction_BucketAction `protobuf_oneof:"bucket_action"`
}

func (x *RateLimitQuotaResponse_BucketAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaResponse_BucketAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RateLimitQuotaResponse_BucketAction) GetBucketId() *BucketId {
	if x != nil {
		return x.BucketId
	}
	return nil
}

func (m *RateLimitQuotaResponse_BucketAction) GetBucketAction() isRateLimitQuotaResponse_BucketAction_BucketAction {
	if m != nil {
		return m.BucketAction
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction) GetQuotaAssignmentAction() *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction {
	if x, ok := x.GetBucketAction().(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_); ok {
		return x.QuotaAssignmentAction
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction) GetAbandonAction() *RateLimitQuotaResponse_BucketAction_AbandonAction {
	if x, ok := x.GetBucketAction().(*RateLimitQuotaResponse_BucketAction_AbandonAction_); ok {
		return x.AbandonAction
	}
	return nil
}

type isRateLimitQuotaResponse_BucketAction_BucketAction interface {
	isRateLimitQuotaResponse_BucketAction_BucketAction()
}

type RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_ struct {
	// Apply the quota assignment to the bucket.
	//
	// Commands the data plane to apply a rate limiting strategy to the bucket.
	// The process of applying and expiring the rate limiting strategy is detailed in the
	// :ref:`QuotaAssignmentAction
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`
	// message.
	QuotaAssignmentAction *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction `protobuf:"bytes,2,opt,name=quota_assignment_action,json=quotaAssignmentAction,proto3,oneof"`
}

type RateLimitQuotaResponse_BucketAction_AbandonAction_ struct {
	// Abandon the bucket.
	//
	// Commands the data plane to abandon the bucket.
	// The process of abandoning the bucket is described in the :ref:`AbandonAction
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction>`
	// message.
	AbandonAction *RateLimitQuotaResponse_BucketAction_AbandonAction `protobuf:"bytes,3,opt,name=abandon_action,json=abandonAction,proto3,oneof"`
}

func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_) isRateLimitQuotaResponse_BucketAction_BucketAction() {
}

func (*RateLimitQuotaResponse_BucketAction_AbandonAction_) isRateLimitQuotaResponse_BucketAction_BucketAction() {
}

// Quota assignment for the bucket. Configures the rate limiting strategy and the duration
// for the given :ref:`bucket_id
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
//
// **Applying the first assignment to the bucket**
//
// Once the data plane receives the “QuotaAssignmentAction“, it must send the current usage
// report for the bucket, and start rate limiting requests matched into the bucket
// using the strategy configured in the :ref:`rate_limit_strategy
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.rate_limit_strategy>`
// field. The assignment becomes bucket's “active“ assignment.
//
// **Expiring the assignment**
//
// The duration of the assignment defined in the :ref:`assignment_time_to_live
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
// field. When the duration runs off, the assignment is “expired“, and no longer “active“.
// The data plane should stop applying the rate limiting strategy to the bucket, and transition
// the bucket to the "expired assignment" state. This activates the behavior configured in the
// :ref:`expired_assignment_behavior <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.expired_assignment_behavior>`
// field.
//
// **Replacing the assignment**
//
//   - If the rate limiting strategy is different from bucket's “active“ assignment, or
//     the current bucket assignment is “expired“, the data plane must immediately
//     end the current assignment, report the bucket usage, and apply the new assignment.
//     The new assignment becomes bucket's “active“ assignment.
//   - If the rate limiting strategy is the same as the bucket's “active“ (not “expired“)
//     assignment, the data plane should extend the duration of the “active“ assignment
//     for the duration of the new assignment provided in the :ref:`assignment_time_to_live
//     <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live>`
//     field. The “active“ assignment is considered unchanged.
type RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A duration after which the assignment is be considered “expired“. The process of the
	// expiration is described :ref:`above
	// <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`.
	//
	//   - If unset, the assignment has no expiration date.
	//   - If set to “0“, the assignment expires immediately, forcing the client into the
	//     :ref:`"expired assignment"
	//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior.expired_assignment_behavior_timeout>`
	//     state. This may be used by the RLQS server in cases when it needs clients to proactively
	//     fall back to the pre-configured :ref:`ExpiredAssignmentBehavior
	//     <envoy_v3_api_msg_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.ExpiredAssignmentBehavior>`,
	//     f.e. before the server going into restart.
	//
	// .. attention::
	//
	//	Note that :ref:`expiring
	//	<envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`
	//	the assignment is not the same as :ref:`abandoning
	//	<envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction>`
	//	the assignment. While expiring the assignment just transitions the bucket to
	//	the "expired assignment" state; abandoning the assignment completely erases
	//	the bucket from the data plane memory, and stops the usage reports.
	AssignmentTimeToLive *durationpb.Duration `protobuf:"bytes,2,opt,name=assignment_time_to_live,json=assignmentTimeToLive,proto3" json:"assignment_time_to_live,omitempty"`
	// Configures the local rate limiter for the request matched to the bucket.
	// If not set, allow all requests.
	RateLimitStrategy *v3.RateLimitStrategy `protobuf:"bytes,3,opt,name=rate_limit_strategy,json=rateLimitStrategy,proto3" json:"rate_limit_strategy,omitempty"`
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) GetAssignmentTimeToLive() *durationpb.Duration {
	if x != nil {
		return x.AssignmentTimeToLive
	}
	return nil
}

func (x *RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction) GetRateLimitStrategy() *v3.RateLimitStrategy {
	if x != nil {
		return x.RateLimitStrategy
	}
	return nil
}

// Abandon action for the bucket. Indicates that the RLQS server will no longer be
// sending updates for the given :ref:`bucket_id
// <envoy_v3_api_field_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id>`.
//
// If no requests are reported for a bucket, after some time the server considers the bucket
// inactive. The server stops tracking the bucket, and instructs the the data plane to abandon
// the bucket via this message.
//
// **Abandoning the assignment**
//
// The data plane is to erase the bucket (including its usage data) from the memory.
// It should stop tracking the bucket, and stop reporting its usage. This effectively resets
// the data plane to the state prior to matching the first request into the bucket.
//
// **Restarting the subscription**
//
// If a new request is matched into a bucket previously abandoned, the data plane must behave
// as if it has never tracked the bucket, and it's the first request matched into it:
//
//  1. The process of :ref:`subscription and reporting
//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.reporting_interval>`
//     starts from the beginning.
//
//  2. The bucket transitions to the :ref:`"no assignment"
//     <envoy_v3_api_field_extensions.filters.http.rate_limit_quota.v3.RateLimitQuotaBucketSettings.no_assignment_behavior>`
//     state.
//
//  3. Once the new assignment is received, it's applied per
//     "Applying the first assignment to the bucket" section of the :ref:`QuotaAssignmentAction
//     <envoy_v3_api_msg_service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction>`.
type RateLimitQuotaResponse_BucketAction_AbandonAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) Reset() {
	*x = RateLimitQuotaResponse_BucketAction_AbandonAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitQuotaResponse_BucketAction_AbandonAction) ProtoMessage() {}

func (x *RateLimitQuotaResponse_BucketAction_AbandonAction) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitQuotaResponse_BucketAction_AbandonAction.ProtoReflect.Descriptor instead.
func (*RateLimitQuotaResponse_BucketAction_AbandonAction) Descriptor() ([]byte, []int) {
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP(), []int{1, 0, 1}
}

var File_envoy_service_rate_limit_quota_v3_rlqs_proto protoreflect.FileDescriptor

var file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x2f, 0x76, 0x33, 0x2f, 0x72, 0x6c, 0x71, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76,
	0x33, 0x1a, 0x26, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x33,
	0x2f, 0x72, 0x61, 0x74, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64, 0x70, 0x61,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdd, 0x03, 0x0a, 0x1a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x13, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x11, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x92, 0x02,
	0x0a, 0x10, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0xaa, 0x01, 0x04, 0x08,
	0x01, 0x2a, 0x00, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x22, 0xfb, 0x05, 0x0a, 0x16, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x0d, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe9, 0x04, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x96, 0x01, 0x0a, 0x17, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x65, 0x6e,
	0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x71, 0x75, 0x6f,
	0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x0e, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xc5, 0x01, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x17, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x32,
	0x00, 0x52, 0x14, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x6f, 0x4c, 0x69, 0x76, 0x65, 0x12, 0x50, 0x0a, 0x13, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x0f, 0x0a, 0x0d, 0x41, 0x62, 0x61,
	0x6e, 0x64, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x0d, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0xac, 0x01, 0x0a, 0x08, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a,
	0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76,
	0x33, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x9a, 0x01, 0x0e, 0x08, 0x01,
	0x22, 0x04, 0x72, 0x02, 0x10, 0x01, 0x2a, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x1a, 0x39, 0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xb1, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x97, 0x01, 0x0a, 0x15, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x73, 0x12, 0x3d, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x1a, 0x39, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0xab, 0x01, 0x0a, 0x2f, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x2e, 0x76, 0x33, 0x42, 0x09, 0x52, 0x6c, 0x71, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76,
	0x6f, 0x79, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x2f, 0x76, 0x33, 0x3b, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x76,
	0x33, 0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08,
	0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescOnce sync.Once
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData = file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc
)

func file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescGZIP() []byte {
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescOnce.Do(func() {
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData)
	})
	return file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDescData
}

var file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes = []interface{}{
	(*RateLimitQuotaUsageReports)(nil),                                // 0: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports
	(*RateLimitQuotaResponse)(nil),                                    // 1: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse
	(*BucketId)(nil),                                                  // 2: envoy.service.rate_limit_quota.v3.BucketId
	(*RateLimitQuotaUsageReports_BucketQuotaUsage)(nil),               // 3: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage
	(*RateLimitQuotaResponse_BucketAction)(nil),                       // 4: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction
	(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction)(nil), // 5: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction
	(*RateLimitQuotaResponse_BucketAction_AbandonAction)(nil),         // 6: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction
	nil,                          // 7: envoy.service.rate_limit_quota.v3.BucketId.BucketEntry
	(*durationpb.Duration)(nil),  // 8: google.protobuf.Duration
	(*v3.RateLimitStrategy)(nil), // 9: envoy.type.v3.RateLimitStrategy
}
var file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs = []int32{
	3,  // 0: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.bucket_quota_usages:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage
	4,  // 1: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.bucket_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction
	7,  // 2: envoy.service.rate_limit_quota.v3.BucketId.bucket:type_name -> envoy.service.rate_limit_quota.v3.BucketId.BucketEntry
	2,  // 3: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage.bucket_id:type_name -> envoy.service.rate_limit_quota.v3.BucketId
	8,  // 4: envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports.BucketQuotaUsage.time_elapsed:type_name -> google.protobuf.Duration
	2,  // 5: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.bucket_id:type_name -> envoy.service.rate_limit_quota.v3.BucketId
	5,  // 6: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.quota_assignment_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction
	6,  // 7: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.abandon_action:type_name -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.AbandonAction
	8,  // 8: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.assignment_time_to_live:type_name -> google.protobuf.Duration
	9,  // 9: envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse.BucketAction.QuotaAssignmentAction.rate_limit_strategy:type_name -> envoy.type.v3.RateLimitStrategy
	0,  // 10: envoy.service.rate_limit_quota.v3.RateLimitQuotaService.StreamRateLimitQuotas:input_type -> envoy.service.rate_limit_quota.v3.RateLimitQuotaUsageReports
	1,  // 11: envoy.service.rate_limit_quota.v3.RateLimitQuotaService.StreamRateLimitQuotas:output_type -> envoy.service.rate_limit_quota.v3.RateLimitQuotaResponse
	11, // [11:12] is the sub-list for method output_type
	10, // [10:11] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_envoy_service_rate_limit_quota_v3_rlqs_proto_init() }
func file_envoy_service_rate_limit_quota_v3_rlqs_proto_init() {
	if File_envoy_service_rate_limit_quota_v3_rlqs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaUsageReports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaUsageReports_BucketQuotaUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaResponse_BucketAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitQuotaResponse_BucketAction_AbandonAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RateLimitQuotaResponse_BucketAction_QuotaAssignmentAction_)(nil),
		(*RateLimitQuotaResponse_BucketAction_AbandonAction_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes,
		DependencyIndexes: file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs,
		MessageInfos:      file_envoy_service_rate_limit_quota_v3_rlqs_proto_msgTypes,
	}.Build()
	File_envoy_service_rate_limit_quota_v3_rlqs_proto = out.File
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_rawDesc = nil
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_goTypes = nil
	file_envoy_service_rate_limit_quota_v3_rlqs_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RateLimitQuotaServiceClient is the client API for RateLimitQuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RateLimitQuotaServiceClient interface {
	// Main communication channel: the data plane sends usage reports to the RLQS server,
	// and the server asynchronously responding with the assignments.
	StreamRateLimitQuotas(ctx context.Context, opts ...grpc.CallOption) (RateLimitQuotaService_StreamRateLimitQuotasClient, error)
}

type rateLimitQuotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitQuotaServiceClient(cc grpc.ClientConnInterface) RateLimitQuotaServiceClient {
	return &rateLimitQuotaServiceClient{cc}
}

func (c *rateLimitQuotaServiceClient) StreamRateLimitQuotas(ctx context.Context, opts ...grpc.CallOption) (RateLimitQuotaService_StreamRateLimitQuotasClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimitQuotaService_serviceDesc.Streams[0], "/envoy.service.rate_limit_quota.v3.RateLimitQuotaService/StreamRateLimitQuotas", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimitQuotaServiceStreamRateLimitQuotasClient{stream}
	return x, nil
}

type RateLimitQuotaService_StreamRateLimitQuotasClient interface {
	Send(*RateLimitQuotaUsageReports) error
	Recv() (*RateLimitQuotaResponse, error)
	grpc.ClientStream
}

type rateLimitQuotaServiceStreamRateLimitQuotasClient struct {
	grpc.ClientStream
}

func (x *rateLimitQuotaServiceStreamRateLimitQuotasClient) Send(m *RateLimitQuotaUsageReports) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rateLimitQuotaServiceStreamRateLimitQuotasClient) Recv() (*RateLimitQuotaResponse, error) {
	m := new(RateLimitQuotaResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RateLimitQuotaServiceServer is the server API for RateLimitQuotaService service.
type RateLimitQuotaServiceServer interface {
	// Main communication channel: the data plane sends usage reports to the RLQS server,
	// and the server asynchronously responding with the assignments.
	StreamRateLimitQuotas(RateLimitQuotaService_StreamRateLimitQuotasServer) error
}

// UnimplementedRateLimitQuotaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRateLimitQuotaServiceServer struct {
}

func (*UnimplementedRateLimitQuotaServiceServer) StreamRateLimitQuotas(RateLimitQuotaService_StreamRateLimitQuotasServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRateLimitQuotas not implemented")
}

func RegisterRateLimitQuotaServiceServer(s *grpc.Server, srv RateLimitQuotaServiceServer) {
	s.RegisterService(&_RateLimitQuotaService_serviceDesc, srv)
}

func _RateLimitQuotaService_StreamRateLimitQuotas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RateLimitQuotaServiceServer).StreamRateLimitQuotas(&rateLimitQuotaServiceStreamRateLimitQuotasServer{stream})
}

type RateLimitQuotaService_StreamRateLimitQuotasServer interface {
	Send(*RateLimitQuotaResponse) error
	Recv() (*RateLimitQuotaUsageReports, error)
	grpc.ServerStream
}

type rateLimitQuotaServiceStreamRateLimitQuotasServer struct {
	grpc.ServerStream
}

func (x *rateLimitQuotaServiceStreamRateLimitQuotasServer) Send(m *RateLimitQuotaResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rateLimitQuotaServiceStreamRateLimitQuotasServer) Recv() (*RateLimitQuotaUsageReports, error) {
	m := new(RateLimitQuotaUsageReports)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RateLimitQuotaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.service.rate_limit_quota.v3.RateLimitQuotaService",
	HandlerType: (*RateLimitQuotaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRateLimitQuotas",
			Handler:       _RateLimitQuotaService_StreamRateLimitQuotas_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/service/rate_limit_quota/v3/rlqs.proto",
}
