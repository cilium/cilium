// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: envoy/service/metrics/v3/metrics_service.proto

package metricsv3

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StreamMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMetricsResponseMultiError, or nil if none found.
func (m *StreamMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamMetricsResponseMultiError(errors)
	}

	return nil
}

// StreamMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by StreamMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type StreamMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMetricsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMetricsResponseMultiError) AllErrors() []error { return m }

// StreamMetricsResponseValidationError is the validation error returned by
// StreamMetricsResponse.Validate if the designated constraints aren't met.
type StreamMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsResponseValidationError) ErrorName() string {
	return "StreamMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsResponseValidationError{}

// Validate checks the field values on StreamMetricsMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMetricsMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMetricsMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamMetricsMessageMultiError, or nil if none found.
func (m *StreamMetricsMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMetricsMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIdentifier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamMetricsMessageValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamMetricsMessageValidationError{
					field:  "Identifier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIdentifier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamMetricsMessageValidationError{
				field:  "Identifier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEnvoyMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamMetricsMessageValidationError{
						field:  fmt.Sprintf("EnvoyMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamMetricsMessageValidationError{
						field:  fmt.Sprintf("EnvoyMetrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamMetricsMessageValidationError{
					field:  fmt.Sprintf("EnvoyMetrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamMetricsMessageMultiError(errors)
	}

	return nil
}

// StreamMetricsMessageMultiError is an error wrapping multiple validation
// errors returned by StreamMetricsMessage.ValidateAll() if the designated
// constraints aren't met.
type StreamMetricsMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMetricsMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMetricsMessageMultiError) AllErrors() []error { return m }

// StreamMetricsMessageValidationError is the validation error returned by
// StreamMetricsMessage.Validate if the designated constraints aren't met.
type StreamMetricsMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsMessageValidationError) ErrorName() string {
	return "StreamMetricsMessageValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsMessageValidationError{}

// Validate checks the field values on StreamMetricsMessage_Identifier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StreamMetricsMessage_Identifier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamMetricsMessage_Identifier with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// StreamMetricsMessage_IdentifierMultiError, or nil if none found.
func (m *StreamMetricsMessage_Identifier) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamMetricsMessage_Identifier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNode() == nil {
		err := StreamMetricsMessage_IdentifierValidationError{
			field:  "Node",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetNode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StreamMetricsMessage_IdentifierValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StreamMetricsMessage_IdentifierValidationError{
					field:  "Node",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StreamMetricsMessage_IdentifierValidationError{
				field:  "Node",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StreamMetricsMessage_IdentifierMultiError(errors)
	}

	return nil
}

// StreamMetricsMessage_IdentifierMultiError is an error wrapping multiple
// validation errors returned by StreamMetricsMessage_Identifier.ValidateAll()
// if the designated constraints aren't met.
type StreamMetricsMessage_IdentifierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamMetricsMessage_IdentifierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamMetricsMessage_IdentifierMultiError) AllErrors() []error { return m }

// StreamMetricsMessage_IdentifierValidationError is the validation error
// returned by StreamMetricsMessage_Identifier.Validate if the designated
// constraints aren't met.
type StreamMetricsMessage_IdentifierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamMetricsMessage_IdentifierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamMetricsMessage_IdentifierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamMetricsMessage_IdentifierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamMetricsMessage_IdentifierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamMetricsMessage_IdentifierValidationError) ErrorName() string {
	return "StreamMetricsMessage_IdentifierValidationError"
}

// Error satisfies the builtin error interface
func (e StreamMetricsMessage_IdentifierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamMetricsMessage_Identifier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamMetricsMessage_IdentifierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamMetricsMessage_IdentifierValidationError{}
