// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/endpoint.proto

package envoy_api_v2

import (
	fmt "fmt"
	endpoint "github.com/cilium/proxy/go/envoy/api/v2/endpoint"
	_type "github.com/cilium/proxy/go/envoy/type"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Each route from RDS will map to a single cluster or traffic split across
// clusters using weights expressed in the RDS WeightedCluster.
//
// With EDS, each cluster is treated independently from a LB perspective, with
// LB taking place between the Localities within a cluster and at a finer
// granularity between the hosts within a locality. The percentage of traffic
// for each endpoint is determined by both its load_balancing_weight, and the
// load_balancing_weight of its locality. First, a locality will be selected,
// then an endpoint within that locality will be chose based on its weight.
// [#next-free-field: 6]
type ClusterLoadAssignment struct {
	// Name of the cluster. This will be the :ref:`service_name
	// <envoy_api_field_Cluster.EdsClusterConfig.service_name>` value if specified
	// in the cluster :ref:`EdsClusterConfig
	// <envoy_api_msg_Cluster.EdsClusterConfig>`.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// List of endpoints to load balance to.
	Endpoints []*endpoint.LocalityLbEndpoints `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Map of named endpoints that can be referenced in LocalityLbEndpoints.
	// [#not-implemented-hide:]
	NamedEndpoints map[string]*endpoint.Endpoint `protobuf:"bytes,5,rep,name=named_endpoints,json=namedEndpoints,proto3" json:"named_endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Load balancing policy settings.
	Policy               *ClusterLoadAssignment_Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ClusterLoadAssignment) Reset()         { *m = ClusterLoadAssignment{} }
func (m *ClusterLoadAssignment) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment) ProtoMessage()    {}
func (*ClusterLoadAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd3a9d301e6758b, []int{0}
}

func (m *ClusterLoadAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment.Marshal(b, m, deterministic)
}
func (m *ClusterLoadAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment.Merge(m, src)
}
func (m *ClusterLoadAssignment) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment.Size(m)
}
func (m *ClusterLoadAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment proto.InternalMessageInfo

func (m *ClusterLoadAssignment) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterLoadAssignment) GetEndpoints() []*endpoint.LocalityLbEndpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ClusterLoadAssignment) GetNamedEndpoints() map[string]*endpoint.Endpoint {
	if m != nil {
		return m.NamedEndpoints
	}
	return nil
}

func (m *ClusterLoadAssignment) GetPolicy() *ClusterLoadAssignment_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// Load balancing policy settings.
// [#next-free-field: 6]
type ClusterLoadAssignment_Policy struct {
	// Action to trim the overall incoming traffic to protect the upstream
	// hosts. This action allows protection in case the hosts are unable to
	// recover from an outage, or unable to autoscale or unable to handle
	// incoming traffic volume for any reason.
	//
	// At the client each category is applied one after the other to generate
	// the 'actual' drop percentage on all outgoing traffic. For example:
	//
	// .. code-block:: json
	//
	//  { "drop_overloads": [
	//      { "category": "throttle", "drop_percentage": 60 }
	//      { "category": "lb", "drop_percentage": 50 }
	//  ]}
	//
	// The actual drop percentages applied to the traffic at the clients will be
	//    "throttle"_drop = 60%
	//    "lb"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.
	//    actual_outgoing_load = 20% // remaining after applying all categories.
	DropOverloads []*ClusterLoadAssignment_Policy_DropOverload `protobuf:"bytes,2,rep,name=drop_overloads,json=dropOverloads,proto3" json:"drop_overloads,omitempty"`
	// Priority levels and localities are considered overprovisioned with this
	// factor (in percentage). This means that we don't consider a priority
	// level or locality unhealthy until the percentage of healthy hosts
	// multiplied by the overprovisioning factor drops below 100.
	// With the default value 140(1.4), Envoy doesn't consider a priority level
	// or a locality unhealthy until their percentage of healthy hosts drops
	// below 72%. For example:
	//
	// .. code-block:: json
	//
	//  { "overprovisioning_factor": 100 }
	//
	// Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>` and
	// :ref:`localities <arch_overview_load_balancing_locality_weighted_lb>`.
	OverprovisioningFactor *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=overprovisioning_factor,json=overprovisioningFactor,proto3" json:"overprovisioning_factor,omitempty"`
	// The max time until which the endpoints from this assignment can be used.
	// If no new assignments are received before this time expires the endpoints
	// are considered stale and should be marked unhealthy.
	// Defaults to 0 which means endpoints never go stale.
	EndpointStaleAfter *duration.Duration `protobuf:"bytes,4,opt,name=endpoint_stale_after,json=endpointStaleAfter,proto3" json:"endpoint_stale_after,omitempty"`
	// The flag to disable overprovisioning. If it is set to true,
	// :ref:`overprovisioning factor
	// <arch_overview_load_balancing_overprovisioning_factor>` will be ignored
	// and Envoy will not perform graceful failover between priority levels or
	// localities as endpoints become unhealthy. Otherwise Envoy will perform
	// graceful failover as :ref:`overprovisioning factor
	// <arch_overview_load_balancing_overprovisioning_factor>` suggests.
	// [#next-major-version: Unify with overprovisioning config as a single message.]
	// [#not-implemented-hide:]
	DisableOverprovisioning bool     `protobuf:"varint,5,opt,name=disable_overprovisioning,json=disableOverprovisioning,proto3" json:"disable_overprovisioning,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *ClusterLoadAssignment_Policy) Reset()         { *m = ClusterLoadAssignment_Policy{} }
func (m *ClusterLoadAssignment_Policy) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment_Policy) ProtoMessage()    {}
func (*ClusterLoadAssignment_Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd3a9d301e6758b, []int{0, 0}
}

func (m *ClusterLoadAssignment_Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment_Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Marshal(b, m, deterministic)
}
func (m *ClusterLoadAssignment_Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment_Policy.Merge(m, src)
}
func (m *ClusterLoadAssignment_Policy) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Size(m)
}
func (m *ClusterLoadAssignment_Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment_Policy proto.InternalMessageInfo

func (m *ClusterLoadAssignment_Policy) GetDropOverloads() []*ClusterLoadAssignment_Policy_DropOverload {
	if m != nil {
		return m.DropOverloads
	}
	return nil
}

func (m *ClusterLoadAssignment_Policy) GetOverprovisioningFactor() *wrappers.UInt32Value {
	if m != nil {
		return m.OverprovisioningFactor
	}
	return nil
}

func (m *ClusterLoadAssignment_Policy) GetEndpointStaleAfter() *duration.Duration {
	if m != nil {
		return m.EndpointStaleAfter
	}
	return nil
}

func (m *ClusterLoadAssignment_Policy) GetDisableOverprovisioning() bool {
	if m != nil {
		return m.DisableOverprovisioning
	}
	return false
}

type ClusterLoadAssignment_Policy_DropOverload struct {
	// Identifier for the policy specifying the drop.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// Percentage of traffic that should be dropped for the category.
	DropPercentage       *_type.FractionalPercent `protobuf:"bytes,2,opt,name=drop_percentage,json=dropPercentage,proto3" json:"drop_percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ClusterLoadAssignment_Policy_DropOverload) Reset() {
	*m = ClusterLoadAssignment_Policy_DropOverload{}
}
func (m *ClusterLoadAssignment_Policy_DropOverload) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment_Policy_DropOverload) ProtoMessage()    {}
func (*ClusterLoadAssignment_Policy_DropOverload) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dd3a9d301e6758b, []int{0, 0, 0}
}

func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Marshal(b, m, deterministic)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Merge(m, src)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Size(m)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload proto.InternalMessageInfo

func (m *ClusterLoadAssignment_Policy_DropOverload) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ClusterLoadAssignment_Policy_DropOverload) GetDropPercentage() *_type.FractionalPercent {
	if m != nil {
		return m.DropPercentage
	}
	return nil
}

func init() {
	proto.RegisterType((*ClusterLoadAssignment)(nil), "envoy.api.v2.ClusterLoadAssignment")
	proto.RegisterMapType((map[string]*endpoint.Endpoint)(nil), "envoy.api.v2.ClusterLoadAssignment.NamedEndpointsEntry")
	proto.RegisterType((*ClusterLoadAssignment_Policy)(nil), "envoy.api.v2.ClusterLoadAssignment.Policy")
	proto.RegisterType((*ClusterLoadAssignment_Policy_DropOverload)(nil), "envoy.api.v2.ClusterLoadAssignment.Policy.DropOverload")
}

func init() { proto.RegisterFile("envoy/api/v2/endpoint.proto", fileDescriptor_8dd3a9d301e6758b) }

var fileDescriptor_8dd3a9d301e6758b = []byte{
	// 618 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0x74, 0x2d, 0x9d, 0xf7, 0x29, 0xf3, 0xb1, 0x10, 0x06, 0x54, 0x70, 0x33, 0xf5,
	0x22, 0x91, 0x3a, 0xa1, 0x01, 0x77, 0x0b, 0xdb, 0x04, 0x68, 0xb0, 0x2a, 0x68, 0x5c, 0x2e, 0xb8,
	0x89, 0x1b, 0x59, 0xa4, 0x3e, 0x96, 0xe3, 0x06, 0x22, 0x1e, 0x82, 0x5b, 0x9e, 0x81, 0x77, 0xe2,
	0x25, 0xb8, 0x41, 0xda, 0x05, 0x42, 0x71, 0x3e, 0xd6, 0x75, 0x9d, 0xc4, 0x9d, 0xe3, 0xff, 0xf9,
	0xff, 0x7c, 0x7c, 0xce, 0x71, 0xd0, 0x03, 0xca, 0x33, 0xc8, 0x5d, 0x22, 0x98, 0x9b, 0x0d, 0x5c,
	0xca, 0x23, 0x01, 0x8c, 0x2b, 0x47, 0x48, 0x50, 0x80, 0xd7, 0xb4, 0xe8, 0x10, 0xc1, 0x9c, 0x6c,
	0x60, 0xbb, 0x0b, 0x43, 0x9b, 0x45, 0x10, 0xc2, 0x44, 0x00, 0xa7, 0x5c, 0xa5, 0xa5, 0xdd, 0xb6,
	0x4a, 0x83, 0xca, 0x05, 0x75, 0x05, 0x95, 0x21, 0xad, 0xc1, 0xf6, 0x4e, 0x0c, 0x10, 0x27, 0x54,
	0xb3, 0x08, 0xe7, 0xa0, 0x88, 0x62, 0xc0, 0x6b, 0xdf, 0xa3, 0x4a, 0xd5, 0x5f, 0xa3, 0xe9, 0xd8,
	0x8d, 0xa6, 0x52, 0x07, 0xdc, 0xa4, 0x7f, 0x91, 0x44, 0x08, 0x2a, 0x1b, 0xff, 0x34, 0x12, 0x64,
	0x96, 0xeb, 0x4e, 0x58, 0x2c, 0x89, 0xa2, 0x95, 0xbe, 0x9d, 0x91, 0x84, 0x45, 0x44, 0x51, 0xb7,
	0x5e, 0x94, 0xc2, 0x93, 0x3f, 0x1d, 0x74, 0xf7, 0x55, 0x32, 0x4d, 0x15, 0x95, 0x27, 0x40, 0xa2,
	0x83, 0x34, 0x65, 0x31, 0x9f, 0x50, 0xae, 0x70, 0x1f, 0xad, 0x85, 0xa5, 0x10, 0x70, 0x32, 0xa1,
	0x96, 0xd1, 0x33, 0x76, 0x57, 0xbc, 0x5b, 0x17, 0xde, 0xb2, 0x34, 0x7b, 0x86, 0xbf, 0x5a, 0x89,
	0xef, 0xc9, 0x84, 0xe2, 0xd7, 0x68, 0xa5, 0xae, 0x49, 0x6a, 0x99, 0xbd, 0xd6, 0xee, 0xea, 0xa0,
	0xef, 0xcc, 0x56, 0xd2, 0x69, 0xca, 0x7c, 0x02, 0x21, 0x49, 0x98, 0xca, 0x4f, 0x46, 0x47, 0xb5,
	0xc3, 0xbf, 0x34, 0xe3, 0x4f, 0x68, 0xb3, 0x38, 0x2d, 0x0a, 0x2e, 0x79, 0x6d, 0xcd, 0xdb, 0xbf,
	0xca, 0x5b, 0x98, 0xb3, 0x53, 0x24, 0x13, 0x35, 0xdc, 0x23, 0xae, 0x64, 0xee, 0x6f, 0xf0, 0x2b,
	0x9b, 0xd8, 0x43, 0x1d, 0x01, 0x09, 0x0b, 0x73, 0x6b, 0xb9, 0x67, 0x5c, 0x4f, 0x74, 0x31, 0x78,
	0xa8, 0x1d, 0x7e, 0xe5, 0xb4, 0x7f, 0xb5, 0x50, 0xa7, 0xdc, 0xc2, 0xe7, 0x68, 0x23, 0x92, 0x20,
	0x02, 0xc8, 0xa8, 0x4c, 0x80, 0x44, 0xf5, 0xfd, 0xf7, 0xff, 0x1f, 0xeb, 0x1c, 0x4a, 0x10, 0xa7,
	0x95, 0xdf, 0x5f, 0x8f, 0x66, 0xbe, 0x52, 0x7c, 0x8e, 0xb6, 0x0b, 0xb4, 0x90, 0x90, 0xb1, 0x94,
	0x01, 0x67, 0x3c, 0x0e, 0xc6, 0x24, 0x54, 0x20, 0xad, 0x96, 0xce, 0x7f, 0xc7, 0x29, 0x67, 0xc3,
	0xa9, 0x67, 0xc3, 0x39, 0x7b, 0xc3, 0xd5, 0xde, 0xe0, 0x23, 0x49, 0xa6, 0x54, 0xf7, 0xab, 0x6f,
	0xf6, 0x96, 0xfc, 0x7b, 0xf3, 0x94, 0x63, 0x0d, 0xc1, 0x67, 0xe8, 0x4e, 0x33, 0xce, 0xa9, 0x22,
	0x09, 0x0d, 0xc8, 0x58, 0x51, 0x59, 0x15, 0xe7, 0xfe, 0x35, 0xf8, 0x61, 0x35, 0x98, 0x5e, 0xf7,
	0xc2, 0x6b, 0xff, 0x34, 0xcc, 0xfe, 0x92, 0x8f, 0x6b, 0xc0, 0x87, 0xc2, 0x7f, 0x50, 0xd8, 0xf1,
	0x0b, 0x64, 0x45, 0x2c, 0x25, 0xa3, 0x84, 0x06, 0xf3, 0x07, 0x5b, 0xed, 0x9e, 0xb1, 0xdb, 0xf5,
	0xb7, 0x2b, 0xfd, 0x74, 0x4e, 0xb6, 0xbf, 0xa1, 0xb5, 0xd9, 0x82, 0xe0, 0xa7, 0xa8, 0x1b, 0x12,
	0x45, 0x63, 0x90, 0xf9, 0xfc, 0x10, 0x36, 0x02, 0x3e, 0x46, 0x9b, 0xba, 0x0d, 0xd5, 0xa3, 0x23,
	0x31, 0xb5, 0x4c, 0x7d, 0x83, 0x87, 0x55, 0x1f, 0x8a, 0x27, 0xe9, 0x1c, 0x4b, 0x12, 0x16, 0xc9,
	0x93, 0x64, 0x58, 0xc6, 0xf9, 0xba, 0x79, 0xc3, 0xc6, 0xf4, 0x76, 0xb9, 0x6b, 0x6c, 0x99, 0xf6,
	0x08, 0xdd, 0x5e, 0x30, 0x4a, 0x78, 0x0b, 0xb5, 0x3e, 0xd3, 0x2a, 0x09, 0xbf, 0x58, 0xe2, 0x67,
	0xa8, 0x9d, 0x15, 0x75, 0xae, 0x0e, 0x7b, 0x7c, 0xc3, 0xd0, 0xd7, 0x1c, 0xbf, 0x8c, 0x7e, 0x69,
	0x3e, 0x37, 0xbc, 0x77, 0xbf, 0x7f, 0xfc, 0xfd, 0xde, 0xb6, 0x71, 0xf9, 0xcb, 0x70, 0x42, 0xe0,
	0x63, 0x16, 0x5f, 0x5a, 0xb2, 0x3d, 0x64, 0x33, 0x28, 0x79, 0x42, 0xc2, 0xd7, 0xfc, 0x0a, 0xda,
	0x5b, 0xaf, 0x91, 0xc3, 0xa2, 0x31, 0x43, 0x63, 0xd4, 0xd1, 0x1d, 0xda, 0xfb, 0x17, 0x00, 0x00,
	0xff, 0xff, 0x9a, 0x50, 0x35, 0xfd, 0xde, 0x04, 0x00, 0x00,
}
