// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/core/protocol.proto

package core

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/lyft/protoc-gen-validate/validate"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// [#not-implemented-hide:]
type TcpProtocolOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpProtocolOptions) Reset()         { *m = TcpProtocolOptions{} }
func (m *TcpProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*TcpProtocolOptions) ProtoMessage()    {}
func (*TcpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86476e078060b60, []int{0}
}

func (m *TcpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpProtocolOptions.Unmarshal(m, b)
}
func (m *TcpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpProtocolOptions.Marshal(b, m, deterministic)
}
func (m *TcpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpProtocolOptions.Merge(m, src)
}
func (m *TcpProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_TcpProtocolOptions.Size(m)
}
func (m *TcpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TcpProtocolOptions proto.InternalMessageInfo

type HttpProtocolOptions struct {
	// The idle timeout for upstream connection pool connections. The idle timeout is defined as the
	// period in which there are no active requests. If not set, there is no idle timeout. When the
	// idle timeout is reached the connection will be closed. Note that request based timeouts mean
	// that HTTP/2 PINGs will not keep the connection alive.
	IdleTimeout          *duration.Duration `protobuf:"bytes,1,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HttpProtocolOptions) Reset()         { *m = HttpProtocolOptions{} }
func (m *HttpProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*HttpProtocolOptions) ProtoMessage()    {}
func (*HttpProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86476e078060b60, []int{1}
}

func (m *HttpProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpProtocolOptions.Unmarshal(m, b)
}
func (m *HttpProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpProtocolOptions.Marshal(b, m, deterministic)
}
func (m *HttpProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpProtocolOptions.Merge(m, src)
}
func (m *HttpProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_HttpProtocolOptions.Size(m)
}
func (m *HttpProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_HttpProtocolOptions proto.InternalMessageInfo

func (m *HttpProtocolOptions) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

type Http1ProtocolOptions struct {
	// Handle HTTP requests with absolute URLs in the requests. These requests
	// are generally sent by clients to forward/explicit proxies. This allows clients to configure
	// envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
	// *http_proxy* environment variable.
	AllowAbsoluteUrl *wrappers.BoolValue `protobuf:"bytes,1,opt,name=allow_absolute_url,json=allowAbsoluteUrl,proto3" json:"allow_absolute_url,omitempty"`
	// Handle incoming HTTP/1.0 and HTTP 0.9 requests.
	// This is off by default, and not fully standards compliant. There is support for pre-HTTP/1.1
	// style connect logic, dechunking, and handling lack of client host iff
	// *default_host_for_http_10* is configured.
	AcceptHttp_10 bool `protobuf:"varint,2,opt,name=accept_http_10,json=acceptHttp10,proto3" json:"accept_http_10,omitempty"`
	// A default host for HTTP/1.0 requests. This is highly suggested if *accept_http_10* is true as
	// Envoy does not otherwise support HTTP/1.0 without a Host header.
	// This is a no-op if *accept_http_10* is not true.
	DefaultHostForHttp_10 string   `protobuf:"bytes,3,opt,name=default_host_for_http_10,json=defaultHostForHttp10,proto3" json:"default_host_for_http_10,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *Http1ProtocolOptions) Reset()         { *m = Http1ProtocolOptions{} }
func (m *Http1ProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*Http1ProtocolOptions) ProtoMessage()    {}
func (*Http1ProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86476e078060b60, []int{2}
}

func (m *Http1ProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Http1ProtocolOptions.Unmarshal(m, b)
}
func (m *Http1ProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Http1ProtocolOptions.Marshal(b, m, deterministic)
}
func (m *Http1ProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Http1ProtocolOptions.Merge(m, src)
}
func (m *Http1ProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_Http1ProtocolOptions.Size(m)
}
func (m *Http1ProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Http1ProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Http1ProtocolOptions proto.InternalMessageInfo

func (m *Http1ProtocolOptions) GetAllowAbsoluteUrl() *wrappers.BoolValue {
	if m != nil {
		return m.AllowAbsoluteUrl
	}
	return nil
}

func (m *Http1ProtocolOptions) GetAcceptHttp_10() bool {
	if m != nil {
		return m.AcceptHttp_10
	}
	return false
}

func (m *Http1ProtocolOptions) GetDefaultHostForHttp_10() string {
	if m != nil {
		return m.DefaultHostForHttp_10
	}
	return ""
}

type Http2ProtocolOptions struct {
	// `Maximum table size <https://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
	// (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
	// range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
	// compression.
	HpackTableSize *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=hpack_table_size,json=hpackTableSize,proto3" json:"hpack_table_size,omitempty"`
	// `Maximum concurrent streams <https://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
	// allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
	// and defaults to 2147483647.
	MaxConcurrentStreams *wrappers.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrent_streams,json=maxConcurrentStreams,proto3" json:"max_concurrent_streams,omitempty"`
	// This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
	// HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
	// stop the flow of data to the codec buffers.
	InitialStreamWindowSize *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=initial_stream_window_size,json=initialStreamWindowSize,proto3" json:"initial_stream_window_size,omitempty"`
	// Similar to *initial_stream_window_size*, but for connection-level flow-control
	// window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
	InitialConnectionWindowSize *wrappers.UInt32Value `protobuf:"bytes,4,opt,name=initial_connection_window_size,json=initialConnectionWindowSize,proto3" json:"initial_connection_window_size,omitempty"`
	// Allows proxying Websocket and other upgrades over H2 connect.
	AllowConnect bool `protobuf:"varint,5,opt,name=allow_connect,json=allowConnect,proto3" json:"allow_connect,omitempty"`
	// [#not-implemented-hide:] Hiding until envoy has full metadata support.
	// Still under implementation. DO NOT USE.
	//
	// Allows metadata. See [metadata
	// docs](https://github.com/envoyproxy/envoy/blob/master/source/docs/h2_metadata.md) for more
	// information.
	AllowMetadata        bool     `protobuf:"varint,6,opt,name=allow_metadata,json=allowMetadata,proto3" json:"allow_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Http2ProtocolOptions) Reset()         { *m = Http2ProtocolOptions{} }
func (m *Http2ProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*Http2ProtocolOptions) ProtoMessage()    {}
func (*Http2ProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86476e078060b60, []int{3}
}

func (m *Http2ProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Http2ProtocolOptions.Unmarshal(m, b)
}
func (m *Http2ProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Http2ProtocolOptions.Marshal(b, m, deterministic)
}
func (m *Http2ProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Http2ProtocolOptions.Merge(m, src)
}
func (m *Http2ProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_Http2ProtocolOptions.Size(m)
}
func (m *Http2ProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_Http2ProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_Http2ProtocolOptions proto.InternalMessageInfo

func (m *Http2ProtocolOptions) GetHpackTableSize() *wrappers.UInt32Value {
	if m != nil {
		return m.HpackTableSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxConcurrentStreams() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialStreamWindowSize() *wrappers.UInt32Value {
	if m != nil {
		return m.InitialStreamWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialConnectionWindowSize() *wrappers.UInt32Value {
	if m != nil {
		return m.InitialConnectionWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetAllowConnect() bool {
	if m != nil {
		return m.AllowConnect
	}
	return false
}

func (m *Http2ProtocolOptions) GetAllowMetadata() bool {
	if m != nil {
		return m.AllowMetadata
	}
	return false
}

// [#not-implemented-hide:]
type GrpcProtocolOptions struct {
	Http2ProtocolOptions *Http2ProtocolOptions `protobuf:"bytes,1,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GrpcProtocolOptions) Reset()         { *m = GrpcProtocolOptions{} }
func (m *GrpcProtocolOptions) String() string { return proto.CompactTextString(m) }
func (*GrpcProtocolOptions) ProtoMessage()    {}
func (*GrpcProtocolOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_d86476e078060b60, []int{4}
}

func (m *GrpcProtocolOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcProtocolOptions.Unmarshal(m, b)
}
func (m *GrpcProtocolOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcProtocolOptions.Marshal(b, m, deterministic)
}
func (m *GrpcProtocolOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcProtocolOptions.Merge(m, src)
}
func (m *GrpcProtocolOptions) XXX_Size() int {
	return xxx_messageInfo_GrpcProtocolOptions.Size(m)
}
func (m *GrpcProtocolOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcProtocolOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcProtocolOptions proto.InternalMessageInfo

func (m *GrpcProtocolOptions) GetHttp2ProtocolOptions() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProtocolOptions)(nil), "envoy.api.v2.core.TcpProtocolOptions")
	proto.RegisterType((*HttpProtocolOptions)(nil), "envoy.api.v2.core.HttpProtocolOptions")
	proto.RegisterType((*Http1ProtocolOptions)(nil), "envoy.api.v2.core.Http1ProtocolOptions")
	proto.RegisterType((*Http2ProtocolOptions)(nil), "envoy.api.v2.core.Http2ProtocolOptions")
	proto.RegisterType((*GrpcProtocolOptions)(nil), "envoy.api.v2.core.GrpcProtocolOptions")
}

func init() { proto.RegisterFile("envoy/api/v2/core/protocol.proto", fileDescriptor_d86476e078060b60) }

var fileDescriptor_d86476e078060b60 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x4f, 0x13, 0x41,
	0x14, 0xcf, 0x5a, 0x44, 0x1c, 0xfe, 0x08, 0x4b, 0x03, 0x2b, 0x1a, 0x68, 0xaa, 0xc6, 0x86, 0xc3,
	0x2e, 0x2c, 0x09, 0x77, 0x17, 0x83, 0x78, 0x30, 0x92, 0x05, 0x34, 0x1e, 0xcc, 0x64, 0x3a, 0x3b,
	0xb4, 0x13, 0xa7, 0xfb, 0x26, 0xb3, 0xb3, 0x2d, 0xf0, 0x49, 0xfc, 0x08, 0x7e, 0x06, 0x0f, 0xc6,
	0x6f, 0x62, 0xe2, 0xcd, 0xb3, 0x1f, 0x60, 0xcd, 0xce, 0x4c, 0x89, 0xb6, 0x24, 0x1a, 0x4f, 0x7d,
	0x79, 0xef, 0xf7, 0xef, 0x75, 0xdf, 0xa0, 0x16, 0xcb, 0x87, 0x70, 0x19, 0x11, 0xc9, 0xa3, 0x61,
	0x1c, 0x51, 0x50, 0x2c, 0x92, 0x0a, 0x34, 0x50, 0x10, 0xa1, 0x29, 0xfc, 0x15, 0x83, 0x08, 0x89,
	0xe4, 0xe1, 0x30, 0x0e, 0x6b, 0xc4, 0xc6, 0x66, 0x0f, 0xa0, 0x27, 0x1c, 0xb2, 0x5b, 0x9e, 0x47,
	0x59, 0xa9, 0x88, 0xe6, 0x90, 0x5b, 0xca, 0xf4, 0x7c, 0xa4, 0x88, 0x94, 0x4c, 0x15, 0x6e, 0xbe,
	0x3e, 0x24, 0x82, 0x67, 0x44, 0xb3, 0x68, 0x5c, 0xb8, 0x41, 0xb3, 0x07, 0x3d, 0x30, 0x65, 0x54,
	0x57, 0xb6, 0xdb, 0x6e, 0x22, 0xff, 0x94, 0xca, 0x63, 0x17, 0xeb, 0xb5, 0xac, 0x9d, 0x8a, 0xf6,
	0x3b, 0xb4, 0x7a, 0xa4, 0xf5, 0x64, 0xdb, 0x4f, 0xd0, 0x02, 0xcf, 0x04, 0xc3, 0x9a, 0x0f, 0x18,
	0x94, 0x3a, 0xf0, 0x5a, 0x5e, 0x67, 0x3e, 0xbe, 0x1f, 0xda, 0x48, 0xe1, 0x38, 0x52, 0xf8, 0xdc,
	0x45, 0x4e, 0x66, 0x3e, 0x7e, 0xdb, 0xf2, 0xd2, 0xf9, 0x9a, 0x74, 0x6a, 0x39, 0xed, 0x2f, 0x1e,
	0x6a, 0xd6, 0xda, 0xbb, 0x93, 0xe2, 0x47, 0xc8, 0x27, 0x42, 0xc0, 0x08, 0x93, 0x6e, 0x01, 0xa2,
	0xd4, 0x0c, 0x97, 0x4a, 0x38, 0x8b, 0x8d, 0x29, 0x8b, 0x04, 0x40, 0xbc, 0x21, 0xa2, 0x64, 0xe9,
	0xb2, 0x61, 0x3d, 0x73, 0xa4, 0x33, 0x25, 0xfc, 0xc7, 0x68, 0x89, 0x50, 0xca, 0xa4, 0xc6, 0x7d,
	0xad, 0x25, 0xde, 0xdd, 0x09, 0x6e, 0xb5, 0xbc, 0xce, 0x5c, 0xba, 0x60, 0xbb, 0xc6, 0x7d, 0xc7,
	0xdf, 0x47, 0x41, 0xc6, 0xce, 0x49, 0x29, 0x34, 0xee, 0x43, 0xa1, 0xf1, 0x39, 0xa8, 0x6b, 0x7c,
	0xa3, 0xe5, 0x75, 0xee, 0xa6, 0x4d, 0x37, 0x3f, 0x82, 0x42, 0x1f, 0x82, 0xb2, 0xbc, 0xf6, 0xcf,
	0x86, 0x5d, 0x20, 0x9e, 0x5c, 0xe0, 0x10, 0x2d, 0xf7, 0x25, 0xa1, 0x1f, 0xb0, 0x26, 0x5d, 0xc1,
	0x70, 0xc1, 0xaf, 0x98, 0x8b, 0xff, 0x70, 0x2a, 0xfe, 0xd9, 0xcb, 0x5c, 0xef, 0xc5, 0x76, 0x81,
	0x25, 0xc3, 0x3a, 0xad, 0x49, 0x27, 0xfc, 0x8a, 0xf9, 0x14, 0xad, 0x0d, 0xc8, 0x05, 0xa6, 0x90,
	0xd3, 0x52, 0x29, 0x96, 0x6b, 0x5c, 0x68, 0xc5, 0xc8, 0xa0, 0x30, 0x6b, 0xfc, 0x45, 0x2d, 0xb9,
	0xf7, 0xf9, 0xc7, 0xd7, 0x06, 0xda, 0x9e, 0x0b, 0xaa, 0xaa, 0xaa, 0xee, 0x74, 0xbc, 0xb4, 0x39,
	0x20, 0x17, 0x07, 0xd7, 0x5a, 0x27, 0x56, 0xca, 0x17, 0x68, 0x83, 0xe7, 0x5c, 0x73, 0x22, 0x9c,
	0x3a, 0x1e, 0xf1, 0x3c, 0x83, 0x91, 0x8d, 0xdd, 0xf8, 0x07, 0xa3, 0x95, 0xda, 0x68, 0x61, 0x1b,
	0x39, 0xa3, 0xaa, 0x6a, 0xa4, 0xeb, 0x4e, 0xd2, 0x9a, 0xbc, 0x35, 0x82, 0x66, 0x25, 0x8d, 0x36,
	0xc7, 0x6e, 0x14, 0xf2, 0x9c, 0xd1, 0xfa, 0x1f, 0xfb, 0xc3, 0x71, 0xe6, 0xff, 0x1c, 0x1f, 0x38,
	0xd9, 0x83, 0x6b, 0xd5, 0xdf, 0x5c, 0x1f, 0xa1, 0x45, 0x7b, 0x51, 0xce, 0x33, 0xb8, 0xed, 0xce,
	0xa0, 0x6e, 0x3a, 0x86, 0xff, 0x04, 0x2d, 0x59, 0xd0, 0x80, 0x69, 0x92, 0x11, 0x4d, 0x82, 0x59,
	0x83, 0xb2, 0xd4, 0x57, 0xae, 0xd9, 0xd6, 0x68, 0xf5, 0x85, 0x92, 0x74, 0xf2, 0x9b, 0xbf, 0x47,
	0x6b, 0xf5, 0xcd, 0xc4, 0x78, 0xfc, 0xb0, 0x31, 0xd8, 0x89, 0xfb, 0xf2, 0x4f, 0xc3, 0xa9, 0x17,
	0x1e, 0xde, 0x74, 0x3c, 0x69, 0xb3, 0x7f, 0x43, 0x37, 0xd9, 0xff, 0xf4, 0x7d, 0xd3, 0x43, 0x5b,
	0x1c, 0xac, 0x8c, 0x54, 0x70, 0x71, 0x39, 0xad, 0x98, 0x2c, 0x8e, 0x79, 0xe6, 0xf7, 0xd8, 0xeb,
	0xce, 0x9a, 0x38, 0x7b, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x50, 0xa6, 0x3c, 0xcc, 0x82, 0x04,
	0x00, 0x00,
}
