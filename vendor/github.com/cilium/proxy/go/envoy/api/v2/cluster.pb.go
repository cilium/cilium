// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/cluster.proto

package envoy_api_v2

import (
	fmt "fmt"
	_ "github.com/cilium/proxy/go/envoy/annotations"
	auth "github.com/cilium/proxy/go/envoy/api/v2/auth"
	cluster "github.com/cilium/proxy/go/envoy/api/v2/cluster"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	_type "github.com/cilium/proxy/go/envoy/type"
	_ "github.com/cncf/udpa/go/udpa/annotations"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	duration "github.com/golang/protobuf/ptypes/duration"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Refer to :ref:`service discovery type <arch_overview_service_discovery_types>`
// for an explanation on each type.
type Cluster_DiscoveryType int32

const (
	// Refer to the :ref:`static discovery type<arch_overview_service_discovery_types_static>`
	// for an explanation.
	Cluster_STATIC Cluster_DiscoveryType = 0
	// Refer to the :ref:`strict DNS discovery
	// type<arch_overview_service_discovery_types_strict_dns>`
	// for an explanation.
	Cluster_STRICT_DNS Cluster_DiscoveryType = 1
	// Refer to the :ref:`logical DNS discovery
	// type<arch_overview_service_discovery_types_logical_dns>`
	// for an explanation.
	Cluster_LOGICAL_DNS Cluster_DiscoveryType = 2
	// Refer to the :ref:`service discovery type<arch_overview_service_discovery_types_eds>`
	// for an explanation.
	Cluster_EDS Cluster_DiscoveryType = 3
	// Refer to the :ref:`original destination discovery
	// type<arch_overview_service_discovery_types_original_destination>`
	// for an explanation.
	Cluster_ORIGINAL_DST Cluster_DiscoveryType = 4
)

var Cluster_DiscoveryType_name = map[int32]string{
	0: "STATIC",
	1: "STRICT_DNS",
	2: "LOGICAL_DNS",
	3: "EDS",
	4: "ORIGINAL_DST",
}

var Cluster_DiscoveryType_value = map[string]int32{
	"STATIC":       0,
	"STRICT_DNS":   1,
	"LOGICAL_DNS":  2,
	"EDS":          3,
	"ORIGINAL_DST": 4,
}

func (x Cluster_DiscoveryType) String() string {
	return proto.EnumName(Cluster_DiscoveryType_name, int32(x))
}

func (Cluster_DiscoveryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 0}
}

// Refer to :ref:`load balancer type <arch_overview_load_balancing_types>` architecture
// overview section for information on each type.
type Cluster_LbPolicy int32

const (
	// Refer to the :ref:`round robin load balancing
	// policy<arch_overview_load_balancing_types_round_robin>`
	// for an explanation.
	Cluster_ROUND_ROBIN Cluster_LbPolicy = 0
	// Refer to the :ref:`least request load balancing
	// policy<arch_overview_load_balancing_types_least_request>`
	// for an explanation.
	Cluster_LEAST_REQUEST Cluster_LbPolicy = 1
	// Refer to the :ref:`ring hash load balancing
	// policy<arch_overview_load_balancing_types_ring_hash>`
	// for an explanation.
	Cluster_RING_HASH Cluster_LbPolicy = 2
	// Refer to the :ref:`random load balancing
	// policy<arch_overview_load_balancing_types_random>`
	// for an explanation.
	Cluster_RANDOM Cluster_LbPolicy = 3
	// Refer to the :ref:`original destination load balancing
	// policy<arch_overview_load_balancing_types_original_destination>`
	// for an explanation.
	//
	// .. attention::
	//
	//   **This load balancing policy is deprecated**. Use CLUSTER_PROVIDED instead.
	//
	Cluster_ORIGINAL_DST_LB Cluster_LbPolicy = 4 // Deprecated: Do not use.
	// Refer to the :ref:`Maglev load balancing policy<arch_overview_load_balancing_types_maglev>`
	// for an explanation.
	Cluster_MAGLEV Cluster_LbPolicy = 5
	// This load balancer type must be specified if the configured cluster provides a cluster
	// specific load balancer. Consult the configured cluster's documentation for whether to set
	// this option or not.
	Cluster_CLUSTER_PROVIDED Cluster_LbPolicy = 6
	// [#not-implemented-hide:] Use the new :ref:`load_balancing_policy
	// <envoy_api_field_Cluster.load_balancing_policy>` field to determine the LB policy.
	// [#next-major-version: In the v3 API, we should consider deprecating the lb_policy field
	// and instead using the new load_balancing_policy field as the one and only mechanism for
	// configuring this.]
	Cluster_LOAD_BALANCING_POLICY_CONFIG Cluster_LbPolicy = 7
)

var Cluster_LbPolicy_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_REQUEST",
	2: "RING_HASH",
	3: "RANDOM",
	4: "ORIGINAL_DST_LB",
	5: "MAGLEV",
	6: "CLUSTER_PROVIDED",
	7: "LOAD_BALANCING_POLICY_CONFIG",
}

var Cluster_LbPolicy_value = map[string]int32{
	"ROUND_ROBIN":                  0,
	"LEAST_REQUEST":                1,
	"RING_HASH":                    2,
	"RANDOM":                       3,
	"ORIGINAL_DST_LB":              4,
	"MAGLEV":                       5,
	"CLUSTER_PROVIDED":             6,
	"LOAD_BALANCING_POLICY_CONFIG": 7,
}

func (x Cluster_LbPolicy) String() string {
	return proto.EnumName(Cluster_LbPolicy_name, int32(x))
}

func (Cluster_LbPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 1}
}

// When V4_ONLY is selected, the DNS resolver will only perform a lookup for
// addresses in the IPv4 family. If V6_ONLY is selected, the DNS resolver will
// only perform a lookup for addresses in the IPv6 family. If AUTO is
// specified, the DNS resolver will first perform a lookup for addresses in
// the IPv6 family and fallback to a lookup for addresses in the IPv4 family.
// For cluster types other than
// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>` and
// :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
// this setting is
// ignored.
type Cluster_DnsLookupFamily int32

const (
	Cluster_AUTO    Cluster_DnsLookupFamily = 0
	Cluster_V4_ONLY Cluster_DnsLookupFamily = 1
	Cluster_V6_ONLY Cluster_DnsLookupFamily = 2
)

var Cluster_DnsLookupFamily_name = map[int32]string{
	0: "AUTO",
	1: "V4_ONLY",
	2: "V6_ONLY",
}

var Cluster_DnsLookupFamily_value = map[string]int32{
	"AUTO":    0,
	"V4_ONLY": 1,
	"V6_ONLY": 2,
}

func (x Cluster_DnsLookupFamily) String() string {
	return proto.EnumName(Cluster_DnsLookupFamily_name, int32(x))
}

func (Cluster_DnsLookupFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 2}
}

type Cluster_ClusterProtocolSelection int32

const (
	// Cluster can only operate on one of the possible upstream protocols (HTTP1.1, HTTP2).
	// If :ref:`http2_protocol_options <envoy_api_field_Cluster.http2_protocol_options>` are
	// present, HTTP2 will be used, otherwise HTTP1.1 will be used.
	Cluster_USE_CONFIGURED_PROTOCOL Cluster_ClusterProtocolSelection = 0
	// Use HTTP1.1 or HTTP2, depending on which one is used on the downstream connection.
	Cluster_USE_DOWNSTREAM_PROTOCOL Cluster_ClusterProtocolSelection = 1
)

var Cluster_ClusterProtocolSelection_name = map[int32]string{
	0: "USE_CONFIGURED_PROTOCOL",
	1: "USE_DOWNSTREAM_PROTOCOL",
}

var Cluster_ClusterProtocolSelection_value = map[string]int32{
	"USE_CONFIGURED_PROTOCOL": 0,
	"USE_DOWNSTREAM_PROTOCOL": 1,
}

func (x Cluster_ClusterProtocolSelection) String() string {
	return proto.EnumName(Cluster_ClusterProtocolSelection_name, int32(x))
}

func (Cluster_ClusterProtocolSelection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 3}
}

// If NO_FALLBACK is selected, a result
// equivalent to no healthy hosts is reported. If ANY_ENDPOINT is selected,
// any cluster endpoint may be returned (subject to policy, health checks,
// etc). If DEFAULT_SUBSET is selected, load balancing is performed over the
// endpoints matching the values from the default_subset field.
type Cluster_LbSubsetConfig_LbSubsetFallbackPolicy int32

const (
	Cluster_LbSubsetConfig_NO_FALLBACK    Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 0
	Cluster_LbSubsetConfig_ANY_ENDPOINT   Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 1
	Cluster_LbSubsetConfig_DEFAULT_SUBSET Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 2
)

var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name = map[int32]string{
	0: "NO_FALLBACK",
	1: "ANY_ENDPOINT",
	2: "DEFAULT_SUBSET",
}

var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value = map[string]int32{
	"NO_FALLBACK":    0,
	"ANY_ENDPOINT":   1,
	"DEFAULT_SUBSET": 2,
}

func (x Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) String() string {
	return proto.EnumName(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, int32(x))
}

func (Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 3, 0}
}

// Allows to override top level fallback policy per selector.
type Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy int32

const (
	// If NOT_DEFINED top level config fallback policy is used instead.
	Cluster_LbSubsetConfig_LbSubsetSelector_NOT_DEFINED Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy = 0
	// If NO_FALLBACK is selected, a result equivalent to no healthy hosts is reported.
	Cluster_LbSubsetConfig_LbSubsetSelector_NO_FALLBACK Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy = 1
	// If ANY_ENDPOINT is selected, any cluster endpoint may be returned
	// (subject to policy, health checks, etc).
	Cluster_LbSubsetConfig_LbSubsetSelector_ANY_ENDPOINT Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy = 2
	// If DEFAULT_SUBSET is selected, load balancing is performed over the
	// endpoints matching the values from the default_subset field.
	Cluster_LbSubsetConfig_LbSubsetSelector_DEFAULT_SUBSET Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy = 3
	// If KEYS_SUBSET is selected, subset selector matching is performed again with metadata
	// keys reduced to
	// :ref:`fallback_keys_subset<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.fallback_keys_subset>`.
	// It allows for a fallback to a different, less specific selector if some of the keys of
	// the selector are considered optional.
	Cluster_LbSubsetConfig_LbSubsetSelector_KEYS_SUBSET Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy = 4
)

var Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_name = map[int32]string{
	0: "NOT_DEFINED",
	1: "NO_FALLBACK",
	2: "ANY_ENDPOINT",
	3: "DEFAULT_SUBSET",
	4: "KEYS_SUBSET",
}

var Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_value = map[string]int32{
	"NOT_DEFINED":    0,
	"NO_FALLBACK":    1,
	"ANY_ENDPOINT":   2,
	"DEFAULT_SUBSET": 3,
	"KEYS_SUBSET":    4,
}

func (x Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy) String() string {
	return proto.EnumName(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_name, int32(x))
}

func (Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 3, 0, 0}
}

// The hash function used to hash hosts onto the ketama ring.
type Cluster_RingHashLbConfig_HashFunction int32

const (
	// Use `xxHash <https://github.com/Cyan4973/xxHash>`_, this is the default hash function.
	Cluster_RingHashLbConfig_XX_HASH Cluster_RingHashLbConfig_HashFunction = 0
	// Use `MurmurHash2 <https://sites.google.com/site/murmurhash/>`_, this is compatible with
	// std:hash<string> in GNU libstdc++ 3.4.20 or above. This is typically the case when compiled
	// on Linux and not macOS.
	Cluster_RingHashLbConfig_MURMUR_HASH_2 Cluster_RingHashLbConfig_HashFunction = 1
)

var Cluster_RingHashLbConfig_HashFunction_name = map[int32]string{
	0: "XX_HASH",
	1: "MURMUR_HASH_2",
}

var Cluster_RingHashLbConfig_HashFunction_value = map[string]int32{
	"XX_HASH":       0,
	"MURMUR_HASH_2": 1,
}

func (x Cluster_RingHashLbConfig_HashFunction) String() string {
	return proto.EnumName(Cluster_RingHashLbConfig_HashFunction_name, int32(x))
}

func (Cluster_RingHashLbConfig_HashFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 5, 0}
}

// Configuration for a single upstream cluster.
// [#next-free-field: 48]
type Cluster struct {
	// Configuration to use different transport sockets for different endpoints.
	// The entry of *envoy.transport_socket* in the
	// :ref:`LbEndpoint.Metadata <envoy_api_field_endpoint.LbEndpoint.metadata>`
	// is used to match against the transport sockets as they appear in the list. The first
	// :ref:`match <envoy_api_msg_Cluster.TransportSocketMatch>` is used.
	// For example, with the following match
	//
	// .. code-block:: yaml
	//
	//  transport_socket_matches:
	//  - name: "enableMTLS"
	//    match:
	//      acceptMTLS: true
	//    transport_socket:
	//      name: envoy.transport_sockets.tls
	//      config: { ... } # tls socket configuration
	//  - name: "defaultToPlaintext"
	//    match: {}
	//    transport_socket:
	//      name: envoy.transport_sockets.raw_buffer
	//
	// Connections to the endpoints whose metadata value under *envoy.transport_socket*
	// having "acceptMTLS"/"true" key/value pair use the "enableMTLS" socket configuration.
	//
	// If a :ref:`socket match <envoy_api_msg_Cluster.TransportSocketMatch>` with empty match
	// criteria is provided, that always match any endpoint. For example, the "defaultToPlaintext"
	// socket match in case above.
	//
	// If an endpoint metadata's value under *envoy.transport_socket* does not match any
	// *TransportSocketMatch*, socket configuration fallbacks to use the *tls_context* or
	// *transport_socket* specified in this cluster.
	//
	// This field allows gradual and flexible transport socket configuration changes.
	//
	// The metadata of endpoints in EDS can indicate transport socket capabilities. For example,
	// an endpoint's metadata can have two key value pairs as "acceptMTLS": "true",
	// "acceptPlaintext": "true". While some other endpoints, only accepting plaintext traffic
	// has "acceptPlaintext": "true" metadata information.
	//
	// Then the xDS server can configure the CDS to a client, Envoy A, to send mutual TLS
	// traffic for endpoints with "acceptMTLS": "true", by adding a corresponding
	// *TransportSocketMatch* in this field. Other client Envoys receive CDS without
	// *transport_socket_match* set, and still send plain text traffic to the same cluster.
	//
	// [#comment:TODO(incfly): add a detailed architecture doc on intended usage.]
	TransportSocketMatches []*Cluster_TransportSocketMatch `protobuf:"bytes,43,rep,name=transport_socket_matches,json=transportSocketMatches,proto3" json:"transport_socket_matches,omitempty"`
	// Supplies the name of the cluster which must be unique across all clusters.
	// The cluster name is used when emitting
	// :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
	// <envoy_api_field_Cluster.alt_stat_name>` is not provided.
	// Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An optional alternative to the cluster name to be used while emitting stats.
	// Any ``:`` in the name will be converted to ``_`` when emitting statistics. This should not be
	// confused with :ref:`Router Filter Header
	// <config_http_filters_router_x-envoy-upstream-alt-stat-name>`.
	AltStatName string `protobuf:"bytes,28,opt,name=alt_stat_name,json=altStatName,proto3" json:"alt_stat_name,omitempty"`
	// Types that are valid to be assigned to ClusterDiscoveryType:
	//	*Cluster_Type
	//	*Cluster_ClusterType
	ClusterDiscoveryType isCluster_ClusterDiscoveryType `protobuf_oneof:"cluster_discovery_type"`
	// Configuration to use for EDS updates for the Cluster.
	EdsClusterConfig *Cluster_EdsClusterConfig `protobuf:"bytes,3,opt,name=eds_cluster_config,json=edsClusterConfig,proto3" json:"eds_cluster_config,omitempty"`
	// The timeout for new network connections to hosts in the cluster.
	ConnectTimeout *duration.Duration `protobuf:"bytes,4,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	// Soft limit on size of the cluster’s connections read and write buffers. If
	// unspecified, an implementation defined default is applied (1MiB).
	PerConnectionBufferLimitBytes *wrappers.UInt32Value `protobuf:"bytes,5,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes,proto3" json:"per_connection_buffer_limit_bytes,omitempty"`
	// The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
	// when picking a host in the cluster.
	LbPolicy Cluster_LbPolicy `protobuf:"varint,6,opt,name=lb_policy,json=lbPolicy,proto3,enum=envoy.api.v2.Cluster_LbPolicy" json:"lb_policy,omitempty"`
	// If the service discovery type is
	// :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// then hosts is required.
	//
	// .. attention::
	//
	//   **This field is deprecated**. Set the
	//   :ref:`load_assignment<envoy_api_field_Cluster.load_assignment>` field instead.
	//
	Hosts []*core.Address `protobuf:"bytes,7,rep,name=hosts,proto3" json:"hosts,omitempty"` // Deprecated: Do not use.
	// Setting this is required for specifying members of
	// :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` clusters.
	// This field supersedes the *hosts* field in the v2 API.
	//
	// .. attention::
	//
	//   Setting this allows non-EDS cluster types to contain embedded EDS equivalent
	//   :ref:`endpoint assignments<envoy_api_msg_ClusterLoadAssignment>`.
	//
	LoadAssignment *ClusterLoadAssignment `protobuf:"bytes,33,opt,name=load_assignment,json=loadAssignment,proto3" json:"load_assignment,omitempty"`
	// Optional :ref:`active health checking <arch_overview_health_checking>`
	// configuration for the cluster. If no
	// configuration is specified no health checking will be done and all cluster
	// members will be considered healthy at all times.
	HealthChecks []*core.HealthCheck `protobuf:"bytes,8,rep,name=health_checks,json=healthChecks,proto3" json:"health_checks,omitempty"`
	// Optional maximum requests for a single upstream connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 connection pool
	// implementations. If not specified, there is no limit. Setting this
	// parameter to 1 will effectively disable keep alive.
	MaxRequestsPerConnection *wrappers.UInt32Value `protobuf:"bytes,9,opt,name=max_requests_per_connection,json=maxRequestsPerConnection,proto3" json:"max_requests_per_connection,omitempty"`
	// Optional :ref:`circuit breaking <arch_overview_circuit_break>` for the cluster.
	CircuitBreakers *cluster.CircuitBreakers `protobuf:"bytes,10,opt,name=circuit_breakers,json=circuitBreakers,proto3" json:"circuit_breakers,omitempty"`
	// The TLS configuration for connections to the upstream cluster.
	//
	// .. attention::
	//
	//   **This field is deprecated**. Use `transport_socket` with name `tls` instead. If both are
	//   set, `transport_socket` takes priority.
	TlsContext *auth.UpstreamTlsContext `protobuf:"bytes,11,opt,name=tls_context,json=tlsContext,proto3" json:"tls_context,omitempty"` // Deprecated: Do not use.
	// HTTP protocol options that are applied only to upstream HTTP connections.
	// These options apply to all HTTP versions.
	UpstreamHttpProtocolOptions *core.UpstreamHttpProtocolOptions `protobuf:"bytes,46,opt,name=upstream_http_protocol_options,json=upstreamHttpProtocolOptions,proto3" json:"upstream_http_protocol_options,omitempty"`
	// Additional options when handling HTTP requests upstream. These options will be applicable to
	// both HTTP1 and HTTP2 requests.
	CommonHttpProtocolOptions *core.HttpProtocolOptions `protobuf:"bytes,29,opt,name=common_http_protocol_options,json=commonHttpProtocolOptions,proto3" json:"common_http_protocol_options,omitempty"`
	// Additional options when handling HTTP1 requests.
	HttpProtocolOptions *core.Http1ProtocolOptions `protobuf:"bytes,13,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
	// Even if default HTTP2 protocol options are desired, this field must be
	// set so that Envoy will assume that the upstream supports HTTP/2 when
	// making new HTTP connection pool connections. Currently, Envoy only
	// supports prior knowledge for upstream connections. Even if TLS is used
	// with ALPN, `http2_protocol_options` must be specified. As an aside this allows HTTP/2
	// connections to happen over plain text.
	Http2ProtocolOptions *core.Http2ProtocolOptions `protobuf:"bytes,14,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	// The extension_protocol_options field is used to provide extension-specific protocol options
	// for upstream connections. The key should match the extension filter name, such as
	// "envoy.filters.network.thrift_proxy". See the extension's documentation for details on
	// specific options.
	ExtensionProtocolOptions map[string]*_struct.Struct `protobuf:"bytes,35,rep,name=extension_protocol_options,json=extensionProtocolOptions,proto3" json:"extension_protocol_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Deprecated: Do not use.
	// The extension_protocol_options field is used to provide extension-specific protocol options
	// for upstream connections. The key should match the extension filter name, such as
	// "envoy.filters.network.thrift_proxy". See the extension's documentation for details on
	// specific options.
	TypedExtensionProtocolOptions map[string]*any.Any `protobuf:"bytes,36,rep,name=typed_extension_protocol_options,json=typedExtensionProtocolOptions,proto3" json:"typed_extension_protocol_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If the DNS refresh rate is specified and the cluster type is either
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// this value is used as the cluster’s DNS refresh
	// rate. The value configured must be at least 1ms. If this setting is not specified, the
	// value defaults to 5000ms. For cluster types other than
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
	// this setting is ignored.
	DnsRefreshRate *duration.Duration `protobuf:"bytes,16,opt,name=dns_refresh_rate,json=dnsRefreshRate,proto3" json:"dns_refresh_rate,omitempty"`
	// If the DNS failure refresh rate is specified and the cluster type is either
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// this is used as the cluster’s DNS refresh rate when requests are failing. If this setting is
	// not specified, the failure refresh rate defaults to the DNS refresh rate. For cluster types
	// other than :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>` and
	// :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>` this setting is
	// ignored.
	//
	// Note: Currently, DNS failures and empty DNS responses are not treated differently and this
	// configuration is applied in both situations.
	DnsFailureRefreshRate *Cluster_RefreshRate `protobuf:"bytes,44,opt,name=dns_failure_refresh_rate,json=dnsFailureRefreshRate,proto3" json:"dns_failure_refresh_rate,omitempty"`
	// Optional configuration for setting cluster's DNS refresh rate. If the value is set to true,
	// cluster's DNS refresh rate will be set to resource record's TTL which comes from DNS
	// resolution.
	RespectDnsTtl bool `protobuf:"varint,39,opt,name=respect_dns_ttl,json=respectDnsTtl,proto3" json:"respect_dns_ttl,omitempty"`
	// The DNS IP address resolution policy. If this setting is not specified, the
	// value defaults to
	// :ref:`AUTO<envoy_api_enum_value_Cluster.DnsLookupFamily.AUTO>`.
	DnsLookupFamily Cluster_DnsLookupFamily `protobuf:"varint,17,opt,name=dns_lookup_family,json=dnsLookupFamily,proto3,enum=envoy.api.v2.Cluster_DnsLookupFamily" json:"dns_lookup_family,omitempty"`
	// If DNS resolvers are specified and the cluster type is either
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// this value is used to specify the cluster’s dns resolvers.
	// If this setting is not specified, the value defaults to the default
	// resolver, which uses /etc/resolv.conf for configuration. For cluster types
	// other than
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
	// this setting is ignored.
	DnsResolvers []*core.Address `protobuf:"bytes,18,rep,name=dns_resolvers,json=dnsResolvers,proto3" json:"dns_resolvers,omitempty"`
	// [#next-major-version: Reconcile DNS options in a single message.]
	// Always use TCP queries instead of UDP queries for DNS lookups.
	UseTcpForDnsLookups bool `protobuf:"varint,45,opt,name=use_tcp_for_dns_lookups,json=useTcpForDnsLookups,proto3" json:"use_tcp_for_dns_lookups,omitempty"`
	// If specified, outlier detection will be enabled for this upstream cluster.
	// Each of the configuration values can be overridden via
	// :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`.
	OutlierDetection *cluster.OutlierDetection `protobuf:"bytes,19,opt,name=outlier_detection,json=outlierDetection,proto3" json:"outlier_detection,omitempty"`
	// The interval for removing stale hosts from a cluster type
	// :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`.
	// Hosts are considered stale if they have not been used
	// as upstream destinations during this interval. New hosts are added
	// to original destination clusters on demand as new connections are
	// redirected to Envoy, causing the number of hosts in the cluster to
	// grow over time. Hosts that are not stale (they are actively used as
	// destinations) are kept in the cluster, which allows connections to
	// them remain open, saving the latency that would otherwise be spent
	// on opening new connections. If this setting is not specified, the
	// value defaults to 5000ms. For cluster types other than
	// :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`
	// this setting is ignored.
	CleanupInterval *duration.Duration `protobuf:"bytes,20,opt,name=cleanup_interval,json=cleanupInterval,proto3" json:"cleanup_interval,omitempty"`
	// Optional configuration used to bind newly established upstream connections.
	// This overrides any bind_config specified in the bootstrap proto.
	// If the address and port are empty, no bind will be performed.
	UpstreamBindConfig *core.BindConfig `protobuf:"bytes,21,opt,name=upstream_bind_config,json=upstreamBindConfig,proto3" json:"upstream_bind_config,omitempty"`
	// Configuration for load balancing subsetting.
	LbSubsetConfig *Cluster_LbSubsetConfig `protobuf:"bytes,22,opt,name=lb_subset_config,json=lbSubsetConfig,proto3" json:"lb_subset_config,omitempty"`
	// Optional configuration for the load balancing algorithm selected by
	// LbPolicy. Currently only
	// :ref:`RING_HASH<envoy_api_enum_value_Cluster.LbPolicy.RING_HASH>` and
	// :ref:`LEAST_REQUEST<envoy_api_enum_value_Cluster.LbPolicy.LEAST_REQUEST>`
	// has additional configuration options.
	// Specifying ring_hash_lb_config or least_request_lb_config without setting the corresponding
	// LbPolicy will generate an error at runtime.
	//
	// Types that are valid to be assigned to LbConfig:
	//	*Cluster_RingHashLbConfig_
	//	*Cluster_OriginalDstLbConfig_
	//	*Cluster_LeastRequestLbConfig_
	LbConfig isCluster_LbConfig `protobuf_oneof:"lb_config"`
	// Common configuration for all load balancer implementations.
	CommonLbConfig *Cluster_CommonLbConfig `protobuf:"bytes,27,opt,name=common_lb_config,json=commonLbConfig,proto3" json:"common_lb_config,omitempty"`
	// Optional custom transport socket implementation to use for upstream connections.
	// To setup TLS, set a transport socket with name `tls` and
	// :ref:`UpstreamTlsContexts <envoy_api_msg_auth.UpstreamTlsContext>` in the `typed_config`.
	// If no transport socket configuration is specified, new connections
	// will be set up with plaintext.
	TransportSocket *core.TransportSocket `protobuf:"bytes,24,opt,name=transport_socket,json=transportSocket,proto3" json:"transport_socket,omitempty"`
	// The Metadata field can be used to provide additional information about the
	// cluster. It can be used for stats, logging, and varying filter behavior.
	// Fields should use reverse DNS notation to denote which entity within Envoy
	// will need the information. For instance, if the metadata is intended for
	// the Router filter, the filter name should be specified as *envoy.router*.
	Metadata *core.Metadata `protobuf:"bytes,25,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Determines how Envoy selects the protocol used to speak to upstream hosts.
	ProtocolSelection Cluster_ClusterProtocolSelection `protobuf:"varint,26,opt,name=protocol_selection,json=protocolSelection,proto3,enum=envoy.api.v2.Cluster_ClusterProtocolSelection" json:"protocol_selection,omitempty"`
	// Optional options for upstream connections.
	UpstreamConnectionOptions *UpstreamConnectionOptions `protobuf:"bytes,30,opt,name=upstream_connection_options,json=upstreamConnectionOptions,proto3" json:"upstream_connection_options,omitempty"`
	// If an upstream host becomes unhealthy (as determined by the configured health checks
	// or outlier detection), immediately close all connections to the failed host.
	//
	// .. note::
	//
	//   This is currently only supported for connections created by tcp_proxy.
	//
	// .. note::
	//
	//   The current implementation of this feature closes all connections immediately when
	//   the unhealthy status is detected. If there are a large number of connections open
	//   to an upstream host that becomes unhealthy, Envoy may spend a substantial amount of
	//   time exclusively closing these connections, and not processing any other traffic.
	CloseConnectionsOnHostHealthFailure bool `protobuf:"varint,31,opt,name=close_connections_on_host_health_failure,json=closeConnectionsOnHostHealthFailure,proto3" json:"close_connections_on_host_health_failure,omitempty"`
	// If set to true, Envoy will ignore the health value of a host when processing its removal
	// from service discovery. This means that if active health checking is used, Envoy will *not*
	// wait for the endpoint to go unhealthy before removing it.
	DrainConnectionsOnHostRemoval bool `protobuf:"varint,32,opt,name=drain_connections_on_host_removal,json=drainConnectionsOnHostRemoval,proto3" json:"drain_connections_on_host_removal,omitempty"`
	// An (optional) network filter chain, listed in the order the filters should be applied.
	// The chain will be applied to all outgoing connections that Envoy makes to the upstream
	// servers of this cluster.
	Filters []*cluster.Filter `protobuf:"bytes,40,rep,name=filters,proto3" json:"filters,omitempty"`
	// [#not-implemented-hide:] New mechanism for LB policy configuration. Used only if the
	// :ref:`lb_policy<envoy_api_field_Cluster.lb_policy>` field has the value
	// :ref:`LOAD_BALANCING_POLICY_CONFIG<envoy_api_enum_value_Cluster.LbPolicy.LOAD_BALANCING_POLICY_CONFIG>`.
	LoadBalancingPolicy *LoadBalancingPolicy `protobuf:"bytes,41,opt,name=load_balancing_policy,json=loadBalancingPolicy,proto3" json:"load_balancing_policy,omitempty"`
	// [#not-implemented-hide:]
	// If present, tells the client where to send load reports via LRS. If not present, the
	// client will fall back to a client-side default, which may be either (a) don't send any
	// load reports or (b) send load reports for all clusters to a single default server
	// (which may be configured in the bootstrap file).
	//
	// Note that if multiple clusters point to the same LRS server, the client may choose to
	// create a separate stream for each cluster or it may choose to coalesce the data for
	// multiple clusters onto a single stream. Either way, the client must make sure to send
	// the data for any given cluster on no more than one stream.
	//
	// [#next-major-version: In the v3 API, we should consider restructuring this somehow,
	// maybe by allowing LRS to go on the ADS stream, or maybe by moving some of the negotiation
	// from the LRS stream here.]
	LrsServer *core.ConfigSource `protobuf:"bytes,42,opt,name=lrs_server,json=lrsServer,proto3" json:"lrs_server,omitempty"`
	// If track_timeout_budgets is true, the :ref:`timeout budget histograms
	// <config_cluster_manager_cluster_stats_timeout_budgets>` will be published for each
	// request. These show what percentage of a request's per try and global timeout was used. A value
	// of 0 would indicate that none of the timeout was used or that the timeout was infinite. A value
	// of 100 would indicate that the request took the entirety of the timeout given to it.
	TrackTimeoutBudgets  bool     `protobuf:"varint,47,opt,name=track_timeout_budgets,json=trackTimeoutBudgets,proto3" json:"track_timeout_budgets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetTransportSocketMatches() []*Cluster_TransportSocketMatch {
	if m != nil {
		return m.TransportSocketMatches
	}
	return nil
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetAltStatName() string {
	if m != nil {
		return m.AltStatName
	}
	return ""
}

type isCluster_ClusterDiscoveryType interface {
	isCluster_ClusterDiscoveryType()
}

type Cluster_Type struct {
	Type Cluster_DiscoveryType `protobuf:"varint,2,opt,name=type,proto3,enum=envoy.api.v2.Cluster_DiscoveryType,oneof"`
}

type Cluster_ClusterType struct {
	ClusterType *Cluster_CustomClusterType `protobuf:"bytes,38,opt,name=cluster_type,json=clusterType,proto3,oneof"`
}

func (*Cluster_Type) isCluster_ClusterDiscoveryType() {}

func (*Cluster_ClusterType) isCluster_ClusterDiscoveryType() {}

func (m *Cluster) GetClusterDiscoveryType() isCluster_ClusterDiscoveryType {
	if m != nil {
		return m.ClusterDiscoveryType
	}
	return nil
}

func (m *Cluster) GetType() Cluster_DiscoveryType {
	if x, ok := m.GetClusterDiscoveryType().(*Cluster_Type); ok {
		return x.Type
	}
	return Cluster_STATIC
}

func (m *Cluster) GetClusterType() *Cluster_CustomClusterType {
	if x, ok := m.GetClusterDiscoveryType().(*Cluster_ClusterType); ok {
		return x.ClusterType
	}
	return nil
}

func (m *Cluster) GetEdsClusterConfig() *Cluster_EdsClusterConfig {
	if m != nil {
		return m.EdsClusterConfig
	}
	return nil
}

func (m *Cluster) GetConnectTimeout() *duration.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *Cluster) GetPerConnectionBufferLimitBytes() *wrappers.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

func (m *Cluster) GetLbPolicy() Cluster_LbPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return Cluster_ROUND_ROBIN
}

// Deprecated: Do not use.
func (m *Cluster) GetHosts() []*core.Address {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Cluster) GetLoadAssignment() *ClusterLoadAssignment {
	if m != nil {
		return m.LoadAssignment
	}
	return nil
}

func (m *Cluster) GetHealthChecks() []*core.HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *Cluster) GetMaxRequestsPerConnection() *wrappers.UInt32Value {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return nil
}

func (m *Cluster) GetCircuitBreakers() *cluster.CircuitBreakers {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

// Deprecated: Do not use.
func (m *Cluster) GetTlsContext() *auth.UpstreamTlsContext {
	if m != nil {
		return m.TlsContext
	}
	return nil
}

func (m *Cluster) GetUpstreamHttpProtocolOptions() *core.UpstreamHttpProtocolOptions {
	if m != nil {
		return m.UpstreamHttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetCommonHttpProtocolOptions() *core.HttpProtocolOptions {
	if m != nil {
		return m.CommonHttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttpProtocolOptions() *core.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttp2ProtocolOptions() *core.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

// Deprecated: Do not use.
func (m *Cluster) GetExtensionProtocolOptions() map[string]*_struct.Struct {
	if m != nil {
		return m.ExtensionProtocolOptions
	}
	return nil
}

func (m *Cluster) GetTypedExtensionProtocolOptions() map[string]*any.Any {
	if m != nil {
		return m.TypedExtensionProtocolOptions
	}
	return nil
}

func (m *Cluster) GetDnsRefreshRate() *duration.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *Cluster) GetDnsFailureRefreshRate() *Cluster_RefreshRate {
	if m != nil {
		return m.DnsFailureRefreshRate
	}
	return nil
}

func (m *Cluster) GetRespectDnsTtl() bool {
	if m != nil {
		return m.RespectDnsTtl
	}
	return false
}

func (m *Cluster) GetDnsLookupFamily() Cluster_DnsLookupFamily {
	if m != nil {
		return m.DnsLookupFamily
	}
	return Cluster_AUTO
}

func (m *Cluster) GetDnsResolvers() []*core.Address {
	if m != nil {
		return m.DnsResolvers
	}
	return nil
}

func (m *Cluster) GetUseTcpForDnsLookups() bool {
	if m != nil {
		return m.UseTcpForDnsLookups
	}
	return false
}

func (m *Cluster) GetOutlierDetection() *cluster.OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *Cluster) GetCleanupInterval() *duration.Duration {
	if m != nil {
		return m.CleanupInterval
	}
	return nil
}

func (m *Cluster) GetUpstreamBindConfig() *core.BindConfig {
	if m != nil {
		return m.UpstreamBindConfig
	}
	return nil
}

func (m *Cluster) GetLbSubsetConfig() *Cluster_LbSubsetConfig {
	if m != nil {
		return m.LbSubsetConfig
	}
	return nil
}

type isCluster_LbConfig interface {
	isCluster_LbConfig()
}

type Cluster_RingHashLbConfig_ struct {
	RingHashLbConfig *Cluster_RingHashLbConfig `protobuf:"bytes,23,opt,name=ring_hash_lb_config,json=ringHashLbConfig,proto3,oneof"`
}

type Cluster_OriginalDstLbConfig_ struct {
	OriginalDstLbConfig *Cluster_OriginalDstLbConfig `protobuf:"bytes,34,opt,name=original_dst_lb_config,json=originalDstLbConfig,proto3,oneof"`
}

type Cluster_LeastRequestLbConfig_ struct {
	LeastRequestLbConfig *Cluster_LeastRequestLbConfig `protobuf:"bytes,37,opt,name=least_request_lb_config,json=leastRequestLbConfig,proto3,oneof"`
}

func (*Cluster_RingHashLbConfig_) isCluster_LbConfig() {}

func (*Cluster_OriginalDstLbConfig_) isCluster_LbConfig() {}

func (*Cluster_LeastRequestLbConfig_) isCluster_LbConfig() {}

func (m *Cluster) GetLbConfig() isCluster_LbConfig {
	if m != nil {
		return m.LbConfig
	}
	return nil
}

func (m *Cluster) GetRingHashLbConfig() *Cluster_RingHashLbConfig {
	if x, ok := m.GetLbConfig().(*Cluster_RingHashLbConfig_); ok {
		return x.RingHashLbConfig
	}
	return nil
}

func (m *Cluster) GetOriginalDstLbConfig() *Cluster_OriginalDstLbConfig {
	if x, ok := m.GetLbConfig().(*Cluster_OriginalDstLbConfig_); ok {
		return x.OriginalDstLbConfig
	}
	return nil
}

func (m *Cluster) GetLeastRequestLbConfig() *Cluster_LeastRequestLbConfig {
	if x, ok := m.GetLbConfig().(*Cluster_LeastRequestLbConfig_); ok {
		return x.LeastRequestLbConfig
	}
	return nil
}

func (m *Cluster) GetCommonLbConfig() *Cluster_CommonLbConfig {
	if m != nil {
		return m.CommonLbConfig
	}
	return nil
}

func (m *Cluster) GetTransportSocket() *core.TransportSocket {
	if m != nil {
		return m.TransportSocket
	}
	return nil
}

func (m *Cluster) GetMetadata() *core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Cluster) GetProtocolSelection() Cluster_ClusterProtocolSelection {
	if m != nil {
		return m.ProtocolSelection
	}
	return Cluster_USE_CONFIGURED_PROTOCOL
}

func (m *Cluster) GetUpstreamConnectionOptions() *UpstreamConnectionOptions {
	if m != nil {
		return m.UpstreamConnectionOptions
	}
	return nil
}

func (m *Cluster) GetCloseConnectionsOnHostHealthFailure() bool {
	if m != nil {
		return m.CloseConnectionsOnHostHealthFailure
	}
	return false
}

func (m *Cluster) GetDrainConnectionsOnHostRemoval() bool {
	if m != nil {
		return m.DrainConnectionsOnHostRemoval
	}
	return false
}

func (m *Cluster) GetFilters() []*cluster.Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *Cluster) GetLoadBalancingPolicy() *LoadBalancingPolicy {
	if m != nil {
		return m.LoadBalancingPolicy
	}
	return nil
}

func (m *Cluster) GetLrsServer() *core.ConfigSource {
	if m != nil {
		return m.LrsServer
	}
	return nil
}

func (m *Cluster) GetTrackTimeoutBudgets() bool {
	if m != nil {
		return m.TrackTimeoutBudgets
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Cluster) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Cluster_Type)(nil),
		(*Cluster_ClusterType)(nil),
		(*Cluster_RingHashLbConfig_)(nil),
		(*Cluster_OriginalDstLbConfig_)(nil),
		(*Cluster_LeastRequestLbConfig_)(nil),
	}
}

// TransportSocketMatch specifies what transport socket config will be used
// when the match conditions are satisfied.
type Cluster_TransportSocketMatch struct {
	// The name of the match, used in stats generation.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional endpoint metadata match criteria.
	// The connection to the endpoint with metadata matching what is set in this field
	// will use the transport socket configuration specified here.
	// The endpoint's metadata entry in *envoy.transport_socket_match* is used to match
	// against the values specified in this field.
	Match *_struct.Struct `protobuf:"bytes,2,opt,name=match,proto3" json:"match,omitempty"`
	// The configuration of the transport socket.
	TransportSocket      *core.TransportSocket `protobuf:"bytes,3,opt,name=transport_socket,json=transportSocket,proto3" json:"transport_socket,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Cluster_TransportSocketMatch) Reset()         { *m = Cluster_TransportSocketMatch{} }
func (m *Cluster_TransportSocketMatch) String() string { return proto.CompactTextString(m) }
func (*Cluster_TransportSocketMatch) ProtoMessage()    {}
func (*Cluster_TransportSocketMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 0}
}

func (m *Cluster_TransportSocketMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_TransportSocketMatch.Unmarshal(m, b)
}
func (m *Cluster_TransportSocketMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_TransportSocketMatch.Marshal(b, m, deterministic)
}
func (m *Cluster_TransportSocketMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_TransportSocketMatch.Merge(m, src)
}
func (m *Cluster_TransportSocketMatch) XXX_Size() int {
	return xxx_messageInfo_Cluster_TransportSocketMatch.Size(m)
}
func (m *Cluster_TransportSocketMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_TransportSocketMatch.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_TransportSocketMatch proto.InternalMessageInfo

func (m *Cluster_TransportSocketMatch) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster_TransportSocketMatch) GetMatch() *_struct.Struct {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Cluster_TransportSocketMatch) GetTransportSocket() *core.TransportSocket {
	if m != nil {
		return m.TransportSocket
	}
	return nil
}

// Extended cluster type.
type Cluster_CustomClusterType struct {
	// The type of the cluster to instantiate. The name must match a supported cluster type.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cluster specific configuration which depends on the cluster being instantiated.
	// See the supported cluster for further documentation.
	TypedConfig          *any.Any `protobuf:"bytes,2,opt,name=typed_config,json=typedConfig,proto3" json:"typed_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_CustomClusterType) Reset()         { *m = Cluster_CustomClusterType{} }
func (m *Cluster_CustomClusterType) String() string { return proto.CompactTextString(m) }
func (*Cluster_CustomClusterType) ProtoMessage()    {}
func (*Cluster_CustomClusterType) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 1}
}

func (m *Cluster_CustomClusterType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_CustomClusterType.Unmarshal(m, b)
}
func (m *Cluster_CustomClusterType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_CustomClusterType.Marshal(b, m, deterministic)
}
func (m *Cluster_CustomClusterType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_CustomClusterType.Merge(m, src)
}
func (m *Cluster_CustomClusterType) XXX_Size() int {
	return xxx_messageInfo_Cluster_CustomClusterType.Size(m)
}
func (m *Cluster_CustomClusterType) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_CustomClusterType.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_CustomClusterType proto.InternalMessageInfo

func (m *Cluster_CustomClusterType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster_CustomClusterType) GetTypedConfig() *any.Any {
	if m != nil {
		return m.TypedConfig
	}
	return nil
}

// Only valid when discovery type is EDS.
type Cluster_EdsClusterConfig struct {
	// Configuration for the source of EDS updates for this Cluster.
	EdsConfig *core.ConfigSource `protobuf:"bytes,1,opt,name=eds_config,json=edsConfig,proto3" json:"eds_config,omitempty"`
	// Optional alternative to cluster name to present to EDS. This does not
	// have the same restrictions as cluster name, i.e. it may be arbitrary
	// length.
	ServiceName          string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_EdsClusterConfig) Reset()         { *m = Cluster_EdsClusterConfig{} }
func (m *Cluster_EdsClusterConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_EdsClusterConfig) ProtoMessage()    {}
func (*Cluster_EdsClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 2}
}

func (m *Cluster_EdsClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_EdsClusterConfig.Unmarshal(m, b)
}
func (m *Cluster_EdsClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_EdsClusterConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_EdsClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_EdsClusterConfig.Merge(m, src)
}
func (m *Cluster_EdsClusterConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_EdsClusterConfig.Size(m)
}
func (m *Cluster_EdsClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_EdsClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_EdsClusterConfig proto.InternalMessageInfo

func (m *Cluster_EdsClusterConfig) GetEdsConfig() *core.ConfigSource {
	if m != nil {
		return m.EdsConfig
	}
	return nil
}

func (m *Cluster_EdsClusterConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// Optionally divide the endpoints in this cluster into subsets defined by
// endpoint metadata and selected by route and weighted cluster metadata.
// [#next-free-field: 8]
type Cluster_LbSubsetConfig struct {
	// The behavior used when no endpoint subset matches the selected route's
	// metadata. The value defaults to
	// :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
	FallbackPolicy Cluster_LbSubsetConfig_LbSubsetFallbackPolicy `protobuf:"varint,1,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	// Specifies the default subset of endpoints used during fallback if
	// fallback_policy is
	// :ref:`DEFAULT_SUBSET<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.
	// Each field in default_subset is
	// compared to the matching LbEndpoint.Metadata under the *envoy.lb*
	// namespace. It is valid for no hosts to match, in which case the behavior
	// is the same as a fallback_policy of
	// :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
	DefaultSubset *_struct.Struct `protobuf:"bytes,2,opt,name=default_subset,json=defaultSubset,proto3" json:"default_subset,omitempty"`
	// For each entry, LbEndpoint.Metadata's
	// *envoy.lb* namespace is traversed and a subset is created for each unique
	// combination of key and value. For example:
	//
	// .. code-block:: json
	//
	//   { "subset_selectors": [
	//       { "keys": [ "version" ] },
	//       { "keys": [ "stage", "hardware_type" ] }
	//   ]}
	//
	// A subset is matched when the metadata from the selected route and
	// weighted cluster contains the same keys and values as the subset's
	// metadata. The same host may appear in multiple subsets.
	SubsetSelectors []*Cluster_LbSubsetConfig_LbSubsetSelector `protobuf:"bytes,3,rep,name=subset_selectors,json=subsetSelectors,proto3" json:"subset_selectors,omitempty"`
	// If true, routing to subsets will take into account the localities and locality weights of the
	// endpoints when making the routing decision.
	//
	// There are some potential pitfalls associated with enabling this feature, as the resulting
	// traffic split after applying both a subset match and locality weights might be undesirable.
	//
	// Consider for example a situation in which you have 50/50 split across two localities X/Y
	// which have 100 hosts each without subsetting. If the subset LB results in X having only 1
	// host selected but Y having 100, then a lot more load is being dumped on the single host in X
	// than originally anticipated in the load balancing assignment delivered via EDS.
	LocalityWeightAware bool `protobuf:"varint,4,opt,name=locality_weight_aware,json=localityWeightAware,proto3" json:"locality_weight_aware,omitempty"`
	// When used with locality_weight_aware, scales the weight of each locality by the ratio
	// of hosts in the subset vs hosts in the original subset. This aims to even out the load
	// going to an individual locality if said locality is disproportionately affected by the
	// subset predicate.
	ScaleLocalityWeight bool `protobuf:"varint,5,opt,name=scale_locality_weight,json=scaleLocalityWeight,proto3" json:"scale_locality_weight,omitempty"`
	// If true, when a fallback policy is configured and its corresponding subset fails to find
	// a host this will cause any host to be selected instead.
	//
	// This is useful when using the default subset as the fallback policy, given the default
	// subset might become empty. With this option enabled, if that happens the LB will attempt
	// to select a host from the entire cluster.
	PanicModeAny bool `protobuf:"varint,6,opt,name=panic_mode_any,json=panicModeAny,proto3" json:"panic_mode_any,omitempty"`
	// If true, metadata specified for a metadata key will be matched against the corresponding
	// endpoint metadata if the endpoint metadata matches the value exactly OR it is a list value
	// and any of the elements in the list matches the criteria.
	ListAsAny            bool     `protobuf:"varint,7,opt,name=list_as_any,json=listAsAny,proto3" json:"list_as_any,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_LbSubsetConfig) Reset()         { *m = Cluster_LbSubsetConfig{} }
func (m *Cluster_LbSubsetConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig) ProtoMessage()    {}
func (*Cluster_LbSubsetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 3}
}

func (m *Cluster_LbSubsetConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_LbSubsetConfig.Unmarshal(m, b)
}
func (m *Cluster_LbSubsetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_LbSubsetConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_LbSubsetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_LbSubsetConfig.Merge(m, src)
}
func (m *Cluster_LbSubsetConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_LbSubsetConfig.Size(m)
}
func (m *Cluster_LbSubsetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_LbSubsetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_LbSubsetConfig proto.InternalMessageInfo

func (m *Cluster_LbSubsetConfig) GetFallbackPolicy() Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return Cluster_LbSubsetConfig_NO_FALLBACK
}

func (m *Cluster_LbSubsetConfig) GetDefaultSubset() *_struct.Struct {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *Cluster_LbSubsetConfig) GetSubsetSelectors() []*Cluster_LbSubsetConfig_LbSubsetSelector {
	if m != nil {
		return m.SubsetSelectors
	}
	return nil
}

func (m *Cluster_LbSubsetConfig) GetLocalityWeightAware() bool {
	if m != nil {
		return m.LocalityWeightAware
	}
	return false
}

func (m *Cluster_LbSubsetConfig) GetScaleLocalityWeight() bool {
	if m != nil {
		return m.ScaleLocalityWeight
	}
	return false
}

func (m *Cluster_LbSubsetConfig) GetPanicModeAny() bool {
	if m != nil {
		return m.PanicModeAny
	}
	return false
}

func (m *Cluster_LbSubsetConfig) GetListAsAny() bool {
	if m != nil {
		return m.ListAsAny
	}
	return false
}

// Specifications for subsets.
type Cluster_LbSubsetConfig_LbSubsetSelector struct {
	// List of keys to match with the weighted cluster metadata.
	Keys []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	// The behavior used when no endpoint subset matches the selected route's
	// metadata.
	FallbackPolicy Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy `protobuf:"varint,2,opt,name=fallback_policy,json=fallbackPolicy,proto3,enum=envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy" json:"fallback_policy,omitempty"`
	// Subset of
	// :ref:`keys<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.keys>` used by
	// :ref:`KEYS_SUBSET<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy.KEYS_SUBSET>`
	// fallback policy.
	// It has to be a non empty list if KEYS_SUBSET fallback policy is selected.
	// For any other fallback policy the parameter is not used and should not be set.
	// Only values also present in
	// :ref:`keys<envoy_api_field_Cluster.LbSubsetConfig.LbSubsetSelector.keys>` are allowed, but
	// `fallback_keys_subset` cannot be equal to `keys`.
	FallbackKeysSubset   []string `protobuf:"bytes,3,rep,name=fallback_keys_subset,json=fallbackKeysSubset,proto3" json:"fallback_keys_subset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) Reset() {
	*m = Cluster_LbSubsetConfig_LbSubsetSelector{}
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) String() string { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig_LbSubsetSelector) ProtoMessage()    {}
func (*Cluster_LbSubsetConfig_LbSubsetSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 3, 0}
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector.Unmarshal(m, b)
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector.Marshal(b, m, deterministic)
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector.Merge(m, src)
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) XXX_Size() int {
	return xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector.Size(m)
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_LbSubsetConfig_LbSubsetSelector proto.InternalMessageInfo

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) GetFallbackPolicy() Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return Cluster_LbSubsetConfig_LbSubsetSelector_NOT_DEFINED
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) GetFallbackKeysSubset() []string {
	if m != nil {
		return m.FallbackKeysSubset
	}
	return nil
}

// Specific configuration for the LeastRequest load balancing policy.
type Cluster_LeastRequestLbConfig struct {
	// The number of random healthy hosts from which the host with the fewest active requests will
	// be chosen. Defaults to 2 so that we perform two-choice selection if the field is not set.
	ChoiceCount          *wrappers.UInt32Value `protobuf:"bytes,1,opt,name=choice_count,json=choiceCount,proto3" json:"choice_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Cluster_LeastRequestLbConfig) Reset()         { *m = Cluster_LeastRequestLbConfig{} }
func (m *Cluster_LeastRequestLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_LeastRequestLbConfig) ProtoMessage()    {}
func (*Cluster_LeastRequestLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 4}
}

func (m *Cluster_LeastRequestLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_LeastRequestLbConfig.Unmarshal(m, b)
}
func (m *Cluster_LeastRequestLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_LeastRequestLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_LeastRequestLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_LeastRequestLbConfig.Merge(m, src)
}
func (m *Cluster_LeastRequestLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_LeastRequestLbConfig.Size(m)
}
func (m *Cluster_LeastRequestLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_LeastRequestLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_LeastRequestLbConfig proto.InternalMessageInfo

func (m *Cluster_LeastRequestLbConfig) GetChoiceCount() *wrappers.UInt32Value {
	if m != nil {
		return m.ChoiceCount
	}
	return nil
}

// Specific configuration for the :ref:`RingHash<arch_overview_load_balancing_types_ring_hash>`
// load balancing policy.
type Cluster_RingHashLbConfig struct {
	// Minimum hash ring size. The larger the ring is (that is, the more hashes there are for each
	// provided host) the better the request distribution will reflect the desired weights. Defaults
	// to 1024 entries, and limited to 8M entries. See also
	// :ref:`maximum_ring_size<envoy_api_field_Cluster.RingHashLbConfig.maximum_ring_size>`.
	MinimumRingSize *wrappers.UInt64Value `protobuf:"bytes,1,opt,name=minimum_ring_size,json=minimumRingSize,proto3" json:"minimum_ring_size,omitempty"`
	// The hash function used to hash hosts onto the ketama ring. The value defaults to
	// :ref:`XX_HASH<envoy_api_enum_value_Cluster.RingHashLbConfig.HashFunction.XX_HASH>`.
	HashFunction Cluster_RingHashLbConfig_HashFunction `protobuf:"varint,3,opt,name=hash_function,json=hashFunction,proto3,enum=envoy.api.v2.Cluster_RingHashLbConfig_HashFunction" json:"hash_function,omitempty"`
	// Maximum hash ring size. Defaults to 8M entries, and limited to 8M entries, but can be lowered
	// to further constrain resource use. See also
	// :ref:`minimum_ring_size<envoy_api_field_Cluster.RingHashLbConfig.minimum_ring_size>`.
	MaximumRingSize      *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=maximum_ring_size,json=maximumRingSize,proto3" json:"maximum_ring_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Cluster_RingHashLbConfig) Reset()         { *m = Cluster_RingHashLbConfig{} }
func (m *Cluster_RingHashLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_RingHashLbConfig) ProtoMessage()    {}
func (*Cluster_RingHashLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 5}
}

func (m *Cluster_RingHashLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_RingHashLbConfig.Unmarshal(m, b)
}
func (m *Cluster_RingHashLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_RingHashLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_RingHashLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_RingHashLbConfig.Merge(m, src)
}
func (m *Cluster_RingHashLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_RingHashLbConfig.Size(m)
}
func (m *Cluster_RingHashLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_RingHashLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_RingHashLbConfig proto.InternalMessageInfo

func (m *Cluster_RingHashLbConfig) GetMinimumRingSize() *wrappers.UInt64Value {
	if m != nil {
		return m.MinimumRingSize
	}
	return nil
}

func (m *Cluster_RingHashLbConfig) GetHashFunction() Cluster_RingHashLbConfig_HashFunction {
	if m != nil {
		return m.HashFunction
	}
	return Cluster_RingHashLbConfig_XX_HASH
}

func (m *Cluster_RingHashLbConfig) GetMaximumRingSize() *wrappers.UInt64Value {
	if m != nil {
		return m.MaximumRingSize
	}
	return nil
}

// Specific configuration for the
// :ref:`Original Destination <arch_overview_load_balancing_types_original_destination>`
// load balancing policy.
type Cluster_OriginalDstLbConfig struct {
	// When true, :ref:`x-envoy-original-dst-host
	// <config_http_conn_man_headers_x-envoy-original-dst-host>` can be used to override destination
	// address.
	//
	// .. attention::
	//
	//   This header isn't sanitized by default, so enabling this feature allows HTTP clients to
	//   route traffic to arbitrary hosts and/or ports, which may have serious security
	//   consequences.
	UseHttpHeader        bool     `protobuf:"varint,1,opt,name=use_http_header,json=useHttpHeader,proto3" json:"use_http_header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_OriginalDstLbConfig) Reset()         { *m = Cluster_OriginalDstLbConfig{} }
func (m *Cluster_OriginalDstLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_OriginalDstLbConfig) ProtoMessage()    {}
func (*Cluster_OriginalDstLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 6}
}

func (m *Cluster_OriginalDstLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_OriginalDstLbConfig.Unmarshal(m, b)
}
func (m *Cluster_OriginalDstLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_OriginalDstLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_OriginalDstLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_OriginalDstLbConfig.Merge(m, src)
}
func (m *Cluster_OriginalDstLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_OriginalDstLbConfig.Size(m)
}
func (m *Cluster_OriginalDstLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_OriginalDstLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_OriginalDstLbConfig proto.InternalMessageInfo

func (m *Cluster_OriginalDstLbConfig) GetUseHttpHeader() bool {
	if m != nil {
		return m.UseHttpHeader
	}
	return false
}

// Common configuration for all load balancer implementations.
// [#next-free-field: 7]
type Cluster_CommonLbConfig struct {
	// Configures the :ref:`healthy panic threshold <arch_overview_load_balancing_panic_threshold>`.
	// If not specified, the default is 50%.
	// To disable panic mode, set to 0%.
	//
	// .. note::
	//   The specified percent will be truncated to the nearest 1%.
	HealthyPanicThreshold *_type.Percent `protobuf:"bytes,1,opt,name=healthy_panic_threshold,json=healthyPanicThreshold,proto3" json:"healthy_panic_threshold,omitempty"`
	// Types that are valid to be assigned to LocalityConfigSpecifier:
	//	*Cluster_CommonLbConfig_ZoneAwareLbConfig_
	//	*Cluster_CommonLbConfig_LocalityWeightedLbConfig_
	LocalityConfigSpecifier isCluster_CommonLbConfig_LocalityConfigSpecifier `protobuf_oneof:"locality_config_specifier"`
	// If set, all health check/weight/metadata updates that happen within this duration will be
	// merged and delivered in one shot when the duration expires. The start of the duration is when
	// the first update happens. This is useful for big clusters, with potentially noisy deploys
	// that might trigger excessive CPU usage due to a constant stream of healthcheck state changes
	// or metadata updates. The first set of updates to be seen apply immediately (e.g.: a new
	// cluster). Please always keep in mind that the use of sandbox technologies may change this
	// behavior.
	//
	// If this is not set, we default to a merge window of 1000ms. To disable it, set the merge
	// window to 0.
	//
	// Note: merging does not apply to cluster membership changes (e.g.: adds/removes); this is
	// because merging those updates isn't currently safe. See
	// https://github.com/envoyproxy/envoy/pull/3941.
	UpdateMergeWindow *duration.Duration `protobuf:"bytes,4,opt,name=update_merge_window,json=updateMergeWindow,proto3" json:"update_merge_window,omitempty"`
	// If set to true, Envoy will not consider new hosts when computing load balancing weights until
	// they have been health checked for the first time. This will have no effect unless
	// active health checking is also configured.
	//
	// Ignoring a host means that for any load balancing calculations that adjust weights based
	// on the ratio of eligible hosts and total hosts (priority spillover, locality weighting and
	// panic mode) Envoy will exclude these hosts in the denominator.
	//
	// For example, with hosts in two priorities P0 and P1, where P0 looks like
	// {healthy, unhealthy (new), unhealthy (new)}
	// and where P1 looks like
	// {healthy, healthy}
	// all traffic will still hit P0, as 1 / (3 - 2) = 1.
	//
	// Enabling this will allow scaling up the number of hosts for a given cluster without entering
	// panic mode or triggering priority spillover, assuming the hosts pass the first health check.
	//
	// If panic mode is triggered, new hosts are still eligible for traffic; they simply do not
	// contribute to the calculation when deciding whether panic mode is enabled or not.
	IgnoreNewHostsUntilFirstHc bool `protobuf:"varint,5,opt,name=ignore_new_hosts_until_first_hc,json=ignoreNewHostsUntilFirstHc,proto3" json:"ignore_new_hosts_until_first_hc,omitempty"`
	// If set to `true`, the cluster manager will drain all existing
	// connections to upstream hosts whenever hosts are added or removed from the cluster.
	CloseConnectionsOnHostSetChange bool     `protobuf:"varint,6,opt,name=close_connections_on_host_set_change,json=closeConnectionsOnHostSetChange,proto3" json:"close_connections_on_host_set_change,omitempty"`
	XXX_NoUnkeyedLiteral            struct{} `json:"-"`
	XXX_unrecognized                []byte   `json:"-"`
	XXX_sizecache                   int32    `json:"-"`
}

func (m *Cluster_CommonLbConfig) Reset()         { *m = Cluster_CommonLbConfig{} }
func (m *Cluster_CommonLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_CommonLbConfig) ProtoMessage()    {}
func (*Cluster_CommonLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 7}
}

func (m *Cluster_CommonLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_CommonLbConfig.Unmarshal(m, b)
}
func (m *Cluster_CommonLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_CommonLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_CommonLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_CommonLbConfig.Merge(m, src)
}
func (m *Cluster_CommonLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_CommonLbConfig.Size(m)
}
func (m *Cluster_CommonLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_CommonLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_CommonLbConfig proto.InternalMessageInfo

func (m *Cluster_CommonLbConfig) GetHealthyPanicThreshold() *_type.Percent {
	if m != nil {
		return m.HealthyPanicThreshold
	}
	return nil
}

type isCluster_CommonLbConfig_LocalityConfigSpecifier interface {
	isCluster_CommonLbConfig_LocalityConfigSpecifier()
}

type Cluster_CommonLbConfig_ZoneAwareLbConfig_ struct {
	ZoneAwareLbConfig *Cluster_CommonLbConfig_ZoneAwareLbConfig `protobuf:"bytes,2,opt,name=zone_aware_lb_config,json=zoneAwareLbConfig,proto3,oneof"`
}

type Cluster_CommonLbConfig_LocalityWeightedLbConfig_ struct {
	LocalityWeightedLbConfig *Cluster_CommonLbConfig_LocalityWeightedLbConfig `protobuf:"bytes,3,opt,name=locality_weighted_lb_config,json=localityWeightedLbConfig,proto3,oneof"`
}

func (*Cluster_CommonLbConfig_ZoneAwareLbConfig_) isCluster_CommonLbConfig_LocalityConfigSpecifier() {}

func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig_) isCluster_CommonLbConfig_LocalityConfigSpecifier() {
}

func (m *Cluster_CommonLbConfig) GetLocalityConfigSpecifier() isCluster_CommonLbConfig_LocalityConfigSpecifier {
	if m != nil {
		return m.LocalityConfigSpecifier
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetZoneAwareLbConfig() *Cluster_CommonLbConfig_ZoneAwareLbConfig {
	if x, ok := m.GetLocalityConfigSpecifier().(*Cluster_CommonLbConfig_ZoneAwareLbConfig_); ok {
		return x.ZoneAwareLbConfig
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetLocalityWeightedLbConfig() *Cluster_CommonLbConfig_LocalityWeightedLbConfig {
	if x, ok := m.GetLocalityConfigSpecifier().(*Cluster_CommonLbConfig_LocalityWeightedLbConfig_); ok {
		return x.LocalityWeightedLbConfig
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetUpdateMergeWindow() *duration.Duration {
	if m != nil {
		return m.UpdateMergeWindow
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetIgnoreNewHostsUntilFirstHc() bool {
	if m != nil {
		return m.IgnoreNewHostsUntilFirstHc
	}
	return false
}

func (m *Cluster_CommonLbConfig) GetCloseConnectionsOnHostSetChange() bool {
	if m != nil {
		return m.CloseConnectionsOnHostSetChange
	}
	return false
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Cluster_CommonLbConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Cluster_CommonLbConfig_ZoneAwareLbConfig_)(nil),
		(*Cluster_CommonLbConfig_LocalityWeightedLbConfig_)(nil),
	}
}

// Configuration for :ref:`zone aware routing
// <arch_overview_load_balancing_zone_aware_routing>`.
type Cluster_CommonLbConfig_ZoneAwareLbConfig struct {
	// Configures percentage of requests that will be considered for zone aware routing
	// if zone aware routing is configured. If not specified, the default is 100%.
	// * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
	// * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
	RoutingEnabled *_type.Percent `protobuf:"bytes,1,opt,name=routing_enabled,json=routingEnabled,proto3" json:"routing_enabled,omitempty"`
	// Configures minimum upstream cluster size required for zone aware routing
	// If upstream cluster size is less than specified, zone aware routing is not performed
	// even if zone aware routing is configured. If not specified, the default is 6.
	// * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
	// * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
	MinClusterSize *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=min_cluster_size,json=minClusterSize,proto3" json:"min_cluster_size,omitempty"`
	// If set to true, Envoy will not consider any hosts when the cluster is in :ref:`panic
	// mode<arch_overview_load_balancing_panic_threshold>`. Instead, the cluster will fail all
	// requests as if all hosts are unhealthy. This can help avoid potentially overwhelming a
	// failing service.
	FailTrafficOnPanic   bool     `protobuf:"varint,3,opt,name=fail_traffic_on_panic,json=failTrafficOnPanic,proto3" json:"fail_traffic_on_panic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) Reset() {
	*m = Cluster_CommonLbConfig_ZoneAwareLbConfig{}
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_CommonLbConfig_ZoneAwareLbConfig) ProtoMessage()    {}
func (*Cluster_CommonLbConfig_ZoneAwareLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 7, 0}
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig.Unmarshal(m, b)
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig.Merge(m, src)
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig.Size(m)
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_CommonLbConfig_ZoneAwareLbConfig proto.InternalMessageInfo

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) GetRoutingEnabled() *_type.Percent {
	if m != nil {
		return m.RoutingEnabled
	}
	return nil
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) GetMinClusterSize() *wrappers.UInt64Value {
	if m != nil {
		return m.MinClusterSize
	}
	return nil
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) GetFailTrafficOnPanic() bool {
	if m != nil {
		return m.FailTrafficOnPanic
	}
	return false
}

// Configuration for :ref:`locality weighted load balancing
// <arch_overview_load_balancing_locality_weighted_lb>`
type Cluster_CommonLbConfig_LocalityWeightedLbConfig struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) Reset() {
	*m = Cluster_CommonLbConfig_LocalityWeightedLbConfig{}
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) String() string {
	return proto.CompactTextString(m)
}
func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig) ProtoMessage() {}
func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 7, 1}
}

func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig.Unmarshal(m, b)
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig.Marshal(b, m, deterministic)
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig.Merge(m, src)
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) XXX_Size() int {
	return xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig.Size(m)
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_CommonLbConfig_LocalityWeightedLbConfig proto.InternalMessageInfo

type Cluster_RefreshRate struct {
	// Specifies the base interval between refreshes. This parameter is required and must be greater
	// than zero and less than
	// :ref:`max_interval <envoy_api_field_Cluster.RefreshRate.max_interval>`.
	BaseInterval *duration.Duration `protobuf:"bytes,1,opt,name=base_interval,json=baseInterval,proto3" json:"base_interval,omitempty"`
	// Specifies the maximum interval between refreshes. This parameter is optional, but must be
	// greater than or equal to the
	// :ref:`base_interval <envoy_api_field_Cluster.RefreshRate.base_interval>`  if set. The default
	// is 10 times the :ref:`base_interval <envoy_api_field_Cluster.RefreshRate.base_interval>`.
	MaxInterval          *duration.Duration `protobuf:"bytes,2,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Cluster_RefreshRate) Reset()         { *m = Cluster_RefreshRate{} }
func (m *Cluster_RefreshRate) String() string { return proto.CompactTextString(m) }
func (*Cluster_RefreshRate) ProtoMessage()    {}
func (*Cluster_RefreshRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{0, 8}
}

func (m *Cluster_RefreshRate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster_RefreshRate.Unmarshal(m, b)
}
func (m *Cluster_RefreshRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster_RefreshRate.Marshal(b, m, deterministic)
}
func (m *Cluster_RefreshRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_RefreshRate.Merge(m, src)
}
func (m *Cluster_RefreshRate) XXX_Size() int {
	return xxx_messageInfo_Cluster_RefreshRate.Size(m)
}
func (m *Cluster_RefreshRate) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_RefreshRate.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_RefreshRate proto.InternalMessageInfo

func (m *Cluster_RefreshRate) GetBaseInterval() *duration.Duration {
	if m != nil {
		return m.BaseInterval
	}
	return nil
}

func (m *Cluster_RefreshRate) GetMaxInterval() *duration.Duration {
	if m != nil {
		return m.MaxInterval
	}
	return nil
}

// [#not-implemented-hide:] Extensible load balancing policy configuration.
//
// Every LB policy defined via this mechanism will be identified via a unique name using reverse
// DNS notation. If the policy needs configuration parameters, it must define a message for its
// own configuration, which will be stored in the config field. The name of the policy will tell
// clients which type of message they should expect to see in the config field.
//
// Note that there are cases where it is useful to be able to independently select LB policies
// for choosing a locality and for choosing an endpoint within that locality. For example, a
// given deployment may always use the same policy to choose the locality, but for choosing the
// endpoint within the locality, some clusters may use weighted-round-robin, while others may
// use some sort of session-based balancing.
//
// This can be accomplished via hierarchical LB policies, where the parent LB policy creates a
// child LB policy for each locality. For each request, the parent chooses the locality and then
// delegates to the child policy for that locality to choose the endpoint within the locality.
//
// To facilitate this, the config message for the top-level LB policy may include a field of
// type LoadBalancingPolicy that specifies the child policy.
type LoadBalancingPolicy struct {
	// Each client will iterate over the list in order and stop at the first policy that it
	// supports. This provides a mechanism for starting to use new LB policies that are not yet
	// supported by all clients.
	Policies             []*LoadBalancingPolicy_Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *LoadBalancingPolicy) Reset()         { *m = LoadBalancingPolicy{} }
func (m *LoadBalancingPolicy) String() string { return proto.CompactTextString(m) }
func (*LoadBalancingPolicy) ProtoMessage()    {}
func (*LoadBalancingPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{1}
}

func (m *LoadBalancingPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalancingPolicy.Unmarshal(m, b)
}
func (m *LoadBalancingPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalancingPolicy.Marshal(b, m, deterministic)
}
func (m *LoadBalancingPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancingPolicy.Merge(m, src)
}
func (m *LoadBalancingPolicy) XXX_Size() int {
	return xxx_messageInfo_LoadBalancingPolicy.Size(m)
}
func (m *LoadBalancingPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancingPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancingPolicy proto.InternalMessageInfo

func (m *LoadBalancingPolicy) GetPolicies() []*LoadBalancingPolicy_Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type LoadBalancingPolicy_Policy struct {
	// Required. The name of the LB policy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional config for the LB policy.
	// No more than one of these two fields may be populated.
	Config               *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // Deprecated: Do not use.
	TypedConfig          *any.Any        `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3" json:"typed_config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LoadBalancingPolicy_Policy) Reset()         { *m = LoadBalancingPolicy_Policy{} }
func (m *LoadBalancingPolicy_Policy) String() string { return proto.CompactTextString(m) }
func (*LoadBalancingPolicy_Policy) ProtoMessage()    {}
func (*LoadBalancingPolicy_Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{1, 0}
}

func (m *LoadBalancingPolicy_Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalancingPolicy_Policy.Unmarshal(m, b)
}
func (m *LoadBalancingPolicy_Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalancingPolicy_Policy.Marshal(b, m, deterministic)
}
func (m *LoadBalancingPolicy_Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancingPolicy_Policy.Merge(m, src)
}
func (m *LoadBalancingPolicy_Policy) XXX_Size() int {
	return xxx_messageInfo_LoadBalancingPolicy_Policy.Size(m)
}
func (m *LoadBalancingPolicy_Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancingPolicy_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancingPolicy_Policy proto.InternalMessageInfo

func (m *LoadBalancingPolicy_Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *LoadBalancingPolicy_Policy) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *LoadBalancingPolicy_Policy) GetTypedConfig() *any.Any {
	if m != nil {
		return m.TypedConfig
	}
	return nil
}

// An extensible structure containing the address Envoy should bind to when
// establishing upstream connections.
type UpstreamBindConfig struct {
	// The address Envoy should bind to when establishing upstream connections.
	SourceAddress        *core.Address `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpstreamBindConfig) Reset()         { *m = UpstreamBindConfig{} }
func (m *UpstreamBindConfig) String() string { return proto.CompactTextString(m) }
func (*UpstreamBindConfig) ProtoMessage()    {}
func (*UpstreamBindConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{2}
}

func (m *UpstreamBindConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamBindConfig.Unmarshal(m, b)
}
func (m *UpstreamBindConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamBindConfig.Marshal(b, m, deterministic)
}
func (m *UpstreamBindConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamBindConfig.Merge(m, src)
}
func (m *UpstreamBindConfig) XXX_Size() int {
	return xxx_messageInfo_UpstreamBindConfig.Size(m)
}
func (m *UpstreamBindConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamBindConfig.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamBindConfig proto.InternalMessageInfo

func (m *UpstreamBindConfig) GetSourceAddress() *core.Address {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

type UpstreamConnectionOptions struct {
	// If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
	TcpKeepalive         *core.TcpKeepalive `protobuf:"bytes,1,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *UpstreamConnectionOptions) Reset()         { *m = UpstreamConnectionOptions{} }
func (m *UpstreamConnectionOptions) String() string { return proto.CompactTextString(m) }
func (*UpstreamConnectionOptions) ProtoMessage()    {}
func (*UpstreamConnectionOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_72da53dee26868ef, []int{3}
}

func (m *UpstreamConnectionOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpstreamConnectionOptions.Unmarshal(m, b)
}
func (m *UpstreamConnectionOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpstreamConnectionOptions.Marshal(b, m, deterministic)
}
func (m *UpstreamConnectionOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamConnectionOptions.Merge(m, src)
}
func (m *UpstreamConnectionOptions) XXX_Size() int {
	return xxx_messageInfo_UpstreamConnectionOptions.Size(m)
}
func (m *UpstreamConnectionOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamConnectionOptions.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamConnectionOptions proto.InternalMessageInfo

func (m *UpstreamConnectionOptions) GetTcpKeepalive() *core.TcpKeepalive {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.api.v2.Cluster_DiscoveryType", Cluster_DiscoveryType_name, Cluster_DiscoveryType_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbPolicy", Cluster_LbPolicy_name, Cluster_LbPolicy_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_DnsLookupFamily", Cluster_DnsLookupFamily_name, Cluster_DnsLookupFamily_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_ClusterProtocolSelection", Cluster_ClusterProtocolSelection_name, Cluster_ClusterProtocolSelection_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_name, Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_RingHashLbConfig_HashFunction", Cluster_RingHashLbConfig_HashFunction_name, Cluster_RingHashLbConfig_HashFunction_value)
	proto.RegisterType((*Cluster)(nil), "envoy.api.v2.Cluster")
	proto.RegisterMapType((map[string]*_struct.Struct)(nil), "envoy.api.v2.Cluster.ExtensionProtocolOptionsEntry")
	proto.RegisterMapType((map[string]*any.Any)(nil), "envoy.api.v2.Cluster.TypedExtensionProtocolOptionsEntry")
	proto.RegisterType((*Cluster_TransportSocketMatch)(nil), "envoy.api.v2.Cluster.TransportSocketMatch")
	proto.RegisterType((*Cluster_CustomClusterType)(nil), "envoy.api.v2.Cluster.CustomClusterType")
	proto.RegisterType((*Cluster_EdsClusterConfig)(nil), "envoy.api.v2.Cluster.EdsClusterConfig")
	proto.RegisterType((*Cluster_LbSubsetConfig)(nil), "envoy.api.v2.Cluster.LbSubsetConfig")
	proto.RegisterType((*Cluster_LbSubsetConfig_LbSubsetSelector)(nil), "envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector")
	proto.RegisterType((*Cluster_LeastRequestLbConfig)(nil), "envoy.api.v2.Cluster.LeastRequestLbConfig")
	proto.RegisterType((*Cluster_RingHashLbConfig)(nil), "envoy.api.v2.Cluster.RingHashLbConfig")
	proto.RegisterType((*Cluster_OriginalDstLbConfig)(nil), "envoy.api.v2.Cluster.OriginalDstLbConfig")
	proto.RegisterType((*Cluster_CommonLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig")
	proto.RegisterType((*Cluster_CommonLbConfig_ZoneAwareLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig")
	proto.RegisterType((*Cluster_CommonLbConfig_LocalityWeightedLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig")
	proto.RegisterType((*Cluster_RefreshRate)(nil), "envoy.api.v2.Cluster.RefreshRate")
	proto.RegisterType((*LoadBalancingPolicy)(nil), "envoy.api.v2.LoadBalancingPolicy")
	proto.RegisterType((*LoadBalancingPolicy_Policy)(nil), "envoy.api.v2.LoadBalancingPolicy.Policy")
	proto.RegisterType((*UpstreamBindConfig)(nil), "envoy.api.v2.UpstreamBindConfig")
	proto.RegisterType((*UpstreamConnectionOptions)(nil), "envoy.api.v2.UpstreamConnectionOptions")
}

func init() { proto.RegisterFile("envoy/api/v2/cluster.proto", fileDescriptor_72da53dee26868ef) }

var fileDescriptor_72da53dee26868ef = []byte{
	// 3137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x59, 0xcb, 0x6f, 0x23, 0x47,
	0x7a, 0x57, 0x53, 0x2f, 0xaa, 0x48, 0x51, 0xad, 0x92, 0x66, 0xd4, 0x43, 0x3d, 0x46, 0x23, 0xcf,
	0x78, 0xb5, 0x93, 0x5d, 0x2a, 0xab, 0xf1, 0x7a, 0x8d, 0x24, 0xde, 0x80, 0x2f, 0x8d, 0xe4, 0xa1,
	0x48, 0x6d, 0x93, 0xf4, 0xac, 0xd7, 0x58, 0x94, 0x8b, 0xdd, 0x45, 0xb1, 0xa1, 0x66, 0x77, 0xa7,
	0xab, 0x5a, 0x23, 0x3a, 0x40, 0x60, 0x07, 0x01, 0x02, 0x24, 0x87, 0x5c, 0xf3, 0x27, 0x24, 0x46,
	0x80, 0x20, 0x40, 0x0e, 0x39, 0xe6, 0x0f, 0xc8, 0x29, 0xa7, 0x5c, 0x72, 0xcf, 0x29, 0x87, 0xbd,
	0x04, 0x98, 0x43, 0xb0, 0xa8, 0x47, 0x53, 0x7c, 0x34, 0x25, 0xd9, 0x27, 0xa9, 0xea, 0xfb, 0x7d,
	0xbf, 0xaf, 0xba, 0xea, 0xab, 0xef, 0x51, 0x04, 0x79, 0xe2, 0x5d, 0xfb, 0x83, 0x23, 0x1c, 0x38,
	0x47, 0xd7, 0xc7, 0x47, 0x96, 0x1b, 0x51, 0x46, 0xc2, 0x42, 0x10, 0xfa, 0xcc, 0x87, 0x59, 0x21,
	0x2b, 0xe0, 0xc0, 0x29, 0x5c, 0x1f, 0xe7, 0x77, 0xc6, 0x90, 0x38, 0x62, 0xbd, 0x23, 0x8b, 0x84,
	0x4c, 0x62, 0xf3, 0x2f, 0x93, 0x78, 0x8e, 0x2c, 0x27, 0xb4, 0x22, 0x87, 0xa1, 0x4e, 0x48, 0xf0,
	0x55, 0xcc, 0x9b, 0x7f, 0x96, 0x88, 0xed, 0x3a, 0xee, 0xd0, 0x74, 0xfe, 0x27, 0x89, 0x10, 0x3f,
	0x62, 0xae, 0x43, 0x42, 0x64, 0x13, 0x46, 0x2c, 0xe6, 0xf8, 0x9e, 0x42, 0x3f, 0x1d, 0x47, 0xfb,
	0x21, 0x39, 0xc2, 0xb6, 0x1d, 0x12, 0x4a, 0x15, 0x60, 0x67, 0x1a, 0xd0, 0xc1, 0x94, 0x28, 0xe9,
	0x8b, 0x69, 0xa9, 0xe5, 0x7b, 0x5d, 0xe7, 0x12, 0x51, 0x3f, 0x0a, 0xad, 0x18, 0xf6, 0x7c, 0x1a,
	0xd6, 0x23, 0xd8, 0x65, 0x3d, 0x64, 0xf5, 0x88, 0x75, 0xa5, 0x50, 0xfb, 0xd3, 0x28, 0x21, 0xb0,
	0x7c, 0x57, 0x21, 0xb6, 0xc7, 0x10, 0xc4, 0xb3, 0x03, 0xdf, 0xf1, 0xe2, 0x7d, 0x34, 0xa4, 0x90,
	0x0d, 0x02, 0x72, 0x14, 0x90, 0xd0, 0x22, 0x43, 0xc9, 0x93, 0x4b, 0xdf, 0xbf, 0x74, 0x15, 0x5b,
	0x27, 0xea, 0x1e, 0x61, 0x6f, 0xa0, 0x44, 0x7b, 0x93, 0x22, 0x3b, 0x0a, 0xf1, 0xc8, 0xfe, 0xec,
	0x4c, 0xca, 0x29, 0x0b, 0x23, 0x8b, 0xcd, 0xd2, 0x7e, 0x17, 0xe2, 0x20, 0x20, 0x61, 0xbc, 0x79,
	0x1f, 0xa8, 0xf5, 0x7a, 0x9e, 0xcf, 0x04, 0x2b, 0x3d, 0xb2, 0x49, 0x10, 0x12, 0x6b, 0xd4, 0xc4,
	0x5e, 0x64, 0x07, 0x78, 0x0c, 0xd3, 0x77, 0x2e, 0x43, 0xcc, 0xe2, 0xcd, 0xdb, 0xba, 0xc6, 0xae,
	0x63, 0x63, 0x46, 0x8e, 0xe2, 0x7f, 0xa4, 0xe0, 0xe0, 0xdb, 0x4f, 0xc0, 0x72, 0x59, 0x9e, 0x2f,
	0xb4, 0x81, 0xc1, 0x42, 0xec, 0xd1, 0xc0, 0x0f, 0x19, 0xa2, 0xbe, 0x75, 0x45, 0x18, 0xea, 0x63,
	0x66, 0xf5, 0x08, 0x35, 0xfe, 0x60, 0x7f, 0xfe, 0x30, 0x73, 0xfc, 0xb2, 0x30, 0xea, 0x93, 0x05,
	0xa5, 0x58, 0x68, 0xc5, 0x5a, 0x4d, 0xa1, 0x74, 0xce, 0x75, 0xcc, 0xc7, 0x2c, 0x61, 0x96, 0x50,
	0xb8, 0x0d, 0x16, 0x3c, 0xdc, 0x27, 0x86, 0xb6, 0xaf, 0x1d, 0xae, 0x94, 0x96, 0xdf, 0x97, 0x16,
	0xc2, 0xd4, 0xbe, 0x66, 0x8a, 0x49, 0x78, 0x00, 0x56, 0xb1, 0xcb, 0x10, 0x65, 0x98, 0x21, 0x81,
	0xda, 0xe1, 0x28, 0x33, 0x83, 0x5d, 0xd6, 0x64, 0x98, 0xd5, 0x39, 0xa6, 0x0c, 0x16, 0xf8, 0xf9,
	0x18, 0xa9, 0x7d, 0xed, 0x30, 0x77, 0xfc, 0x41, 0xf2, 0x92, 0x2a, 0x0e, 0xb5, 0xfc, 0x6b, 0x12,
	0x0e, 0x5a, 0x83, 0x80, 0x94, 0xd2, 0xef, 0x4b, 0x8b, 0x7f, 0xa9, 0xa5, 0x74, 0xed, 0x74, 0xce,
	0x14, 0xca, 0xb0, 0x06, 0xb2, 0xca, 0xad, 0x91, 0x20, 0xfb, 0x70, 0x5f, 0x3b, 0xcc, 0x1c, 0xff,
	0x28, 0x99, 0xac, 0x1c, 0x51, 0xe6, 0xf7, 0xd5, 0x88, 0x13, 0x9e, 0xce, 0x99, 0x19, 0xeb, 0x76,
	0x08, 0x5b, 0x00, 0x12, 0x9b, 0xa2, 0x98, 0x51, 0xba, 0xaf, 0x31, 0x2f, 0x38, 0x3f, 0x4c, 0xe6,
	0xac, 0xda, 0x54, 0xfd, 0x5b, 0x16, 0x68, 0x53, 0x27, 0x13, 0x33, 0xb0, 0x06, 0xd6, 0x2c, 0xdf,
	0xf3, 0x88, 0xc5, 0x10, 0x73, 0xfa, 0xc4, 0x8f, 0x98, 0xb1, 0x20, 0x28, 0x9f, 0x14, 0xa4, 0xcf,
	0x14, 0x62, 0x9f, 0x29, 0x54, 0x94, 0xc7, 0x89, 0x2f, 0xfd, 0x4e, 0x4b, 0xbd, 0x9c, 0x33, 0x73,
	0x4a, 0xb7, 0x25, 0x55, 0x61, 0x17, 0x3c, 0x0b, 0xe4, 0xda, 0x3c, 0x79, 0x7b, 0x51, 0x27, 0xea,
	0x76, 0x49, 0x88, 0x5c, 0xa7, 0xcf, 0x63, 0xc4, 0x80, 0x11, 0x6a, 0x2c, 0x0a, 0xfe, 0x9d, 0x29,
	0xfe, 0xf6, 0x99, 0xc7, 0x5e, 0x1d, 0x7f, 0x8e, 0xdd, 0x88, 0x98, 0xbb, 0x81, 0x58, 0xa1, 0x62,
	0x29, 0x09, 0x92, 0x1a, 0xe7, 0x28, 0x71, 0x0a, 0x58, 0x05, 0x2b, 0x6e, 0x07, 0x05, 0xbe, 0xeb,
	0x58, 0x03, 0x63, 0x49, 0x9c, 0xd1, 0x5e, 0xf2, 0x16, 0xd4, 0x3a, 0x17, 0x02, 0x75, 0x7b, 0x3c,
	0x66, 0xda, 0x55, 0x73, 0xf0, 0x23, 0xb0, 0xd8, 0xf3, 0x29, 0xa3, 0xc6, 0xb2, 0xf0, 0xbc, 0xfc,
	0x38, 0x05, 0xbf, 0xd8, 0x85, 0xa2, 0x0c, 0x32, 0xa5, 0x94, 0xa1, 0x99, 0x12, 0xcc, 0xb7, 0xcc,
	0xf5, 0xb1, 0x8d, 0x30, 0xa5, 0xce, 0xa5, 0xd7, 0x27, 0x1e, 0x33, 0x9e, 0x89, 0x4f, 0x4a, 0x76,
	0x93, 0x9a, 0x8f, 0xed, 0xe2, 0x10, 0x6a, 0xe6, 0xdc, 0xb1, 0x31, 0x2c, 0x83, 0xd5, 0xd1, 0x10,
	0x43, 0x8d, 0xb4, 0x58, 0xcb, 0x5e, 0xc2, 0x5a, 0x4e, 0x05, 0xae, 0xcc, 0x61, 0x66, 0xb6, 0x77,
	0x3b, 0xa0, 0xf0, 0x4b, 0xb0, 0xdd, 0xc7, 0x37, 0x28, 0x24, 0x7f, 0x16, 0x11, 0xca, 0x28, 0x1a,
	0x3f, 0x04, 0x63, 0xe5, 0x01, 0x3b, 0x6e, 0xf4, 0xf1, 0x8d, 0xa9, 0xf4, 0x2f, 0x46, 0x37, 0x1f,
	0x5e, 0x00, 0x7d, 0x22, 0xc8, 0x53, 0x03, 0x08, 0xc6, 0x17, 0x13, 0x8b, 0x8c, 0x5d, 0x59, 0xa2,
	0x4b, 0x0a, 0x6c, 0xae, 0x59, 0xe3, 0x13, 0xf0, 0x02, 0x64, 0x98, 0x4b, 0xf9, 0x0a, 0x19, 0xb9,
	0x61, 0x46, 0x26, 0x89, 0x8c, 0x67, 0x9f, 0x42, 0x3b, 0xa0, 0x2c, 0x24, 0xb8, 0xdf, 0x72, 0x69,
	0x59, 0x82, 0x4b, 0xe9, 0x7f, 0xfb, 0xdf, 0xdf, 0xfd, 0xe7, 0xa2, 0x66, 0x68, 0x26, 0x60, 0xc3,
	0x59, 0x48, 0xc1, 0x5e, 0xa4, 0xb0, 0xa8, 0xc7, 0x58, 0x80, 0xe2, 0x80, 0x8c, 0xfc, 0x40, 0xc4,
	0x2a, 0xa3, 0x20, 0x8c, 0x14, 0x12, 0xb6, 0x35, 0x36, 0x72, 0xca, 0x58, 0x70, 0xa1, 0xd4, 0x1a,
	0x52, 0xcb, 0xdc, 0x8e, 0x66, 0x0b, 0xe1, 0x25, 0xd8, 0xb1, 0xfc, 0x7e, 0xdf, 0xf7, 0x66, 0x98,
	0xdc, 0x4d, 0xba, 0x9b, 0xf2, 0x24, 0x13, 0x4c, 0x3d, 0x91, 0x5c, 0x49, 0x86, 0xbe, 0x04, 0x8f,
	0x92, 0x2d, 0xac, 0x26, 0x45, 0x94, 0xa1, 0x85, 0x9f, 0x4d, 0x9a, 0xd8, 0xe8, 0x25, 0x90, 0xff,
	0x16, 0x3c, 0xe6, 0xd3, 0xc7, 0xd3, 0xec, 0xb9, 0x3b, 0xd9, 0x8f, 0x27, 0xd9, 0x37, 0x7b, 0x09,
	0xb3, 0xf0, 0xcf, 0x41, 0x9e, 0xdc, 0x30, 0xe2, 0x51, 0x1e, 0x0d, 0xa6, 0x4c, 0x7c, 0x20, 0x9c,
	0xfd, 0xd5, 0x8c, 0xf0, 0x15, 0xeb, 0x4d, 0x70, 0x56, 0x3d, 0x16, 0x0e, 0x46, 0x1c, 0xc1, 0x20,
	0x33, 0x80, 0xf0, 0x5b, 0x0d, 0xec, 0xf3, 0xd0, 0x6b, 0xa3, 0x3b, 0xd6, 0xf0, 0x5c, 0xac, 0xe1,
	0x93, 0x19, 0x69, 0x87, 0x6b, 0xdf, 0xb9, 0x10, 0x73, 0x97, 0xdd, 0x85, 0x81, 0xbf, 0x02, 0xba,
	0xed, 0x51, 0x14, 0x92, 0x6e, 0x48, 0x68, 0x0f, 0xf1, 0x84, 0x69, 0xe8, 0xf7, 0x85, 0xd8, 0xec,
	0xfb, 0xd2, 0xca, 0x77, 0xda, 0xd2, 0xcb, 0x05, 0xfd, 0xdf, 0xff, 0xea, 0x53, 0x33, 0x67, 0x7b,
	0xd4, 0x94, 0xfa, 0x26, 0x66, 0x04, 0xfe, 0x06, 0x18, 0x9c, 0xb2, 0x8b, 0x1d, 0x37, 0x0a, 0xc9,
	0x38, 0xf5, 0x4f, 0x04, 0xf5, 0xb3, 0xe4, 0xaf, 0x19, 0x21, 0x31, 0x1f, 0xd9, 0x1e, 0x3d, 0x91,
	0x0c, 0xa3, 0xdc, 0x1f, 0x82, 0xb5, 0x90, 0xd0, 0x80, 0x27, 0x04, 0x6e, 0x83, 0x31, 0xd7, 0xf8,
	0xd1, 0xbe, 0x76, 0x98, 0x36, 0x57, 0xd5, 0x74, 0xc5, 0xa3, 0x2d, 0xe6, 0xc2, 0x2f, 0xc1, 0x3a,
	0x97, 0xbb, 0xbe, 0x7f, 0x15, 0x05, 0xa8, 0x8b, 0xfb, 0x8e, 0x3b, 0x30, 0xd6, 0x45, 0x28, 0x7e,
	0x31, 0x23, 0x5d, 0x7a, 0xb4, 0x26, 0xd0, 0x27, 0x02, 0x3c, 0x12, 0x91, 0xd7, 0xec, 0x71, 0x11,
	0xfc, 0x53, 0xb0, 0x2a, 0xf7, 0x8c, 0xfa, 0xee, 0x35, 0x8f, 0x37, 0xf0, 0xbe, 0x00, 0x6d, 0x66,
	0xc5, 0x1e, 0x29, 0x3c, 0xfc, 0x08, 0x6c, 0x45, 0x94, 0x20, 0x66, 0x05, 0xa8, 0xeb, 0x87, 0xe8,
	0x76, 0xa5, 0xd4, 0xf8, 0xa9, 0xf8, 0x9a, 0x8d, 0x88, 0x92, 0x96, 0x15, 0x9c, 0xf8, 0xe1, 0x70,
	0x59, 0x14, 0x36, 0xc1, 0xfa, 0x54, 0xfd, 0x69, 0x6c, 0x24, 0xde, 0x62, 0xf5, 0x4d, 0x0d, 0x09,
	0xaf, 0xc4, 0x68, 0x53, 0xf7, 0x27, 0x66, 0x60, 0x1d, 0xe8, 0x96, 0x4b, 0xb0, 0x17, 0x05, 0xc8,
	0xf1, 0x18, 0x09, 0xaf, 0xb1, 0x6b, 0x6c, 0x3e, 0x3c, 0xc5, 0xae, 0x29, 0xe5, 0x33, 0xa5, 0x0b,
	0x1b, 0x60, 0x73, 0x18, 0xea, 0x3a, 0x8e, 0x67, 0xc7, 0x95, 0xc0, 0x23, 0xc1, 0xb9, 0x9b, 0xb0,
	0x45, 0x25, 0xc7, 0xb3, 0x55, 0x01, 0x00, 0x63, 0xd5, 0xdb, 0x39, 0xbe, 0x40, 0xb7, 0x83, 0x68,
	0xd4, 0xa1, 0x84, 0xc5, 0x64, 0x8f, 0x05, 0xd9, 0xf3, 0x59, 0x39, 0xb5, 0x29, 0xc0, 0x8a, 0x33,
	0xe7, 0x8e, 0x8d, 0xe1, 0x5b, 0xb0, 0x11, 0x3a, 0xde, 0x25, 0xea, 0x61, 0xda, 0x43, 0x6e, 0x27,
	0xa6, 0xdc, 0xba, 0xab, 0x52, 0x31, 0x1d, 0xef, 0xf2, 0x14, 0xd3, 0x5e, 0xad, 0x23, 0x49, 0x4e,
	0x35, 0x53, 0x0f, 0x27, 0xe6, 0xe0, 0x57, 0xe0, 0xb1, 0x1f, 0x3a, 0x97, 0x8e, 0x87, 0x5d, 0x64,
	0x53, 0x36, 0xc2, 0x7d, 0x20, 0xb8, 0x7f, 0x9c, 0xcc, 0xdd, 0x50, 0x3a, 0x15, 0xca, 0x46, 0xe8,
	0x37, 0xfc, 0xe9, 0x69, 0x68, 0x81, 0x2d, 0x97, 0x60, 0xca, 0xe2, 0x4c, 0x3a, 0x62, 0xe2, 0x85,
	0x30, 0x31, 0xa3, 0x38, 0xad, 0x71, 0x25, 0x95, 0x3d, 0x47, 0x6c, 0x6c, 0xba, 0x09, 0xf3, 0xc2,
	0x21, 0x64, 0xda, 0xb8, 0x65, 0xdf, 0xbe, 0x6b, 0xbf, 0xcb, 0x02, 0x1d, 0xeb, 0xf3, 0xa2, 0x6b,
	0x74, 0x0c, 0xcf, 0x81, 0x3e, 0x59, 0x52, 0x1b, 0x86, 0xe0, 0x3b, 0x48, 0x70, 0x86, 0x89, 0x3a,
	0xda, 0x5c, 0x9b, 0x28, 0xa1, 0xe1, 0x2f, 0x40, 0xba, 0x4f, 0x18, 0xb6, 0x31, 0xc3, 0xc6, 0x13,
	0x41, 0xb3, 0x9d, 0x40, 0x73, 0xae, 0x20, 0xe6, 0x10, 0x0c, 0x7f, 0x0b, 0xe0, 0x30, 0xb6, 0x52,
	0xe2, 0xaa, 0xeb, 0x93, 0x17, 0x21, 0xa1, 0x30, 0xe3, 0xcb, 0xe4, 0xdf, 0x38, 0x64, 0x36, 0x63,
	0x2d, 0x73, 0x3d, 0x98, 0x9c, 0x82, 0x97, 0x60, 0x98, 0x8c, 0x47, 0x0b, 0xcc, 0x38, 0x8a, 0xef,
	0x25, 0x25, 0xab, 0x38, 0xb5, 0xdf, 0x56, 0x33, 0xc3, 0x6c, 0x1b, 0xcd, 0x12, 0xc1, 0x36, 0x38,
	0xb4, 0x5c, 0x9f, 0x92, 0x11, 0x2b, 0x14, 0xf1, 0x24, 0xef, 0x53, 0x86, 0x54, 0xad, 0xa6, 0x42,
	0xaf, 0xf1, 0x54, 0x04, 0x93, 0x0f, 0x04, 0xfe, 0x96, 0x89, 0x36, 0xbc, 0x53, 0x9f, 0x32, 0x59,
	0xaf, 0xa9, 0x18, 0x0b, 0x7d, 0xf0, 0xcc, 0x0e, 0xb1, 0xe3, 0x25, 0xd2, 0x86, 0xa4, 0xef, 0xf3,
	0xc0, 0xb0, 0xcf, 0xf9, 0x4a, 0x2f, 0x7e, 0xf7, 0xf7, 0xff, 0xff, 0x77, 0x8b, 0x4f, 0xc1, 0xae,
	0x73, 0xe9, 0xf9, 0x21, 0x89, 0x8d, 0x4e, 0x80, 0xcd, 0x5d, 0xc1, 0x37, 0x65, 0xd6, 0x94, 0x62,
	0xf8, 0x31, 0x58, 0x96, 0x0d, 0x37, 0x35, 0x0e, 0x45, 0xf8, 0xdc, 0x49, 0x8e, 0x61, 0x27, 0x02,
	0x64, 0xc6, 0x60, 0xd8, 0x06, 0x8f, 0x44, 0x7d, 0xdb, 0xc1, 0x2e, 0xf6, 0x2c, 0x7e, 0x93, 0x55,
	0xa1, 0xfd, 0xe3, 0xa4, 0xd4, 0xc2, 0xcb, 0xdb, 0x52, 0x8c, 0x94, 0x75, 0xb5, 0xb9, 0xe1, 0x4e,
	0x4f, 0xc2, 0x5f, 0x02, 0xe0, 0x86, 0x14, 0x51, 0x12, 0x5e, 0x93, 0xd0, 0x78, 0x29, 0xb8, 0x9e,
	0x26, 0x78, 0x96, 0xf4, 0xea, 0xa6, 0x68, 0xcb, 0xcd, 0x15, 0x37, 0xa4, 0x4d, 0xa1, 0x01, 0x8f,
	0xc1, 0x23, 0x16, 0x62, 0xeb, 0x2a, 0xee, 0x53, 0x50, 0x27, 0xb2, 0x2f, 0x09, 0xa3, 0xc6, 0x91,
	0x0c, 0xe8, 0x42, 0xa8, 0x1a, 0x91, 0x92, 0x14, 0xe5, 0xff, 0x45, 0x03, 0x9b, 0x49, 0x8d, 0x63,
	0x62, 0x83, 0xa8, 0xc7, 0x0d, 0xe2, 0x4f, 0xc1, 0xa2, 0x68, 0x49, 0x45, 0xf7, 0x97, 0x39, 0xde,
	0x9a, 0x0a, 0xd3, 0x4d, 0xd1, 0x5b, 0x9b, 0x12, 0x95, 0x78, 0xff, 0xe6, 0x7f, 0xf0, 0xfd, 0xcb,
	0x3b, 0x60, 0x7d, 0xaa, 0x17, 0xbc, 0xbb, 0xa1, 0xfd, 0x05, 0xc8, 0xca, 0x22, 0x47, 0x05, 0x13,
	0xb9, 0xec, 0xcd, 0xa9, 0x65, 0x17, 0xbd, 0x81, 0x99, 0x11, 0x48, 0xb9, 0xc7, 0xf9, 0x08, 0xe8,
	0x93, 0x2d, 0x22, 0x3f, 0x26, 0xd1, 0x66, 0x4a, 0x2a, 0xed, 0x81, 0xc7, 0xc4, 0xfb, 0x4a, 0xa9,
	0xff, 0x0c, 0x64, 0xf9, 0x11, 0x3b, 0x16, 0x91, 0xcd, 0x75, 0x4a, 0x36, 0xd7, 0x6a, 0x8e, 0x37,
	0xd7, 0xf9, 0x6f, 0x97, 0x41, 0x6e, 0x3c, 0x87, 0x40, 0x0f, 0xac, 0x75, 0xb1, 0xeb, 0x76, 0xf8,
	0xf9, 0x2a, 0x6f, 0xd3, 0x44, 0xe0, 0xf8, 0xe3, 0x87, 0xa4, 0xa0, 0xe1, 0xf0, 0x44, 0x71, 0x4c,
	0xf5, 0x7c, 0xb9, 0xee, 0x98, 0x04, 0xfe, 0x12, 0xe4, 0x6c, 0xd2, 0xc5, 0x91, 0xcb, 0x54, 0xe2,
	0xbb, 0xef, 0xac, 0x57, 0x15, 0x5c, 0xda, 0x81, 0x5f, 0x01, 0x5d, 0x25, 0x4c, 0x19, 0xe9, 0xfc,
	0x90, 0x1a, 0xf3, 0xe2, 0x92, 0xfd, 0xfc, 0x7b, 0x2d, 0xb8, 0xa9, 0xb4, 0xcd, 0x35, 0x3a, 0x36,
	0xa6, 0xdc, 0xdd, 0x5d, 0xdf, 0xc2, 0xae, 0xc3, 0x06, 0xe8, 0x1d, 0x71, 0x2e, 0x7b, 0x0c, 0xe1,
	0x77, 0x38, 0x24, 0xa2, 0x3d, 0x4f, 0xf3, 0x2b, 0x26, 0x85, 0x6f, 0x85, 0xac, 0xc8, 0x45, 0x5c,
	0x87, 0x5a, 0xd8, 0x25, 0x68, 0x42, 0x53, 0xb4, 0xdc, 0x69, 0x73, 0x43, 0x08, 0x6b, 0x63, 0x8a,
	0xf0, 0x39, 0xc8, 0x05, 0xd8, 0x73, 0x2c, 0xd4, 0xf7, 0x6d, 0x82, 0xb0, 0x27, 0xfb, 0xe9, 0xb4,
	0x99, 0x15, 0xb3, 0xe7, 0xbe, 0x4d, 0x8a, 0xde, 0x00, 0xee, 0x81, 0x8c, 0xeb, 0x50, 0x86, 0x30,
	0x15, 0x90, 0x65, 0x01, 0x59, 0xe1, 0x53, 0x45, 0x5a, 0xf4, 0x06, 0xf9, 0xff, 0x4e, 0x01, 0x7d,
	0xf2, 0x9b, 0x20, 0x04, 0x0b, 0x57, 0x64, 0x40, 0x0d, 0x6d, 0x7f, 0xfe, 0x70, 0xc5, 0x14, 0xff,
	0xc3, 0xbf, 0xd6, 0xa6, 0x4f, 0x5a, 0x3e, 0xb2, 0xb4, 0x7e, 0xd0, 0xc6, 0x4d, 0x4d, 0x3c, 0xd8,
	0x05, 0xfe, 0x10, 0x6c, 0x0e, 0x17, 0xc2, 0x97, 0x16, 0x3b, 0xc2, 0xbc, 0x58, 0x2d, 0x8c, 0x65,
	0x6f, 0xc8, 0x80, 0x4a, 0x0b, 0x07, 0x03, 0xb0, 0x77, 0xb7, 0x35, 0xb8, 0x06, 0x32, 0xf5, 0x46,
	0x0b, 0x55, 0xaa, 0x27, 0x67, 0xf5, 0x6a, 0x45, 0x9f, 0x93, 0x13, 0xe8, 0xa4, 0x58, 0xab, 0x95,
	0x8a, 0xe5, 0x37, 0xba, 0x06, 0x75, 0x90, 0x2d, 0xd6, 0xbf, 0x40, 0xd5, 0x7a, 0xe5, 0xa2, 0x71,
	0x56, 0x6f, 0xe9, 0x29, 0x08, 0x41, 0xae, 0x52, 0x3d, 0x29, 0xb6, 0x6b, 0x2d, 0xd4, 0x6c, 0x97,
	0x9a, 0xd5, 0x96, 0x3e, 0xcf, 0xd5, 0xde, 0x54, 0xbf, 0x68, 0xc6, 0x13, 0x0b, 0x07, 0x0d, 0xf0,
	0x38, 0xd9, 0xc7, 0x27, 0x2d, 0xcc, 0x4d, 0x59, 0xd0, 0x12, 0x2c, 0xa4, 0xf2, 0x5f, 0x81, 0xcd,
	0xa4, 0xa2, 0x05, 0x9e, 0x82, 0xac, 0xd5, 0xf3, 0xf9, 0xed, 0xb5, 0xfc, 0xc8, 0x63, 0x2a, 0x00,
	0xdc, 0xf9, 0x74, 0x20, 0xc2, 0xd1, 0xcb, 0xd4, 0x61, 0xca, 0xcc, 0x48, 0xd5, 0x32, 0xd7, 0xcc,
	0xff, 0x57, 0x0a, 0xe8, 0x93, 0x65, 0x1d, 0x6c, 0x81, 0xf5, 0xbe, 0xe3, 0x39, 0xfd, 0xa8, 0x8f,
	0x44, 0x8d, 0x48, 0x9d, 0xaf, 0xc9, 0x9d, 0x36, 0x3e, 0xfe, 0x48, 0xda, 0x00, 0xef, 0x4b, 0xcb,
	0xc7, 0x8b, 0xc6, 0x37, 0xdf, 0x7c, 0xb3, 0x60, 0xae, 0x29, 0x0a, 0xce, 0xde, 0x74, 0xbe, 0x26,
	0xb0, 0x03, 0x56, 0x45, 0xb1, 0xd9, 0x8d, 0x3c, 0x59, 0x74, 0xcc, 0x0b, 0x8f, 0x7a, 0xf5, 0xb0,
	0x5a, 0xb3, 0xc0, 0x07, 0x27, 0x4a, 0x75, 0xc4, 0x61, 0xb2, 0xbd, 0x91, 0x79, 0xb1, 0x72, 0x7c,
	0x33, 0xb1, 0xf2, 0x85, 0xef, 0xbd, 0x72, 0x49, 0x11, 0xaf, 0xfc, 0xa0, 0x00, 0xb2, 0xa3, 0xd6,
	0x61, 0x06, 0x2c, 0xff, 0xfa, 0xd7, 0xe8, 0xb4, 0xd8, 0x3c, 0xd5, 0xe7, 0xe0, 0x3a, 0x58, 0x3d,
	0x6f, 0x9b, 0xe7, 0x6d, 0x53, 0x4c, 0xa0, 0x63, 0x5d, 0xfb, 0x6c, 0x21, 0x9d, 0xd2, 0xe7, 0xf3,
	0x9f, 0x82, 0x8d, 0x84, 0xa2, 0x96, 0xb7, 0x6e, 0xbc, 0xe9, 0x11, 0x4f, 0x05, 0x3d, 0x82, 0x6d,
	0x12, 0x8a, 0xad, 0x4d, 0x9b, 0xab, 0x11, 0x25, 0xbc, 0x65, 0x3f, 0x15, 0x93, 0xf9, 0x7f, 0x5e,
	0x02, 0xb9, 0xf1, 0x9a, 0x12, 0xbe, 0x01, 0x5b, 0xb2, 0xc8, 0x18, 0x20, 0x19, 0x0d, 0x58, 0x8f,
	0x77, 0x84, 0xbe, 0x6b, 0xab, 0xd3, 0xd9, 0x50, 0x7b, 0xc9, 0xd3, 0x47, 0xe1, 0x42, 0xbe, 0x5a,
	0x9b, 0x8f, 0x94, 0xce, 0x05, 0x57, 0x69, 0xc5, 0x1a, 0xd0, 0x01, 0x9b, 0x5f, 0xfb, 0x1e, 0x91,
	0xf1, 0x6a, 0xa4, 0xc8, 0x95, 0x21, 0xf6, 0xe3, 0x87, 0x14, 0xb9, 0x85, 0xdf, 0xf8, 0x1e, 0x11,
	0x41, 0x6d, 0x58, 0x4e, 0xcf, 0x99, 0xeb, 0x5f, 0x4f, 0x4e, 0xc2, 0xbf, 0x00, 0xdb, 0x13, 0xb1,
	0x8e, 0xd8, 0x23, 0x16, 0x65, 0x1a, 0xfe, 0xf4, 0x41, 0x16, 0xc7, 0xe3, 0x22, 0xb1, 0x47, 0x0c,
	0x1b, 0xee, 0x0c, 0x19, 0x3c, 0x03, 0x1b, 0x51, 0x60, 0x63, 0x46, 0x50, 0x9f, 0x84, 0x97, 0x04,
	0xbd, 0x73, 0x3c, 0xdb, 0x7f, 0x77, 0xef, 0x13, 0xaa, 0xb9, 0x2e, 0xb5, 0xce, 0xb9, 0xd2, 0x5b,
	0xa1, 0x03, 0xcb, 0xe0, 0xa9, 0x2a, 0xf7, 0x3c, 0xf2, 0x4e, 0x14, 0x7a, 0x14, 0x45, 0x1e, 0x73,
	0x5c, 0xd4, 0x75, 0x42, 0x5e, 0x79, 0x5a, 0x2a, 0x8c, 0xe7, 0x25, 0xac, 0x4e, 0xde, 0xf1, 0x6a,
	0x8f, 0xb6, 0x39, 0xe6, 0x84, 0x43, 0x4e, 0x2d, 0x78, 0x0e, 0x9e, 0xcf, 0xae, 0x5d, 0x45, 0x7f,
	0xd7, 0xc3, 0xde, 0x25, 0x51, 0x31, 0xfe, 0x69, 0x72, 0xdd, 0xda, 0x24, 0xac, 0x2c, 0x60, 0xf9,
	0xff, 0xd0, 0xc0, 0xfa, 0xd4, 0x49, 0xc0, 0x3f, 0x01, 0x6b, 0xa1, 0x1f, 0x31, 0x7e, 0x0b, 0x88,
	0x87, 0x3b, 0x2e, 0xb9, 0xd3, 0x49, 0x72, 0x0a, 0x5b, 0x95, 0x50, 0x78, 0x02, 0xf4, 0x3e, 0xaf,
	0x82, 0xd5, 0x3b, 0xb6, 0xb8, 0x47, 0xa9, 0xfb, 0xef, 0x91, 0x99, 0xeb, 0x3b, 0x9e, 0x3a, 0x3a,
	0x71, 0xe9, 0x7f, 0x06, 0x1e, 0xf1, 0x2a, 0x1c, 0xb1, 0x10, 0x77, 0xbb, 0x8e, 0xc5, 0xbf, 0x52,
	0xb8, 0xae, 0x38, 0xf4, 0x34, 0x0f, 0xe0, 0x8e, 0xdb, 0x92, 0xb2, 0x86, 0x27, 0x3c, 0x34, 0x9f,
	0x07, 0xc6, 0xac, 0x53, 0x2e, 0x6d, 0x83, 0x27, 0x43, 0x4f, 0x8a, 0x7f, 0x1a, 0x0a, 0x88, 0xe5,
	0x74, 0x1d, 0x12, 0xe6, 0xff, 0x51, 0x03, 0x99, 0xd1, 0x47, 0x92, 0x3a, 0x58, 0xed, 0x60, 0x4a,
	0x6e, 0x1b, 0x7a, 0xed, 0xbe, 0x86, 0x3e, 0xf7, 0xbe, 0x94, 0xf9, 0x4e, 0x4b, 0xa7, 0x35, 0xf5,
	0xa4, 0x93, 0xe5, 0xfa, 0xc3, 0x9e, 0xfe, 0x33, 0x90, 0xed, 0xe3, 0x9b, 0x5b, 0xba, 0xd4, 0xf7,
	0x7b, 0x1f, 0xca, 0xf4, 0xf1, 0x4d, 0xcc, 0x95, 0xb7, 0xc1, 0xee, 0x9d, 0xef, 0x55, 0x50, 0x07,
	0xf3, 0x57, 0x44, 0xd6, 0x57, 0x2b, 0x26, 0xff, 0x97, 0x17, 0xbc, 0xd7, 0x7c, 0x8f, 0xef, 0x2d,
	0x78, 0x05, 0xea, 0x8f, 0x52, 0x9f, 0x68, 0xf9, 0x2e, 0x38, 0xb8, 0xff, 0x69, 0x2c, 0xc1, 0xd4,
	0xcb, 0x71, 0x53, 0xc9, 0x45, 0xea, 0xad, 0x9d, 0x83, 0xb7, 0x60, 0x75, 0xec, 0x67, 0x16, 0x08,
	0xc0, 0x52, 0xb3, 0x55, 0x6c, 0x9d, 0x95, 0xf5, 0x39, 0x98, 0x03, 0xa0, 0xd9, 0x32, 0xcf, 0xca,
	0x2d, 0x54, 0xa9, 0x37, 0x75, 0x8d, 0xe7, 0xc2, 0x5a, 0xe3, 0xf5, 0x59, 0xb9, 0x58, 0x13, 0x13,
	0x29, 0xb8, 0x0c, 0xe6, 0xab, 0x95, 0xa6, 0x3e, 0xcf, 0x93, 0x62, 0xc3, 0x3c, 0x7b, 0x7d, 0x56,
	0xe7, 0xa2, 0x26, 0xcf, 0xa8, 0xff, 0xa4, 0x81, 0x74, 0xfc, 0xe3, 0x00, 0x57, 0x34, 0x1b, 0xed,
	0x7a, 0x05, 0x99, 0x8d, 0xd2, 0x59, 0x5d, 0x86, 0xde, 0x5a, 0xb5, 0xd8, 0x6c, 0x21, 0xb3, 0xfa,
	0xab, 0x76, 0xb5, 0xc9, 0xb3, 0xe8, 0x2a, 0x58, 0x31, 0xcf, 0xea, 0xaf, 0x65, 0x70, 0x4e, 0xf1,
	0x75, 0x98, 0xc5, 0x7a, 0xa5, 0x71, 0xae, 0xcf, 0xc3, 0x5d, 0xb0, 0x36, 0xca, 0x8e, 0x6a, 0x25,
	0x7d, 0x21, 0x9f, 0xfe, 0x87, 0xff, 0xfb, 0xd7, 0xbf, 0x4d, 0x69, 0x69, 0x8d, 0x43, 0xcf, 0x8b,
	0xaf, 0x6b, 0xd5, 0xcf, 0xf5, 0x45, 0xb8, 0x09, 0xf4, 0x72, 0xad, 0xdd, 0x6c, 0x55, 0x4d, 0x74,
	0x61, 0x36, 0x3e, 0x3f, 0xab, 0x54, 0x2b, 0xfa, 0x12, 0xdc, 0x07, 0x3b, 0xb5, 0x46, 0xb1, 0x82,
	0x4a, 0xc5, 0x5a, 0xb1, 0x5e, 0xe6, 0x56, 0x2e, 0x1a, 0xb5, 0xb3, 0xf2, 0x17, 0xa8, 0xdc, 0xa8,
	0x9f, 0x9c, 0xbd, 0xd6, 0x97, 0x0f, 0x7e, 0x0e, 0xd6, 0x26, 0xde, 0xcf, 0x60, 0x1a, 0x2c, 0x14,
	0xdb, 0xad, 0x86, 0x3e, 0xc7, 0xb3, 0xc6, 0xe7, 0x1f, 0xa1, 0x46, 0xbd, 0xf6, 0x85, 0xae, 0x89,
	0xc1, 0xc7, 0x72, 0x90, 0x3a, 0x68, 0x01, 0x63, 0x56, 0x8f, 0x0d, 0xb7, 0xc1, 0x56, 0xbb, 0x59,
	0x55, 0x26, 0xda, 0x66, 0xb5, 0xc2, 0x57, 0xd4, 0x6a, 0x94, 0x1b, 0x35, 0x7d, 0x2e, 0x16, 0x56,
	0x1a, 0x6f, 0xeb, 0xcd, 0x96, 0x59, 0x2d, 0x9e, 0xdf, 0x0a, 0xb5, 0x92, 0x01, 0x1e, 0xc7, 0xd7,
	0xd7, 0x8e, 0x0f, 0x47, 0xfc, 0xc4, 0x55, 0xca, 0x88, 0x1f, 0x66, 0xe4, 0xfd, 0xf9, 0x6c, 0x21,
	0x9d, 0xd5, 0x57, 0x3f, 0x5b, 0x48, 0xaf, 0xe9, 0xfa, 0xc1, 0xff, 0x68, 0x60, 0x23, 0xa1, 0x55,
	0x84, 0x15, 0x90, 0x16, 0x55, 0xa0, 0x43, 0x64, 0x9d, 0x98, 0x39, 0x3e, 0xbc, 0xb7, 0xbf, 0x2c,
	0xa8, 0x36, 0x73, 0xa8, 0x99, 0xff, 0x1b, 0x0d, 0x2c, 0x29, 0x42, 0x38, 0xda, 0x29, 0xa9, 0x06,
	0xe9, 0x15, 0x58, 0x1a, 0x4b, 0x41, 0xb3, 0x1c, 0x5c, 0xfc, 0xca, 0xa3, 0xa0, 0x53, 0x5d, 0xd5,
	0xfc, 0x03, 0xbb, 0xaa, 0x83, 0xb7, 0x00, 0xb6, 0xa7, 0x5f, 0xd9, 0x8a, 0x20, 0x27, 0x7f, 0x6a,
	0x46, 0xea, 0x77, 0x6b, 0x15, 0x33, 0xee, 0x7a, 0xd3, 0x5c, 0x95, 0x1a, 0x6a, 0x78, 0x80, 0xc1,
	0x93, 0x99, 0x0f, 0x1a, 0xb0, 0x02, 0x56, 0x99, 0x15, 0xa0, 0x2b, 0x42, 0x02, 0xec, 0x3a, 0xd7,
	0xe4, 0x8e, 0xd6, 0xad, 0x65, 0x05, 0x6f, 0x62, 0x98, 0x99, 0x65, 0x23, 0xa3, 0xd2, 0x1b, 0xf1,
	0xf2, 0xf0, 0x04, 0x6e, 0x49, 0x2d, 0xf9, 0xe9, 0xc3, 0x97, 0x82, 0xeb, 0x57, 0x20, 0xef, 0xf8,
	0x92, 0x31, 0x08, 0xfd, 0x9b, 0xc1, 0x18, 0x79, 0x29, 0x3b, 0xea, 0x6a, 0x17, 0x5a, 0x67, 0x49,
	0xec, 0xd1, 0xab, 0xdf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x29, 0x4a, 0x0a, 0x9d, 0x81, 0x20, 0x00,
	0x00,
}
