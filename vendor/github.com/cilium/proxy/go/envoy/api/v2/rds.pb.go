// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/rds.proto

package v2

import (
	fmt "fmt"
	core "github.com/cilium/proxy/go/envoy/api/v2/core"
	route "github.com/cilium/proxy/go/envoy/api/v2/route"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/lyft/protoc-gen-validate/validate"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// [#comment:next free field: 9]
type RouteConfiguration struct {
	// The name of the route configuration. For example, it might match
	// :ref:`route_config_name
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.route_config_name>` in
	// :ref:`envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// An array of virtual hosts that make up the route table.
	VirtualHosts []*route.VirtualHost `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts,proto3" json:"virtual_hosts,omitempty"`
	// Optionally specifies a list of HTTP headers that the connection manager
	// will consider to be internal only. If they are found on external requests they will be cleaned
	// prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
	// information.
	InternalOnlyHeaders []string `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders,proto3" json:"internal_only_headers,omitempty"`
	// Specifies a list of HTTP headers that should be added to each response that
	// the connection manager encodes. Headers specified at this level are applied
	// after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
	// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	ResponseHeadersToAdd []*core.HeaderValueOption `protobuf:"bytes,4,rep,name=response_headers_to_add,json=responseHeadersToAdd,proto3" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// that the connection manager encodes.
	ResponseHeadersToRemove []string `protobuf:"bytes,5,rep,name=response_headers_to_remove,json=responseHeadersToRemove,proto3" json:"response_headers_to_remove,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request
	// routed by the HTTP connection manager. Headers specified at this level are
	// applied after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
	// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*core.HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd,proto3" json:"request_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each request
	// routed by the HTTP connection manager.
	RequestHeadersToRemove []string `protobuf:"bytes,8,rep,name=request_headers_to_remove,json=requestHeadersToRemove,proto3" json:"request_headers_to_remove,omitempty"`
	// An optional boolean that specifies whether the clusters that the route
	// table refers to will be validated by the cluster manager. If set to true
	// and a route refers to a non-existent cluster, the route table will not
	// load. If set to false and a route refers to a non-existent cluster, the
	// route table will load and the router filter will return a 404 if the route
	// is selected at runtime. This setting defaults to true if the route table
	// is statically defined via the :ref:`route_config
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>`
	// option. This setting default to false if the route table is loaded dynamically via the
	// :ref:`rds
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`
	// option. Users may which to override the default behavior in certain cases (for example when
	// using CDS with a static route table).
	ValidateClusters     *wrappers.BoolValue `protobuf:"bytes,7,opt,name=validate_clusters,json=validateClusters,proto3" json:"validate_clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RouteConfiguration) Reset()         { *m = RouteConfiguration{} }
func (m *RouteConfiguration) String() string { return proto.CompactTextString(m) }
func (*RouteConfiguration) ProtoMessage()    {}
func (*RouteConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_78812f46dcff924a, []int{0}
}

func (m *RouteConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteConfiguration.Unmarshal(m, b)
}
func (m *RouteConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteConfiguration.Marshal(b, m, deterministic)
}
func (m *RouteConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteConfiguration.Merge(m, src)
}
func (m *RouteConfiguration) XXX_Size() int {
	return xxx_messageInfo_RouteConfiguration.Size(m)
}
func (m *RouteConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_RouteConfiguration proto.InternalMessageInfo

func (m *RouteConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteConfiguration) GetVirtualHosts() []*route.VirtualHost {
	if m != nil {
		return m.VirtualHosts
	}
	return nil
}

func (m *RouteConfiguration) GetInternalOnlyHeaders() []string {
	if m != nil {
		return m.InternalOnlyHeaders
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToAdd() []*core.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteConfiguration) GetRequestHeadersToAdd() []*core.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetRequestHeadersToRemove() []string {
	if m != nil {
		return m.RequestHeadersToRemove
	}
	return nil
}

func (m *RouteConfiguration) GetValidateClusters() *wrappers.BoolValue {
	if m != nil {
		return m.ValidateClusters
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteConfiguration)(nil), "envoy.api.v2.RouteConfiguration")
}

func init() { proto.RegisterFile("envoy/api/v2/rds.proto", fileDescriptor_78812f46dcff924a) }

var fileDescriptor_78812f46dcff924a = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xae, 0x9b, 0xfc, 0x9a, 0x5f, 0x2f, 0x41, 0x6a, 0xaf, 0x69, 0x92, 0x46, 0x28, 0x89, 0x22,
	0x86, 0xd0, 0xc1, 0x46, 0x66, 0xa2, 0x4c, 0xa4, 0x08, 0x0a, 0x4b, 0x25, 0x17, 0xba, 0x5a, 0x17,
	0xfb, 0x25, 0xb1, 0xe4, 0xdc, 0x33, 0x77, 0x67, 0xa3, 0xac, 0x4c, 0xcc, 0xf0, 0x4f, 0xf0, 0x37,
	0xc0, 0xc2, 0xc8, 0x8a, 0xd8, 0x19, 0x10, 0x03, 0xfc, 0x17, 0x28, 0x67, 0x1f, 0xd4, 0x69, 0x91,
	0x10, 0x62, 0xb1, 0x9e, 0xef, 0xfb, 0xbe, 0xfb, 0xbe, 0x77, 0xf7, 0x6c, 0xd2, 0x02, 0x9e, 0xe1,
	0xd2, 0x61, 0x49, 0xe4, 0x64, 0xae, 0x23, 0x42, 0x69, 0x27, 0x02, 0x15, 0xd2, 0x86, 0x5e, 0xb7,
	0x59, 0x12, 0xd9, 0x99, 0xdb, 0xbd, 0x5e, 0x62, 0x05, 0x28, 0xc0, 0x99, 0x30, 0x09, 0x39, 0x77,
	0x0d, 0x0d, 0x23, 0x19, 0x60, 0x06, 0x62, 0x59, 0xa0, 0xbd, 0xb2, 0x03, 0xa6, 0x0a, 0xf2, 0xa7,
	0x51, 0xcf, 0x10, 0x67, 0x31, 0x68, 0x02, 0xe3, 0x1c, 0x15, 0x53, 0x11, 0x72, 0x69, 0xd4, 0x05,
	0xaa, 0xdf, 0x26, 0xe9, 0xd4, 0x79, 0x2e, 0x58, 0x92, 0x80, 0x30, 0x78, 0x3b, 0x63, 0x71, 0x14,
	0x32, 0x05, 0x8e, 0x29, 0x0a, 0xa0, 0x39, 0xc3, 0x19, 0xea, 0xd2, 0x59, 0x55, 0xf9, 0xea, 0xf0,
	0x5d, 0x95, 0x50, 0x6f, 0x65, 0x7e, 0x8c, 0x7c, 0x1a, 0xcd, 0x52, 0xa1, 0xcd, 0x28, 0x25, 0x55,
	0xce, 0x16, 0xd0, 0xb1, 0x06, 0xd6, 0x68, 0xdb, 0xd3, 0x35, 0x7d, 0x4c, 0xae, 0x65, 0x91, 0x50,
	0x29, 0x8b, 0xfd, 0x39, 0x4a, 0x25, 0x3b, 0x9b, 0x83, 0xca, 0xa8, 0xee, 0xf6, 0xed, 0x8b, 0x27,
	0x63, 0xe7, 0x9d, 0x9c, 0xe7, 0xc4, 0x13, 0x94, 0x6a, 0x5c, 0xfd, 0xf0, 0xb9, 0xbf, 0xe1, 0x35,
	0xb2, 0x5f, 0x4b, 0x92, 0xba, 0x64, 0x3f, 0xe2, 0x0a, 0x04, 0x67, 0xb1, 0x8f, 0x3c, 0x5e, 0xfa,
	0x73, 0x60, 0x21, 0x08, 0xd9, 0xa9, 0x0c, 0x2a, 0xa3, 0x6d, 0x6f, 0xcf, 0x80, 0xa7, 0x3c, 0x5e,
	0x9e, 0xe4, 0x10, 0x9d, 0x93, 0xb6, 0x00, 0x99, 0x20, 0x97, 0x60, 0xe8, 0xbe, 0x42, 0x9f, 0x85,
	0x61, 0xa7, 0xaa, 0x93, 0xdc, 0x28, 0x27, 0x59, 0xdd, 0x8a, 0x9d, 0x8b, 0xcf, 0x59, 0x9c, 0xc2,
	0x69, 0xb2, 0x6a, 0x6d, 0x5c, 0x7f, 0xfb, 0xfd, 0x7d, 0x65, 0xeb, 0x95, 0x55, 0xd9, 0xf9, 0x56,
	0xf3, 0x9a, 0x66, 0xc7, 0xc2, 0xe4, 0x09, 0xde, 0x0b, 0x43, 0x7a, 0x97, 0x74, 0xaf, 0x72, 0x12,
	0xb0, 0xc0, 0x0c, 0x3a, 0xff, 0xe9, 0x88, 0xed, 0x4b, 0x4a, 0x4f, 0xc3, 0x74, 0x4a, 0x5a, 0x02,
	0x9e, 0xa5, 0x20, 0xd5, 0x7a, 0xca, 0xad, 0xbf, 0x4d, 0xb9, 0x57, 0x6c, 0x58, 0x0a, 0x79, 0x87,
	0x1c, 0x5c, 0xe1, 0x53, 0x64, 0xfc, 0x5f, 0x67, 0x6c, 0xad, 0xeb, 0x8a, 0x88, 0x0f, 0xc9, 0xae,
	0x19, 0x0e, 0x3f, 0x88, 0x53, 0xa9, 0x56, 0x27, 0x5f, 0x1b, 0x58, 0xa3, 0xba, 0xdb, 0xb5, 0xf3,
	0xf9, 0xb2, 0xcd, 0x7c, 0xd9, 0x63, 0xc4, 0x58, 0x27, 0xf3, 0x76, 0x8c, 0xe8, 0xb8, 0xd0, 0xb8,
	0x1f, 0x37, 0xc9, 0xbe, 0x9e, 0x9e, 0xfb, 0x66, 0xc6, 0xcf, 0x40, 0x64, 0x51, 0x00, 0xf4, 0x29,
	0x69, 0x9c, 0x29, 0x01, 0x6c, 0xa1, 0x61, 0x49, 0x7b, 0xe5, 0xae, 0x7f, 0xf2, 0xbd, 0x3c, 0x61,
	0xb7, 0xff, 0x5b, 0x3c, 0x3f, 0xe5, 0xe1, 0xc6, 0xc8, 0xba, 0x65, 0xd1, 0x84, 0xec, 0x3e, 0xe2,
	0x81, 0x80, 0x05, 0x70, 0xc5, 0xe2, 0x62, 0xef, 0x9b, 0x65, 0xed, 0x05, 0xc2, 0x25, 0x9b, 0xc3,
	0x3f, 0xa1, 0x96, 0x1c, 0x91, 0xd4, 0x1f, 0x80, 0x0a, 0xe6, 0xff, 0xaa, 0x8f, 0xfe, 0x8b, 0x4f,
	0x5f, 0x5f, 0x6f, 0x1e, 0x0c, 0x9b, 0xa5, 0x5f, 0xc3, 0x91, 0xfe, 0x6c, 0xe4, 0x91, 0x75, 0x38,
	0xae, 0xbd, 0xf9, 0xd2, 0xb3, 0x5e, 0x5a, 0xd6, 0x64, 0x4b, 0x5f, 0xc1, 0xed, 0x1f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xd0, 0x36, 0xdf, 0xad, 0x92, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RouteDiscoveryServiceClient is the client API for RouteDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteDiscoveryServiceClient interface {
	StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error)
	IncrementalRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_IncrementalRoutesClient, error)
	FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type routeDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouteDiscoveryServiceClient(cc *grpc.ClientConn) RouteDiscoveryServiceClient {
	return &routeDiscoveryServiceClient{cc}
}

func (c *routeDiscoveryServiceClient) StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteDiscoveryService_serviceDesc.Streams[0], "/envoy.api.v2.RouteDiscoveryService/StreamRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDiscoveryServiceStreamRoutesClient{stream}
	return x, nil
}

type RouteDiscoveryService_StreamRoutesClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type routeDiscoveryServiceStreamRoutesClient struct {
	grpc.ClientStream
}

func (x *routeDiscoveryServiceStreamRoutesClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeDiscoveryServiceClient) IncrementalRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_IncrementalRoutesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteDiscoveryService_serviceDesc.Streams[1], "/envoy.api.v2.RouteDiscoveryService/IncrementalRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDiscoveryServiceIncrementalRoutesClient{stream}
	return x, nil
}

type RouteDiscoveryService_IncrementalRoutesClient interface {
	Send(*IncrementalDiscoveryRequest) error
	Recv() (*IncrementalDiscoveryResponse, error)
	grpc.ClientStream
}

type routeDiscoveryServiceIncrementalRoutesClient struct {
	grpc.ClientStream
}

func (x *routeDiscoveryServiceIncrementalRoutesClient) Send(m *IncrementalDiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeDiscoveryServiceIncrementalRoutesClient) Recv() (*IncrementalDiscoveryResponse, error) {
	m := new(IncrementalDiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeDiscoveryServiceClient) FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/envoy.api.v2.RouteDiscoveryService/FetchRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteDiscoveryServiceServer is the server API for RouteDiscoveryService service.
type RouteDiscoveryServiceServer interface {
	StreamRoutes(RouteDiscoveryService_StreamRoutesServer) error
	IncrementalRoutes(RouteDiscoveryService_IncrementalRoutesServer) error
	FetchRoutes(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterRouteDiscoveryServiceServer(s *grpc.Server, srv RouteDiscoveryServiceServer) {
	s.RegisterService(&_RouteDiscoveryService_serviceDesc, srv)
}

func _RouteDiscoveryService_StreamRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteDiscoveryServiceServer).StreamRoutes(&routeDiscoveryServiceStreamRoutesServer{stream})
}

type RouteDiscoveryService_StreamRoutesServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type routeDiscoveryServiceStreamRoutesServer struct {
	grpc.ServerStream
}

func (x *routeDiscoveryServiceStreamRoutesServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteDiscoveryService_IncrementalRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteDiscoveryServiceServer).IncrementalRoutes(&routeDiscoveryServiceIncrementalRoutesServer{stream})
}

type RouteDiscoveryService_IncrementalRoutesServer interface {
	Send(*IncrementalDiscoveryResponse) error
	Recv() (*IncrementalDiscoveryRequest, error)
	grpc.ServerStream
}

type routeDiscoveryServiceIncrementalRoutesServer struct {
	grpc.ServerStream
}

func (x *routeDiscoveryServiceIncrementalRoutesServer) Send(m *IncrementalDiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeDiscoveryServiceIncrementalRoutesServer) Recv() (*IncrementalDiscoveryRequest, error) {
	m := new(IncrementalDiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteDiscoveryService_FetchRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.RouteDiscoveryService/FetchRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.RouteDiscoveryService",
	HandlerType: (*RouteDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchRoutes",
			Handler:    _RouteDiscoveryService_FetchRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoutes",
			Handler:       _RouteDiscoveryService_StreamRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "IncrementalRoutes",
			Handler:       _RouteDiscoveryService_IncrementalRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/api/v2/rds.proto",
}
