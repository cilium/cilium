// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: spire/api/types/federateswith.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FederatesWithMatch_MatchBehavior int32

const (
	// Indicates that the federated trust domains in this match are
	// equal to the candidate trust domains, independent of ordering.
	// Example:
	//
	//	Given:
	//	  - e1 { FederatesWith: ["spiffe://td1", "spiffe://td2", "spiffe://td3"]}
	//	  - e2 { FederatesWith: ["spiffe://td1", "spiffe://td2"]}
	//	  - e3 { FederatesWith: ["spiffe://td1"]}
	//	Operation:
	//	  - MATCH_EXACT ["spiffe://td1", "spiffe://td2"]
	//	Entries that match:
	//	  - 'e2'
	FederatesWithMatch_MATCH_EXACT FederatesWithMatch_MatchBehavior = 0
	// Indicates that all candidates which have a non-empty subset
	// of the provided set of trust domains will match.
	// Example:
	//
	//	Given:
	//	  - e1 { FederatesWith: ["spiffe://td1", "spiffe://td2", "spiffe://td3"]}
	//	  - e2 { FederatesWith: ["spiffe://td1", "spiffe://td2"]}
	//	  - e3 { FederatesWith: ["spiffe://td1"]}
	//	Operation:
	//	  - MATCH_SUBSET ["spiffe://td1"]
	//	Entries that match:
	//	  - 'e1'
	FederatesWithMatch_MATCH_SUBSET FederatesWithMatch_MatchBehavior = 1
	// Indicate that all candidates which are a superset
	// of the provided set of trust domains will match.
	// Example:
	//
	//	Given:
	//	  - e1 { FederatesWith: ["spiffe://td1", "spiffe://td2", "spiffe://td3"]}
	//	  - e2 { FederatesWith: ["spiffe://td1", "spiffe://td2"]}
	//	  - e3 { FederatesWith: ["spiffe://td1"]}
	//	Operation:
	//	  - MATCH_SUPERSET ["spiffe://td1", "spiffe://td2"]
	//	Entries that match:
	//	  - 'e1'
	//	  - 'e2'
	FederatesWithMatch_MATCH_SUPERSET FederatesWithMatch_MatchBehavior = 2
	// Indicates that all candidates which have at least one
	// of the provided set of trust domains will match.
	// Example:
	//
	//	Given:
	//	  - e1 { FederatesWith: ["spiffe://td1", "spiffe://td2", "spiffe://td3"]}
	//	  - e2 { FederatesWith: ["spiffe://td1", "spiffe://td2"]}
	//	  - e3 { FederatesWith: ["spiffe://td1"]}
	//	Operation:
	//	  - MATCH_ANY ["spiffe://td1"]
	//	Entries that match:
	//	  - 'e1'
	//	  - 'e2'
	//	  - 'e3'
	FederatesWithMatch_MATCH_ANY FederatesWithMatch_MatchBehavior = 3
)

// Enum value maps for FederatesWithMatch_MatchBehavior.
var (
	FederatesWithMatch_MatchBehavior_name = map[int32]string{
		0: "MATCH_EXACT",
		1: "MATCH_SUBSET",
		2: "MATCH_SUPERSET",
		3: "MATCH_ANY",
	}
	FederatesWithMatch_MatchBehavior_value = map[string]int32{
		"MATCH_EXACT":    0,
		"MATCH_SUBSET":   1,
		"MATCH_SUPERSET": 2,
		"MATCH_ANY":      3,
	}
)

func (x FederatesWithMatch_MatchBehavior) Enum() *FederatesWithMatch_MatchBehavior {
	p := new(FederatesWithMatch_MatchBehavior)
	*p = x
	return p
}

func (x FederatesWithMatch_MatchBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FederatesWithMatch_MatchBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_spire_api_types_federateswith_proto_enumTypes[0].Descriptor()
}

func (FederatesWithMatch_MatchBehavior) Type() protoreflect.EnumType {
	return &file_spire_api_types_federateswith_proto_enumTypes[0]
}

func (x FederatesWithMatch_MatchBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FederatesWithMatch_MatchBehavior.Descriptor instead.
func (FederatesWithMatch_MatchBehavior) EnumDescriptor() ([]byte, []int) {
	return file_spire_api_types_federateswith_proto_rawDescGZIP(), []int{0, 0}
}

type FederatesWithMatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The set of trust domain names to match on (e.g., "example.org").
	TrustDomains []string `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
	// How to match the trust domains.
	Match         FederatesWithMatch_MatchBehavior `protobuf:"varint,2,opt,name=match,proto3,enum=spire.api.types.FederatesWithMatch_MatchBehavior" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FederatesWithMatch) Reset() {
	*x = FederatesWithMatch{}
	mi := &file_spire_api_types_federateswith_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FederatesWithMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatesWithMatch) ProtoMessage() {}

func (x *FederatesWithMatch) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_types_federateswith_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatesWithMatch.ProtoReflect.Descriptor instead.
func (*FederatesWithMatch) Descriptor() ([]byte, []int) {
	return file_spire_api_types_federateswith_proto_rawDescGZIP(), []int{0}
}

func (x *FederatesWithMatch) GetTrustDomains() []string {
	if x != nil {
		return x.TrustDomains
	}
	return nil
}

func (x *FederatesWithMatch) GetMatch() FederatesWithMatch_MatchBehavior {
	if x != nil {
		return x.Match
	}
	return FederatesWithMatch_MATCH_EXACT
}

var File_spire_api_types_federateswith_proto protoreflect.FileDescriptor

const file_spire_api_types_federateswith_proto_rawDesc = "" +
	"\n" +
	"#spire/api/types/federateswith.proto\x12\x0fspire.api.types\"\xd9\x01\n" +
	"\x12FederatesWithMatch\x12#\n" +
	"\rtrust_domains\x18\x01 \x03(\tR\ftrustDomains\x12G\n" +
	"\x05match\x18\x02 \x01(\x0e21.spire.api.types.FederatesWithMatch.MatchBehaviorR\x05match\"U\n" +
	"\rMatchBehavior\x12\x0f\n" +
	"\vMATCH_EXACT\x10\x00\x12\x10\n" +
	"\fMATCH_SUBSET\x10\x01\x12\x12\n" +
	"\x0eMATCH_SUPERSET\x10\x02\x12\r\n" +
	"\tMATCH_ANY\x10\x03B7Z5github.com/spiffe/spire-api-sdk/proto/spire/api/typesb\x06proto3"

var (
	file_spire_api_types_federateswith_proto_rawDescOnce sync.Once
	file_spire_api_types_federateswith_proto_rawDescData []byte
)

func file_spire_api_types_federateswith_proto_rawDescGZIP() []byte {
	file_spire_api_types_federateswith_proto_rawDescOnce.Do(func() {
		file_spire_api_types_federateswith_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_api_types_federateswith_proto_rawDesc), len(file_spire_api_types_federateswith_proto_rawDesc)))
	})
	return file_spire_api_types_federateswith_proto_rawDescData
}

var file_spire_api_types_federateswith_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_spire_api_types_federateswith_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_spire_api_types_federateswith_proto_goTypes = []any{
	(FederatesWithMatch_MatchBehavior)(0), // 0: spire.api.types.FederatesWithMatch.MatchBehavior
	(*FederatesWithMatch)(nil),            // 1: spire.api.types.FederatesWithMatch
}
var file_spire_api_types_federateswith_proto_depIdxs = []int32{
	0, // 0: spire.api.types.FederatesWithMatch.match:type_name -> spire.api.types.FederatesWithMatch.MatchBehavior
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spire_api_types_federateswith_proto_init() }
func file_spire_api_types_federateswith_proto_init() {
	if File_spire_api_types_federateswith_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_api_types_federateswith_proto_rawDesc), len(file_spire_api_types_federateswith_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spire_api_types_federateswith_proto_goTypes,
		DependencyIndexes: file_spire_api_types_federateswith_proto_depIdxs,
		EnumInfos:         file_spire_api_types_federateswith_proto_enumTypes,
		MessageInfos:      file_spire_api_types_federateswith_proto_msgTypes,
	}.Build()
	File_spire_api_types_federateswith_proto = out.File
	file_spire_api_types_federateswith_proto_goTypes = nil
	file_spire_api_types_federateswith_proto_depIdxs = nil
}
