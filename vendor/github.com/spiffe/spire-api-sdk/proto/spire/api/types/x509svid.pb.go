// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.30.2
// source: spire/api/types/x509svid.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// X.509 SPIFFE Verifiable Identity Document. It contains the raw X.509
// certificate data as well as a few denormalized fields for convenience.
type X509SVID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Certificate and intermediates required to form a chain of trust back to
	// the X.509 authorities of the trust domain (ASN.1 DER encoded).
	CertChain [][]byte `protobuf:"bytes,1,rep,name=cert_chain,json=certChain,proto3" json:"cert_chain,omitempty"`
	// SPIFFE ID of the SVID.
	Id *SPIFFEID `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Expiration timestamp (seconds since Unix epoch).
	ExpiresAt int64 `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	// Optional. An operator-specified string used to provide guidance on how this
	// identity should be used by a workload when more than one SVID is returned.
	// For example, `internal` and `external` to indicate an SVID for internal or
	// external use, respectively.
	Hint          string `protobuf:"bytes,4,opt,name=hint,proto3" json:"hint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *X509SVID) Reset() {
	*x = X509SVID{}
	mi := &file_spire_api_types_x509svid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *X509SVID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X509SVID) ProtoMessage() {}

func (x *X509SVID) ProtoReflect() protoreflect.Message {
	mi := &file_spire_api_types_x509svid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X509SVID.ProtoReflect.Descriptor instead.
func (*X509SVID) Descriptor() ([]byte, []int) {
	return file_spire_api_types_x509svid_proto_rawDescGZIP(), []int{0}
}

func (x *X509SVID) GetCertChain() [][]byte {
	if x != nil {
		return x.CertChain
	}
	return nil
}

func (x *X509SVID) GetId() *SPIFFEID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *X509SVID) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *X509SVID) GetHint() string {
	if x != nil {
		return x.Hint
	}
	return ""
}

var File_spire_api_types_x509svid_proto protoreflect.FileDescriptor

const file_spire_api_types_x509svid_proto_rawDesc = "" +
	"\n" +
	"\x1espire/api/types/x509svid.proto\x12\x0fspire.api.types\x1a\x1espire/api/types/spiffeid.proto\"\x87\x01\n" +
	"\bX509SVID\x12\x1d\n" +
	"\n" +
	"cert_chain\x18\x01 \x03(\fR\tcertChain\x12)\n" +
	"\x02id\x18\x02 \x01(\v2\x19.spire.api.types.SPIFFEIDR\x02id\x12\x1d\n" +
	"\n" +
	"expires_at\x18\x03 \x01(\x03R\texpiresAt\x12\x12\n" +
	"\x04hint\x18\x04 \x01(\tR\x04hintB7Z5github.com/spiffe/spire-api-sdk/proto/spire/api/typesb\x06proto3"

var (
	file_spire_api_types_x509svid_proto_rawDescOnce sync.Once
	file_spire_api_types_x509svid_proto_rawDescData []byte
)

func file_spire_api_types_x509svid_proto_rawDescGZIP() []byte {
	file_spire_api_types_x509svid_proto_rawDescOnce.Do(func() {
		file_spire_api_types_x509svid_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spire_api_types_x509svid_proto_rawDesc), len(file_spire_api_types_x509svid_proto_rawDesc)))
	})
	return file_spire_api_types_x509svid_proto_rawDescData
}

var file_spire_api_types_x509svid_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_spire_api_types_x509svid_proto_goTypes = []any{
	(*X509SVID)(nil), // 0: spire.api.types.X509SVID
	(*SPIFFEID)(nil), // 1: spire.api.types.SPIFFEID
}
var file_spire_api_types_x509svid_proto_depIdxs = []int32{
	1, // 0: spire.api.types.X509SVID.id:type_name -> spire.api.types.SPIFFEID
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_spire_api_types_x509svid_proto_init() }
func file_spire_api_types_x509svid_proto_init() {
	if File_spire_api_types_x509svid_proto != nil {
		return
	}
	file_spire_api_types_spiffeid_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spire_api_types_x509svid_proto_rawDesc), len(file_spire_api_types_x509svid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spire_api_types_x509svid_proto_goTypes,
		DependencyIndexes: file_spire_api_types_x509svid_proto_depIdxs,
		MessageInfos:      file_spire_api_types_x509svid_proto_msgTypes,
	}.Build()
	File_spire_api_types_x509svid_proto = out.File
	file_spire_api_types_x509svid_proto_goTypes = nil
	file_spire_api_types_x509svid_proto_depIdxs = nil
}
