// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/smithy-go/middleware"
	smithytime "github.com/aws/smithy-go/time"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	smithywaiter "github.com/aws/smithy-go/waiter"
	"strconv"
	"time"
)

// Describes security group VPC associations made with [AssociateSecurityGroupVpc].
//
// [AssociateSecurityGroupVpc]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateSecurityGroupVpc.html
func (c *Client) DescribeSecurityGroupVpcAssociations(ctx context.Context, params *DescribeSecurityGroupVpcAssociationsInput, optFns ...func(*Options)) (*DescribeSecurityGroupVpcAssociationsOutput, error) {
	if params == nil {
		params = &DescribeSecurityGroupVpcAssociationsInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeSecurityGroupVpcAssociations", params, optFns, c.addOperationDescribeSecurityGroupVpcAssociationsMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeSecurityGroupVpcAssociationsOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeSecurityGroupVpcAssociationsInput struct {

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation . Otherwise, it is
	// UnauthorizedOperation .
	DryRun *bool

	// Security group VPC association filters.
	//
	//   - group-id : The security group ID.
	//
	//   - group-owner-id : The group owner ID.
	//
	//   - vpc-id : The ID of the associated VPC.
	//
	//   - vpc-owner-id : The account ID of the VPC owner.
	//
	//   - state : The state of the association.
	//
	//   - tag: : The key/value combination of a tag assigned to the resource. Use the
	//   tag key in the filter name and the tag value as the filter value. For example,
	//   to find all resources that have a tag with the key Owner and the value TeamA ,
	//   specify tag:Owner for the filter name and TeamA for the filter value.
	//
	//   - tag-key : The key of a tag assigned to the resource. Use this filter to find
	//   all resources assigned a tag with a specific key, regardless of the tag value.
	Filters []types.Filter

	// The maximum number of items to return for this request. To get the next page of
	// items, make another request with the token returned in the output. For more
	// information, see [Pagination].
	//
	// [Pagination]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination
	MaxResults *int32

	// The token returned from a previous paginated request. Pagination continues from
	// the end of the items returned by the previous request.
	NextToken *string

	noSmithyDocumentSerde
}

type DescribeSecurityGroupVpcAssociationsOutput struct {

	// The token to include in another request to get the next page of items. This
	// value is null when there are no more items to return.
	NextToken *string

	// The security group VPC associations.
	SecurityGroupVpcAssociations []types.SecurityGroupVpcAssociation

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDescribeSecurityGroupVpcAssociationsMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsEc2query_serializeOpDescribeSecurityGroupVpcAssociations{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeSecurityGroupVpcAssociations{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "DescribeSecurityGroupVpcAssociations"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeSecurityGroupVpcAssociations(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

// SecurityGroupVpcAssociationAssociatedWaiterOptions are waiter options for
// SecurityGroupVpcAssociationAssociatedWaiter
type SecurityGroupVpcAssociationAssociatedWaiterOptions struct {

	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	//
	// Passing options here is functionally equivalent to passing values to this
	// config's ClientOptions field that extend the inner client's APIOptions directly.
	APIOptions []func(*middleware.Stack) error

	// Functional options to be passed to all operations invoked by this client.
	//
	// Function values that modify the inner APIOptions are applied after the waiter
	// config's own APIOptions modifiers.
	ClientOptions []func(*Options)

	// MinDelay is the minimum amount of time to delay between retries. If unset,
	// SecurityGroupVpcAssociationAssociatedWaiter will use default minimum delay of 10
	// seconds. Note that MinDelay must resolve to a value lesser than or equal to the
	// MaxDelay.
	MinDelay time.Duration

	// MaxDelay is the maximum amount of time to delay between retries. If unset or
	// set to zero, SecurityGroupVpcAssociationAssociatedWaiter will use default max
	// delay of 120 seconds. Note that MaxDelay must resolve to value greater than or
	// equal to the MinDelay.
	MaxDelay time.Duration

	// LogWaitAttempts is used to enable logging for waiter retry attempts
	LogWaitAttempts bool

	// Retryable is function that can be used to override the service defined
	// waiter-behavior based on operation output, or returned error. This function is
	// used by the waiter to decide if a state is retryable or a terminal state.
	//
	// By default service-modeled logic will populate this option. This option can
	// thus be used to define a custom waiter state with fall-back to service-modeled
	// waiter state mutators.The function returns an error in case of a failure state.
	// In case of retry state, this function returns a bool value of true and nil
	// error, while in case of success it returns a bool value of false and nil error.
	Retryable func(context.Context, *DescribeSecurityGroupVpcAssociationsInput, *DescribeSecurityGroupVpcAssociationsOutput, error) (bool, error)
}

// SecurityGroupVpcAssociationAssociatedWaiter defines the waiters for
// SecurityGroupVpcAssociationAssociated
type SecurityGroupVpcAssociationAssociatedWaiter struct {
	client DescribeSecurityGroupVpcAssociationsAPIClient

	options SecurityGroupVpcAssociationAssociatedWaiterOptions
}

// NewSecurityGroupVpcAssociationAssociatedWaiter constructs a
// SecurityGroupVpcAssociationAssociatedWaiter.
func NewSecurityGroupVpcAssociationAssociatedWaiter(client DescribeSecurityGroupVpcAssociationsAPIClient, optFns ...func(*SecurityGroupVpcAssociationAssociatedWaiterOptions)) *SecurityGroupVpcAssociationAssociatedWaiter {
	options := SecurityGroupVpcAssociationAssociatedWaiterOptions{}
	options.MinDelay = 10 * time.Second
	options.MaxDelay = 120 * time.Second
	options.Retryable = securityGroupVpcAssociationAssociatedStateRetryable

	for _, fn := range optFns {
		fn(&options)
	}
	return &SecurityGroupVpcAssociationAssociatedWaiter{
		client:  client,
		options: options,
	}
}

// Wait calls the waiter function for SecurityGroupVpcAssociationAssociated
// waiter. The maxWaitDur is the maximum wait duration the waiter will wait. The
// maxWaitDur is required and must be greater than zero.
func (w *SecurityGroupVpcAssociationAssociatedWaiter) Wait(ctx context.Context, params *DescribeSecurityGroupVpcAssociationsInput, maxWaitDur time.Duration, optFns ...func(*SecurityGroupVpcAssociationAssociatedWaiterOptions)) error {
	_, err := w.WaitForOutput(ctx, params, maxWaitDur, optFns...)
	return err
}

// WaitForOutput calls the waiter function for
// SecurityGroupVpcAssociationAssociated waiter and returns the output of the
// successful operation. The maxWaitDur is the maximum wait duration the waiter
// will wait. The maxWaitDur is required and must be greater than zero.
func (w *SecurityGroupVpcAssociationAssociatedWaiter) WaitForOutput(ctx context.Context, params *DescribeSecurityGroupVpcAssociationsInput, maxWaitDur time.Duration, optFns ...func(*SecurityGroupVpcAssociationAssociatedWaiterOptions)) (*DescribeSecurityGroupVpcAssociationsOutput, error) {
	if maxWaitDur <= 0 {
		return nil, fmt.Errorf("maximum wait time for waiter must be greater than zero")
	}

	options := w.options
	for _, fn := range optFns {
		fn(&options)
	}

	if options.MaxDelay <= 0 {
		options.MaxDelay = 120 * time.Second
	}

	if options.MinDelay > options.MaxDelay {
		return nil, fmt.Errorf("minimum waiter delay %v must be lesser than or equal to maximum waiter delay of %v.", options.MinDelay, options.MaxDelay)
	}

	ctx, cancelFn := context.WithTimeout(ctx, maxWaitDur)
	defer cancelFn()

	logger := smithywaiter.Logger{}
	remainingTime := maxWaitDur

	var attempt int64
	for {

		attempt++
		apiOptions := options.APIOptions
		start := time.Now()

		if options.LogWaitAttempts {
			logger.Attempt = attempt
			apiOptions = append([]func(*middleware.Stack) error{}, options.APIOptions...)
			apiOptions = append(apiOptions, logger.AddLogger)
		}

		out, err := w.client.DescribeSecurityGroupVpcAssociations(ctx, params, func(o *Options) {
			baseOpts := []func(*Options){
				addIsWaiterUserAgent,
			}
			o.APIOptions = append(o.APIOptions, apiOptions...)
			for _, opt := range baseOpts {
				opt(o)
			}
			for _, opt := range options.ClientOptions {
				opt(o)
			}
		})

		retryable, err := options.Retryable(ctx, params, out, err)
		if err != nil {
			return nil, err
		}
		if !retryable {
			return out, nil
		}

		remainingTime -= time.Since(start)
		if remainingTime < options.MinDelay || remainingTime <= 0 {
			break
		}

		// compute exponential backoff between waiter retries
		delay, err := smithywaiter.ComputeDelay(
			attempt, options.MinDelay, options.MaxDelay, remainingTime,
		)
		if err != nil {
			return nil, fmt.Errorf("error computing waiter delay, %w", err)
		}

		remainingTime -= delay
		// sleep for the delay amount before invoking a request
		if err := smithytime.SleepWithContext(ctx, delay); err != nil {
			return nil, fmt.Errorf("request cancelled while waiting, %w", err)
		}
	}
	return nil, fmt.Errorf("exceeded max wait time for SecurityGroupVpcAssociationAssociated waiter")
}

func securityGroupVpcAssociationAssociatedStateRetryable(ctx context.Context, input *DescribeSecurityGroupVpcAssociationsInput, output *DescribeSecurityGroupVpcAssociationsOutput, err error) (bool, error) {

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "associated"
		match := len(v2) > 0
		for _, v := range v2 {
			if string(v) != expectedValue {
				match = false
				break
			}
		}

		if match {
			return false, nil
		}
	}

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "associating"
		var match bool
		for _, v := range v2 {
			if string(v) == expectedValue {
				match = true
				break
			}
		}

		if match {
			return true, nil
		}
	}

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "association-failed"
		var match bool
		for _, v := range v2 {
			if string(v) == expectedValue {
				match = true
				break
			}
		}

		if match {
			return false, fmt.Errorf("waiter state transitioned to Failure")
		}
	}

	if err != nil {
		return false, err
	}
	return true, nil
}

// SecurityGroupVpcAssociationDisassociatedWaiterOptions are waiter options for
// SecurityGroupVpcAssociationDisassociatedWaiter
type SecurityGroupVpcAssociationDisassociatedWaiterOptions struct {

	// Set of options to modify how an operation is invoked. These apply to all
	// operations invoked for this client. Use functional options on operation call to
	// modify this list for per operation behavior.
	//
	// Passing options here is functionally equivalent to passing values to this
	// config's ClientOptions field that extend the inner client's APIOptions directly.
	APIOptions []func(*middleware.Stack) error

	// Functional options to be passed to all operations invoked by this client.
	//
	// Function values that modify the inner APIOptions are applied after the waiter
	// config's own APIOptions modifiers.
	ClientOptions []func(*Options)

	// MinDelay is the minimum amount of time to delay between retries. If unset,
	// SecurityGroupVpcAssociationDisassociatedWaiter will use default minimum delay of
	// 10 seconds. Note that MinDelay must resolve to a value lesser than or equal to
	// the MaxDelay.
	MinDelay time.Duration

	// MaxDelay is the maximum amount of time to delay between retries. If unset or
	// set to zero, SecurityGroupVpcAssociationDisassociatedWaiter will use default max
	// delay of 120 seconds. Note that MaxDelay must resolve to value greater than or
	// equal to the MinDelay.
	MaxDelay time.Duration

	// LogWaitAttempts is used to enable logging for waiter retry attempts
	LogWaitAttempts bool

	// Retryable is function that can be used to override the service defined
	// waiter-behavior based on operation output, or returned error. This function is
	// used by the waiter to decide if a state is retryable or a terminal state.
	//
	// By default service-modeled logic will populate this option. This option can
	// thus be used to define a custom waiter state with fall-back to service-modeled
	// waiter state mutators.The function returns an error in case of a failure state.
	// In case of retry state, this function returns a bool value of true and nil
	// error, while in case of success it returns a bool value of false and nil error.
	Retryable func(context.Context, *DescribeSecurityGroupVpcAssociationsInput, *DescribeSecurityGroupVpcAssociationsOutput, error) (bool, error)
}

// SecurityGroupVpcAssociationDisassociatedWaiter defines the waiters for
// SecurityGroupVpcAssociationDisassociated
type SecurityGroupVpcAssociationDisassociatedWaiter struct {
	client DescribeSecurityGroupVpcAssociationsAPIClient

	options SecurityGroupVpcAssociationDisassociatedWaiterOptions
}

// NewSecurityGroupVpcAssociationDisassociatedWaiter constructs a
// SecurityGroupVpcAssociationDisassociatedWaiter.
func NewSecurityGroupVpcAssociationDisassociatedWaiter(client DescribeSecurityGroupVpcAssociationsAPIClient, optFns ...func(*SecurityGroupVpcAssociationDisassociatedWaiterOptions)) *SecurityGroupVpcAssociationDisassociatedWaiter {
	options := SecurityGroupVpcAssociationDisassociatedWaiterOptions{}
	options.MinDelay = 10 * time.Second
	options.MaxDelay = 120 * time.Second
	options.Retryable = securityGroupVpcAssociationDisassociatedStateRetryable

	for _, fn := range optFns {
		fn(&options)
	}
	return &SecurityGroupVpcAssociationDisassociatedWaiter{
		client:  client,
		options: options,
	}
}

// Wait calls the waiter function for SecurityGroupVpcAssociationDisassociated
// waiter. The maxWaitDur is the maximum wait duration the waiter will wait. The
// maxWaitDur is required and must be greater than zero.
func (w *SecurityGroupVpcAssociationDisassociatedWaiter) Wait(ctx context.Context, params *DescribeSecurityGroupVpcAssociationsInput, maxWaitDur time.Duration, optFns ...func(*SecurityGroupVpcAssociationDisassociatedWaiterOptions)) error {
	_, err := w.WaitForOutput(ctx, params, maxWaitDur, optFns...)
	return err
}

// WaitForOutput calls the waiter function for
// SecurityGroupVpcAssociationDisassociated waiter and returns the output of the
// successful operation. The maxWaitDur is the maximum wait duration the waiter
// will wait. The maxWaitDur is required and must be greater than zero.
func (w *SecurityGroupVpcAssociationDisassociatedWaiter) WaitForOutput(ctx context.Context, params *DescribeSecurityGroupVpcAssociationsInput, maxWaitDur time.Duration, optFns ...func(*SecurityGroupVpcAssociationDisassociatedWaiterOptions)) (*DescribeSecurityGroupVpcAssociationsOutput, error) {
	if maxWaitDur <= 0 {
		return nil, fmt.Errorf("maximum wait time for waiter must be greater than zero")
	}

	options := w.options
	for _, fn := range optFns {
		fn(&options)
	}

	if options.MaxDelay <= 0 {
		options.MaxDelay = 120 * time.Second
	}

	if options.MinDelay > options.MaxDelay {
		return nil, fmt.Errorf("minimum waiter delay %v must be lesser than or equal to maximum waiter delay of %v.", options.MinDelay, options.MaxDelay)
	}

	ctx, cancelFn := context.WithTimeout(ctx, maxWaitDur)
	defer cancelFn()

	logger := smithywaiter.Logger{}
	remainingTime := maxWaitDur

	var attempt int64
	for {

		attempt++
		apiOptions := options.APIOptions
		start := time.Now()

		if options.LogWaitAttempts {
			logger.Attempt = attempt
			apiOptions = append([]func(*middleware.Stack) error{}, options.APIOptions...)
			apiOptions = append(apiOptions, logger.AddLogger)
		}

		out, err := w.client.DescribeSecurityGroupVpcAssociations(ctx, params, func(o *Options) {
			baseOpts := []func(*Options){
				addIsWaiterUserAgent,
			}
			o.APIOptions = append(o.APIOptions, apiOptions...)
			for _, opt := range baseOpts {
				opt(o)
			}
			for _, opt := range options.ClientOptions {
				opt(o)
			}
		})

		retryable, err := options.Retryable(ctx, params, out, err)
		if err != nil {
			return nil, err
		}
		if !retryable {
			return out, nil
		}

		remainingTime -= time.Since(start)
		if remainingTime < options.MinDelay || remainingTime <= 0 {
			break
		}

		// compute exponential backoff between waiter retries
		delay, err := smithywaiter.ComputeDelay(
			attempt, options.MinDelay, options.MaxDelay, remainingTime,
		)
		if err != nil {
			return nil, fmt.Errorf("error computing waiter delay, %w", err)
		}

		remainingTime -= delay
		// sleep for the delay amount before invoking a request
		if err := smithytime.SleepWithContext(ctx, delay); err != nil {
			return nil, fmt.Errorf("request cancelled while waiting, %w", err)
		}
	}
	return nil, fmt.Errorf("exceeded max wait time for SecurityGroupVpcAssociationDisassociated waiter")
}

func securityGroupVpcAssociationDisassociatedStateRetryable(ctx context.Context, input *DescribeSecurityGroupVpcAssociationsInput, output *DescribeSecurityGroupVpcAssociationsOutput, err error) (bool, error) {

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "disassociated"
		match := len(v2) > 0
		for _, v := range v2 {
			if string(v) != expectedValue {
				match = false
				break
			}
		}

		if match {
			return false, nil
		}
	}

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "disassociating"
		var match bool
		for _, v := range v2 {
			if string(v) == expectedValue {
				match = true
				break
			}
		}

		if match {
			return true, nil
		}
	}

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		var v2 []types.SecurityGroupVpcAssociationState
		for _, v := range v1 {
			v3 := v.State
			v2 = append(v2, v3)
		}
		expectedValue := "disassociation-failed"
		var match bool
		for _, v := range v2 {
			if string(v) == expectedValue {
				match = true
				break
			}
		}

		if match {
			return false, fmt.Errorf("waiter state transitioned to Failure")
		}
	}

	if err == nil {
		v1 := output.SecurityGroupVpcAssociations
		v2 := len(v1)
		v3 := 0
		v4 := int64(v2) == int64(v3)
		expectedValue := "true"
		bv, err := strconv.ParseBool(expectedValue)
		if err != nil {
			return false, fmt.Errorf("error parsing boolean from string %w", err)
		}
		if v4 == bv {
			return false, nil
		}
	}

	if err != nil {
		return false, err
	}
	return true, nil
}

// DescribeSecurityGroupVpcAssociationsPaginatorOptions is the paginator options
// for DescribeSecurityGroupVpcAssociations
type DescribeSecurityGroupVpcAssociationsPaginatorOptions struct {
	// The maximum number of items to return for this request. To get the next page of
	// items, make another request with the token returned in the output. For more
	// information, see [Pagination].
	//
	// [Pagination]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// DescribeSecurityGroupVpcAssociationsPaginator is a paginator for
// DescribeSecurityGroupVpcAssociations
type DescribeSecurityGroupVpcAssociationsPaginator struct {
	options   DescribeSecurityGroupVpcAssociationsPaginatorOptions
	client    DescribeSecurityGroupVpcAssociationsAPIClient
	params    *DescribeSecurityGroupVpcAssociationsInput
	nextToken *string
	firstPage bool
}

// NewDescribeSecurityGroupVpcAssociationsPaginator returns a new
// DescribeSecurityGroupVpcAssociationsPaginator
func NewDescribeSecurityGroupVpcAssociationsPaginator(client DescribeSecurityGroupVpcAssociationsAPIClient, params *DescribeSecurityGroupVpcAssociationsInput, optFns ...func(*DescribeSecurityGroupVpcAssociationsPaginatorOptions)) *DescribeSecurityGroupVpcAssociationsPaginator {
	if params == nil {
		params = &DescribeSecurityGroupVpcAssociationsInput{}
	}

	options := DescribeSecurityGroupVpcAssociationsPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &DescribeSecurityGroupVpcAssociationsPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
		nextToken: params.NextToken,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *DescribeSecurityGroupVpcAssociationsPaginator) HasMorePages() bool {
	return p.firstPage || (p.nextToken != nil && len(*p.nextToken) != 0)
}

// NextPage retrieves the next DescribeSecurityGroupVpcAssociations page.
func (p *DescribeSecurityGroupVpcAssociationsPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*DescribeSecurityGroupVpcAssociationsOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	optFns = append([]func(*Options){
		addIsPaginatorUserAgent,
	}, optFns...)
	result, err := p.client.DescribeSecurityGroupVpcAssociations(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken &&
		prevToken != nil &&
		p.nextToken != nil &&
		*prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

// DescribeSecurityGroupVpcAssociationsAPIClient is a client that implements the
// DescribeSecurityGroupVpcAssociations operation.
type DescribeSecurityGroupVpcAssociationsAPIClient interface {
	DescribeSecurityGroupVpcAssociations(context.Context, *DescribeSecurityGroupVpcAssociationsInput, ...func(*Options)) (*DescribeSecurityGroupVpcAssociationsOutput, error)
}

var _ DescribeSecurityGroupVpcAssociationsAPIClient = (*Client)(nil)

func newServiceMetadataMiddleware_opDescribeSecurityGroupVpcAssociations(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "DescribeSecurityGroupVpcAssociations",
	}
}
