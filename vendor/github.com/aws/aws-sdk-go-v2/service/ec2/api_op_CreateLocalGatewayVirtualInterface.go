// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Create a virtual interface for a local gateway.
func (c *Client) CreateLocalGatewayVirtualInterface(ctx context.Context, params *CreateLocalGatewayVirtualInterfaceInput, optFns ...func(*Options)) (*CreateLocalGatewayVirtualInterfaceOutput, error) {
	if params == nil {
		params = &CreateLocalGatewayVirtualInterfaceInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "CreateLocalGatewayVirtualInterface", params, optFns, c.addOperationCreateLocalGatewayVirtualInterfaceMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*CreateLocalGatewayVirtualInterfaceOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type CreateLocalGatewayVirtualInterfaceInput struct {

	// The IP address assigned to the local gateway virtual interface on the Outpost
	// side. Only IPv4 is supported.
	//
	// This member is required.
	LocalAddress *string

	// The ID of the local gateway virtual interface group.
	//
	// This member is required.
	LocalGatewayVirtualInterfaceGroupId *string

	// References the Link Aggregation Group (LAG) that connects the Outpost to
	// on-premises network devices.
	//
	// This member is required.
	OutpostLagId *string

	// The peer IP address for the local gateway virtual interface. Only IPv4 is
	// supported.
	//
	// This member is required.
	PeerAddress *string

	// The virtual local area network (VLAN) used for the local gateway virtual
	// interface.
	//
	// This member is required.
	Vlan *int32

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation . Otherwise, it is
	// UnauthorizedOperation .
	DryRun *bool

	// The Autonomous System Number (ASN) of the Border Gateway Protocol (BGP) peer.
	PeerBgpAsn *int32

	// The extended 32-bit ASN of the BGP peer for use with larger ASN values.
	PeerBgpAsnExtended *int64

	// The tags to apply to a resource when the local gateway virtual interface is
	// being created.
	TagSpecifications []types.TagSpecification

	noSmithyDocumentSerde
}

type CreateLocalGatewayVirtualInterfaceOutput struct {

	// Information about the local gateway virtual interface.
	LocalGatewayVirtualInterface *types.LocalGatewayVirtualInterface

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationCreateLocalGatewayVirtualInterfaceMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsEc2query_serializeOpCreateLocalGatewayVirtualInterface{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsEc2query_deserializeOpCreateLocalGatewayVirtualInterface{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "CreateLocalGatewayVirtualInterface"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = addCredentialSource(stack, options); err != nil {
		return err
	}
	if err = addOpCreateLocalGatewayVirtualInterfaceValidationMiddleware(stack); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opCreateLocalGatewayVirtualInterface(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

func newServiceMetadataMiddleware_opCreateLocalGatewayVirtualInterface(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "CreateLocalGatewayVirtualInterface",
	}
}
