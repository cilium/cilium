// Code generated by smithy-go-codegen DO NOT EDIT.

package ec2

import (
	"context"
	"fmt"
	awsmiddleware "github.com/aws/aws-sdk-go-v2/aws/middleware"
	"github.com/aws/aws-sdk-go-v2/service/ec2/types"
	"github.com/aws/smithy-go/middleware"
	smithyhttp "github.com/aws/smithy-go/transport/http"
)

// Describes the events for the specified Capacity Block extension during the
// specified time.
func (c *Client) DescribeCapacityBlockExtensionHistory(ctx context.Context, params *DescribeCapacityBlockExtensionHistoryInput, optFns ...func(*Options)) (*DescribeCapacityBlockExtensionHistoryOutput, error) {
	if params == nil {
		params = &DescribeCapacityBlockExtensionHistoryInput{}
	}

	result, metadata, err := c.invokeOperation(ctx, "DescribeCapacityBlockExtensionHistory", params, optFns, c.addOperationDescribeCapacityBlockExtensionHistoryMiddlewares)
	if err != nil {
		return nil, err
	}

	out := result.(*DescribeCapacityBlockExtensionHistoryOutput)
	out.ResultMetadata = metadata
	return out, nil
}

type DescribeCapacityBlockExtensionHistoryInput struct {

	// The IDs of Capacity Block reservations that you want to display the history for.
	CapacityReservationIds []string

	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have the
	// required permissions, the error response is DryRunOperation . Otherwise, it is
	// UnauthorizedOperation .
	DryRun *bool

	// One or more filters
	//
	//   - availability-zone - The Availability Zone of the extension.
	//
	//   - availability-zone-id - The Availability Zone ID of the extension.
	//
	//   - capacity-block-extension-offering-id - The ID of the extension offering.
	//
	//   - capacity-block-extension-status - The status of the extension (
	//   payment-pending | payment-failed | payment-succeeded ).
	//
	//   - capacity-reservation-id - The reservation ID of the extension.
	//
	//   - instance-type - The instance type of the extension.
	Filters []types.Filter

	// The maximum number of items to return for this request. To get the next page of
	// items, make another request with the token returned in the output. For more
	// information, see [Pagination].
	//
	// [Pagination]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination
	MaxResults *int32

	// The token to use to retrieve the next page of results.
	NextToken *string

	noSmithyDocumentSerde
}

type DescribeCapacityBlockExtensionHistoryOutput struct {

	// Describes one or more of your Capacity Block extensions. The results describe
	// only the Capacity Block extensions in the Amazon Web Services Region that you're
	// currently using.
	CapacityBlockExtensions []types.CapacityBlockExtension

	// The token to use to retrieve the next page of results. This value is null when
	// there are no more results to return.
	NextToken *string

	// Metadata pertaining to the operation's result.
	ResultMetadata middleware.Metadata

	noSmithyDocumentSerde
}

func (c *Client) addOperationDescribeCapacityBlockExtensionHistoryMiddlewares(stack *middleware.Stack, options Options) (err error) {
	if err := stack.Serialize.Add(&setOperationInputMiddleware{}, middleware.After); err != nil {
		return err
	}
	err = stack.Serialize.Add(&awsEc2query_serializeOpDescribeCapacityBlockExtensionHistory{}, middleware.After)
	if err != nil {
		return err
	}
	err = stack.Deserialize.Add(&awsEc2query_deserializeOpDescribeCapacityBlockExtensionHistory{}, middleware.After)
	if err != nil {
		return err
	}
	if err := addProtocolFinalizerMiddlewares(stack, options, "DescribeCapacityBlockExtensionHistory"); err != nil {
		return fmt.Errorf("add protocol finalizers: %v", err)
	}

	if err = addlegacyEndpointContextSetter(stack, options); err != nil {
		return err
	}
	if err = addSetLoggerMiddleware(stack, options); err != nil {
		return err
	}
	if err = addClientRequestID(stack); err != nil {
		return err
	}
	if err = addComputeContentLength(stack); err != nil {
		return err
	}
	if err = addResolveEndpointMiddleware(stack, options); err != nil {
		return err
	}
	if err = addComputePayloadSHA256(stack); err != nil {
		return err
	}
	if err = addRetry(stack, options); err != nil {
		return err
	}
	if err = addRawResponseToMetadata(stack); err != nil {
		return err
	}
	if err = addRecordResponseTiming(stack); err != nil {
		return err
	}
	if err = addSpanRetryLoop(stack, options); err != nil {
		return err
	}
	if err = addClientUserAgent(stack, options); err != nil {
		return err
	}
	if err = smithyhttp.AddErrorCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = smithyhttp.AddCloseResponseBodyMiddleware(stack); err != nil {
		return err
	}
	if err = addSetLegacyContextSigningOptionsMiddleware(stack); err != nil {
		return err
	}
	if err = addTimeOffsetBuild(stack, c); err != nil {
		return err
	}
	if err = addUserAgentRetryMode(stack, options); err != nil {
		return err
	}
	if err = stack.Initialize.Add(newServiceMetadataMiddleware_opDescribeCapacityBlockExtensionHistory(options.Region), middleware.Before); err != nil {
		return err
	}
	if err = addRecursionDetection(stack); err != nil {
		return err
	}
	if err = addRequestIDRetrieverMiddleware(stack); err != nil {
		return err
	}
	if err = addResponseErrorMiddleware(stack); err != nil {
		return err
	}
	if err = addRequestResponseLogging(stack, options); err != nil {
		return err
	}
	if err = addDisableHTTPSMiddleware(stack, options); err != nil {
		return err
	}
	if err = addSpanInitializeStart(stack); err != nil {
		return err
	}
	if err = addSpanInitializeEnd(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestStart(stack); err != nil {
		return err
	}
	if err = addSpanBuildRequestEnd(stack); err != nil {
		return err
	}
	return nil
}

// DescribeCapacityBlockExtensionHistoryPaginatorOptions is the paginator options
// for DescribeCapacityBlockExtensionHistory
type DescribeCapacityBlockExtensionHistoryPaginatorOptions struct {
	// The maximum number of items to return for this request. To get the next page of
	// items, make another request with the token returned in the output. For more
	// information, see [Pagination].
	//
	// [Pagination]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html#api-pagination
	Limit int32

	// Set to true if pagination should stop if the service returns a pagination token
	// that matches the most recent token provided to the service.
	StopOnDuplicateToken bool
}

// DescribeCapacityBlockExtensionHistoryPaginator is a paginator for
// DescribeCapacityBlockExtensionHistory
type DescribeCapacityBlockExtensionHistoryPaginator struct {
	options   DescribeCapacityBlockExtensionHistoryPaginatorOptions
	client    DescribeCapacityBlockExtensionHistoryAPIClient
	params    *DescribeCapacityBlockExtensionHistoryInput
	nextToken *string
	firstPage bool
}

// NewDescribeCapacityBlockExtensionHistoryPaginator returns a new
// DescribeCapacityBlockExtensionHistoryPaginator
func NewDescribeCapacityBlockExtensionHistoryPaginator(client DescribeCapacityBlockExtensionHistoryAPIClient, params *DescribeCapacityBlockExtensionHistoryInput, optFns ...func(*DescribeCapacityBlockExtensionHistoryPaginatorOptions)) *DescribeCapacityBlockExtensionHistoryPaginator {
	if params == nil {
		params = &DescribeCapacityBlockExtensionHistoryInput{}
	}

	options := DescribeCapacityBlockExtensionHistoryPaginatorOptions{}
	if params.MaxResults != nil {
		options.Limit = *params.MaxResults
	}

	for _, fn := range optFns {
		fn(&options)
	}

	return &DescribeCapacityBlockExtensionHistoryPaginator{
		options:   options,
		client:    client,
		params:    params,
		firstPage: true,
		nextToken: params.NextToken,
	}
}

// HasMorePages returns a boolean indicating whether more pages are available
func (p *DescribeCapacityBlockExtensionHistoryPaginator) HasMorePages() bool {
	return p.firstPage || (p.nextToken != nil && len(*p.nextToken) != 0)
}

// NextPage retrieves the next DescribeCapacityBlockExtensionHistory page.
func (p *DescribeCapacityBlockExtensionHistoryPaginator) NextPage(ctx context.Context, optFns ...func(*Options)) (*DescribeCapacityBlockExtensionHistoryOutput, error) {
	if !p.HasMorePages() {
		return nil, fmt.Errorf("no more pages available")
	}

	params := *p.params
	params.NextToken = p.nextToken

	var limit *int32
	if p.options.Limit > 0 {
		limit = &p.options.Limit
	}
	params.MaxResults = limit

	optFns = append([]func(*Options){
		addIsPaginatorUserAgent,
	}, optFns...)
	result, err := p.client.DescribeCapacityBlockExtensionHistory(ctx, &params, optFns...)
	if err != nil {
		return nil, err
	}
	p.firstPage = false

	prevToken := p.nextToken
	p.nextToken = result.NextToken

	if p.options.StopOnDuplicateToken &&
		prevToken != nil &&
		p.nextToken != nil &&
		*prevToken == *p.nextToken {
		p.nextToken = nil
	}

	return result, nil
}

// DescribeCapacityBlockExtensionHistoryAPIClient is a client that implements the
// DescribeCapacityBlockExtensionHistory operation.
type DescribeCapacityBlockExtensionHistoryAPIClient interface {
	DescribeCapacityBlockExtensionHistory(context.Context, *DescribeCapacityBlockExtensionHistoryInput, ...func(*Options)) (*DescribeCapacityBlockExtensionHistoryOutput, error)
}

var _ DescribeCapacityBlockExtensionHistoryAPIClient = (*Client)(nil)

func newServiceMetadataMiddleware_opDescribeCapacityBlockExtensionHistory(region string) *awsmiddleware.RegisterServiceMetadata {
	return &awsmiddleware.RegisterServiceMetadata{
		Region:        region,
		ServiceID:     ServiceID,
		OperationName: "DescribeCapacityBlockExtensionHistory",
	}
}
