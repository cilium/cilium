// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import (
	"context"
	"errors"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/arm"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"net/http"
	"net/url"
	"strconv"
	"strings"
)

// SecurityPerimeterAccessRulesClient contains the methods for the NetworkSecurityPerimeterAccessRules group.
// Don't use this type directly, use NewSecurityPerimeterAccessRulesClient() instead.
type SecurityPerimeterAccessRulesClient struct {
	internal       *arm.Client
	subscriptionID string
}

// NewSecurityPerimeterAccessRulesClient creates a new instance of SecurityPerimeterAccessRulesClient with the specified values.
//   - subscriptionID - The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription
//     ID forms part of the URI for every service call.
//   - credential - used to authorize requests. Usually a credential from azidentity.
//   - options - pass nil to accept the default values.
func NewSecurityPerimeterAccessRulesClient(subscriptionID string, credential azcore.TokenCredential, options *arm.ClientOptions) (*SecurityPerimeterAccessRulesClient, error) {
	cl, err := arm.NewClient(moduleName, moduleVersion, credential, options)
	if err != nil {
		return nil, err
	}
	client := &SecurityPerimeterAccessRulesClient{
		subscriptionID: subscriptionID,
		internal:       cl,
	}
	return client, nil
}

// CreateOrUpdate - Creates or updates a network access rule.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - profileName - The name of the NSP profile.
//   - accessRuleName - The name of the NSP access rule.
//   - parameters - Parameters that hold the NspAccessRule resource to be created/updated.
//   - options - SecurityPerimeterAccessRulesClientCreateOrUpdateOptions contains the optional parameters for the SecurityPerimeterAccessRulesClient.CreateOrUpdate
//     method.
func (client *SecurityPerimeterAccessRulesClient) CreateOrUpdate(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, parameters NspAccessRule, options *SecurityPerimeterAccessRulesClientCreateOrUpdateOptions) (SecurityPerimeterAccessRulesClientCreateOrUpdateResponse, error) {
	var err error
	const operationName = "SecurityPerimeterAccessRulesClient.CreateOrUpdate"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.createOrUpdateCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, parameters, options)
	if err != nil {
		return SecurityPerimeterAccessRulesClientCreateOrUpdateResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecurityPerimeterAccessRulesClientCreateOrUpdateResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusCreated) {
		err = runtime.NewResponseError(httpResp)
		return SecurityPerimeterAccessRulesClientCreateOrUpdateResponse{}, err
	}
	resp, err := client.createOrUpdateHandleResponse(httpResp)
	return resp, err
}

// createOrUpdateCreateRequest creates the CreateOrUpdate request.
func (client *SecurityPerimeterAccessRulesClient) createOrUpdateCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, parameters NspAccessRule, _ *SecurityPerimeterAccessRulesClientCreateOrUpdateOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if accessRuleName == "" {
		return nil, errors.New("parameter accessRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessRuleName}", url.PathEscape(accessRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodPut, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// createOrUpdateHandleResponse handles the CreateOrUpdate response.
func (client *SecurityPerimeterAccessRulesClient) createOrUpdateHandleResponse(resp *http.Response) (SecurityPerimeterAccessRulesClientCreateOrUpdateResponse, error) {
	result := SecurityPerimeterAccessRulesClientCreateOrUpdateResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NspAccessRule); err != nil {
		return SecurityPerimeterAccessRulesClientCreateOrUpdateResponse{}, err
	}
	return result, nil
}

// Delete - Deletes an NSP access rule.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - profileName - The name of the NSP profile.
//   - accessRuleName - The name of the NSP access rule.
//   - options - SecurityPerimeterAccessRulesClientDeleteOptions contains the optional parameters for the SecurityPerimeterAccessRulesClient.Delete
//     method.
func (client *SecurityPerimeterAccessRulesClient) Delete(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, options *SecurityPerimeterAccessRulesClientDeleteOptions) (SecurityPerimeterAccessRulesClientDeleteResponse, error) {
	var err error
	const operationName = "SecurityPerimeterAccessRulesClient.Delete"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.deleteCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, options)
	if err != nil {
		return SecurityPerimeterAccessRulesClientDeleteResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecurityPerimeterAccessRulesClientDeleteResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK, http.StatusNoContent) {
		err = runtime.NewResponseError(httpResp)
		return SecurityPerimeterAccessRulesClientDeleteResponse{}, err
	}
	return SecurityPerimeterAccessRulesClientDeleteResponse{}, nil
}

// deleteCreateRequest creates the Delete request.
func (client *SecurityPerimeterAccessRulesClient) deleteCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, _ *SecurityPerimeterAccessRulesClientDeleteOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if accessRuleName == "" {
		return nil, errors.New("parameter accessRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessRuleName}", url.PathEscape(accessRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodDelete, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// Get - Gets the specified NSP access rule by name.
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - profileName - The name of the NSP profile.
//   - accessRuleName - The name of the NSP access rule.
//   - options - SecurityPerimeterAccessRulesClientGetOptions contains the optional parameters for the SecurityPerimeterAccessRulesClient.Get
//     method.
func (client *SecurityPerimeterAccessRulesClient) Get(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, options *SecurityPerimeterAccessRulesClientGetOptions) (SecurityPerimeterAccessRulesClientGetResponse, error) {
	var err error
	const operationName = "SecurityPerimeterAccessRulesClient.Get"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.getCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, options)
	if err != nil {
		return SecurityPerimeterAccessRulesClientGetResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecurityPerimeterAccessRulesClientGetResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SecurityPerimeterAccessRulesClientGetResponse{}, err
	}
	resp, err := client.getHandleResponse(httpResp)
	return resp, err
}

// getCreateRequest creates the Get request.
func (client *SecurityPerimeterAccessRulesClient) getCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, _ *SecurityPerimeterAccessRulesClientGetOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if accessRuleName == "" {
		return nil, errors.New("parameter accessRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessRuleName}", url.PathEscape(accessRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// getHandleResponse handles the Get response.
func (client *SecurityPerimeterAccessRulesClient) getHandleResponse(resp *http.Response) (SecurityPerimeterAccessRulesClientGetResponse, error) {
	result := SecurityPerimeterAccessRulesClientGetResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NspAccessRule); err != nil {
		return SecurityPerimeterAccessRulesClientGetResponse{}, err
	}
	return result, nil
}

// NewListPager - Lists the NSP access rules in the specified NSP profile.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - profileName - The name of the NSP profile.
//   - options - SecurityPerimeterAccessRulesClientListOptions contains the optional parameters for the SecurityPerimeterAccessRulesClient.NewListPager
//     method.
func (client *SecurityPerimeterAccessRulesClient) NewListPager(resourceGroupName string, networkSecurityPerimeterName string, profileName string, options *SecurityPerimeterAccessRulesClientListOptions) *runtime.Pager[SecurityPerimeterAccessRulesClientListResponse] {
	return runtime.NewPager(runtime.PagingHandler[SecurityPerimeterAccessRulesClientListResponse]{
		More: func(page SecurityPerimeterAccessRulesClientListResponse) bool {
			return page.NextLink != nil && len(*page.NextLink) > 0
		},
		Fetcher: func(ctx context.Context, page *SecurityPerimeterAccessRulesClientListResponse) (SecurityPerimeterAccessRulesClientListResponse, error) {
			ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, "SecurityPerimeterAccessRulesClient.NewListPager")
			nextLink := ""
			if page != nil {
				nextLink = *page.NextLink
			}
			resp, err := runtime.FetcherForNextLink(ctx, client.internal.Pipeline(), nextLink, func(ctx context.Context) (*policy.Request, error) {
				return client.listCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, profileName, options)
			}, nil)
			if err != nil {
				return SecurityPerimeterAccessRulesClientListResponse{}, err
			}
			return client.listHandleResponse(resp)
		},
		Tracer: client.internal.Tracer(),
	})
}

// listCreateRequest creates the List request.
func (client *SecurityPerimeterAccessRulesClient) listCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, options *SecurityPerimeterAccessRulesClientListOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	req, err := runtime.NewRequest(ctx, http.MethodGet, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	if options != nil && options.SkipToken != nil {
		reqQP.Set("$skipToken", *options.SkipToken)
	}
	if options != nil && options.Top != nil {
		reqQP.Set("$top", strconv.FormatInt(int64(*options.Top), 10))
	}
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	return req, nil
}

// listHandleResponse handles the List response.
func (client *SecurityPerimeterAccessRulesClient) listHandleResponse(resp *http.Response) (SecurityPerimeterAccessRulesClientListResponse, error) {
	result := SecurityPerimeterAccessRulesClientListResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.NspAccessRuleListResult); err != nil {
		return SecurityPerimeterAccessRulesClientListResponse{}, err
	}
	return result, nil
}

// Reconcile - Reconcile NSP access rules
// If the operation fails it returns an *azcore.ResponseError type.
//
// Generated from API version 2024-07-01
//   - resourceGroupName - The name of the resource group.
//   - networkSecurityPerimeterName - The name of the network security perimeter.
//   - profileName - The name of the NSP profile.
//   - accessRuleName - The name of the NSP access rule.
//   - parameters - Parameters for NSP access rule reconcile
//   - options - SecurityPerimeterAccessRulesClientReconcileOptions contains the optional parameters for the SecurityPerimeterAccessRulesClient.Reconcile
//     method.
func (client *SecurityPerimeterAccessRulesClient) Reconcile(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, parameters any, options *SecurityPerimeterAccessRulesClientReconcileOptions) (SecurityPerimeterAccessRulesClientReconcileResponse, error) {
	var err error
	const operationName = "SecurityPerimeterAccessRulesClient.Reconcile"
	ctx = context.WithValue(ctx, runtime.CtxAPINameKey{}, operationName)
	ctx, endSpan := runtime.StartSpan(ctx, operationName, client.internal.Tracer(), nil)
	defer func() { endSpan(err) }()
	req, err := client.reconcileCreateRequest(ctx, resourceGroupName, networkSecurityPerimeterName, profileName, accessRuleName, parameters, options)
	if err != nil {
		return SecurityPerimeterAccessRulesClientReconcileResponse{}, err
	}
	httpResp, err := client.internal.Pipeline().Do(req)
	if err != nil {
		return SecurityPerimeterAccessRulesClientReconcileResponse{}, err
	}
	if !runtime.HasStatusCode(httpResp, http.StatusOK) {
		err = runtime.NewResponseError(httpResp)
		return SecurityPerimeterAccessRulesClientReconcileResponse{}, err
	}
	resp, err := client.reconcileHandleResponse(httpResp)
	return resp, err
}

// reconcileCreateRequest creates the Reconcile request.
func (client *SecurityPerimeterAccessRulesClient) reconcileCreateRequest(ctx context.Context, resourceGroupName string, networkSecurityPerimeterName string, profileName string, accessRuleName string, parameters any, _ *SecurityPerimeterAccessRulesClientReconcileOptions) (*policy.Request, error) {
	urlPath := "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkSecurityPerimeters/{networkSecurityPerimeterName}/profiles/{profileName}/accessRules/{accessRuleName}/reconcile"
	if client.subscriptionID == "" {
		return nil, errors.New("parameter client.subscriptionID cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{subscriptionId}", url.PathEscape(client.subscriptionID))
	if resourceGroupName == "" {
		return nil, errors.New("parameter resourceGroupName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{resourceGroupName}", url.PathEscape(resourceGroupName))
	if networkSecurityPerimeterName == "" {
		return nil, errors.New("parameter networkSecurityPerimeterName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{networkSecurityPerimeterName}", url.PathEscape(networkSecurityPerimeterName))
	if profileName == "" {
		return nil, errors.New("parameter profileName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{profileName}", url.PathEscape(profileName))
	if accessRuleName == "" {
		return nil, errors.New("parameter accessRuleName cannot be empty")
	}
	urlPath = strings.ReplaceAll(urlPath, "{accessRuleName}", url.PathEscape(accessRuleName))
	req, err := runtime.NewRequest(ctx, http.MethodPost, runtime.JoinPaths(client.internal.Endpoint(), urlPath))
	if err != nil {
		return nil, err
	}
	reqQP := req.Raw().URL.Query()
	reqQP.Set("api-version", "2024-07-01")
	req.Raw().URL.RawQuery = reqQP.Encode()
	req.Raw().Header["Accept"] = []string{"application/json"}
	if err := runtime.MarshalAsJSON(req, parameters); err != nil {
		return nil, err
	}
	return req, nil
}

// reconcileHandleResponse handles the Reconcile response.
func (client *SecurityPerimeterAccessRulesClient) reconcileHandleResponse(resp *http.Response) (SecurityPerimeterAccessRulesClientReconcileResponse, error) {
	result := SecurityPerimeterAccessRulesClientReconcileResponse{}
	if err := runtime.UnmarshalAsJSON(resp, &result.Interface); err != nil {
		return SecurityPerimeterAccessRulesClientReconcileResponse{}, err
	}
	return result, nil
}
