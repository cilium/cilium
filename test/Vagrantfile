# -*- mode: ruby -*-
# vi: set ft=ruby :

$BUILD_NUMBER = ENV['BUILD_NUMBER'] || "0"
$JOB_NAME = ENV['JOB_BASE_NAME'] || "LOCAL"
$K8S_VERSION = ENV['K8S_VERSION'] || "1.7"
$K8S_NODES = (ENV['K8S_NODES'] || "2").to_i


$SERVER_BOX= "cilium/ginkgo"
$SERVER_VERSION= "0.0.2"

BAZEL_VERSION = "0.8.1"

$bootstrap = <<SCRIPT
sudo service docker restart
sudo apt-get -y update || true
sudo apt-get -y install socat curl jq realpath pv tmux python-sphinx python-pip yamllint
sudo pip install --upgrade pip
sudo pip install sphinx sphinxcontrib-httpdomain sphinxcontrib-openapi
echo 'cd ~/go/src/github.com/cilium/cilium' >> /home/vagrant/.bashrc
export GOPATH=/home/vagrant/go
sudo -E /usr/local/go/bin/go get github.com/jteeuwen/go-bindata/...
sudo -E /usr/local/go/bin/go get -u github.com/google/gops
chown -R vagrant:vagrant $GOPATH
curl -SsL https://github.com/cilium/bpf-map/releases/download/v1.0/bpf-map -o bpf-map
chmod +x bpf-map
mv bpf-map /usr/bin
if [[ $(command -v bazel) && "$(bazel version | grep 'label' | cut -d ' ' -f 3)" = #{BAZEL_VERSION} ]]; then
  echo "Bazel #{BAZEL_VERSION} already installed, skipping fetch."
else
  wget -nv https://github.com/bazelbuild/bazel/releases/download/#{BAZEL_VERSION}/bazel-#{BAZEL_VERSION}-installer-linux-x86_64.sh
  chmod +x bazel-#{BAZEL_VERSION}-installer-linux-x86_64.sh
  sudo -E ./bazel-#{BAZEL_VERSION}-installer-linux-x86_64.sh
  sudo -E mv /usr/local/bin/bazel /usr/bin
  rm bazel-#{BAZEL_VERSION}-installer-linux-x86_64.sh
fi
SCRIPT


$build = <<SCRIPT
CILIUM_USE_ENVOY=1
/home/vagrant/go/src/github.com/cilium/cilium/common/build.sh
SCRIPT

$install = <<SCRIPT
CILIUM_USE_ENVOY=1
sudo -E make -C /home/vagrant/go/src/github.com/cilium/cilium/ install

if [ -n "$(grep DISTRIB_RELEASE=14.04 /etc/lsb-release)" ]; then
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/upstart/cilium-docker.conf /etc/init/
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/upstart/cilium.conf /etc/init/
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/upstart/cilium-consul.conf /etc/init/
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/upstart/cilium-policy-watcher.conf /etc/init/
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/upstart/cilium-etcd.conf /etc/init/
    sudo rm -rf /var/log/upstart/cilium-*
else
    sudo mkdir -p /etc/sysconfig
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/systemd/cilium-consul.service /lib/systemd/system
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/systemd/cilium-docker.service /lib/systemd/system
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/systemd/cilium-etcd.service /lib/systemd/system
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/systemd/cilium.service /lib/systemd/system
    sudo cp /home/vagrant/go/src/github.com/cilium/cilium/contrib/systemd/cilium /etc/sysconfig
fi

sudo usermod -a -G cilium vagrant
SCRIPT

$install_etcd = <<SCRIPT
#TODO - install etcd in the cilium-ubuntu-16.10 Vagrantfile

ETCD_VERSION="v3.1.0"
wget -nv https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz
tar -xf etcd-${ETCD_VERSION}-linux-amd64.tar.gz
sudo mv etcd-${ETCD_VERSION}-linux-amd64/etcd* /usr/bin/

sudo tee /etc/systemd/system/etcd.service <<EOF
[Unit]
Description=etcd
Documentation=https://github.com/coreos
[Service]
ExecStart=/usr/bin/etcd --name=cilium --data-dir=/var/etcd/cilium --advertise-client-urls=http://192.168.36.11:9732 --listen-client-urls=http://0.0.0.0:9732 --listen-peer-urls=http://0.0.0.0:9733
Restart=on-failure
RestartSec=5
[Install]
WantedBy=multi-user.target
EOF

sudo systemctl enable etcd
sudo systemctl start etcd
SCRIPT

$start_cilium = <<SCRIPT
sudo service cilium restart

cilium_started=false

for ((i = 0 ; i < 60; i++)); do
    if cilium status > /dev/null 2>&1; then
        cilium_started=true
        break
    fi
    sleep 5s
    echo "Waiting for Cilium daemon to come up..."
done

if [ "\$cilium_started" = true ] ; then
    echo 'Cilium successfully started!'
else
    >&2 echo 'Timeout waiting for Cilium to start...'
    journalctl -u cilium.service --since \$(systemctl show -p ActiveEnterTimestamp cilium.service | awk '{print \$2 \$3}')
    >&2 echo 'Cilium failed to start'
    exit 1
fi
SCRIPT

if ENV['BUILD_NUMBER'] then
    $build_id_name = "-build-#{$build_id}"
    $rsync_exclude = "../.git"
else
    $rsync_exclude = "../GIT_VERSION"
end



ENV["VAGRANT_DEFAULT_PROVIDER"] = "virtualbox"
Vagrant.configure("2") do |config|

    config.vm.define "runtime" do |server|
        server.vm.provider "virtualbox" do |vb|
            vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
            vb.cpus = 2
            vb.memory=3072
            vb.linked_clone = true
        end

        server.vm.box = "cilium/ubuntu-16.10"
        server.vm.box_version = "2.7"
        server.vm.hostname = "runtime"

        # Provision section
        server.vm.provision :shell,
            :inline => "sed -i 's/^mesg n$/tty -s \\&\\& mesg n/g' /root/.profile"
        config.vm.provision "bootstrap", type: "shell", inline: $bootstrap
        config.vm.provision "build", type: "shell", run: "always", privileged: false, inline: $build
        config.vm.provision "install", type: "shell", run: "always", privileged: false, inline: $install
        config.vm.provision "install_etcd", type: "shell", run: "always", privileged: false, inline: $install_etcd
        config.vm.provision "start_cilium", type: "shell", run: "always",  inline: $start_cilium

        server.vm.synced_folder ".", "/vagrant", disabled: true
 
        # run rsync with options:
        #  --links: preserve symlinks
        #  --checksum: skip based on checksum, not mod-time & size (avoid unnecessary bazel rebuilds)
        #  --delete: delete extraneous files from dest dirs
        #  --force: force deletion of dirs even if not empty
        #  --delete-excluded: also delete excluded files from dest dirs
        #  --archive: archive mode; equals -rlptgoD (no -H,-A,-X)
        #  -z: compress file data during the transfer
        server.vm.synced_folder '../', '/home/vagrant/go/src/github.com/cilium/cilium', type: "rsync",
           rsync__exclude: [$rsync_exclude, "src"], rsync__args: ["--verbose", "--archive", "--delete", "--force", "--delete-excluded", "-z", "--links", "--checksum"]

    end

    (1..$K8S_NODES).each do |i|
        config.vm.define "k8s#{i}-#{$K8S_VERSION}" do |server|
            server.vm.provider "virtualbox" do |vb|
                # vb.customize ["modifyvm", :id, "--memory", "2048"]
                vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
                vb.cpus = 2
                vb.memory=2048
                vb.linked_clone = true
            end

            server.vm.box =  "#{$SERVER_BOX}"
            server.vm.box_version = "#{$SERVER_VERSION}"
            server.vm.hostname = "k8s#{i}"
            server.vm.network "private_network",
                ip: "192.168.36.1#{i}",
                virtualbox__intnet: "cilium-k8s#{$BUILD_NUMBER}-#{$JOB_NAME}-#{$K8S_VERSION}"

            server.vm.synced_folder "../", "/src/"
            # Provision section
            server.vm.provision :shell,
                :inline => "sed -i 's/^mesg n$/tty -s \\&\\& mesg n/g' /root/.profile"
            server.vm.provision "file", source: "provision", destination: "/tmp/provision"
            server.vm.provision "shell" do |sh|
                sh.path = "./provision/k8s_install.sh"
                sh.args = ["k8s#{i}", "192.168.36.1#{i}", "#{$K8S_VERSION}"]
            end
        end
    end
end
