apiVersion: v1
kind: Service
metadata:
  name: graceful-term-svc
spec:
  ports:
    - port: 8081
  selector:
    app: graceful-term-server
---
apiVersion: v1
kind: Pod
metadata:
  name: graceful-term-server
  labels:
    app: graceful-term-server
spec:
  containers:
    - name: server
      image: docker.io/cilium/graceful-termination-test-apps:latest
      imagePullPolicy: IfNotPresent
      ports:
        - containerPort: 8081
          protocol: TCP
      command: [ "/server", "8081" ]
  # The server pod gracefully terminates client connections upon receiving SIGTERM.
  # It then waits for terminationGracePeriodSeconds duration so that CI
  # assertions can be made before exiting.
  terminationGracePeriodSeconds: 15
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - effect: NoSchedule
      key: node.cloudprovider.kubernetes.io/uninitialized
      value: "true"
---
apiVersion: v1
kind: Pod
metadata:
  name: graceful-term-client
  labels:
    app: graceful-term-client
spec:
  # The client exits with status code 0 on graceful termination so no need to restart the pod for success cases.
  restartPolicy: OnFailure
  terminationGracePeriodSeconds: 0
  containers:
    - name: client
      image: docker.io/cilium/graceful-termination-test-apps:latest
      imagePullPolicy: IfNotPresent
      command: [ "/client", "graceful-term-svc.default.svc.cluster.local.:8081" ]
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: testclient
spec:
  selector:
    matchLabels:
      zgroup: testDSClient
  template:
    metadata:
      labels:
        zgroup: testDSClient
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: web
          image: docker.io/cilium/demo-client:1.0
          imagePullPolicy: IfNotPresent
          command: [ "sleep" ]
          args:
            - "1000h"
