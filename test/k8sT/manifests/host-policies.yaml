apiVersion: "cilium.io/v2"
kind: CiliumClusterwideNetworkPolicy
metadata:
  name: "host-policy"
specs:
  - description: "Allow only test client <-> server communications on node <-> pod paths (local and remote pods)"
    nodeSelector:
      matchLabels:
        status: lockdown
    ingress:
    - fromEndpoints:
      - matchLabels:
          zgroup: testClient
      toPorts:
      - ports:
        - port: "80"
          protocol: TCP
    - fromEndpoints:
      - matchExpressions:
        - key: zgroup
          operator: NotIn
          values: [testClient]
    egress:
    - toEndpoints:
      - matchLabels:
          zgroup: testServer
      toPorts:
      - ports:
        - port: "80"
          protocol: TCP
    - toEndpoints:
      - matchExpressions:
        - key: zgroup
          operator: NotIn
          values: [testServer]
  - description: "Open required ports + test application's port between nodes"
    nodeSelector: {}
    ingress:
    - fromEntities:
      - remote-node
      toPorts:
      - ports:
        - port: "80"
          protocol: TCP
        # VXLAN tunnels between nodes
        - port: "8472"
          protocol: UDP
        # etcd connections
        - port: "2379"
          protocol: TCP
        - port: "2380"
          protocol: TCP
        # kube-api server
        - port: "6443"
          protocol: TCP
        # kubelet
        - port: "10250"
          protocol: TCP
        # Health checks
        - port: "4240"
          protocol: TCP
    egress:
    - toEntities:
      - remote-node
      toPorts:
      - ports:
        - port: "80"
          protocol: TCP
        # VXLAN tunnels between nodes
        - port: "8472"
          protocol: UDP
        # etcd connections
        - port: "2379"
          protocol: TCP
        - port: "2380"
          protocol: TCP
        # kube-api server
        - port: "6443"
          protocol: TCP
        # kubelet
        - port: "10250"
          protocol: TCP
        # Health checks
        - port: "4240"
          protocol: TCP
  - description: "Allow all to/from health and world"
    nodeSelector: {}
    ingress:
    - fromEntities:
      - health
      - world
    egress:
    - toEntities:
      - health
      - world
