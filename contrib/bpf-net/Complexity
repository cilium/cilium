Some notes on verifier complexity:
----------------------------------

The verifier needs to go through every path of the program in order to
check that it terminates safely, which can be quite a lot of instructions
that need to be processed f.e. in cases with more branchy programs. With
search pruning from f1bca824dabb ("bpf: add search pruning optimization
to verifier") the search space can already be reduced significantly when
the verifier detects that a previously walked path with same register and
stack contents terminated already (see verifier's states_equal()), so the
search can skip walking those states. (If there would be no search pruning,
the complexity to walk through everything could be as high that the
machine could go into soft-lockup.)

states_equal() is really the main function in the verifier to check for
equal states from kernel side. From llvm side, it is crucial to understand
that clang sees access to context (skb->xyz) or invoking helper functions
as possibly having side-effects. Meaning that f.e. two successive skb->xyz
loads cannot be optimized by llvm, so if the user knows that the member
won't change, the value can be cached in a local variable to allow for llvm
to improve optimizations (which indirectly can lead to reduced complexity
on verification side).

Another issue we found is that when using stack space in particular branches
in the beginning of a larger, branchy program, the verifier can often not
merge these paths. Used stack space is marked as such with the type of data
(f.e. arbitrary value resides at stack slot X, or register value has been
spilled into slot X, or stack slot X unused/invalid), so the verifier keeps
state of marking for the entire stack space. When they are equal, paths can
be merged. Equality can be strict, so each slot has same type, or weak,
meaning that when previous verifier run found that program terminates safely
with slot X as type invalid, and current state has slot X as misc (arbitrary
value), then this is also considered safe as weaker state succeeded previously.

So, if possible/reasonable, initializations in the unconditional main path
of the program would help with merging later branches.

One heuristic we can still add to the verifier are on backjumps, see commit
07016151a446 ("bpf, verifier: further improve search pruning"), which can
help with some types of programs where llvm generates them.
