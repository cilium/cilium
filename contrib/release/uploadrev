#!/bin/bash
# Upload a Cilium revision to releases.cilium.io. This will be used to host
# releases on a seperate location.
#
# TODO: update sphinx Documentation with process when bucket is setup. See
# GH-1303 (Provide stable URL for stable release tarballs)[0].
# [0]: https://github.com/cilium/cilium/issues/1303

set -e

function usage() {
  echo "Usage: $BASH_SOURCE <revision>"
  echo "Example: $BASH_SOURCE v1.0.0-rc2"
  echo "Environment:"
  grep -F \$\{ $BASH_SOURCE
}

if [ "$#" -lt 1 ]; then
  usage
  exit 1
fi

REV=$1

function perror() {
  echo `tput setaf 1`$@`tput sgr0`
}

function configure_env() {
  if ! which aws; then
    perror "Please install or make sure aws is in your PATH"
    perror "See the user guide for more info "
    perror "https://docs.aws.amazon.com/cli/latest/userguide/installing.html"
    exit 1
  fi
  ARCH=${ARCH:-"`uname -m`"}
  DOMAIN=${DOMAIN:-"releases.cilium.io"}
  REMOTE_DIR=${REMOTE_DIR:-"$REV"}
  CHARTS_REMOTE_DIR=${CHARTS_REMOTE_DIR:-"charts"}
  PREPEND=${PREPEND:-"cilium-$REV/"}
  ZIP_FILE=${ZIP_FILE:-"$REV.zip"}
  TARBALL=${TARBALL:-"$REV.tar.gz"}
  DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
  TARGET_DIR=${TARGET_DIR:-"$DIR/../../_build/`basename $REMOTE_DIR`"}
  CHARTS_TARGET_DIR=${CHARTS_TARGET_DIR:-"$DIR/../../_charts/`basename $REMOTE_DIR`"}
  CILIUM_SOURCE=${CILIUM_SOURCE:-"$DIR/../../"}
  SKIP_UPLOAD=${SKIP_UPLOAD:-0}

  SOURCE_VERSION="v$(cat $CILIUM_SOURCE/VERSION)"
  if [ "$REV" != "$SOURCE_VERSION" ]; then
      perror "Unexpected version discrepancy between argument ($REV) and filesystem ($SOURCE_VERSION)"
      perror "Did you mean to specify \$CILIUM_SOURCE(=$(realpath $CILIUM_SOURCE))?"
      exit 1
  fi
}


function create_dir() {
  if test -d $TARGET_DIR; then
    rm -rf $TARGET_DIR
  fi
  mkdir -pv $TARGET_DIR
  mkdir -pv $TARGET_DIR/tools
}

function copy_source() {
  git archive --prefix=$PREPEND -o $TARGET_DIR/$ZIP_FILE $REV
  git archive --format=tar.gz -o $TARGET_DIR/$TARBALL --prefix=$PREPEND $REV
}

function copy_binaries_cilium_docker() {
  echo "target_dir: $TARGET_DIR"
  mkdir -p $TARGET_DIR
  SHA=$(docker create docker.io/cilium/docker-plugin:$REV)
  docker cp $SHA:/usr/bin/cilium-docker $TARGET_DIR/cilium-docker-$ARCH
  docker rm -f $SHA
}

function copy_binaries_cilium_operator() {
  mkdir -p $TARGET_DIR
  SHA=$(docker create docker.io/cilium/operator:$REV)
  docker cp $SHA:/usr/bin/cilium-operator $TARGET_DIR/cilium-operator-$ARCH
  docker rm -f $SHA
}

# $1 - target directory
function generate_sha_digest_for_binaries() {
  RELDIR="$1"
  mkdir -p $RELDIR
  # Generate  SHA256 digest
  cd $RELDIR
  for f in *; do
    [ ! -d "$f" ] && sha256sum $f > $f.sha256sum
  done
}

function copy_binaries() {
  mkdir -p $TARGET_DIR
  SHA=$(docker create docker.io/cilium/cilium:$REV)
  docker cp $SHA:/usr/bin/cilium-agent $TARGET_DIR/cilium-$ARCH
  docker cp $SHA:/usr/bin/cilium-agent $TARGET_DIR/cilium-agent-$ARCH
  docker cp $SHA:/usr/bin/cilium-agent $TARGET_DIR/cilium-node-monitor-$ARCH
  docker cp $SHA:/usr/bin/cilium-bugtool $TARGET_DIR/cilium-bugtool-$ARCH
  docker cp $SHA:/usr/bin/cilium-health $TARGET_DIR/cilium-health-$ARCH
  docker cp $SHA:/usr/bin/cilium-health-responder $TARGET_DIR/cilium-health-responder-$ARCH
  docker cp $SHA:/usr/bin/cilium-envoy $TARGET_DIR/cilium-envoy-$ARCH
  docker cp $SHA:/opt/cni/bin/cilium-cni $TARGET_DIR/cilium-cni-$ARCH
  cp contrib/k8s/k8s-cilium-exec.sh $TARGET_DIR/tools/ || true
  cp contrib/k8s/k8s-get-cilium-pod.sh $TARGET_DIR/tools/ || true
  cp contrib/k8s/k8s-unmanaged.sh $TARGET_DIR/tools/ || true
  docker rm -f $SHA
  copy_binaries_cilium_operator
  copy_binaries_cilium_docker
  generate_sha_digest_for_binaries $TARGET_DIR
  generate_sha_digest_for_binaries $CHARTS_DIR
}

function copy_helm_chart() {
  mkdir -pv $CHARTS_TARGET_DIR
  helm package $CILIUM_SOURCE/install/kubernetes/cilium/
  mv cilium-${REV/v/}.tgz $CHARTS_TARGET_DIR
  curl -f -o $CHARTS_TARGET_DIR/index.yaml http://$DOMAIN/$CHARTS_REMOTE_DIR/index.yaml || true
  helm repo index $CHARTS_TARGET_DIR --url http://$DOMAIN/$CHARTS_REMOTE_DIR --merge $CHARTS_TARGET_DIR/index.yaml
}

function upload_all() {
  if [ $SKIP_UPLOAD == 1 ]; then
    echo "Skipping upload"
    return
  fi
  # Upload all files
  aws s3 cp --recursive $TARGET_DIR s3://$DOMAIN/$REMOTE_DIR
  aws s3 cp --recursive $CHARTS_TARGET_DIR s3://$DOMAIN/$CHARTS_REMOTE_DIR
}

function print_done() {
  echo "--- markdown snippet for NEWS.rst  ---"
  echo "Release binaries"
  echo "----------------"
  echo ""

  for RELDIR in $TARGET_DIR $CHARTS_TARGET_DIR; do
    cd $RELDIR
    for s in *.sha256sum; do
      f=$(echo "$s" | sed s/\.sha256sum//)
      echo "* [$f](http://$DOMAIN/$REMOTE_DIR/$f) ([$(cat $s | cut -c1-20)](http://$DOMAIN/$REMOTE_DIR/$s))"
    done
    cd -
  done
  echo "--- end ---"
  echo "`tput setaf 2`DONE`tput sgr0` local files are in $TARGET_DIR."
}

function main() {
  configure_env
  create_dir
  copy_source
  copy_binaries
  copy_helm_chart
  upload_all
  print_done
}

main
