// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: statedb.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StateDB_Get_FullMethodName        = "/statedb.StateDB/Get"
	StateDB_LowerBound_FullMethodName = "/statedb.StateDB/LowerBound"
	StateDB_Watch_FullMethodName      = "/statedb.StateDB/Watch"
)

// StateDBClient is the client API for StateDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StateDBClient interface {
	Get(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StateDB_GetClient, error)
	LowerBound(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StateDB_LowerBoundClient, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StateDB_WatchClient, error)
}

type stateDBClient struct {
	cc grpc.ClientConnInterface
}

func NewStateDBClient(cc grpc.ClientConnInterface) StateDBClient {
	return &stateDBClient{cc}
}

func (c *stateDBClient) Get(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StateDB_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateDB_ServiceDesc.Streams[0], StateDB_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateDBGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateDB_GetClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type stateDBGetClient struct {
	grpc.ClientStream
}

func (x *stateDBGetClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateDBClient) LowerBound(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (StateDB_LowerBoundClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateDB_ServiceDesc.Streams[1], StateDB_LowerBound_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateDBLowerBoundClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateDB_LowerBoundClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type stateDBLowerBoundClient struct {
	grpc.ClientStream
}

func (x *stateDBLowerBoundClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stateDBClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (StateDB_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &StateDB_ServiceDesc.Streams[2], StateDB_Watch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stateDBWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StateDB_WatchClient interface {
	Recv() (*Object, error)
	grpc.ClientStream
}

type stateDBWatchClient struct {
	grpc.ClientStream
}

func (x *stateDBWatchClient) Recv() (*Object, error) {
	m := new(Object)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StateDBServer is the server API for StateDB service.
// All implementations should embed UnimplementedStateDBServer
// for forward compatibility
type StateDBServer interface {
	Get(*QueryRequest, StateDB_GetServer) error
	LowerBound(*QueryRequest, StateDB_LowerBoundServer) error
	Watch(*WatchRequest, StateDB_WatchServer) error
}

// UnimplementedStateDBServer should be embedded to have forward compatible implementations.
type UnimplementedStateDBServer struct {
}

func (UnimplementedStateDBServer) Get(*QueryRequest, StateDB_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStateDBServer) LowerBound(*QueryRequest, StateDB_LowerBoundServer) error {
	return status.Errorf(codes.Unimplemented, "method LowerBound not implemented")
}
func (UnimplementedStateDBServer) Watch(*WatchRequest, StateDB_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

// UnsafeStateDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StateDBServer will
// result in compilation errors.
type UnsafeStateDBServer interface {
	mustEmbedUnimplementedStateDBServer()
}

func RegisterStateDBServer(s grpc.ServiceRegistrar, srv StateDBServer) {
	s.RegisterService(&StateDB_ServiceDesc, srv)
}

func _StateDB_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateDBServer).Get(m, &stateDBGetServer{stream})
}

type StateDB_GetServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type stateDBGetServer struct {
	grpc.ServerStream
}

func (x *stateDBGetServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _StateDB_LowerBound_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateDBServer).LowerBound(m, &stateDBLowerBoundServer{stream})
}

type StateDB_LowerBoundServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type stateDBLowerBoundServer struct {
	grpc.ServerStream
}

func (x *stateDBLowerBoundServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

func _StateDB_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StateDBServer).Watch(m, &stateDBWatchServer{stream})
}

type StateDB_WatchServer interface {
	Send(*Object) error
	grpc.ServerStream
}

type stateDBWatchServer struct {
	grpc.ServerStream
}

func (x *stateDBWatchServer) Send(m *Object) error {
	return x.ServerStream.SendMsg(m)
}

// StateDB_ServiceDesc is the grpc.ServiceDesc for StateDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StateDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statedb.StateDB",
	HandlerType: (*StateDBServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _StateDB_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LowerBound",
			Handler:       _StateDB_LowerBound_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _StateDB_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "statedb.proto",
}
