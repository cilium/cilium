#! --enable-experimental-lb 
#
# This tests different queries that can be made against the load-balancing tables.
#

# Start and wait for sync against the k8s fake client.
hive start
db/initialized

# Show the registered tables and indexes
db

# Insert some data:
#   foo/echo: 1.1.1.1:80/TCP => 10.244.1.[1-4]
#   bar/echo: 2.2.2.2:80/TCP => 10.244.2.[1-4]
cp service.yaml service2.yaml
replace 'foo' 'bar' service2.yaml
replace '1.1.1.1' '2.2.2.2' service2.yaml
cp endpointslice.yaml endpointslice2.yaml
replace 'foo' 'bar' endpointslice2.yaml
replace '10.244.1' '10.244.2' endpointslice2.yaml
k8s/add service.yaml service2.yaml endpointslice.yaml endpointslice2.yaml

# Validate
db/cmp services services.table
db/cmp frontends frontends.table
db/cmp backends backends.table

# Service name index
db/list --columns Name,Source -i name -o list.actual services foo/echo
cmp services-foo.table list.actual 
db/prefix --columns Name,Source -i name -o list.actual services ''
cmp services.table list.actual 
db/prefix --columns Name,Source -i name -o list.actual services foo/
cmp services-foo.table list.actual 
db/prefix --columns Name,Source -i name -o list.actual services bar/
cmp services-bar.table list.actual 

# Frontend service index
db/list --columns Address,ServiceName -i service -o list.actual frontends foo/echo
cmp frontends-echo.table list.actual 
db/list --columns Address,ServiceName -i service -o list.actual frontends bar/echo
cmp frontends-echo2.table list.actual 
db/prefix --columns Address,ServiceName -i service -o list.actual frontends ''
cmp frontends-by-servicename.table list.actual
db/prefix --columns Address,ServiceName -i service -o list.actual frontends bar/echo
cmp frontends-echo2.table list.actual

# Frontend address index
db/list --columns Address,ServiceName -i address -o list.actual frontends 1.1.1.1:80/TCP
cmp frontends-echo.table list.actual 
db/list --columns Address,ServiceName -i address -o list.actual frontends 2.2.2.2:80/TCP
cmp frontends-echo2.table list.actual 

# Backend service index
db/list --columns Address,Instances -i service -o list.actual backends foo/echo
cmp backends-foo.table list.actual
db/prefix --columns Address,Instances -i service -o list.actual backends 'foo/'
cmp backends-foo.table list.actual
db/prefix --columns Address,Instances -i service -o list.actual backends 'bar/'
cmp backends-bar.table list.actual
db/prefix --columns Address,Instances -i service -o list.actual backends ''
cmp backends-by-servicename.table list.actual

# Backend address index
db/list --columns Address,Instances -i address -o list.actual backends 10.244.1.1:80/TCP
cmp backends-foo1.table list.actual

# Backend address search by address prefix (only classful supported since we index by byte!)
db/prefix --columns Address,Instances -i address -o list.actual backends 10.0.0.0/8
cmp backends.table list.actual
db/prefix --columns Address,Instances -i address -o list.actual backends 192.0.0.0/8
cmp backends-empty.table list.actual
db/prefix --columns Address,Instances -i address -o list.actual backends 10.244.2.0/24
cmp backends-bar.table list.actual

# ----

-- services.table --
Name       Source
bar/echo   k8s
foo/echo   k8s
-- services-foo.table --
Name       Source
foo/echo   k8s
-- services-bar.table --
Name       Source
bar/echo   k8s
-- frontends.table --
Address          ServiceName
1.1.1.1:80/TCP   foo/echo
2.2.2.2:80/TCP   bar/echo
-- frontends-by-servicename.table --
Address          ServiceName
2.2.2.2:80/TCP   bar/echo
1.1.1.1:80/TCP   foo/echo
-- frontends-echo.table --
Address          ServiceName
1.1.1.1:80/TCP   foo/echo
-- frontends-echo2.table --
Address          ServiceName
2.2.2.2:80/TCP   bar/echo
-- backends.table --
Address             Instances
10.244.1.1:80/TCP   foo/echo (http)
10.244.1.2:80/TCP   foo/echo (http)
10.244.1.3:80/TCP   foo/echo (http)
10.244.1.4:80/TCP   foo/echo (http)
10.244.2.1:80/TCP   bar/echo (http)
10.244.2.2:80/TCP   bar/echo (http)
10.244.2.3:80/TCP   bar/echo (http)
10.244.2.4:80/TCP   bar/echo (http)
-- backends-by-servicename.table --
Address             Instances
10.244.2.1:80/TCP   bar/echo (http)
10.244.2.2:80/TCP   bar/echo (http)
10.244.2.3:80/TCP   bar/echo (http)
10.244.2.4:80/TCP   bar/echo (http)
10.244.1.1:80/TCP   foo/echo (http)
10.244.1.2:80/TCP   foo/echo (http)
10.244.1.3:80/TCP   foo/echo (http)
10.244.1.4:80/TCP   foo/echo (http)
-- backends-foo1.table --
Address             Instances
10.244.1.1:80/TCP   foo/echo (http)
-- backends-foo.table --
Address             Instances
10.244.1.1:80/TCP   foo/echo (http)
10.244.1.2:80/TCP   foo/echo (http)
10.244.1.3:80/TCP   foo/echo (http)
10.244.1.4:80/TCP   foo/echo (http)
-- backends-bar.table --
Address             Instances
10.244.2.1:80/TCP   bar/echo (http)
10.244.2.2:80/TCP   bar/echo (http)
10.244.2.3:80/TCP   bar/echo (http)
10.244.2.4:80/TCP   bar/echo (http)
-- backends-empty.table --
Address   Instances
-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  name: echo
  namespace: foo
spec:
  clusterIP: 1.1.1.1
  clusterIPs:
  - 1.1.1.1
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  type: ClusterIP

-- endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  labels:
    endpointslice.kubernetes.io/managed-by: endpointslice-controller.k8s.io
    kubernetes.io/service-name: echo
  name: echo-kvlm2
  namespace: foo
addressType: IPv4
endpoints:
- addresses:
  - 10.244.1.1
  nodeName: nodeport-worker
- addresses:
  - 10.244.1.2
  nodeName: nodeport-worker
- addresses:
  - 10.244.1.3
  nodeName: nodeport-worker2
- addresses:
  - 10.244.1.4
  nodeName: nodeport-worker2
ports:
- name: http
  port: 80
  protocol: TCP
