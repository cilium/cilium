#! --enable-experimental-lb

# Start the test application
hive start

# Wait for tables to initialize (e.g. reflector to start) before adding more objects.
db/initialized

# Create a LoadBalancer service with Local traffic policies and associate two backends 
# to it, one of them on this node ("testnode") and one on another node.
k8s add service.yaml endpointslice.yaml
db/cmp services services.table
db/cmp frontends frontends.table
db/cmp backends backends.table 

# Check the BPF maps
lb/maps-dump lbmaps.actual
* cmp lbmaps.expected lbmaps.actual

#####

-- services.table --
Name        Source   NatPolicy   ExtTrafficPolicy   IntTrafficPolicy
test/echo   k8s                  Local              Local           

-- frontends.table --
Address               Type         ServiceName   PortName   Backends                     Status
1.1.1.1:80/TCP        LoadBalancer test/echo     http       10.244.1.1:80/TCP (active)   Done
10.96.50.104:80/TCP   ClusterIP    test/echo     http       10.244.1.1:80/TCP (active)   Done

-- backends.table --
Address             State    Instances          NodeName
10.244.1.1:80/TCP   active   test/echo (http)   testnode
10.244.2.1:80/TCP   active   test/echo (http)   othernode

-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  name: echo
  namespace: test
  resourceVersion: "741"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Local
  internalTrafficPolicy: Local
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 1.1.1.1

-- endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  labels:
    kubernetes.io/service-name: echo
  name: echo-kvlm2
  namespace: test
  resourceVersion: "797"
  uid: d1f517f6-ab88-4c76-9bd0-4906a17cdd75
addressType: IPv4
endpoints:
- addresses:
  - 10.244.1.1
  conditions:
    ready: true
    serving: true
    terminating: false
  nodeName: testnode

- addresses:
  - 10.244.2.1
  conditions:
    ready: true
    serving: true
    terminating: false
  nodeName: othernode
    
ports:
- name: http
  port: 80
  protocol: TCP

-- lbmaps.expected --
BE: ID=1 ADDR=10.244.1.1:80/TCP STATE=active
REV: ID=1 ADDR=10.96.50.104:80
REV: ID=2 ADDR=1.1.1.1:80
SVC: ID=1 ADDR=10.96.50.104:80/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=1 QCOUNT=0 FLAGS=ClusterIP+Local+InternalLocal+non-routable
SVC: ID=1 ADDR=10.96.50.104:80/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=ClusterIP+Local+InternalLocal+non-routable
SVC: ID=2 ADDR=1.1.1.1:80/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=1 QCOUNT=0 FLAGS=LoadBalancer+Local+InternalLocal
SVC: ID=2 ADDR=1.1.1.1:80/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=LoadBalancer+Local+InternalLocal
