#! --enable-experimental-lb --lb-test-fault-probability=0.0

# Start the test application
hive start

# Wait for tables to initialize (e.g. reflector to start) before adding more objects.
# (otherwise might miss events due to List() vs Watch() race in fake client).
# NOTE: The 100ms delay you might see is from WaitForCacheSync polling at 100ms.
db/initialized

# Add the endpoints and service
k8s/add endpointslice.yaml
db/cmp backends backends.table

# Add service w/o "service.cilium.io/type"
k8s/add service.yaml
db/cmp frontends frontends-all.table
db/cmp services services.table

# Set "service.cilium.io/type=LoadBalancer"
k8s/update service-loadbalancer.yaml
db/cmp frontends frontends-loadbalancer.table
db/cmp services services.table

# Set "service.cilium.io/type=NodePort"
k8s/update service-nodeport.yaml
db/cmp frontends frontends-nodeport.table

# Set "service.cilium.io/type=ClusterIP"
k8s/update service-clusterip.yaml
db/cmp frontends frontends-clusterip.table

# Unset "service.cilium.io/type"
k8s/update service.yaml
db/cmp frontends frontends-all.table
db/cmp services services.table

#####

-- services.table --
Name         Source   TrafficPolicy   Flags
test/echo    k8s      Cluster

-- frontends-all.table --
Address               Type         ServiceName   PortName   Status  Backends
0.0.0.0:30781/TCP     NodePort     test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
10.96.50.104:80/TCP   ClusterIP    test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
172.16.1.1:80/TCP     LoadBalancer test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- frontends-loadbalancer.table --
Address               Type         ServiceName   PortName   Status  Backends
172.16.1.1:80/TCP     LoadBalancer test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- frontends-nodeport.table --
Address               Type         ServiceName   PortName   Status  Backends
0.0.0.0:30781/TCP     NodePort     test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- frontends-clusterip.table --
Address               Type         ServiceName   PortName   Status  Backends
10.96.50.104:80/TCP   ClusterIP    test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- backends.table --
Address             Instances            NodeName
10.244.1.1:80/TCP   test/echo (http)     nodeport-worker
10.244.1.2:80/TCP   test/echo (http)     nodeport-worker2

-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-09-13T11:11:26Z"
  name: echo
  namespace: test
  resourceVersion: "741"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 172.16.1.1

-- service-loadbalancer.yaml --
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-09-13T11:11:26Z"
  name: echo
  namespace: test
  resourceVersion: "742"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
  annotations:
    service.cilium.io/type: LoadBalancer
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 172.16.1.1

-- service-nodeport.yaml --
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-09-13T11:11:26Z"
  name: echo
  namespace: test
  resourceVersion: "742"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
  annotations:
    service.cilium.io/type: NodePort
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 172.16.1.1

-- service-clusterip.yaml --
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-09-13T11:11:26Z"
  name: echo
  namespace: test
  resourceVersion: "742"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
  annotations:
    service.cilium.io/type: ClusterIP
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 172.16.1.1

-- endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  annotations:
  creationTimestamp: "2022-09-13T11:11:26Z"
  generateName: echo-
  generation: 3
  labels:
    endpointslice.kubernetes.io/managed-by: endpointslice-controller.k8s.io
    kubernetes.io/service-name: echo
  name: echo-kvlm2
  namespace: test
  resourceVersion: "797"
  uid: d1f517f6-ab88-4c76-9bd0-4906a17cdd75
addressType: IPv4
endpoints:
- addresses:
  - 10.244.1.1
  nodeName: nodeport-worker
- addresses:
  - 10.244.1.2
  nodeName: nodeport-worker2
ports:
- name: http
  port: 80
  protocol: TCP
