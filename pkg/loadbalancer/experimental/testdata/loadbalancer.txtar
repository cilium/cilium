#! --enable-experimental-lb --lb-test-fault-probability=0.0

# Add some node addresses
db/insert node-addresses addrv4.yaml
db/cmp node-addresses nodeaddrs.table

# Start the test application
hive start

# Wait for tables to initialize (e.g. reflector to start) before adding more objects.
# (otherwise might miss events due to List() vs Watch() race in fake client).
# NOTE: The 100ms delay you might see is from WaitForCacheSync polling at 100ms.
db/initialized

# Add the endpoints and service
k8s/add endpointslice.yaml
db/cmp backends backends.table

k8s/add service.yaml
db/cmp frontends frontends1.table
db/cmp services services.table
db/cmp frontends frontends.table

# Check BPF maps
lb/maps-dump lbmaps.actual
* cmp lbmaps.expected lbmaps.actual

# Cleanup. Backends first in this test.
k8s/delete endpointslice.yaml
db/cmp backends backends_empty.table
db/cmp frontends frontends_nobackends.table

k8s/delete service.yaml
db/cmp frontends frontends_empty.table
db/cmp services services_empty.table

#####

-- addrv4.yaml --
addr: 1.1.1.1
nodeport: true
primary: true
devicename: test

-- nodeaddrs.table --
Address NodePort Primary DeviceName
1.1.1.1 true     true    test

-- services.table --
Name         Source   NatPolicy   ExtTrafficPolicy   IntTrafficPolicy   SessionAffinity   HealthCheckNodePort   LoopbackHostPort   SourceRanges
test/echo    k8s                  Cluster            Cluster                              0                     false              

-- services_empty.table --
Name         Source

-- frontends1.table --
Address               Type         ServiceName   PortName   Status  Backends
0.0.0.0:30781/TCP     NodePort     test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
10.96.50.104:80/TCP   ClusterIP    test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
172.16.1.1:80/TCP     LoadBalancer test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- frontends.table --
Address               Type         ServiceName   PortName   Status  Backends
0.0.0.0:30781/TCP     NodePort     test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
10.96.50.104:80/TCP   ClusterIP    test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP
172.16.1.1:80/TCP     LoadBalancer test/echo     http       Done    10.244.1.1:80/TCP, 10.244.1.2:80/TCP

-- frontends_nobackends.table --
Address               Type         ServiceName   PortName   Status  Backends
0.0.0.0:30781/TCP     NodePort     test/echo     http       Done        
10.96.50.104:80/TCP   ClusterIP    test/echo     http       Done        
172.16.1.1:80/TCP     LoadBalancer test/echo     http       Done

-- frontends_empty.table --
Address               Type        ServiceName   PortName   Status  Backends

-- backends.table --
Address             Instances            NodeName
10.244.1.1:80/TCP   test/echo (http)     nodeport-worker
10.244.1.2:80/TCP   test/echo (http)     nodeport-worker2

-- backends_empty.table --
Address

-- lbmaps.expected --
BE: ID=1 ADDR=10.244.1.1:80/TCP STATE=active
BE: ID=2 ADDR=10.244.1.2:80/TCP STATE=active
REV: ID=1 ADDR=0.0.0.0:30781
REV: ID=2 ADDR=1.1.1.1:30781
REV: ID=3 ADDR=10.96.50.104:80
REV: ID=4 ADDR=172.16.1.1:80
SVC: ID=1 ADDR=0.0.0.0:30781/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=2 QCOUNT=0 FLAGS=NodePort+non-routable
SVC: ID=1 ADDR=0.0.0.0:30781/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=NodePort+non-routable
SVC: ID=1 ADDR=0.0.0.0:30781/TCP SLOT=2 BEID=2 COUNT=0 QCOUNT=0 FLAGS=NodePort+non-routable
SVC: ID=2 ADDR=1.1.1.1:30781/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=2 QCOUNT=0 FLAGS=NodePort
SVC: ID=2 ADDR=1.1.1.1:30781/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=NodePort
SVC: ID=2 ADDR=1.1.1.1:30781/TCP SLOT=2 BEID=2 COUNT=0 QCOUNT=0 FLAGS=NodePort
SVC: ID=3 ADDR=10.96.50.104:80/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=2 QCOUNT=0 FLAGS=ClusterIP+non-routable
SVC: ID=3 ADDR=10.96.50.104:80/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=ClusterIP+non-routable
SVC: ID=3 ADDR=10.96.50.104:80/TCP SLOT=2 BEID=2 COUNT=0 QCOUNT=0 FLAGS=ClusterIP+non-routable
SVC: ID=4 ADDR=172.16.1.1:80/TCP SLOT=0 LBALG=random AFFTimeout=0 COUNT=2 QCOUNT=0 FLAGS=LoadBalancer
SVC: ID=4 ADDR=172.16.1.1:80/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=LoadBalancer
SVC: ID=4 ADDR=172.16.1.1:80/TCP SLOT=2 BEID=2 COUNT=0 QCOUNT=0 FLAGS=LoadBalancer
-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: "2022-09-13T11:11:26Z"
  name: echo
  namespace: test
  resourceVersion: "741"
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer:
    ingress:
    - ip: 172.16.1.1

-- endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  annotations:
  creationTimestamp: "2022-09-13T11:11:26Z"
  generateName: echo-
  generation: 3
  labels:
    endpointslice.kubernetes.io/managed-by: endpointslice-controller.k8s.io
    kubernetes.io/service-name: echo
  name: echo-kvlm2
  namespace: test
  resourceVersion: "797"
  uid: d1f517f6-ab88-4c76-9bd0-4906a17cdd75
addressType: IPv4
endpoints:
- addresses:
  - 10.244.1.1
  nodeName: nodeport-worker
- addresses:
  - 10.244.1.2
  nodeName: nodeport-worker2
ports:
- name: http
  port: 80
  protocol: TCP
