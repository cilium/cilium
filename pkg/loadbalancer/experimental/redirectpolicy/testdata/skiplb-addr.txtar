# Test the handling of 'SkipRedirectFromBackend'. If this field is set in the
# LocalRedirectPolicy then the SkipLBMap should be populated accordingly to skip
# the load-balancing in datapath for packets originating from the backend.

hive start
db/initialized

### Case 1: 1) cookie, 2) pod 3) LRP

# Add the netns cookie info to the skiplb table
# This simulates the EndpointCreated() callback
# coming from the EndpointManager.
db/insert desired-skiplbmap pod-cookie.yaml

# Add pods, services and endpoints.
k8s/add pod.yaml lrp.yaml
db/cmp localredirectpolicies lrp.table
db/cmp services services.table
db/cmp frontends frontends.table
db/cmp desired-skiplbmap skiplbmap.table

# Compare LB maps
lb/maps-dump lbmaps.actual
* cmp lbmaps.actual maps-case1.expected

# Compare SkipLB map
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.expected

# Turn off the redirect. The SkipLB map entry should be removed.
cp lrp.yaml lrp-noredirect.yaml
replace 'skipRedirectFromBackend: true' 'skipRedirectFromBackend: false' lrp-noredirect.yaml
k8s/update lrp-noredirect.yaml

# Compare SkipLB map (should be empty now)
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.empty

# Cleanup
k8s/delete pod.yaml lrp.yaml
db/delete desired-skiplbmap pod-cookie.yaml

# Wait until empty
* db/empty frontends localredirectpolicies services desired-skiplbmap
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.empty
lb/maps-dump lbmaps.actual
* cmp lbmaps.actual maps.empty

### Case 2: 1) pod & LRP 2) cookie

# Add pod and LRP, but no cookie.
k8s/add pod.yaml lrp.yaml
db/cmp localredirectpolicies lrp.table
db/cmp services services.table
db/cmp frontends frontends.table

# The desired-skiplbmap now has the pod&lrp info, but there is no cookie
# and it has not been reconciled or marked pending.
db/cmp desired-skiplbmap skiplbmap-nocookie.table

# Compare LB maps
lb/maps-dump lbmaps.actual
* cmp lbmaps.actual maps-case2.expected

# Compare SkipLB map (should be empty since no cookie yet)
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.empty

# Add the cookie. Here we rely on the [desiredSkipLBMap] struct being
# trivially serializable, allowing us to manipulate it.
db/get desired-skiplbmap test/lrp-pod -f yaml -o skiplbmap.yaml
cat skiplbmap.yaml
replace 'netnscookie: null' 'netnscookie: 12345' skiplbmap.yaml
replace 'kind: \"\"' 'kind: Pending' skiplbmap.yaml
db/insert desired-skiplbmap skiplbmap.yaml

# Should have the SkipLBMap entry again
db/cmp desired-skiplbmap skiplbmap.table
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.expected

# Cleanup
k8s/delete pod.yaml lrp.yaml
db/delete desired-skiplbmap pod-cookie.yaml

# Wait until empty
* db/empty frontends localredirectpolicies services desired-skiplbmap
db/show desired-skiplbmap
skiplbmap skiplbmap.actual
* cmp skiplbmap.actual skiplbmap.empty
lb/maps-dump lbmaps.actual
* cmp lbmaps.actual maps.empty

-- pod-cookie.yaml --
podnamespacedname: test/lrp-pod
netnscookie: 12345

-- lrp.table --
Name           Type     FrontendType                Frontends
test/lrp-addr  address  addr-single-port            169.254.169.255:8080 TCP

-- skiplbmap.table --
Pod            SkipRedirects                                 NetnsCookie  Status
test/lrp-pod   169.254.169.255:8080/TCP                      12345        Done

-- skiplbmap-nocookie.table --
Pod            SkipRedirects                                 NetnsCookie  Status
test/lrp-pod   169.254.169.255:8080/TCP                      <unset>

-- skiplbmap.expected --
COOKIE=12345 IP=169.254.169.255 PORT=8080
-- skiplbmap.empty --
-- services-before.table --
Name                          Source
test/echo                     k8s   

-- services.table --
Name                          Source
test/lrp-addr:local-redirect  k8s

-- frontends.table --
Address                    Type          ServiceName                    PortName   Backends              RedirectTo                    Status
169.254.169.255:8080/TCP   LocalRedirect test/lrp-addr:local-redirect              10.244.2.1:80/TCP                                   Done

-- maps.empty --

-- maps-case1.expected --
BE: ID=1 ADDR=10.244.2.1:80/TCP STATE=active
REV: ID=1 ADDR=169.254.169.255:8080
SVC: ID=1 ADDR=169.254.169.255:8080/TCP SLOT=0 LBALG=undef AFFTimeout=0 COUNT=1 QCOUNT=0 FLAGS=LocalRedirect
SVC: ID=1 ADDR=169.254.169.255:8080/TCP SLOT=1 BEID=1 COUNT=0 QCOUNT=0 FLAGS=LocalRedirect
-- maps-case2.expected --
BE: ID=2 ADDR=10.244.2.1:80/TCP STATE=active
REV: ID=2 ADDR=169.254.169.255:8080
SVC: ID=2 ADDR=169.254.169.255:8080/TCP SLOT=0 LBALG=undef AFFTimeout=0 COUNT=1 QCOUNT=0 FLAGS=LocalRedirect
SVC: ID=2 ADDR=169.254.169.255:8080/TCP SLOT=1 BEID=2 COUNT=0 QCOUNT=0 FLAGS=LocalRedirect
-- lrp.yaml --
apiVersion: "cilium.io/v2"
kind: CiliumLocalRedirectPolicy
metadata:
  name: "lrp-addr"
  namespace: "test"
spec:
  skipRedirectFromBackend: true
  redirectFrontend:
    addressMatcher:
      ip: "169.254.169.255"
      toPorts:
        - port: "8080"
          protocol: TCP
  redirectBackend:
    localEndpointSelector:
      matchLabels:
        app: proxy
    toPorts:
      - port: "80"
        protocol: TCP

-- pod.yaml --
apiVersion: v1
kind: Pod
metadata:
  name: lrp-pod
  namespace: test
  labels:
    app: proxy
spec:
  containers:
    - name: lrp-pod
      image: nginx
      ports:
        - containerPort: 80
          name: tcp
          protocol: TCP
status:
  hostIP: 172.19.0.3
  hostIPs:
  - ip: 172.19.0.3
  phase: Running
  podIP: 10.244.2.1
  podIPs:
  - ip: 10.244.2.1
  - ip: 2002::2
  qosClass: BestEffort
  startTime: "2024-07-10T16:20:42Z"
  conditions:
  - lastProbeTime: null
    lastTransitionTime: '2019-07-08T09:41:59Z'
    status: 'True'
    type: Ready

