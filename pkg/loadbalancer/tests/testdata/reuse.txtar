#! --enable-experimental-lb --lb-test-fault-probability=0.0
#
# Test the reuse of a ClusterIP. Validates that we process the changes
# in services in the right order even though the reflector is batching
# events.
#
# This tests for the regression where the events were processed
# in the wrong order, e.g. the creation of a new service before the deletion
# of the old service, leading to "frontend already owned by another service"
# error. Triggered easily with stress.sh:
#
#  === NAME  TestScript
#    logger.go:256: ... msg="Failure processing services" error="frontend already owned by another service ..."
#    ...
#    scripttest.go:259: FAIL: testdata/reuse.txtar:48: db/cmp frontends frontends2.table: table mismatch:
#      Address              ServiceName
#      + 10.96.50.104:80/TCP  test/echo2
#

hive start
db/initialized

# Make a copy of service.yaml with a different name
cp service.yaml service2.yaml
sed 'name: echo' 'name: echo2' service2.yaml

# Add the service and then endpoints
k8s/add service.yaml
db/cmp services services.table
db/cmp frontends frontends.table

# In quick succession delete and create another service that reuses the clusterIP
# and revert.
k8s/delete service.yaml
k8s/add service2.yaml
k8s/update service2.yaml
k8s/delete service2.yaml
k8s/add service.yaml
k8s/update service.yaml

k8s/delete service.yaml
k8s/add service2.yaml
k8s/update service2.yaml
k8s/delete service2.yaml
k8s/add service.yaml
k8s/update service.yaml

k8s/delete service.yaml
k8s/add service2.yaml
k8s/update service2.yaml
k8s/delete service2.yaml
k8s/add service.yaml
k8s/update service.yaml

# One last time to end up with test/echo2.
k8s/delete service.yaml
k8s/add service2.yaml
db/cmp frontends frontends2.table

#####

-- services.table --
Name
test/echo

-- frontends.table --
Address              ServiceName
10.96.50.104:80/TCP  test/echo

-- frontends2.table --
Address              ServiceName
10.96.50.104:80/TCP  test/echo2

-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  name: echo
  namespace: test
spec:
  clusterIP: 10.96.50.104
  clusterIPs:
  - 10.96.50.104
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  type: ClusterIP

