# Test handling of headless services

# Start the hive and wait for tables to be synchronized before adding k8s objects.
hive start
db/initialized

# Set up the services and endpoints
k8s/add service.yaml endpointslice.yaml
db/cmp services services.table

# Add the CiliumEnvoyConfig and wait for it to be ingested.
k8s/add cec.yaml
db/cmp ciliumenvoyconfigs cec.table
db/cmp envoy-resources envoy-resources.table

# Check that right updates towards Envoy happened.
envoy envoy.out
* cmp envoy.out envoy1.expected

# Test the processing other way around, e.g. CEC exists before
# the service. Start by dropping the backends.
k8s/delete endpointslice.yaml

# Backends towards Envoy should be dropped.
envoy envoy.out
* cmp envoy.out envoy2.expected

# Drop the service. No changes towards envoy as the load assignments
# do not change.
k8s/delete service.yaml

# Wait until empty
* db/empty services

# Add back the service and endpoints
k8s/add service.yaml endpointslice.yaml
db/cmp services services.table

# Check again that updates happened.
envoy envoy.out
* cmp envoy.out envoy3.expected

# Adding an unrelated service does not trigger updates.
k8s/add unrelated_service.yaml unrelated_endpointslice.yaml

# No updates should happen.
envoy envoy.out
* cmp envoy.out envoy3.expected

k8s/delete unrelated_service.yaml unrelated_endpointslice.yaml

# Remove the CEC
k8s/delete cec.yaml

# Check tables, the redirect should be gone and ciliumenvoyconfigs should be empty.
* db/empty ciliumenvoyconfigs
db/cmp services services.table

# The listener should now be deleted.
envoy envoy.out
* cmp envoy.out envoy4.expected

# ---------------------------------------------

-- services.table --
Name       Source   PortNames  TrafficPolicy  Flags
test/echo  k8s      http=80    Cluster

-- cec.table --
Name                    BackendServices  Services
test/envoy-lb-listener  test/echo

-- envoy-resources.table --
Name                     Status
test/envoy-lb-listener   Done 

-- cec.yaml --
apiVersion: cilium.io/v2
kind: CiliumEnvoyConfig
metadata:
  name: envoy-lb-listener
  namespace: test
spec:
  backendServices:
    - name: echo
      namespace: test
      number:
      - "80"
  resources:
    - "@type": type.googleapis.com/envoy.config.listener.v3.Listener
      name: envoy-lb-listener

-- service.yaml --
apiVersion: v1
kind: Service
metadata:
  name: echo
  namespace: test
  uid: a49fe99c-3564-4754-acc4-780f2331a49b
  annotations:
    service.kubernetes.io/headless: "true"
spec:
  clusterIP: "none"
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: echo
  type: NodePort
status:
  loadBalancer: {}

-- unrelated_service.yaml --
apiVersion: v1
kind: Service
metadata:
  name: unrelated
  namespace: test
  uid: b49fe99c-3564-4754-acc4-780f2331a49b
spec:
  clusterIP: 1.2.3.4
  clusterIPs:
  - 1.2.3.4
  ports:
  - name: http
    nodePort: 30781
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    name: unrelated
  type: ClusterIP

-- endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  labels:
    kubernetes.io/service-name: echo
  name: echo-eps1
  namespace: test
  uid: d1f517f6-ab88-4c76-9bd0-4906a17cdd75
addressType: IPv4
endpoints:
- addresses:
  - 10.244.1.1
  conditions:
    ready: true
    serving: true
    terminating: false
  nodeName: nodeport-worker
ports:
- name: http
  port: 8080
  protocol: TCP

-- unrelated_endpointslice.yaml --
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  labels:
    kubernetes.io/service-name: unrelated
  name: unrelated-eps1
  namespace: test
  uid: d1f517f6-ab88-4c76-9bd0-4906a17cdd75
addressType: IPv4
endpoints:
- addresses:
  - 10.244.2.1
  conditions:
    ready: true
    serving: true
    terminating: false
  nodeName: nodeport-worker
ports:
- name: http
  port: 8080
  protocol: TCP

-- envoy1.expected --
policy-trigger-count: 1
update: listeners=test/envoy-lb-listener/envoy-lb-listener/1000 endpoints=test/echo:80=10.244.1.1:8080
delete: listeners=<nil> endpoints=<nil>
-- envoy2.expected --
policy-trigger-count: 1
update: listeners=test/envoy-lb-listener/envoy-lb-listener/1000 endpoints=
delete: listeners=<nil> endpoints=<nil>
-- envoy3.expected --
policy-trigger-count: 1
update: listeners=test/envoy-lb-listener/envoy-lb-listener/1000 endpoints=test/echo:80=10.244.1.1:8080
delete: listeners=<nil> endpoints=<nil>
-- envoy4.expected --
policy-trigger-count: 2
update: listeners=test/envoy-lb-listener/envoy-lb-listener/1000 endpoints=test/echo:80=10.244.1.1:8080
delete: listeners=test/envoy-lb-listener/envoy-lb-listener/1000 endpoints=test/echo:80=10.244.1.1:8080
