//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package types

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PolicyEntry) DeepEqual(other *PolicyEntry) bool {
	if other == nil {
		return false
	}

	if (in.Authentication == nil) != (other.Authentication == nil) {
		return false
	} else if in.Authentication != nil {
		if !in.Authentication.DeepEqual(other.Authentication) {
			return false
		}
	}

	if in.Log != other.Log {
		return false
	}

	if !in.Subject.DeepEqual(&other.Subject) {
		return false
	}

	if ((in.L3 != nil) && (other.L3 != nil)) || ((in.L3 == nil) != (other.L3 == nil)) {
		in, other := &in.L3, &other.L3
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.Requirements != nil) && (other.Requirements != nil)) || ((in.Requirements == nil) != (other.Requirements == nil)) {
		in, other := &in.Requirements, &other.Requirements
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	if ((in.L4 != nil) && (other.L4 != nil)) || ((in.L4 == nil) != (other.L4 == nil)) {
		in, other := &in.L4, &other.L4
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if ((in.Labels != nil) && (other.Labels != nil)) || ((in.Labels == nil) != (other.Labels == nil)) {
		in, other := &in.Labels, &other.Labels
		if other == nil || !in.DeepEqual(other) {
			return false
		}
	}

	if in.DefaultDeny != other.DefaultDeny {
		return false
	}
	if in.Deny != other.Deny {
		return false
	}
	if in.Ingress != other.Ingress {
		return false
	}
	if in.Node != other.Node {
		return false
	}

	return true
}
