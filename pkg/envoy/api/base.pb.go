// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/base.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Envoy supports :ref:`upstream priority routing
// <arch_overview_http_routing_priority>` both at the route and the virtual
// cluster level. The current priority implementation uses different connection
// pool and circuit breaking settings for each priority level. This means that
// even for HTTP/2 requests, two physical connections will be used to an
// upstream host. In the future Envoy will likely support true HTTP/2 priority
// over a single upstream connection.
type RoutingPriority int32

const (
	RoutingPriority_DEFAULT RoutingPriority = 0
	RoutingPriority_HIGH    RoutingPriority = 1
)

var RoutingPriority_name = map[int32]string{
	0: "DEFAULT",
	1: "HIGH",
}
var RoutingPriority_value = map[string]int32{
	"DEFAULT": 0,
	"HIGH":    1,
}

func (x RoutingPriority) String() string {
	return proto.EnumName(RoutingPriority_name, int32(x))
}
func (RoutingPriority) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

// HTTP request method.
type RequestMethod int32

const (
	RequestMethod_METHOD_UNSPECIFIED RequestMethod = 0
	RequestMethod_GET                RequestMethod = 1
	RequestMethod_HEAD               RequestMethod = 2
	RequestMethod_POST               RequestMethod = 3
	RequestMethod_PUT                RequestMethod = 4
	RequestMethod_DELETE             RequestMethod = 5
	RequestMethod_CONNECT            RequestMethod = 6
	RequestMethod_OPTIONS            RequestMethod = 7
	RequestMethod_TRACE              RequestMethod = 8
)

var RequestMethod_name = map[int32]string{
	0: "METHOD_UNSPECIFIED",
	1: "GET",
	2: "HEAD",
	3: "POST",
	4: "PUT",
	5: "DELETE",
	6: "CONNECT",
	7: "OPTIONS",
	8: "TRACE",
}
var RequestMethod_value = map[string]int32{
	"METHOD_UNSPECIFIED": 0,
	"GET":                1,
	"HEAD":               2,
	"POST":               3,
	"PUT":                4,
	"DELETE":             5,
	"CONNECT":            6,
	"OPTIONS":            7,
	"TRACE":              8,
}

func (x RequestMethod) String() string {
	return proto.EnumName(RequestMethod_name, int32(x))
}
func (RequestMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

// APIs may be fetched via either REST or gRPC.
type ApiConfigSource_ApiType int32

const (
	// REST-JSON legacy corresponds to the v1 API.
	ApiConfigSource_REST_LEGACY ApiConfigSource_ApiType = 0
	// REST-JSON v2 API. The `canonical JSON encoding
	// <https://developers.google.com/protocol-buffers/docs/proto3#json>`_ for
	// the v2 protos is used.
	ApiConfigSource_REST ApiConfigSource_ApiType = 1
	// gRPC v2 API.
	ApiConfigSource_GRPC ApiConfigSource_ApiType = 2
)

var ApiConfigSource_ApiType_name = map[int32]string{
	0: "REST_LEGACY",
	1: "REST",
	2: "GRPC",
}
var ApiConfigSource_ApiType_value = map[string]int32{
	"REST_LEGACY": 0,
	"REST":        1,
	"GRPC":        2,
}

func (x ApiConfigSource_ApiType) String() string {
	return proto.EnumName(ApiConfigSource_ApiType_name, int32(x))
}
func (ApiConfigSource_ApiType) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{7, 0} }

// Identifies location of where either Envoy runs or where upstream hosts run.
type Locality struct {
	// Region this :ref:`zone <envoy_api_field_Locality.zone>` belongs to.
	Region string `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	// `Availability Zone (AZ)
	// <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html>`_
	// on AWS, `Zone <https://cloud.google.com/compute/docs/regions-zones/>`_ on
	// GCP, etc.
	Zone string `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
	// When used for locality of upstream hosts, this field further splits zone
	// into smaller chunks of sub-zones so they can be load balanced
	// independently.
	SubZone string `protobuf:"bytes,3,opt,name=sub_zone,json=subZone" json:"sub_zone,omitempty"`
}

func (m *Locality) Reset()                    { *m = Locality{} }
func (m *Locality) String() string            { return proto.CompactTextString(m) }
func (*Locality) ProtoMessage()               {}
func (*Locality) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *Locality) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Locality) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *Locality) GetSubZone() string {
	if m != nil {
		return m.SubZone
	}
	return ""
}

// Identifies a specific Envoy instance. The node identifier is presented to the
// management server, which may use this identifier to distinguish per Envoy
// configuration for serving.
type Node struct {
	// An opaque node identifier for the Envoy node.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The cluster that the Envoy node belongs to.
	Cluster string `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
	// Opaque metadata extending the node identifier. Envoy will pass this
	// directly to the management server.
	Metadata *google_protobuf4.Struct `protobuf:"bytes,3,opt,name=metadata" json:"metadata,omitempty"`
	// Locality specifying where the Envoy instance is running.
	Locality *Locality `protobuf:"bytes,4,opt,name=locality" json:"locality,omitempty"`
	// This is motivated by informing a management server during canary which
	// version of Envoy is being tested in a heterogeneous fleet. This will be set
	// by Envoy in management server RPCs.
	BuildVersion string `protobuf:"bytes,5,opt,name=build_version,json=buildVersion" json:"build_version,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *Node) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Node) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Node) GetMetadata() *google_protobuf4.Struct {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Node) GetLocality() *Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *Node) GetBuildVersion() string {
	if m != nil {
		return m.BuildVersion
	}
	return ""
}

// Upstream host identifier.
type Endpoint struct {
	Address *Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Endpoint) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// Metadata provides additional inputs to filters based on matched listeners,
// filter chains, routes and endpoints. It is structured as a map from filter
// name (in reverse DNS format) to metadata specific to the filter. Metadata
// key-values for a filter are merged as connection and request handling occurs,
// with later values for the same key overriding earlier values.
//
// An example use of metadata is providing additional values to
// http_connection_manager in the envoy.http_connection_manager.access_log
// namespace.
//
// For load balancing, Metadata provides a means to subset cluster endpoints.
// Endpoints have a Metadata object associated and routes contain a Metadata
// object to match against. There are some well defined metadata used today for
// this purpose:
//
// * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
//   endpoint and is also used during header processing
//   (x-envoy-upstream-canary) and for stats purposes.
type Metadata struct {
	// Key is the reverse DNS filter name, e.g. com.acme.widget. The envoy.*
	// namespace is reserved for Envoy's built-in filters.
	FilterMetadata map[string]*google_protobuf4.Struct `protobuf:"bytes,1,rep,name=filter_metadata,json=filterMetadata" json:"filter_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Metadata) GetFilterMetadata() map[string]*google_protobuf4.Struct {
	if m != nil {
		return m.FilterMetadata
	}
	return nil
}

// Runtime derived uint32 with a default when not specified.
type RuntimeUInt32 struct {
	// Default value if runtime value is not available.
	DefaultValue uint32 `protobuf:"varint,2,opt,name=default_value,json=defaultValue" json:"default_value,omitempty"`
	// Runtime key to get value for comparison. This value is used if defined.
	RuntimeKey string `protobuf:"bytes,3,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RuntimeUInt32) Reset()                    { *m = RuntimeUInt32{} }
func (m *RuntimeUInt32) String() string            { return proto.CompactTextString(m) }
func (*RuntimeUInt32) ProtoMessage()               {}
func (*RuntimeUInt32) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *RuntimeUInt32) GetDefaultValue() uint32 {
	if m != nil {
		return m.DefaultValue
	}
	return 0
}

func (m *RuntimeUInt32) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

// Header name/value pair.
type HeaderValue struct {
	// Header name.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// Header value.
	//
	// The same :ref:`format specifier <config_access_log_format>` as used for
	// :ref:`HTTP access logging <config_access_log>` applies here, however
	// unknown header values are replaced with the empty string instead of `-`.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HeaderValue) Reset()                    { *m = HeaderValue{} }
func (m *HeaderValue) String() string            { return proto.CompactTextString(m) }
func (*HeaderValue) ProtoMessage()               {}
func (*HeaderValue) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *HeaderValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HeaderValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Header name/value pair plus option to control append behavior.
type HeaderValueOption struct {
	// Header name/value pair that this option applies to.
	Header *HeaderValue `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Should the value be appended? If true (default), the value is appended to
	// existing values.
	Append *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=append" json:"append,omitempty"`
}

func (m *HeaderValueOption) Reset()                    { *m = HeaderValueOption{} }
func (m *HeaderValueOption) String() string            { return proto.CompactTextString(m) }
func (*HeaderValueOption) ProtoMessage()               {}
func (*HeaderValueOption) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *HeaderValueOption) GetHeader() *HeaderValue {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HeaderValueOption) GetAppend() *google_protobuf.BoolValue {
	if m != nil {
		return m.Append
	}
	return nil
}

// API configuration source. This identifies the API type and cluster that Envoy
// will use to fetch an xDS API.
type ApiConfigSource struct {
	ApiType ApiConfigSource_ApiType `protobuf:"varint,1,opt,name=api_type,json=apiType,enum=envoy.api.v2.ApiConfigSource_ApiType" json:"api_type,omitempty"`
	// Multiple cluster names may be provided. If > 1 cluster is defined, clusters
	// will be cycled through if any kind of failure occurs.
	ClusterName []string `protobuf:"bytes,2,rep,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// For REST APIs, the delay between successive polls.
	RefreshDelay *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=refresh_delay,json=refreshDelay" json:"refresh_delay,omitempty"`
}

func (m *ApiConfigSource) Reset()                    { *m = ApiConfigSource{} }
func (m *ApiConfigSource) String() string            { return proto.CompactTextString(m) }
func (*ApiConfigSource) ProtoMessage()               {}
func (*ApiConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *ApiConfigSource) GetApiType() ApiConfigSource_ApiType {
	if m != nil {
		return m.ApiType
	}
	return ApiConfigSource_REST_LEGACY
}

func (m *ApiConfigSource) GetClusterName() []string {
	if m != nil {
		return m.ClusterName
	}
	return nil
}

func (m *ApiConfigSource) GetRefreshDelay() *google_protobuf2.Duration {
	if m != nil {
		return m.RefreshDelay
	}
	return nil
}

// Aggregated Discovery Service (ADS) options. This is currently empty, but when
// set in :ref:`ConfigSource <envoy_api_msg_ConfigSource>` can be used to
// specify that ADS is to be used.
type AggregatedConfigSource struct {
}

func (m *AggregatedConfigSource) Reset()                    { *m = AggregatedConfigSource{} }
func (m *AggregatedConfigSource) String() string            { return proto.CompactTextString(m) }
func (*AggregatedConfigSource) ProtoMessage()               {}
func (*AggregatedConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

// Configuration for :ref:`listeners <config_listeners>`, :ref:`clusters
// <config_cluster_manager_cluster>`, :ref:`routes
// <config_http_conn_man_route_table>`, :ref:`endpoints
// <arch_overview_service_discovery>` etc. may either be sourced from the
// filesystem or from an xDS API source. Filesystem configs are watched with
// inotify for updates.
type ConfigSource struct {
	// Types that are valid to be assigned to ConfigSourceSpecifier:
	//	*ConfigSource_Path
	//	*ConfigSource_ApiConfigSource
	//	*ConfigSource_Ads
	ConfigSourceSpecifier isConfigSource_ConfigSourceSpecifier `protobuf_oneof:"config_source_specifier"`
}

func (m *ConfigSource) Reset()                    { *m = ConfigSource{} }
func (m *ConfigSource) String() string            { return proto.CompactTextString(m) }
func (*ConfigSource) ProtoMessage()               {}
func (*ConfigSource) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

type isConfigSource_ConfigSourceSpecifier interface {
	isConfigSource_ConfigSourceSpecifier()
}

type ConfigSource_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,oneof"`
}
type ConfigSource_ApiConfigSource struct {
	ApiConfigSource *ApiConfigSource `protobuf:"bytes,2,opt,name=api_config_source,json=apiConfigSource,oneof"`
}
type ConfigSource_Ads struct {
	Ads *AggregatedConfigSource `protobuf:"bytes,3,opt,name=ads,oneof"`
}

func (*ConfigSource_Path) isConfigSource_ConfigSourceSpecifier()            {}
func (*ConfigSource_ApiConfigSource) isConfigSource_ConfigSourceSpecifier() {}
func (*ConfigSource_Ads) isConfigSource_ConfigSourceSpecifier()             {}

func (m *ConfigSource) GetConfigSourceSpecifier() isConfigSource_ConfigSourceSpecifier {
	if m != nil {
		return m.ConfigSourceSpecifier
	}
	return nil
}

func (m *ConfigSource) GetPath() string {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_Path); ok {
		return x.Path
	}
	return ""
}

func (m *ConfigSource) GetApiConfigSource() *ApiConfigSource {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_ApiConfigSource); ok {
		return x.ApiConfigSource
	}
	return nil
}

func (m *ConfigSource) GetAds() *AggregatedConfigSource {
	if x, ok := m.GetConfigSourceSpecifier().(*ConfigSource_Ads); ok {
		return x.Ads
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ConfigSource) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ConfigSource_OneofMarshaler, _ConfigSource_OneofUnmarshaler, _ConfigSource_OneofSizer, []interface{}{
		(*ConfigSource_Path)(nil),
		(*ConfigSource_ApiConfigSource)(nil),
		(*ConfigSource_Ads)(nil),
	}
}

func _ConfigSource_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ConfigSource)
	// config_source_specifier
	switch x := m.ConfigSourceSpecifier.(type) {
	case *ConfigSource_Path:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *ConfigSource_ApiConfigSource:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiConfigSource); err != nil {
			return err
		}
	case *ConfigSource_Ads:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ads); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ConfigSource.ConfigSourceSpecifier has unexpected type %T", x)
	}
	return nil
}

func _ConfigSource_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ConfigSource)
	switch tag {
	case 1: // config_source_specifier.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ConfigSourceSpecifier = &ConfigSource_Path{x}
		return true, err
	case 2: // config_source_specifier.api_config_source
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ApiConfigSource)
		err := b.DecodeMessage(msg)
		m.ConfigSourceSpecifier = &ConfigSource_ApiConfigSource{msg}
		return true, err
	case 3: // config_source_specifier.ads
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AggregatedConfigSource)
		err := b.DecodeMessage(msg)
		m.ConfigSourceSpecifier = &ConfigSource_Ads{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ConfigSource_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ConfigSource)
	// config_source_specifier
	switch x := m.ConfigSourceSpecifier.(type) {
	case *ConfigSource_Path:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *ConfigSource_ApiConfigSource:
		s := proto.Size(x.ApiConfigSource)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ConfigSource_Ads:
		s := proto.Size(x.Ads)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Configuration for transport socket in :ref:`listeners <config_listeners>` and
// :ref:`clusters <config_cluster_manager_cluster>`. If the configuration is
// empty, a default transport socket implementation and configuration will be
// chosen based on the platform and existence of tls_context.
type TransportSocket struct {
	// The name of the transport socket to instantiate. The name must match a supported transport
	// socket implementation.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Implementation specific configuration which depends on the implementation being instantiated.
	// See the supported transport socket implementations for further documentation.
	Config *google_protobuf4.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *TransportSocket) Reset()                    { *m = TransportSocket{} }
func (m *TransportSocket) String() string            { return proto.CompactTextString(m) }
func (*TransportSocket) ProtoMessage()               {}
func (*TransportSocket) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *TransportSocket) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TransportSocket) GetConfig() *google_protobuf4.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*Locality)(nil), "envoy.api.v2.Locality")
	proto.RegisterType((*Node)(nil), "envoy.api.v2.Node")
	proto.RegisterType((*Endpoint)(nil), "envoy.api.v2.Endpoint")
	proto.RegisterType((*Metadata)(nil), "envoy.api.v2.Metadata")
	proto.RegisterType((*RuntimeUInt32)(nil), "envoy.api.v2.RuntimeUInt32")
	proto.RegisterType((*HeaderValue)(nil), "envoy.api.v2.HeaderValue")
	proto.RegisterType((*HeaderValueOption)(nil), "envoy.api.v2.HeaderValueOption")
	proto.RegisterType((*ApiConfigSource)(nil), "envoy.api.v2.ApiConfigSource")
	proto.RegisterType((*AggregatedConfigSource)(nil), "envoy.api.v2.AggregatedConfigSource")
	proto.RegisterType((*ConfigSource)(nil), "envoy.api.v2.ConfigSource")
	proto.RegisterType((*TransportSocket)(nil), "envoy.api.v2.TransportSocket")
	proto.RegisterEnum("envoy.api.v2.RoutingPriority", RoutingPriority_name, RoutingPriority_value)
	proto.RegisterEnum("envoy.api.v2.RequestMethod", RequestMethod_name, RequestMethod_value)
	proto.RegisterEnum("envoy.api.v2.ApiConfigSource_ApiType", ApiConfigSource_ApiType_name, ApiConfigSource_ApiType_value)
}

func init() { proto.RegisterFile("api/base.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0xdb, 0xb6,
	0x17, 0x8f, 0x2c, 0x7f, 0xe5, 0xd8, 0x89, 0x55, 0xfe, 0xfb, 0xcf, 0x17, 0xd6, 0x21, 0x50, 0x37,
	0x20, 0x08, 0x50, 0x19, 0x73, 0x30, 0xa0, 0xd8, 0x80, 0x61, 0x8e, 0xad, 0xc4, 0x41, 0x13, 0xdb,
	0x93, 0x95, 0x02, 0xcb, 0x8d, 0x46, 0x5b, 0xb4, 0x43, 0x54, 0x11, 0x35, 0x8a, 0xca, 0xe0, 0x5e,
	0xec, 0x21, 0xf6, 0x34, 0xc3, 0x76, 0xd3, 0x17, 0xd8, 0xdd, 0x5e, 0xa2, 0xb7, 0x7b, 0x82, 0x81,
	0x14, 0x9d, 0xd9, 0x4e, 0xd7, 0xdd, 0x9d, 0x8f, 0xdf, 0x39, 0x3c, 0xbf, 0xdf, 0x21, 0x09, 0xdb,
	0x38, 0xa1, 0xcd, 0x31, 0x4e, 0x89, 0x93, 0x70, 0x26, 0x18, 0xaa, 0x93, 0xf8, 0x9e, 0xcd, 0x1d,
	0x9c, 0x50, 0xe7, 0xbe, 0x75, 0xf0, 0x44, 0x66, 0x71, 0x18, 0x72, 0x92, 0xa6, 0x39, 0xe0, 0xe0,
	0xd3, 0x19, 0x63, 0xb3, 0x88, 0x34, 0x95, 0x37, 0xce, 0xa6, 0xcd, 0x30, 0xe3, 0x58, 0x50, 0x16,
	0xeb, 0xfc, 0x27, 0xeb, 0xf9, 0x54, 0xf0, 0x6c, 0x22, 0xfe, 0xad, 0xfa, 0x27, 0x8e, 0x93, 0x84,
	0xf0, 0x45, 0xf7, 0xdd, 0x7b, 0x1c, 0xd1, 0x10, 0x0b, 0xd2, 0x5c, 0x18, 0x79, 0xc2, 0xfe, 0x0e,
	0xaa, 0x97, 0x6c, 0x82, 0x23, 0x2a, 0xe6, 0x68, 0x07, 0xca, 0x9c, 0xcc, 0x28, 0x8b, 0xf7, 0x8c,
	0x43, 0xe3, 0x68, 0xd3, 0xd3, 0x1e, 0x42, 0x50, 0x7c, 0xcb, 0x62, 0xb2, 0x57, 0x50, 0x51, 0x65,
	0xa3, 0x7d, 0xa8, 0xa6, 0xd9, 0x38, 0x50, 0x71, 0x53, 0xc5, 0x2b, 0x69, 0x36, 0xbe, 0x61, 0x31,
	0xb1, 0xff, 0x34, 0xa0, 0xd8, 0x67, 0xa1, 0xc4, 0x14, 0x68, 0x98, 0xf7, 0x3a, 0xdd, 0xfc, 0xed,
	0xfd, 0x3b, 0xb3, 0xc8, 0x0b, 0x96, 0xe1, 0x15, 0x68, 0x88, 0x9e, 0x43, 0x65, 0x12, 0x65, 0xa9,
	0x20, 0x3c, 0xef, 0xba, 0x9c, 0x5f, 0x64, 0xd0, 0x09, 0x54, 0xef, 0x88, 0xc0, 0x21, 0x16, 0x58,
	0x9d, 0x51, 0x6b, 0xed, 0x3a, 0x39, 0x4f, 0x67, 0xc1, 0xd3, 0x19, 0x29, 0x15, 0xbc, 0x07, 0x20,
	0x6a, 0x41, 0x35, 0xd2, 0x84, 0xf6, 0x8a, 0xaa, 0x68, 0xc7, 0x59, 0xd6, 0xde, 0x59, 0xd0, 0xf5,
	0x1e, 0x70, 0xe8, 0x39, 0x6c, 0x8d, 0x33, 0x1a, 0x85, 0xc1, 0x3d, 0xe1, 0xa9, 0xe4, 0x5f, 0x52,
	0x8c, 0xea, 0x2a, 0xf8, 0x3a, 0x8f, 0xd9, 0x5f, 0x43, 0xd5, 0x8d, 0xc3, 0x84, 0xd1, 0x58, 0xa0,
	0x26, 0x54, 0xf4, 0xf6, 0x14, 0xbd, 0x5a, 0xeb, 0xff, 0xab, 0x67, 0xb4, 0xf3, 0xa4, 0xb7, 0x40,
	0xd9, 0xbf, 0x1b, 0x50, 0xbd, 0x5a, 0x8c, 0x38, 0x82, 0xc6, 0x94, 0x46, 0x82, 0xf0, 0xe0, 0x81,
	0x9e, 0x71, 0x68, 0x1e, 0xd5, 0x5a, 0xc7, 0xab, 0x5d, 0x16, 0x05, 0xce, 0x99, 0x42, 0x2f, 0x5c,
	0x37, 0x16, 0x7c, 0xee, 0x6d, 0x4f, 0x57, 0x82, 0x07, 0x37, 0xf0, 0xbf, 0x0f, 0xc0, 0x90, 0x05,
	0xe6, 0x1b, 0x32, 0xd7, 0x0b, 0x95, 0x26, 0x7a, 0x01, 0xa5, 0x7b, 0x1c, 0x65, 0xf9, 0x3a, 0x3f,
	0x22, 0x69, 0x8e, 0xfa, 0xaa, 0xf0, 0xd2, 0xb0, 0x7f, 0x80, 0x2d, 0x2f, 0x8b, 0x05, 0xbd, 0x23,
	0xd7, 0x17, 0xb1, 0x38, 0x69, 0x49, 0xc1, 0x42, 0x32, 0xc5, 0x59, 0x24, 0x82, 0x7f, 0x7a, 0x6d,
	0x79, 0x75, 0x1d, 0x7c, 0x2d, 0x63, 0xe8, 0x18, 0x6a, 0x3c, 0xaf, 0x0a, 0xe4, 0x08, 0xe6, 0xfa,
	0x9e, 0x41, 0x67, 0x5f, 0x91, 0xb9, 0xfd, 0x25, 0xd4, 0x7a, 0x04, 0x87, 0x84, 0xe7, 0xa5, 0x8f,
	0xa7, 0x7e, 0xba, 0x3c, 0xf5, 0xa6, 0x1e, 0xce, 0x7e, 0x0b, 0x4f, 0x96, 0xca, 0x06, 0x89, 0x7c,
	0x2f, 0xe8, 0x0b, 0x28, 0xdf, 0xaa, 0xa0, 0xde, 0xcd, 0xfe, 0xaa, 0xaa, 0x4b, 0x05, 0x9e, 0x06,
	0xa2, 0x16, 0x94, 0xe5, 0x73, 0x89, 0x43, 0x2d, 0xca, 0xc1, 0x23, 0x51, 0x4e, 0x19, 0x8b, 0x74,
	0x4d, 0x8e, 0xb4, 0xff, 0x32, 0xa0, 0xd1, 0x4e, 0x68, 0x87, 0xc5, 0x53, 0x3a, 0x1b, 0xb1, 0x8c,
	0x4f, 0x08, 0xfa, 0x16, 0xaa, 0x38, 0xa1, 0x81, 0x98, 0x27, 0x44, 0x1d, 0xbe, 0xdd, 0xfa, 0x7c,
	0xed, 0x62, 0xac, 0x16, 0x48, 0xdf, 0x9f, 0x27, 0xc4, 0xab, 0xe0, 0xdc, 0x40, 0x2f, 0xa0, 0xae,
	0xaf, 0x7f, 0x10, 0xe3, 0x3b, 0x49, 0xd7, 0x3c, 0xda, 0x3c, 0x05, 0xa9, 0x5a, 0xe9, 0x17, 0xa3,
	0x50, 0x35, 0xbc, 0x9a, 0xce, 0xf7, 0xf1, 0x1d, 0x41, 0xdf, 0xc0, 0x16, 0x27, 0x53, 0x4e, 0xd2,
	0xdb, 0x20, 0x24, 0x11, 0x9e, 0xeb, 0x77, 0xb2, 0xff, 0x68, 0xfe, 0xae, 0xfe, 0x4d, 0xbc, 0xba,
	0xc6, 0x77, 0x25, 0xdc, 0x76, 0xa0, 0xa2, 0x47, 0x40, 0x0d, 0xa8, 0x79, 0xee, 0xc8, 0x0f, 0x2e,
	0xdd, 0xf3, 0x76, 0xe7, 0x7b, 0x6b, 0x03, 0x55, 0xa1, 0x28, 0x03, 0x96, 0x21, 0xad, 0x73, 0x6f,
	0xd8, 0xb1, 0x0a, 0xf6, 0x1e, 0xec, 0xb4, 0x67, 0x33, 0x4e, 0x66, 0x58, 0x90, 0x70, 0x99, 0x89,
	0xfd, 0x87, 0x01, 0xf5, 0x15, 0x2d, 0x9e, 0x42, 0x31, 0xc1, 0xe2, 0x36, 0x5f, 0x62, 0x6f, 0xc3,
	0x53, 0x1e, 0x7a, 0x05, 0xf2, 0xef, 0x0b, 0x26, 0x0a, 0x19, 0xa4, 0x0a, 0xaa, 0x45, 0x7f, 0xf6,
	0x51, 0xa9, 0x7a, 0x1b, 0x5e, 0x03, 0xaf, 0xc9, 0xfd, 0x12, 0x4c, 0x1c, 0xa6, 0x9a, 0xf3, 0x67,
	0x6b, 0xe5, 0x1f, 0x1c, 0xb3, 0xb7, 0xe1, 0xc9, 0x92, 0xd3, 0x43, 0xd8, 0x5d, 0x19, 0x21, 0x48,
	0x13, 0x32, 0xa1, 0x53, 0x4a, 0x38, 0x2a, 0xfd, 0xfa, 0xfe, 0x9d, 0x69, 0xd8, 0x18, 0x1a, 0x3e,
	0xc7, 0x71, 0x9a, 0x30, 0x2e, 0x46, 0x6c, 0xf2, 0x86, 0x08, 0xf4, 0x0c, 0x8a, 0x6a, 0x27, 0x8f,
	0x7e, 0x34, 0x15, 0x46, 0x4d, 0x28, 0xe7, 0x3d, 0xff, 0xeb, 0x65, 0x69, 0xd8, 0xf1, 0x11, 0x34,
	0x3c, 0x96, 0x09, 0x1a, 0xcf, 0x86, 0x9c, 0x32, 0x2e, 0x7f, 0xa2, 0x1a, 0x54, 0xba, 0xee, 0x59,
	0xfb, 0xfa, 0xd2, 0xcf, 0x17, 0xd0, 0xbb, 0x38, 0xef, 0x59, 0xc6, 0xf1, 0xcf, 0xb0, 0xe5, 0x91,
	0x1f, 0x33, 0x92, 0x8a, 0x2b, 0x22, 0x6e, 0x59, 0x88, 0x76, 0x00, 0x5d, 0xb9, 0x7e, 0x6f, 0xd0,
	0x0d, 0xae, 0xfb, 0xa3, 0xa1, 0xdb, 0xb9, 0x38, 0xbb, 0x70, 0xbb, 0xd6, 0x06, 0xaa, 0x80, 0x79,
	0xee, 0xea, 0x95, 0xf5, 0xdc, 0x76, 0xd7, 0x2a, 0x48, 0x6b, 0x38, 0x18, 0xf9, 0x96, 0x29, 0x93,
	0xc3, 0x6b, 0xdf, 0x2a, 0x22, 0x80, 0x72, 0xd7, 0xbd, 0x74, 0x7d, 0xd7, 0x2a, 0xc9, 0x13, 0x3b,
	0x83, 0x7e, 0xdf, 0xed, 0xf8, 0x56, 0x59, 0x3a, 0x83, 0xa1, 0x7f, 0x31, 0xe8, 0x8f, 0xac, 0x0a,
	0xda, 0x84, 0x92, 0xef, 0xb5, 0x3b, 0xae, 0x55, 0x3d, 0x2d, 0xdd, 0x98, 0x38, 0xa1, 0xe3, 0xb2,
	0x62, 0x72, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xa3, 0x32, 0x90, 0xdd, 0x06, 0x00,
	0x00,
}
