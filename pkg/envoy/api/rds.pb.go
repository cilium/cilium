// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/rds.proto

package envoy_api_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type VirtualHost_TlsRequirementType int32

const (
	// No TLS requirement for the virtual host.
	VirtualHost_NONE VirtualHost_TlsRequirementType = 0
	// External requests must use TLS. If a request is external and it is not
	// using TLS, a 302 redirect will be sent telling the client to use HTTPS.
	VirtualHost_EXTERNAL_ONLY VirtualHost_TlsRequirementType = 1
	// All requests must use TLS. If a request is not using TLS, a 302 redirect
	// will be sent telling the client to use HTTPS.
	VirtualHost_ALL VirtualHost_TlsRequirementType = 2
)

var VirtualHost_TlsRequirementType_name = map[int32]string{
	0: "NONE",
	1: "EXTERNAL_ONLY",
	2: "ALL",
}
var VirtualHost_TlsRequirementType_value = map[string]int32{
	"NONE":          0,
	"EXTERNAL_ONLY": 1,
	"ALL":           2,
}

func (x VirtualHost_TlsRequirementType) String() string {
	return proto.EnumName(VirtualHost_TlsRequirementType_name, int32(x))
}
func (VirtualHost_TlsRequirementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor11, []int{8, 0}
}

// Compared to the cluster field that specifies a single upstream cluster as the
// target of a request, the weighted_clusters option allows for specification of
// multiple upstream clusters along with weights that indicate the percentage of
// traffic to be forwarded to each cluster. The router selects an upstream
// cluster based on the weights.
type WeightedCluster struct {
	// Specifies one or more upstream clusters associated with the route.
	Clusters []*WeightedCluster_ClusterWeight `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	// Specifies the runtime key prefix that should be used to construct the
	// runtime keys associated with each cluster. When the runtime_key_prefix is
	// specified, the router will look for weights associated with each upstream
	// cluster under the key runtime_key_prefix + "." + cluster[i].name where
	// cluster[i] denotes an entry in the clusters array field. If the runtime
	// key for the cluster does not exist, the value specified in the
	// configuration file will be used as the default weight. See the runtime
	// documentation for how key names map to the underlying implementation.
	RuntimeKeyPrefix string `protobuf:"bytes,2,opt,name=runtime_key_prefix,json=runtimeKeyPrefix" json:"runtime_key_prefix,omitempty"`
}

func (m *WeightedCluster) Reset()                    { *m = WeightedCluster{} }
func (m *WeightedCluster) String() string            { return proto.CompactTextString(m) }
func (*WeightedCluster) ProtoMessage()               {}
func (*WeightedCluster) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *WeightedCluster) GetClusters() []*WeightedCluster_ClusterWeight {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *WeightedCluster) GetRuntimeKeyPrefix() string {
	if m != nil {
		return m.RuntimeKeyPrefix
	}
	return ""
}

type WeightedCluster_ClusterWeight struct {
	// Name of the upstream cluster. The cluster must exist in the cluster
	// manager configuration.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An integer between 0-100. When a request matches the route, the choice of
	// an upstream cluster is determined by its weight. The sum of weights
	// across all entries in the clusters array must add up to 100.
	Weight *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=weight" json:"weight,omitempty"`
	// Optional endpoint metadata match criteria. Only endpoints in the upstream
	// cluster with metadata matching that set in metadata_match will be
	// considered. The filter name should be specified as "envoy.lb".
	MetadataMatch *Metadata `protobuf:"bytes,3,opt,name=metadata_match,json=metadataMatch" json:"metadata_match,omitempty"`
}

func (m *WeightedCluster_ClusterWeight) Reset()         { *m = WeightedCluster_ClusterWeight{} }
func (m *WeightedCluster_ClusterWeight) String() string { return proto.CompactTextString(m) }
func (*WeightedCluster_ClusterWeight) ProtoMessage()    {}
func (*WeightedCluster_ClusterWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{0, 0}
}

func (m *WeightedCluster_ClusterWeight) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WeightedCluster_ClusterWeight) GetWeight() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetMetadataMatch() *Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

type RouteMatch struct {
	// A path specifier must be present.
	//
	// Types that are valid to be assigned to PathSpecifier:
	//	*RouteMatch_Prefix
	//	*RouteMatch_Path
	//	*RouteMatch_Regex
	PathSpecifier isRouteMatch_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Indicates that prefix/path matching should be case insensitive. The default
	// is true.
	CaseSensitive *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=case_sensitive,json=caseSensitive" json:"case_sensitive,omitempty"`
	// Indicates that the route should additionally match on a runtime key. An
	// integer between 0-100. Every time the route is considered for a match, a
	// random number between 0-99 is selected. If the number is <= the value found
	// in the key (checked first) or, if the key is not present, the default
	// value, the route is a match (assuming everything also about the route
	// matches).
	// A runtime route configuration can be used to roll out route changes in a
	// gradual manner without full code/config deploys. Refer to traffic shifting
	// docs for additional documentation.
	Runtime *RuntimeUInt32 `protobuf:"bytes,5,opt,name=runtime" json:"runtime,omitempty"`
	// Specifies a set of headers that the route should match on. The router will
	// check the request’s headers against all the specified headers in the route
	// config. A match will happen if all the headers in the route are present in
	// the request with the same values (or based on presence if the value field
	// is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
}

func (m *RouteMatch) Reset()                    { *m = RouteMatch{} }
func (m *RouteMatch) String() string            { return proto.CompactTextString(m) }
func (*RouteMatch) ProtoMessage()               {}
func (*RouteMatch) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

type isRouteMatch_PathSpecifier interface {
	isRouteMatch_PathSpecifier()
}

type RouteMatch_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,oneof"`
}
type RouteMatch_Path struct {
	Path string `protobuf:"bytes,2,opt,name=path,oneof"`
}
type RouteMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*RouteMatch_Prefix) isRouteMatch_PathSpecifier() {}
func (*RouteMatch_Path) isRouteMatch_PathSpecifier()   {}
func (*RouteMatch_Regex) isRouteMatch_PathSpecifier()  {}

func (m *RouteMatch) GetPathSpecifier() isRouteMatch_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *RouteMatch) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *RouteMatch) GetPath() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Path); ok {
		return x.Path
	}
	return ""
}

func (m *RouteMatch) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *RouteMatch) GetCaseSensitive() *google_protobuf.BoolValue {
	if m != nil {
		return m.CaseSensitive
	}
	return nil
}

func (m *RouteMatch) GetRuntime() *RuntimeUInt32 {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *RouteMatch) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteMatch_OneofMarshaler, _RouteMatch_OneofUnmarshaler, _RouteMatch_OneofSizer, []interface{}{
		(*RouteMatch_Prefix)(nil),
		(*RouteMatch_Path)(nil),
		(*RouteMatch_Regex)(nil),
	}
}

func _RouteMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteMatch)
	// path_specifier
	switch x := m.PathSpecifier.(type) {
	case *RouteMatch_Prefix:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *RouteMatch_Path:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *RouteMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("RouteMatch.PathSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteMatch)
	switch tag {
	case 1: // path_specifier.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Prefix{x}
		return true, err
	case 2: // path_specifier.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Path{x}
		return true, err
	case 3: // path_specifier.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _RouteMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteMatch)
	// path_specifier
	switch x := m.PathSpecifier.(type) {
	case *RouteMatch_Prefix:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *RouteMatch_Path:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *RouteMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RouteAction struct {
	// Types that are valid to be assigned to ClusterSpecifier:
	//	*RouteAction_Cluster
	//	*RouteAction_ClusterHeader
	//	*RouteAction_WeightedClusters
	ClusterSpecifier isRouteAction_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	// Optional endpoint metadata match criteria. Only endpoints in the upstream
	// cluster with metadata matching that set in metadata_match will be
	// considered. The filter name should be specified as "envoy.lb".
	MetadataMatch *Metadata `protobuf:"bytes,4,opt,name=metadata_match,json=metadataMatch" json:"metadata_match,omitempty"`
	// Indicates that during forwarding, the matched prefix (or path) should be
	// swapped with this value. This option allows application URLs to be rooted
	// at a different path from those exposed at the reverse proxy layer.
	PrefixRewrite string `protobuf:"bytes,5,opt,name=prefix_rewrite,json=prefixRewrite" json:"prefix_rewrite,omitempty"`
	// Types that are valid to be assigned to HostRewriteSpecifier:
	//	*RouteAction_HostRewrite
	//	*RouteAction_AutoHostRewrite
	HostRewriteSpecifier isRouteAction_HostRewriteSpecifier `protobuf_oneof:"host_rewrite_specifier"`
	// Specifies the timeout for the route. If not specified, the default is 15s.
	// Note that this timeout includes all retries. See also
	// x-envoy-upstream-rq-timeout-ms, x-envoy-upstream-rq-per-try-timeout-ms, and
	// the retry overview.
	Timeout *google_protobuf2.Duration `protobuf:"bytes,8,opt,name=timeout" json:"timeout,omitempty"`
	// Indicates that the route has a retry policy.
	RetryPolicy         *RouteAction_RetryPolicy         `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	RequestMirrorPolicy *RouteAction_RequestMirrorPolicy `protobuf:"bytes,10,opt,name=request_mirror_policy,json=requestMirrorPolicy" json:"request_mirror_policy,omitempty"`
	Priority            RoutingPriority                  `protobuf:"varint,11,opt,name=priority,enum=envoy.api.v2.RoutingPriority" json:"priority,omitempty"`
	// Specifies a set of headers that will be added to requests matching this
	// route.
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,12,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Specifies a set of rate limit configurations that could be applied to the
	// route.
	RateLimits []*RateLimit `protobuf:"bytes,13,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
	// Specifies if the rate limit filter should include the virtual host rate
	// limits. By default, if the route configured rate limits, the virtual host
	// rate_limits are not applied to the request.
	IncludeVhRateLimits *google_protobuf.BoolValue `protobuf:"bytes,14,opt,name=include_vh_rate_limits,json=includeVhRateLimits" json:"include_vh_rate_limits,omitempty"`
	HashPolicy          []*RouteAction_HashPolicy  `protobuf:"bytes,15,rep,name=hash_policy,json=hashPolicy" json:"hash_policy,omitempty"`
	// Indicates that a HTTP/1.1 client connection to this particular route
	// should be allowed (and expected) to upgrade to a WebSocket connection. The
	// default is false.
	//
	// Attention
	//
	// If set to true, Envoy will expect the first request matching this route to
	// contain WebSocket upgrade headers. If the headers are not present, the
	// connection will be rejected. If set to true, Envoy will setup plain TCP
	// proxying between the client and the upstream server. Hence, an upstream
	// server that rejects the WebSocket upgrade request is also responsible for
	// closing the associated connection. Until then, Envoy will continue to
	// proxy data from the client to the upstream server.
	//
	// Redirects, timeouts and retries are not supported on routes where
	// websocket upgrades are allowed.
	UseWebsocket *google_protobuf.BoolValue `protobuf:"bytes,16,opt,name=use_websocket,json=useWebsocket" json:"use_websocket,omitempty"`
}

func (m *RouteAction) Reset()                    { *m = RouteAction{} }
func (m *RouteAction) String() string            { return proto.CompactTextString(m) }
func (*RouteAction) ProtoMessage()               {}
func (*RouteAction) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

type isRouteAction_ClusterSpecifier interface {
	isRouteAction_ClusterSpecifier()
}
type isRouteAction_HostRewriteSpecifier interface {
	isRouteAction_HostRewriteSpecifier()
}

type RouteAction_Cluster struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster,oneof"`
}
type RouteAction_ClusterHeader struct {
	ClusterHeader string `protobuf:"bytes,2,opt,name=cluster_header,json=clusterHeader,oneof"`
}
type RouteAction_WeightedClusters struct {
	WeightedClusters *WeightedCluster `protobuf:"bytes,3,opt,name=weighted_clusters,json=weightedClusters,oneof"`
}
type RouteAction_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,oneof"`
}
type RouteAction_AutoHostRewrite struct {
	AutoHostRewrite *google_protobuf.BoolValue `protobuf:"bytes,7,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}

func (*RouteAction_Cluster) isRouteAction_ClusterSpecifier()             {}
func (*RouteAction_ClusterHeader) isRouteAction_ClusterSpecifier()       {}
func (*RouteAction_WeightedClusters) isRouteAction_ClusterSpecifier()    {}
func (*RouteAction_HostRewrite) isRouteAction_HostRewriteSpecifier()     {}
func (*RouteAction_AutoHostRewrite) isRouteAction_HostRewriteSpecifier() {}

func (m *RouteAction) GetClusterSpecifier() isRouteAction_ClusterSpecifier {
	if m != nil {
		return m.ClusterSpecifier
	}
	return nil
}
func (m *RouteAction) GetHostRewriteSpecifier() isRouteAction_HostRewriteSpecifier {
	if m != nil {
		return m.HostRewriteSpecifier
	}
	return nil
}

func (m *RouteAction) GetCluster() string {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_Cluster); ok {
		return x.Cluster
	}
	return ""
}

func (m *RouteAction) GetClusterHeader() string {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_ClusterHeader); ok {
		return x.ClusterHeader
	}
	return ""
}

func (m *RouteAction) GetWeightedClusters() *WeightedCluster {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_WeightedClusters); ok {
		return x.WeightedClusters
	}
	return nil
}

func (m *RouteAction) GetMetadataMatch() *Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

func (m *RouteAction) GetPrefixRewrite() string {
	if m != nil {
		return m.PrefixRewrite
	}
	return ""
}

func (m *RouteAction) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteSpecifier().(*RouteAction_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteAction) GetAutoHostRewrite() *google_protobuf.BoolValue {
	if x, ok := m.GetHostRewriteSpecifier().(*RouteAction_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteAction) GetTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RouteAction) GetRetryPolicy() *RouteAction_RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *RouteAction) GetRequestMirrorPolicy() *RouteAction_RequestMirrorPolicy {
	if m != nil {
		return m.RequestMirrorPolicy
	}
	return nil
}

func (m *RouteAction) GetPriority() RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return RoutingPriority_DEFAULT
}

func (m *RouteAction) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteAction) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *RouteAction) GetIncludeVhRateLimits() *google_protobuf.BoolValue {
	if m != nil {
		return m.IncludeVhRateLimits
	}
	return nil
}

func (m *RouteAction) GetHashPolicy() []*RouteAction_HashPolicy {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

func (m *RouteAction) GetUseWebsocket() *google_protobuf.BoolValue {
	if m != nil {
		return m.UseWebsocket
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteAction_OneofMarshaler, _RouteAction_OneofUnmarshaler, _RouteAction_OneofSizer, []interface{}{
		(*RouteAction_Cluster)(nil),
		(*RouteAction_ClusterHeader)(nil),
		(*RouteAction_WeightedClusters)(nil),
		(*RouteAction_HostRewrite)(nil),
		(*RouteAction_AutoHostRewrite)(nil),
	}
}

func _RouteAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteAction)
	// cluster_specifier
	switch x := m.ClusterSpecifier.(type) {
	case *RouteAction_Cluster:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Cluster)
	case *RouteAction_ClusterHeader:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ClusterHeader)
	case *RouteAction_WeightedClusters:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WeightedClusters); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction.ClusterSpecifier has unexpected type %T", x)
	}
	// host_rewrite_specifier
	switch x := m.HostRewriteSpecifier.(type) {
	case *RouteAction_HostRewrite:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostRewrite)
	case *RouteAction_AutoHostRewrite:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction.HostRewriteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteAction)
	switch tag {
	case 1: // cluster_specifier.cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClusterSpecifier = &RouteAction_Cluster{x}
		return true, err
	case 2: // cluster_specifier.cluster_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClusterSpecifier = &RouteAction_ClusterHeader{x}
		return true, err
	case 3: // cluster_specifier.weighted_clusters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WeightedCluster)
		err := b.DecodeMessage(msg)
		m.ClusterSpecifier = &RouteAction_WeightedClusters{msg}
		return true, err
	case 6: // host_rewrite_specifier.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteSpecifier = &RouteAction_HostRewrite{x}
		return true, err
	case 7: // host_rewrite_specifier.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.BoolValue)
		err := b.DecodeMessage(msg)
		m.HostRewriteSpecifier = &RouteAction_AutoHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteAction)
	// cluster_specifier
	switch x := m.ClusterSpecifier.(type) {
	case *RouteAction_Cluster:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Cluster)))
		n += len(x.Cluster)
	case *RouteAction_ClusterHeader:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClusterHeader)))
		n += len(x.ClusterHeader)
	case *RouteAction_WeightedClusters:
		s := proto.Size(x.WeightedClusters)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// host_rewrite_specifier
	switch x := m.HostRewriteSpecifier.(type) {
	case *RouteAction_HostRewrite:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteAction_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RouteAction_RetryPolicy struct {
	// Specifies the conditions under which retry takes place. These are the
	// same conditions documented for x-envoy-retry-on.
	RetryOn string `protobuf:"bytes,1,opt,name=retry_on,json=retryOn" json:"retry_on,omitempty"`
	// Specifies the allowed number of retries. This parameter is optional and
	// defaults to 1. These are the same conditions documented for
	// x-envoy-max-retries.
	NumRetries *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=num_retries,json=numRetries" json:"num_retries,omitempty"`
	// Specifies a non-zero timeout per retry attempt. This parameter is
	// optional. The same conditions documented for
	// x-envoy-upstream-rq-per-try-timeout-ms apply.
	PerTryTimeout *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
}

func (m *RouteAction_RetryPolicy) Reset()                    { *m = RouteAction_RetryPolicy{} }
func (m *RouteAction_RetryPolicy) String() string            { return proto.CompactTextString(m) }
func (*RouteAction_RetryPolicy) ProtoMessage()               {}
func (*RouteAction_RetryPolicy) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2, 0} }

func (m *RouteAction_RetryPolicy) GetRetryOn() string {
	if m != nil {
		return m.RetryOn
	}
	return ""
}

func (m *RouteAction_RetryPolicy) GetNumRetries() *google_protobuf.UInt32Value {
	if m != nil {
		return m.NumRetries
	}
	return nil
}

func (m *RouteAction_RetryPolicy) GetPerTryTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// Indicates that the route has a request mirroring policy.
type RouteAction_RequestMirrorPolicy struct {
	// Specifies the cluster that requests will be mirrored to. The cluster must
	// exist in the cluster manager configuration.
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// If not specified, all requests to the target cluster will be mirrored. If
	// specified, Envoy will lookup the runtime key to get the % of requests to
	// mirror. Valid values are from 0 to 10000, allowing for increments of
	// 0.01% of requests to be mirrored. If the runtime key is specified in the
	// configuration but not present in runtime, 0 is the default and thus 0% of
	// requests will be mirrored.
	RuntimeKey string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RouteAction_RequestMirrorPolicy) Reset()         { *m = RouteAction_RequestMirrorPolicy{} }
func (m *RouteAction_RequestMirrorPolicy) String() string { return proto.CompactTextString(m) }
func (*RouteAction_RequestMirrorPolicy) ProtoMessage()    {}
func (*RouteAction_RequestMirrorPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{2, 1}
}

func (m *RouteAction_RequestMirrorPolicy) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RouteAction_RequestMirrorPolicy) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

type RouteAction_HashPolicy struct {
	// Types that are valid to be assigned to PolicySpecifier:
	//	*RouteAction_HashPolicy_Header_
	//	*RouteAction_HashPolicy_Cookie_
	//	*RouteAction_HashPolicy_ConnectionProperties_
	PolicySpecifier isRouteAction_HashPolicy_PolicySpecifier `protobuf_oneof:"policy_specifier"`
}

func (m *RouteAction_HashPolicy) Reset()                    { *m = RouteAction_HashPolicy{} }
func (m *RouteAction_HashPolicy) String() string            { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy) ProtoMessage()               {}
func (*RouteAction_HashPolicy) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2, 2} }

type isRouteAction_HashPolicy_PolicySpecifier interface {
	isRouteAction_HashPolicy_PolicySpecifier()
}

type RouteAction_HashPolicy_Header_ struct {
	Header *RouteAction_HashPolicy_Header `protobuf:"bytes,1,opt,name=header,oneof"`
}
type RouteAction_HashPolicy_Cookie_ struct {
	Cookie *RouteAction_HashPolicy_Cookie `protobuf:"bytes,2,opt,name=cookie,oneof"`
}
type RouteAction_HashPolicy_ConnectionProperties_ struct {
	ConnectionProperties *RouteAction_HashPolicy_ConnectionProperties `protobuf:"bytes,3,opt,name=connection_properties,json=connectionProperties,oneof"`
}

func (*RouteAction_HashPolicy_Header_) isRouteAction_HashPolicy_PolicySpecifier()               {}
func (*RouteAction_HashPolicy_Cookie_) isRouteAction_HashPolicy_PolicySpecifier()               {}
func (*RouteAction_HashPolicy_ConnectionProperties_) isRouteAction_HashPolicy_PolicySpecifier() {}

func (m *RouteAction_HashPolicy) GetPolicySpecifier() isRouteAction_HashPolicy_PolicySpecifier {
	if m != nil {
		return m.PolicySpecifier
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetHeader() *RouteAction_HashPolicy_Header {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetCookie() *RouteAction_HashPolicy_Cookie {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_Cookie_); ok {
		return x.Cookie
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetConnectionProperties() *RouteAction_HashPolicy_ConnectionProperties {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_ConnectionProperties_); ok {
		return x.ConnectionProperties
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteAction_HashPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteAction_HashPolicy_OneofMarshaler, _RouteAction_HashPolicy_OneofUnmarshaler, _RouteAction_HashPolicy_OneofSizer, []interface{}{
		(*RouteAction_HashPolicy_Header_)(nil),
		(*RouteAction_HashPolicy_Cookie_)(nil),
		(*RouteAction_HashPolicy_ConnectionProperties_)(nil),
	}
}

func _RouteAction_HashPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteAction_HashPolicy)
	// policy_specifier
	switch x := m.PolicySpecifier.(type) {
	case *RouteAction_HashPolicy_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *RouteAction_HashPolicy_Cookie_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cookie); err != nil {
			return err
		}
	case *RouteAction_HashPolicy_ConnectionProperties_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectionProperties); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction_HashPolicy.PolicySpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteAction_HashPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteAction_HashPolicy)
	switch tag {
	case 1: // policy_specifier.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_Header)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_Header_{msg}
		return true, err
	case 2: // policy_specifier.cookie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_Cookie)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_Cookie_{msg}
		return true, err
	case 3: // policy_specifier.connection_properties
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_ConnectionProperties)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_ConnectionProperties_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteAction_HashPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteAction_HashPolicy)
	// policy_specifier
	switch x := m.PolicySpecifier.(type) {
	case *RouteAction_HashPolicy_Header_:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteAction_HashPolicy_Cookie_:
		s := proto.Size(x.Cookie)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteAction_HashPolicy_ConnectionProperties_:
		s := proto.Size(x.ConnectionProperties)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// [V2-API-DIFF] We expect additional hash policies in the future, e.g.
// cookie based, originating IP, etc.
type RouteAction_HashPolicy_Header struct {
	// The name of the request header that will be used to obtain the hash
	// key. If the request header is not present, the load balancer will use a
	// random number as the hash, effectively making the load balancing policy
	// random.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName" json:"header_name,omitempty"`
}

func (m *RouteAction_HashPolicy_Header) Reset()         { *m = RouteAction_HashPolicy_Header{} }
func (m *RouteAction_HashPolicy_Header) String() string { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy_Header) ProtoMessage()    {}
func (*RouteAction_HashPolicy_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{2, 2, 0}
}

func (m *RouteAction_HashPolicy_Header) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

// Envoy supports two types of cookie affinity:
//
// 1. Passive. Envoy takes a cookie that's present in the cookies header and
//    hashes on its value.
//
// 2. Generated. Envoy generates and sets a cookie with an expiration (TTL)
//    on the first request from the client in its response to the client,
//    based on the endpoint the request gets sent to. The client then
//    presents this on the next and all subsequent requests, the hash of
//    this is sufficient to ensure these requests get sent to the same
//    endpoint.
type RouteAction_HashPolicy_Cookie struct {
	// The name of the cookie that will be used to obtain the hash key. If the
	// cookie is not present and ttl below is not set, the load balancer will
	// use a random number as the hash, effectively making the load balancing
	// policy random.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If specified, a cookie with the TTL will be generated if the cookie is
	// not present.
	Ttl *google_protobuf2.Duration `protobuf:"bytes,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *RouteAction_HashPolicy_Cookie) Reset()         { *m = RouteAction_HashPolicy_Cookie{} }
func (m *RouteAction_HashPolicy_Cookie) String() string { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy_Cookie) ProtoMessage()    {}
func (*RouteAction_HashPolicy_Cookie) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{2, 2, 1}
}

func (m *RouteAction_HashPolicy_Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteAction_HashPolicy_Cookie) GetTtl() *google_protobuf2.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

type RouteAction_HashPolicy_ConnectionProperties struct {
	// Hash on source IP address.
	SourceIp bool `protobuf:"varint,1,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
}

func (m *RouteAction_HashPolicy_ConnectionProperties) Reset() {
	*m = RouteAction_HashPolicy_ConnectionProperties{}
}
func (m *RouteAction_HashPolicy_ConnectionProperties) String() string {
	return proto.CompactTextString(m)
}
func (*RouteAction_HashPolicy_ConnectionProperties) ProtoMessage() {}
func (*RouteAction_HashPolicy_ConnectionProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{2, 2, 2}
}

func (m *RouteAction_HashPolicy_ConnectionProperties) GetSourceIp() bool {
	if m != nil {
		return m.SourceIp
	}
	return false
}

type RedirectAction struct {
	// A 302 redirect response will be sent which swaps the host portion of the
	// URL with this value.
	HostRedirect string `protobuf:"bytes,1,opt,name=host_redirect,json=hostRedirect" json:"host_redirect,omitempty"`
	// A 302 redirect response will be sent which swaps the path portion of the
	// URL with this value.
	PathRedirect string `protobuf:"bytes,2,opt,name=path_redirect,json=pathRedirect" json:"path_redirect,omitempty"`
}

func (m *RedirectAction) Reset()                    { *m = RedirectAction{} }
func (m *RedirectAction) String() string            { return proto.CompactTextString(m) }
func (*RedirectAction) ProtoMessage()               {}
func (*RedirectAction) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *RedirectAction) GetHostRedirect() string {
	if m != nil {
		return m.HostRedirect
	}
	return ""
}

func (m *RedirectAction) GetPathRedirect() string {
	if m != nil {
		return m.PathRedirect
	}
	return ""
}

// The match/action distinction in Route is surfaced explicitly in the v2 API
// [V2-API-DIFF].
type Route struct {
	Match *RouteMatch `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	// Types that are valid to be assigned to Action:
	//	*Route_Route
	//	*Route_Redirect
	Action isRoute_Action `protobuf_oneof:"action"`
	// See base.Metadata description.
	Metadata *Metadata `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

type isRoute_Action interface {
	isRoute_Action()
}

type Route_Route struct {
	Route *RouteAction `protobuf:"bytes,2,opt,name=route,oneof"`
}
type Route_Redirect struct {
	Redirect *RedirectAction `protobuf:"bytes,3,opt,name=redirect,oneof"`
}

func (*Route_Route) isRoute_Action()    {}
func (*Route_Redirect) isRoute_Action() {}

func (m *Route) GetAction() isRoute_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetMatch() *RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Route) GetRoute() *RouteAction {
	if x, ok := m.GetAction().(*Route_Route); ok {
		return x.Route
	}
	return nil
}

func (m *Route) GetRedirect() *RedirectAction {
	if x, ok := m.GetAction().(*Route_Redirect); ok {
		return x.Redirect
	}
	return nil
}

func (m *Route) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Route) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Route_OneofMarshaler, _Route_OneofUnmarshaler, _Route_OneofSizer, []interface{}{
		(*Route_Route)(nil),
		(*Route_Redirect)(nil),
	}
}

func _Route_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Route)
	// action
	switch x := m.Action.(type) {
	case *Route_Route:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Route); err != nil {
			return err
		}
	case *Route_Redirect:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redirect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Route.Action has unexpected type %T", x)
	}
	return nil
}

func _Route_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Route)
	switch tag {
	case 2: // action.route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction)
		err := b.DecodeMessage(msg)
		m.Action = &Route_Route{msg}
		return true, err
	case 3: // action.redirect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RedirectAction)
		err := b.DecodeMessage(msg)
		m.Action = &Route_Redirect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Route_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Route)
	// action
	switch x := m.Action.(type) {
	case *Route_Route:
		s := proto.Size(x.Route)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Route_Redirect:
		s := proto.Size(x.Redirect)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A virtual cluster is a way of specifying a regex matching rule against
// certain important endpoints such that statistics are generated explicitly for
// the matched requests. The reason this is useful is that when doing
// prefix/path matching Envoy does not always know what the application
// considers to be an endpoint. Thus, it’s impossible for Envoy to generically
// emit per endpoint statistics. However, often systems have highly critical
// endpoints that they wish to get “perfect” statistics on. Virtual cluster
// statistics are perfect in the sense that they are emitted on the downstream
// side such that they include network level failures.
type VirtualCluster struct {
	// Specifies a regex pattern to use for matching requests.
	Pattern string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	// Specifies the name of the virtual cluster. The virtual cluster name as well
	// as the virtual host name are used when emitting statistics.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Optionally specifies the HTTP method to match on. For example GET, PUT,
	// etc.
	Method RequestMethod `protobuf:"varint,3,opt,name=method,enum=envoy.api.v2.RequestMethod" json:"method,omitempty"`
}

func (m *VirtualCluster) Reset()                    { *m = VirtualCluster{} }
func (m *VirtualCluster) String() string            { return proto.CompactTextString(m) }
func (*VirtualCluster) ProtoMessage()               {}
func (*VirtualCluster) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{5} }

func (m *VirtualCluster) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *VirtualCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualCluster) GetMethod() RequestMethod {
	if m != nil {
		return m.Method
	}
	return RequestMethod_METHOD_UNSPECIFIED
}

// See
// https://lyft.github.io/envoy/docs/configuration/http_conn_man/route_config/rate_limits.html
type RateLimit struct {
	// Refers to the stage set in the filter. The rate limit configuration only
	// applies to filters with the same stage number. The default stage number is
	// 0.
	// NOTE: The filter supports a range of 0 - 10 inclusively for stage numbers.
	Stage *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	// The key to be set in runtime to disable this rate limit configuration.
	DisableKey string `protobuf:"bytes,2,opt,name=disable_key,json=disableKey" json:"disable_key,omitempty"`
	// A list of actions that are to be applied for this rate limit configuration.
	// Order matters as the actions are processed sequentially and the descriptor
	// is composed by appending descriptor entries in that sequence. If an action
	// cannot append a descriptor entry, no descriptor is generated for the
	// configuration. See composing actions for additional documentation.
	Actions []*RateLimit_Action `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6} }

func (m *RateLimit) GetStage() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *RateLimit) GetDisableKey() string {
	if m != nil {
		return m.DisableKey
	}
	return ""
}

func (m *RateLimit) GetActions() []*RateLimit_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type RateLimit_Action struct {
	// Types that are valid to be assigned to ActionSpecifier:
	//	*RateLimit_Action_SourceCluster_
	//	*RateLimit_Action_DestinationCluster_
	//	*RateLimit_Action_RequestHeaders_
	//	*RateLimit_Action_RemoteAddress_
	//	*RateLimit_Action_GenericKey_
	//	*RateLimit_Action_HeaderValueMatch_
	ActionSpecifier isRateLimit_Action_ActionSpecifier `protobuf_oneof:"action_specifier"`
}

func (m *RateLimit_Action) Reset()                    { *m = RateLimit_Action{} }
func (m *RateLimit_Action) String() string            { return proto.CompactTextString(m) }
func (*RateLimit_Action) ProtoMessage()               {}
func (*RateLimit_Action) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{6, 0} }

type isRateLimit_Action_ActionSpecifier interface {
	isRateLimit_Action_ActionSpecifier()
}

type RateLimit_Action_SourceCluster_ struct {
	SourceCluster *RateLimit_Action_SourceCluster `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,oneof"`
}
type RateLimit_Action_DestinationCluster_ struct {
	DestinationCluster *RateLimit_Action_DestinationCluster `protobuf:"bytes,2,opt,name=destination_cluster,json=destinationCluster,oneof"`
}
type RateLimit_Action_RequestHeaders_ struct {
	RequestHeaders *RateLimit_Action_RequestHeaders `protobuf:"bytes,3,opt,name=request_headers,json=requestHeaders,oneof"`
}
type RateLimit_Action_RemoteAddress_ struct {
	RemoteAddress *RateLimit_Action_RemoteAddress `protobuf:"bytes,4,opt,name=remote_address,json=remoteAddress,oneof"`
}
type RateLimit_Action_GenericKey_ struct {
	GenericKey *RateLimit_Action_GenericKey `protobuf:"bytes,5,opt,name=generic_key,json=genericKey,oneof"`
}
type RateLimit_Action_HeaderValueMatch_ struct {
	HeaderValueMatch *RateLimit_Action_HeaderValueMatch `protobuf:"bytes,6,opt,name=header_value_match,json=headerValueMatch,oneof"`
}

func (*RateLimit_Action_SourceCluster_) isRateLimit_Action_ActionSpecifier()      {}
func (*RateLimit_Action_DestinationCluster_) isRateLimit_Action_ActionSpecifier() {}
func (*RateLimit_Action_RequestHeaders_) isRateLimit_Action_ActionSpecifier()     {}
func (*RateLimit_Action_RemoteAddress_) isRateLimit_Action_ActionSpecifier()      {}
func (*RateLimit_Action_GenericKey_) isRateLimit_Action_ActionSpecifier()         {}
func (*RateLimit_Action_HeaderValueMatch_) isRateLimit_Action_ActionSpecifier()   {}

func (m *RateLimit_Action) GetActionSpecifier() isRateLimit_Action_ActionSpecifier {
	if m != nil {
		return m.ActionSpecifier
	}
	return nil
}

func (m *RateLimit_Action) GetSourceCluster() *RateLimit_Action_SourceCluster {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_SourceCluster_); ok {
		return x.SourceCluster
	}
	return nil
}

func (m *RateLimit_Action) GetDestinationCluster() *RateLimit_Action_DestinationCluster {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_DestinationCluster_); ok {
		return x.DestinationCluster
	}
	return nil
}

func (m *RateLimit_Action) GetRequestHeaders() *RateLimit_Action_RequestHeaders {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_RequestHeaders_); ok {
		return x.RequestHeaders
	}
	return nil
}

func (m *RateLimit_Action) GetRemoteAddress() *RateLimit_Action_RemoteAddress {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_RemoteAddress_); ok {
		return x.RemoteAddress
	}
	return nil
}

func (m *RateLimit_Action) GetGenericKey() *RateLimit_Action_GenericKey {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_GenericKey_); ok {
		return x.GenericKey
	}
	return nil
}

func (m *RateLimit_Action) GetHeaderValueMatch() *RateLimit_Action_HeaderValueMatch {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_HeaderValueMatch_); ok {
		return x.HeaderValueMatch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RateLimit_Action) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RateLimit_Action_OneofMarshaler, _RateLimit_Action_OneofUnmarshaler, _RateLimit_Action_OneofSizer, []interface{}{
		(*RateLimit_Action_SourceCluster_)(nil),
		(*RateLimit_Action_DestinationCluster_)(nil),
		(*RateLimit_Action_RequestHeaders_)(nil),
		(*RateLimit_Action_RemoteAddress_)(nil),
		(*RateLimit_Action_GenericKey_)(nil),
		(*RateLimit_Action_HeaderValueMatch_)(nil),
	}
}

func _RateLimit_Action_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RateLimit_Action)
	// action_specifier
	switch x := m.ActionSpecifier.(type) {
	case *RateLimit_Action_SourceCluster_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceCluster); err != nil {
			return err
		}
	case *RateLimit_Action_DestinationCluster_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationCluster); err != nil {
			return err
		}
	case *RateLimit_Action_RequestHeaders_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestHeaders); err != nil {
			return err
		}
	case *RateLimit_Action_RemoteAddress_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteAddress); err != nil {
			return err
		}
	case *RateLimit_Action_GenericKey_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericKey); err != nil {
			return err
		}
	case *RateLimit_Action_HeaderValueMatch_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderValueMatch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RateLimit_Action.ActionSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RateLimit_Action_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RateLimit_Action)
	switch tag {
	case 1: // action_specifier.source_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_SourceCluster)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_SourceCluster_{msg}
		return true, err
	case 2: // action_specifier.destination_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_DestinationCluster)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_DestinationCluster_{msg}
		return true, err
	case 3: // action_specifier.request_headers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_RequestHeaders)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_RequestHeaders_{msg}
		return true, err
	case 4: // action_specifier.remote_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_RemoteAddress)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_RemoteAddress_{msg}
		return true, err
	case 5: // action_specifier.generic_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_GenericKey)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_GenericKey_{msg}
		return true, err
	case 6: // action_specifier.header_value_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_HeaderValueMatch)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_HeaderValueMatch_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RateLimit_Action_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RateLimit_Action)
	// action_specifier
	switch x := m.ActionSpecifier.(type) {
	case *RateLimit_Action_SourceCluster_:
		s := proto.Size(x.SourceCluster)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_DestinationCluster_:
		s := proto.Size(x.DestinationCluster)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_RequestHeaders_:
		s := proto.Size(x.RequestHeaders)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_RemoteAddress_:
		s := proto.Size(x.RemoteAddress)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_GenericKey_:
		s := proto.Size(x.GenericKey)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_HeaderValueMatch_:
		s := proto.Size(x.HeaderValueMatch)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The following descriptor entry is appended to the descriptor:
// ("source_cluster", "<local service cluster>")
type RateLimit_Action_SourceCluster struct {
}

func (m *RateLimit_Action_SourceCluster) Reset()         { *m = RateLimit_Action_SourceCluster{} }
func (m *RateLimit_Action_SourceCluster) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_SourceCluster) ProtoMessage()    {}
func (*RateLimit_Action_SourceCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 0}
}

// The following descriptor entry is appended to the descriptor:
// ("destination_cluster", "<routed target cluster>")
type RateLimit_Action_DestinationCluster struct {
}

func (m *RateLimit_Action_DestinationCluster) Reset()         { *m = RateLimit_Action_DestinationCluster{} }
func (m *RateLimit_Action_DestinationCluster) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_DestinationCluster) ProtoMessage()    {}
func (*RateLimit_Action_DestinationCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 1}
}

// The following descriptor entry is appended when a header contains a key
// that matches the header_name:
// ("<descriptor_key>", "<header_value_queried_from_header>")
type RateLimit_Action_RequestHeaders struct {
	// The header name to be queried from the request headers. The header’s
	// value is used to populate the value of the descriptor entry for the
	// descriptor_key.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName" json:"header_name,omitempty"`
	// The key to use in the descriptor entry.
	DescriptorKey string `protobuf:"bytes,2,opt,name=descriptor_key,json=descriptorKey" json:"descriptor_key,omitempty"`
}

func (m *RateLimit_Action_RequestHeaders) Reset()         { *m = RateLimit_Action_RequestHeaders{} }
func (m *RateLimit_Action_RequestHeaders) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_RequestHeaders) ProtoMessage()    {}
func (*RateLimit_Action_RequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 2}
}

func (m *RateLimit_Action_RequestHeaders) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

func (m *RateLimit_Action_RequestHeaders) GetDescriptorKey() string {
	if m != nil {
		return m.DescriptorKey
	}
	return ""
}

// The following descriptor entry is appended to the descriptor and is
// populated using the trusted address from x-forwarded-for:
// ("remote_address", "<trusted address from x-forwarded-for>")
type RateLimit_Action_RemoteAddress struct {
}

func (m *RateLimit_Action_RemoteAddress) Reset()         { *m = RateLimit_Action_RemoteAddress{} }
func (m *RateLimit_Action_RemoteAddress) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_RemoteAddress) ProtoMessage()    {}
func (*RateLimit_Action_RemoteAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 3}
}

// The following descriptor entry is appended to the descriptor:
// ("generic_key", "<descriptor_value>")
type RateLimit_Action_GenericKey struct {
	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue" json:"descriptor_value,omitempty"`
}

func (m *RateLimit_Action_GenericKey) Reset()         { *m = RateLimit_Action_GenericKey{} }
func (m *RateLimit_Action_GenericKey) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_GenericKey) ProtoMessage()    {}
func (*RateLimit_Action_GenericKey) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 4}
}

func (m *RateLimit_Action_GenericKey) GetDescriptorValue() string {
	if m != nil {
		return m.DescriptorValue
	}
	return ""
}

// The following descriptor entry is appended to the descriptor:
// (“header_match”, “<descriptor_value>”)
type RateLimit_Action_HeaderValueMatch struct {
	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue" json:"descriptor_value,omitempty"`
	// If set to true, the action will append a descriptor entry when the
	// request matches the headers. If set to false, the action will append a
	// descriptor entry when the request does not match the headers. The
	// default value is true.
	ExpectMatch *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=expect_match,json=expectMatch" json:"expect_match,omitempty"`
	// Specifies a set of headers that the rate limit action should match
	// on. The action will check the request’s headers against all the
	// specified headers in the config. A match will happen if all the
	// headers in the config are present in the request with the same values
	// (or based on presence if the value field is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
}

func (m *RateLimit_Action_HeaderValueMatch) Reset()         { *m = RateLimit_Action_HeaderValueMatch{} }
func (m *RateLimit_Action_HeaderValueMatch) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_HeaderValueMatch) ProtoMessage()    {}
func (*RateLimit_Action_HeaderValueMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor11, []int{6, 0, 5}
}

func (m *RateLimit_Action_HeaderValueMatch) GetDescriptorValue() string {
	if m != nil {
		return m.DescriptorValue
	}
	return ""
}

func (m *RateLimit_Action_HeaderValueMatch) GetExpectMatch() *google_protobuf.BoolValue {
	if m != nil {
		return m.ExpectMatch
	}
	return nil
}

func (m *RateLimit_Action_HeaderValueMatch) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

type HeaderMatcher struct {
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Specifies the value of the header. If the value is absent a request that
	// has the name header will match, regardless of the header’s value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// Specifies whether the header value is a regular expression or not.
	// Defaults to false.
	Regex *google_protobuf.BoolValue `protobuf:"bytes,3,opt,name=regex" json:"regex,omitempty"`
}

func (m *HeaderMatcher) Reset()                    { *m = HeaderMatcher{} }
func (m *HeaderMatcher) String() string            { return proto.CompactTextString(m) }
func (*HeaderMatcher) ProtoMessage()               {}
func (*HeaderMatcher) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{7} }

func (m *HeaderMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *HeaderMatcher) GetRegex() *google_protobuf.BoolValue {
	if m != nil {
		return m.Regex
	}
	return nil
}

type VirtualHost struct {
	// The logical name of the virtual host. This is used when emitting certain
	// statistics but is not relevant for routing.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A list of domains (host/authority header) that will be matched to this
	// virtual host. Wildcard hosts are supported in the form of “*.foo.com” or
	// “*-bar.foo.com”. Note that the wildcard will not match the empty string.
	// e.g. “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
	// Additionally, a special entry “*” is allowed which will match any
	// host/authority header. Only a single virtual host in the entire route
	// configuration can match on “*”. A domain must be unique across all virtual
	// hosts or the config will fail to load.
	Domains []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	// The list of routes that will be matched, in order, for incoming requests.
	// The first route that matches will be used.
	Routes []*Route `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	// Specifies the type of TLS enforcement the virtual host expects.
	RequireTls VirtualHost_TlsRequirementType `protobuf:"varint,4,opt,name=require_tls,json=requireTls,enum=envoy.api.v2.VirtualHost_TlsRequirementType" json:"require_tls,omitempty"`
	// A list of virtual clusters defined for this virtual host. Virtual clusters
	// are used for additional statistics gathering.
	VirtualClusters []*VirtualCluster `protobuf:"bytes,5,rep,name=virtual_clusters,json=virtualClusters" json:"virtual_clusters,omitempty"`
	// Specifies a set of rate limit configurations that will be applied to the
	// virtual host.
	RateLimits []*RateLimit `protobuf:"bytes,6,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request
	// handled by this virtual host. In the presence of duplicate header keys,
	// precedence rules apply.
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,7,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
}

func (m *VirtualHost) Reset()                    { *m = VirtualHost{} }
func (m *VirtualHost) String() string            { return proto.CompactTextString(m) }
func (*VirtualHost) ProtoMessage()               {}
func (*VirtualHost) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{8} }

func (m *VirtualHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualHost) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *VirtualHost) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *VirtualHost) GetRequireTls() VirtualHost_TlsRequirementType {
	if m != nil {
		return m.RequireTls
	}
	return VirtualHost_NONE
}

func (m *VirtualHost) GetVirtualClusters() []*VirtualCluster {
	if m != nil {
		return m.VirtualClusters
	}
	return nil
}

func (m *VirtualHost) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *VirtualHost) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

type RouteConfiguration struct {
	// The name of the route configuration. For example, it might match the
	// router_config_name in the HttpConnectionManager > route_specifier > rds
	// message.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An array of virtual hosts that make up the route table.
	VirtualHosts []*VirtualHost `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts" json:"virtual_hosts,omitempty"`
	// Specifies a list of HTTP headers that the connection manager will consider
	// to be internal only. If they are found on external requests they will be
	// cleaned prior to filter invocation. See x-envoy-internal for more
	// information.
	InternalOnlyHeaders []string `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders" json:"internal_only_headers,omitempty"`
	// Specifies a list of HTTP headers that should be added to each response that
	// the connection manager encodes.
	ResponseHeadersToAdd []*HeaderValueOption `protobuf:"bytes,4,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// that the connection manager encodes.
	ResponseHeadersToRemove []string `protobuf:"bytes,5,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request
	// routed by the HTTP connection manager. In the presence of duplicate
	// header keys, precendence rules apply.
	RequestHeadersToAdd []*HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// An optional boolean that specifies whether the clusters that the route
	// table refers to will be validated by the cluster manager. If set to true
	// and a route refers to a non-existent cluster, the route table will not
	// load. If set to false and a route refers to a non-existent cluster, the
	// route table will load and the router filter will return a 404 if the route
	// is selected at runtime. This setting defaults to true if the route table
	// is statically defined via the route_config option. This setting default to
	// false if the route table is loaded dynamically via the rds option. Users
	// may which to override the default behavior in certain cases (for example
	// when using CDS with a static route table).
	ValidateClusters *google_protobuf.BoolValue `protobuf:"bytes,7,opt,name=validate_clusters,json=validateClusters" json:"validate_clusters,omitempty"`
}

func (m *RouteConfiguration) Reset()                    { *m = RouteConfiguration{} }
func (m *RouteConfiguration) String() string            { return proto.CompactTextString(m) }
func (*RouteConfiguration) ProtoMessage()               {}
func (*RouteConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{9} }

func (m *RouteConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteConfiguration) GetVirtualHosts() []*VirtualHost {
	if m != nil {
		return m.VirtualHosts
	}
	return nil
}

func (m *RouteConfiguration) GetInternalOnlyHeaders() []string {
	if m != nil {
		return m.InternalOnlyHeaders
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteConfiguration) GetRequestHeadersToAdd() []*HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetValidateClusters() *google_protobuf.BoolValue {
	if m != nil {
		return m.ValidateClusters
	}
	return nil
}

func init() {
	proto.RegisterType((*WeightedCluster)(nil), "envoy.api.v2.WeightedCluster")
	proto.RegisterType((*WeightedCluster_ClusterWeight)(nil), "envoy.api.v2.WeightedCluster.ClusterWeight")
	proto.RegisterType((*RouteMatch)(nil), "envoy.api.v2.RouteMatch")
	proto.RegisterType((*RouteAction)(nil), "envoy.api.v2.RouteAction")
	proto.RegisterType((*RouteAction_RetryPolicy)(nil), "envoy.api.v2.RouteAction.RetryPolicy")
	proto.RegisterType((*RouteAction_RequestMirrorPolicy)(nil), "envoy.api.v2.RouteAction.RequestMirrorPolicy")
	proto.RegisterType((*RouteAction_HashPolicy)(nil), "envoy.api.v2.RouteAction.HashPolicy")
	proto.RegisterType((*RouteAction_HashPolicy_Header)(nil), "envoy.api.v2.RouteAction.HashPolicy.Header")
	proto.RegisterType((*RouteAction_HashPolicy_Cookie)(nil), "envoy.api.v2.RouteAction.HashPolicy.Cookie")
	proto.RegisterType((*RouteAction_HashPolicy_ConnectionProperties)(nil), "envoy.api.v2.RouteAction.HashPolicy.ConnectionProperties")
	proto.RegisterType((*RedirectAction)(nil), "envoy.api.v2.RedirectAction")
	proto.RegisterType((*Route)(nil), "envoy.api.v2.Route")
	proto.RegisterType((*VirtualCluster)(nil), "envoy.api.v2.VirtualCluster")
	proto.RegisterType((*RateLimit)(nil), "envoy.api.v2.RateLimit")
	proto.RegisterType((*RateLimit_Action)(nil), "envoy.api.v2.RateLimit.Action")
	proto.RegisterType((*RateLimit_Action_SourceCluster)(nil), "envoy.api.v2.RateLimit.Action.SourceCluster")
	proto.RegisterType((*RateLimit_Action_DestinationCluster)(nil), "envoy.api.v2.RateLimit.Action.DestinationCluster")
	proto.RegisterType((*RateLimit_Action_RequestHeaders)(nil), "envoy.api.v2.RateLimit.Action.RequestHeaders")
	proto.RegisterType((*RateLimit_Action_RemoteAddress)(nil), "envoy.api.v2.RateLimit.Action.RemoteAddress")
	proto.RegisterType((*RateLimit_Action_GenericKey)(nil), "envoy.api.v2.RateLimit.Action.GenericKey")
	proto.RegisterType((*RateLimit_Action_HeaderValueMatch)(nil), "envoy.api.v2.RateLimit.Action.HeaderValueMatch")
	proto.RegisterType((*HeaderMatcher)(nil), "envoy.api.v2.HeaderMatcher")
	proto.RegisterType((*VirtualHost)(nil), "envoy.api.v2.VirtualHost")
	proto.RegisterType((*RouteConfiguration)(nil), "envoy.api.v2.RouteConfiguration")
	proto.RegisterEnum("envoy.api.v2.VirtualHost_TlsRequirementType", VirtualHost_TlsRequirementType_name, VirtualHost_TlsRequirementType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteDiscoveryService service

type RouteDiscoveryServiceClient interface {
	StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error)
	FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type routeDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouteDiscoveryServiceClient(cc *grpc.ClientConn) RouteDiscoveryServiceClient {
	return &routeDiscoveryServiceClient{cc}
}

func (c *routeDiscoveryServiceClient) StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteDiscoveryService_serviceDesc.Streams[0], c.cc, "/envoy.api.v2.RouteDiscoveryService/StreamRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDiscoveryServiceStreamRoutesClient{stream}
	return x, nil
}

type RouteDiscoveryService_StreamRoutesClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type routeDiscoveryServiceStreamRoutesClient struct {
	grpc.ClientStream
}

func (x *routeDiscoveryServiceStreamRoutesClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeDiscoveryServiceClient) FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := grpc.Invoke(ctx, "/envoy.api.v2.RouteDiscoveryService/FetchRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteDiscoveryService service

type RouteDiscoveryServiceServer interface {
	StreamRoutes(RouteDiscoveryService_StreamRoutesServer) error
	FetchRoutes(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterRouteDiscoveryServiceServer(s *grpc.Server, srv RouteDiscoveryServiceServer) {
	s.RegisterService(&_RouteDiscoveryService_serviceDesc, srv)
}

func _RouteDiscoveryService_StreamRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteDiscoveryServiceServer).StreamRoutes(&routeDiscoveryServiceStreamRoutesServer{stream})
}

type RouteDiscoveryService_StreamRoutesServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type routeDiscoveryServiceStreamRoutesServer struct {
	grpc.ServerStream
}

func (x *routeDiscoveryServiceStreamRoutesServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteDiscoveryService_FetchRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.RouteDiscoveryService/FetchRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.RouteDiscoveryService",
	HandlerType: (*RouteDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchRoutes",
			Handler:    _RouteDiscoveryService_FetchRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoutes",
			Handler:       _RouteDiscoveryService_StreamRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/rds.proto",
}

func init() { proto.RegisterFile("api/rds.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 1879 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xb7, 0x2c, 0x5b, 0x92, 0xdf, 0x68, 0x24, 0xa5, 0xed, 0x38, 0x93, 0xd9, 0xb0, 0x4e, 0x69,
	0xd9, 0x22, 0x21, 0x59, 0x79, 0x57, 0x86, 0x62, 0x37, 0x54, 0xa0, 0xec, 0xc4, 0x44, 0xa9, 0x38,
	0xb6, 0xab, 0xe3, 0x64, 0x03, 0x97, 0xa9, 0xf1, 0x4c, 0x47, 0xea, 0x8a, 0x34, 0x33, 0x74, 0xb7,
	0xe4, 0xe8, 0xca, 0x57, 0xe0, 0x00, 0x77, 0x6e, 0x5c, 0xb9, 0xf1, 0x15, 0xe0, 0x40, 0x15, 0x07,
	0x8e, 0x5c, 0xf6, 0x3b, 0x70, 0xa5, 0xfa, 0xcf, 0x8c, 0x46, 0x7f, 0x6c, 0x39, 0xb0, 0x27, 0xa9,
	0x5f, 0xff, 0xde, 0x6f, 0xfa, 0xfd, 0xe9, 0xf7, 0x5e, 0x83, 0xed, 0x27, 0x74, 0x97, 0x85, 0xbc,
	0x95, 0xb0, 0x58, 0xc4, 0xa8, 0x4a, 0xa2, 0x51, 0x3c, 0x6e, 0xf9, 0x09, 0x6d, 0x8d, 0xda, 0x6e,
	0x4d, 0x6e, 0x9e, 0xfb, 0x9c, 0xe8, 0x5d, 0xf7, 0x4e, 0x37, 0x8e, 0xbb, 0x7d, 0xb2, 0x2b, 0xc5,
	0x7e, 0x14, 0xc5, 0xc2, 0x17, 0x34, 0x8e, 0x8c, 0xae, 0xfb, 0xa9, 0xd9, 0x55, 0xab, 0xf3, 0xe1,
	0xbb, 0xdd, 0x70, 0xc8, 0x14, 0xe0, 0xb2, 0xfd, 0x0b, 0xe6, 0x27, 0x09, 0x61, 0x46, 0xbf, 0xf9,
	0xa7, 0x55, 0xa8, 0x7f, 0x4b, 0x68, 0xb7, 0x27, 0x48, 0xf8, 0xa4, 0x3f, 0xe4, 0x82, 0x30, 0xf4,
	0x0c, 0x2a, 0x81, 0xfe, 0xcb, 0x9d, 0xc2, 0xdd, 0xe2, 0x3d, 0xab, 0xfd, 0xa0, 0x95, 0x3f, 0x62,
	0x6b, 0x46, 0xa1, 0x65, 0x7e, 0xb5, 0x18, 0x67, 0xca, 0xe8, 0x21, 0x20, 0x36, 0x8c, 0x04, 0x1d,
	0x10, 0xef, 0x3d, 0x19, 0x7b, 0x09, 0x23, 0xef, 0xe8, 0x07, 0x67, 0xf5, 0x6e, 0xe1, 0xde, 0x06,
	0x6e, 0x98, 0x9d, 0x17, 0x64, 0x7c, 0xaa, 0xe4, 0xee, 0x1f, 0x0b, 0x60, 0x4f, 0x31, 0x21, 0x04,
	0x6b, 0x91, 0x3f, 0x20, 0x4e, 0x41, 0x69, 0xa8, 0xff, 0xe8, 0x27, 0x50, 0xba, 0x50, 0xbb, 0x8a,
	0xc7, 0x6a, 0xdf, 0x69, 0x69, 0x0b, 0x5b, 0xa9, 0x85, 0xad, 0xd7, 0xcf, 0x23, 0xb1, 0xd7, 0x7e,
	0xe3, 0xf7, 0x87, 0x04, 0x1b, 0x2c, 0x7a, 0x0c, 0xb5, 0x01, 0x11, 0x7e, 0xe8, 0x0b, 0xdf, 0x1b,
	0xf8, 0x22, 0xe8, 0x39, 0x45, 0xa5, 0xbd, 0x3d, 0x6d, 0xd8, 0x4b, 0x83, 0xc1, 0x76, 0x8a, 0x7e,
	0x29, 0xc1, 0xcd, 0x3f, 0xac, 0x02, 0xe0, 0x78, 0x28, 0x88, 0x5a, 0x22, 0x07, 0x4a, 0xc6, 0x16,
	0x75, 0xb2, 0xce, 0x0a, 0x36, 0x6b, 0xb4, 0x05, 0x6b, 0x89, 0x2f, 0x7a, 0xda, 0xc6, 0xce, 0x0a,
	0x56, 0x2b, 0xb4, 0x0d, 0xeb, 0x8c, 0x74, 0xc9, 0x07, 0xf5, 0x51, 0x29, 0xd6, 0x4b, 0xb4, 0x0f,
	0xb5, 0xc0, 0xe7, 0xc4, 0xe3, 0x24, 0xe2, 0x54, 0xd0, 0x11, 0x71, 0xd6, 0xd4, 0xa9, 0xdc, 0x39,
	0x9b, 0x0e, 0xe2, 0xb8, 0xaf, 0x2d, 0xb2, 0xa5, 0xc6, 0xab, 0x54, 0x01, 0xfd, 0x14, 0xca, 0xc6,
	0x91, 0xce, 0xba, 0xd2, 0xfd, 0x64, 0xda, 0x22, 0xac, 0x37, 0xb5, 0x4f, 0x70, 0x8a, 0x95, 0x6a,
	0x3d, 0xe2, 0x87, 0x32, 0xc2, 0x25, 0x15, 0xe1, 0x19, 0xb5, 0x8e, 0xda, 0x54, 0xd6, 0x12, 0x86,
	0x53, 0xec, 0x41, 0x03, 0x6a, 0xd2, 0x20, 0x8f, 0x27, 0x24, 0xa0, 0xef, 0x28, 0x61, 0xcd, 0xff,
	0xd8, 0x60, 0x29, 0xcf, 0xec, 0x07, 0x32, 0xeb, 0x90, 0x0b, 0x65, 0x13, 0xfe, 0xcc, 0x37, 0xa9,
	0x00, 0xfd, 0x08, 0x6a, 0xe6, 0xaf, 0xa7, 0x09, 0x33, 0x37, 0xd9, 0x46, 0xae, 0x3f, 0x8b, 0x8e,
	0xe0, 0xc6, 0x85, 0x49, 0x31, 0x2f, 0xcb, 0x44, 0x1d, 0xb0, 0x1f, 0x5c, 0x99, 0x89, 0x9d, 0x15,
	0xdc, 0xb8, 0x98, 0x16, 0xf1, 0x05, 0xb1, 0x5f, 0xfb, 0x88, 0xd8, 0xa3, 0xcf, 0xa1, 0xa6, 0x83,
	0xeb, 0x31, 0x72, 0xc1, 0xa8, 0xd0, 0x8e, 0xde, 0xc0, 0xb6, 0x96, 0x62, 0x2d, 0x44, 0x9f, 0x41,
	0xb5, 0x17, 0x73, 0x91, 0x81, 0x4a, 0xca, 0xb4, 0x02, 0xb6, 0xa4, 0x34, 0x05, 0x75, 0xe0, 0x86,
	0x3f, 0x14, 0xb1, 0x37, 0x85, 0x2c, 0x2f, 0x8b, 0x79, 0xa7, 0x80, 0xeb, 0x52, 0xad, 0x93, 0x63,
	0xda, 0x83, 0xb2, 0x0c, 0x64, 0x3c, 0x14, 0x4e, 0x45, 0xe9, 0xdf, 0x9e, 0xd3, 0x7f, 0x6a, 0x2a,
	0x01, 0x4e, 0x91, 0xa8, 0x03, 0x55, 0x46, 0x04, 0x1b, 0x7b, 0x49, 0xdc, 0xa7, 0xc1, 0xd8, 0xd9,
	0x50, 0x9a, 0x9f, 0xcf, 0x64, 0xcc, 0x24, 0x9a, 0x2d, 0x2c, 0xd1, 0xa7, 0x0a, 0x8c, 0x2d, 0x36,
	0x59, 0x20, 0x1f, 0x6e, 0x32, 0xf2, 0xdb, 0x21, 0xe1, 0xc2, 0x1b, 0x50, 0xc6, 0x62, 0x96, 0x52,
	0x82, 0xa2, 0xfc, 0xe2, 0x2a, 0x4a, 0xa5, 0xf6, 0x52, 0x69, 0x19, 0xea, 0x4d, 0x36, 0x2f, 0x44,
	0xdf, 0x40, 0x25, 0x61, 0x34, 0x66, 0x54, 0x8c, 0x1d, 0xeb, 0x6e, 0xe1, 0x5e, 0x6d, 0x36, 0xf6,
	0x92, 0x95, 0x46, 0xdd, 0x53, 0x03, 0xc2, 0x19, 0x1c, 0x9d, 0xc1, 0x76, 0x7a, 0x3a, 0x93, 0xb9,
	0x9e, 0x88, 0x3d, 0x3f, 0x0c, 0x9d, 0xaa, 0x4a, 0xf6, 0x9d, 0x45, 0xc9, 0xae, 0x5c, 0x7d, 0x92,
	0x28, 0x8f, 0xa5, 0x07, 0xd2, 0x3b, 0xfc, 0x2c, 0xde, 0x0f, 0x43, 0xf4, 0x35, 0x58, 0xcc, 0x17,
	0xc4, 0xeb, 0xd3, 0x01, 0x15, 0xdc, 0xb1, 0x15, 0xd5, 0xad, 0x99, 0x33, 0xf9, 0x82, 0x1c, 0xc9,
	0x7d, 0x0c, 0x2c, 0xfd, 0xcb, 0xd1, 0x09, 0x6c, 0xd3, 0x28, 0xe8, 0x0f, 0x43, 0xe2, 0x8d, 0x7a,
	0x5e, 0x9e, 0xa4, 0xb6, 0xf4, 0xbe, 0x6f, 0x1a, 0xcd, 0x37, 0x3d, 0x3c, 0x21, 0x3c, 0x04, 0xab,
	0xe7, 0xf3, 0x5e, 0xea, 0xf4, 0xba, 0x3a, 0xca, 0x0f, 0x2f, 0x77, 0x7a, 0xc7, 0xe7, 0x3d, 0xe3,
	0x6b, 0xe8, 0x65, 0xff, 0xd1, 0x2f, 0xc1, 0x1e, 0x72, 0xe2, 0x5d, 0x90, 0x73, 0x1e, 0x07, 0xef,
	0x89, 0x70, 0x1a, 0x4b, 0x8f, 0x53, 0x1d, 0x72, 0xf2, 0x6d, 0x8a, 0x77, 0xff, 0x5c, 0x00, 0x2b,
	0x97, 0x23, 0xe8, 0x36, 0x54, 0x74, 0x82, 0xc5, 0x91, 0x29, 0xda, 0x65, 0xb5, 0x3e, 0x89, 0xd0,
	0x63, 0xb0, 0xa2, 0xe1, 0xc0, 0x93, 0x4b, 0x4a, 0xf8, 0xb5, 0x8a, 0x37, 0x44, 0xc3, 0x01, 0xd6,
	0x78, 0xb4, 0x0f, 0xf5, 0x84, 0x30, 0x4f, 0x72, 0xa7, 0x79, 0x5f, 0x5c, 0x96, 0xf7, 0x76, 0x42,
	0xd8, 0x19, 0x1b, 0x9f, 0x69, 0xbc, 0x7b, 0x0a, 0x9b, 0x0b, 0x92, 0x0f, 0x39, 0x33, 0x15, 0x6b,
	0x52, 0xaf, 0x76, 0xc0, 0xca, 0xb5, 0x2f, 0xd3, 0xb7, 0x60, 0xd2, 0xb7, 0xdc, 0xbf, 0x15, 0x01,
	0x26, 0xae, 0x45, 0x87, 0x50, 0x32, 0x75, 0xad, 0xa0, 0x8e, 0xf6, 0xe0, 0x3a, 0x01, 0x31, 0xd9,
	0x27, 0x7b, 0x88, 0x56, 0x96, 0x34, 0x41, 0x1c, 0xbf, 0xa7, 0xc4, 0x38, 0xe9, 0x7a, 0x34, 0x4f,
	0x94, 0x8a, 0xa4, 0xd1, 0xca, 0x28, 0x81, 0x9b, 0x41, 0x1c, 0x45, 0x44, 0x21, 0xbd, 0x84, 0xc5,
	0x09, 0x61, 0x42, 0xba, 0x5e, 0xfb, 0xed, 0x9b, 0x6b, 0xb2, 0xa6, 0x0c, 0xa7, 0x19, 0x41, 0x67,
	0x05, 0x6f, 0x05, 0x0b, 0xe4, 0xee, 0x7d, 0x28, 0x99, 0x02, 0xbe, 0x03, 0x96, 0x36, 0xc6, 0xcb,
	0xf5, 0x6f, 0xd0, 0xa2, 0x63, 0x7f, 0x40, 0xdc, 0xe7, 0x50, 0xd2, 0x07, 0x5e, 0xd8, 0xe3, 0x1f,
	0x40, 0x51, 0x88, 0xbe, 0x31, 0xff, 0x8a, 0x00, 0x4b, 0x94, 0xbb, 0x07, 0x5b, 0x8b, 0x4e, 0x89,
	0x3e, 0x81, 0x0d, 0x1e, 0x0f, 0x59, 0x40, 0x3c, 0x9a, 0x28, 0xf6, 0x0a, 0xae, 0x68, 0xc1, 0xf3,
	0xe4, 0x00, 0x41, 0x43, 0xdf, 0x9d, 0x49, 0x2b, 0x3b, 0xd8, 0x84, 0x1b, 0x69, 0x7b, 0x9a, 0x08,
	0x1d, 0xd8, 0xce, 0x17, 0xeb, 0x5c, 0xe7, 0xfb, 0x0d, 0xd4, 0x30, 0x09, 0x29, 0x23, 0x81, 0x30,
	0xbd, 0xef, 0x33, 0xb0, 0x0d, 0x56, 0x8b, 0x8d, 0x4d, 0x55, 0xdd, 0x01, 0xb4, 0x4c, 0x82, 0x54,
	0x0b, 0xcd, 0x40, 0x3a, 0xad, 0xaa, 0x52, 0x98, 0x82, 0x9a, 0xdf, 0x15, 0x60, 0x5d, 0x45, 0x04,
	0xb5, 0x60, 0x5d, 0xf7, 0x2c, 0x9d, 0x52, 0xce, 0x82, 0xa8, 0xa9, 0x36, 0x85, 0x35, 0x0c, 0x7d,
	0x05, 0xeb, 0x4c, 0x0a, 0x33, 0xe7, 0x5d, 0x16, 0x65, 0x35, 0x85, 0xa8, 0x4f, 0x3c, 0x92, 0x97,
	0xd6, 0x1c, 0xa6, 0x68, 0xae, 0xe5, 0xb4, 0xd6, 0x94, 0x99, 0x9d, 0x15, 0x9c, 0xe1, 0x51, 0x1b,
	0x2a, 0x69, 0xb7, 0x5c, 0xd2, 0x55, 0x33, 0xdc, 0x41, 0x05, 0x4a, 0xbe, 0x62, 0x6a, 0x72, 0xa8,
	0xbd, 0xa1, 0x4c, 0x0c, 0xfd, 0x7e, 0x3a, 0x7a, 0x3a, 0x50, 0x4e, 0x7c, 0x21, 0x08, 0xcb, 0xea,
	0x87, 0x59, 0x66, 0x79, 0xb2, 0x9a, 0xcb, 0x93, 0x3d, 0x28, 0x0d, 0x88, 0xe8, 0xc5, 0xa1, 0x3a,
	0x77, 0x6d, 0x6e, 0xf6, 0x31, 0xb7, 0x5d, 0x41, 0xb0, 0x81, 0x36, 0xff, 0x55, 0x81, 0x8d, 0xac,
	0x94, 0xa2, 0x36, 0xac, 0x73, 0xe1, 0x77, 0x89, 0xf1, 0xef, 0xd5, 0x05, 0x49, 0x43, 0x65, 0x76,
	0x87, 0x94, 0xfb, 0xe7, 0xfd, 0xa9, 0xba, 0x60, 0x44, 0x2f, 0xc8, 0x18, 0x7d, 0x0d, 0x65, 0x6d,
	0xa1, 0xbc, 0x6c, 0xb2, 0x34, 0x7f, 0x7a, 0x49, 0x97, 0x68, 0x69, 0x97, 0xe2, 0x14, 0xee, 0xfe,
	0xb5, 0x0c, 0x25, 0x93, 0x4d, 0xaf, 0xa1, 0x66, 0xf2, 0x37, 0x5f, 0x9e, 0xac, 0xf6, 0xc3, 0xab,
	0xb9, 0x5a, 0xaf, 0x94, 0xd2, 0x64, 0x20, 0xb2, 0x79, 0x5e, 0x80, 0x42, 0xd8, 0x0c, 0x09, 0x17,
	0x34, 0x52, 0x57, 0x28, 0xe3, 0xd6, 0xe9, 0xf2, 0xd5, 0x12, 0xee, 0xa7, 0x13, 0xcd, 0xc9, 0x07,
	0x50, 0x38, 0x27, 0x45, 0x6f, 0xa1, 0x3e, 0xd3, 0x81, 0x4d, 0x6a, 0x7d, 0xb1, 0xe4, 0x0b, 0x78,
	0xaa, 0xf1, 0x76, 0x56, 0x70, 0x6d, 0xba, 0x15, 0x4b, 0xb7, 0x30, 0x32, 0x88, 0x05, 0x91, 0xfd,
	0x9c, 0x11, 0xce, 0x4d, 0xde, 0x3d, 0x5c, 0x4a, 0x2c, 0x95, 0xf6, 0xb5, 0x8e, 0x74, 0x0b, 0xcb,
	0x0b, 0xd0, 0x11, 0x58, 0x5d, 0x12, 0x11, 0x46, 0x03, 0x15, 0x53, 0x3d, 0x4b, 0xdf, 0x5f, 0xc2,
	0xf9, 0x4c, 0x6b, 0xbc, 0x20, 0xe3, 0xce, 0x0a, 0x86, 0x6e, 0xb6, 0x42, 0x1e, 0x20, 0x53, 0xff,
	0x46, 0x32, 0x71, 0xcc, 0xd8, 0x59, 0x52, 0xa4, 0xbb, 0x4b, 0x48, 0x73, 0xd3, 0x88, 0xba, 0xd9,
	0x72, 0xa6, 0xed, 0xcd, 0xc8, 0xdc, 0x3a, 0xd8, 0x53, 0x71, 0x76, 0xb7, 0x00, 0xcd, 0x07, 0xc7,
	0x7d, 0x2b, 0x6b, 0xd4, 0x94, 0xfb, 0x96, 0x55, 0x66, 0x39, 0xee, 0x86, 0x84, 0x07, 0x8c, 0x26,
	0x22, 0x66, 0xb9, 0xfc, 0xb6, 0x27, 0x52, 0xd9, 0xfa, 0xea, 0x60, 0x4f, 0x79, 0xd4, 0xfd, 0x19,
	0xc0, 0xc4, 0x1d, 0xe8, 0x3e, 0x34, 0x72, 0x2c, 0xca, 0x09, 0xe6, 0x5b, 0xf5, 0x89, 0x5c, 0xd9,
	0xe3, 0xfe, 0xa5, 0x00, 0x8d, 0x59, 0x9b, 0x3f, 0x42, 0x1f, 0x3d, 0x86, 0x2a, 0xf9, 0x90, 0x90,
	0x40, 0x18, 0x2f, 0xaf, 0x2e, 0x9d, 0x61, 0x2c, 0x8d, 0xd7, 0x5f, 0xca, 0xbd, 0x84, 0x8a, 0x1f,
	0xf1, 0x12, 0x42, 0xd0, 0xd0, 0x77, 0x36, 0xd7, 0x11, 0xde, 0x83, 0x3d, 0x85, 0x5e, 0xd8, 0xdb,
	0xb6, 0x60, 0x5d, 0x9b, 0xa3, 0xdd, 0xaa, 0x17, 0xe8, 0xcb, 0xfc, 0x0b, 0xf1, 0xea, 0xd3, 0x6b,
	0x60, 0xf3, 0xef, 0x45, 0xb0, 0x4c, 0xf1, 0x94, 0xef, 0x82, 0x85, 0xdf, 0x72, 0xa0, 0x1c, 0xc6,
	0x03, 0x9f, 0x46, 0x72, 0xde, 0x2a, 0xca, 0x6a, 0x6a, 0x96, 0xe8, 0x01, 0x94, 0x54, 0xf1, 0x4f,
	0x8d, 0xde, 0x5c, 0xd0, 0x27, 0xb0, 0x81, 0xa0, 0x97, 0x60, 0xc9, 0x4b, 0x48, 0x19, 0xf1, 0x44,
	0x5f, 0xdf, 0xb7, 0xda, 0xec, 0x7d, 0xcb, 0x1d, 0xa5, 0x75, 0xd6, 0xe7, 0x58, 0xe3, 0x07, 0x24,
	0x12, 0x67, 0xe3, 0x84, 0x60, 0x30, 0x04, 0x67, 0x7d, 0x8e, 0x9e, 0x41, 0x63, 0xa4, 0xd1, 0x93,
	0xc7, 0xdd, 0xba, 0x3a, 0xc5, 0x9d, 0x85, 0x9c, 0x26, 0x99, 0x71, 0x7d, 0x34, 0xb5, 0xe6, 0xb3,
	0x03, 0x79, 0xe9, 0xfa, 0x03, 0xf9, 0xe5, 0x0f, 0x84, 0xf2, 0xff, 0xfe, 0x40, 0x68, 0x3e, 0x02,
	0x34, 0x6f, 0x3a, 0xaa, 0xc0, 0xda, 0xf1, 0xc9, 0xf1, 0x61, 0x63, 0x05, 0xdd, 0x00, 0xfb, 0xf0,
	0xed, 0xd9, 0x21, 0x3e, 0xde, 0x3f, 0xf2, 0x4e, 0x8e, 0x8f, 0x7e, 0xdd, 0x28, 0xa0, 0x32, 0x14,
	0xf7, 0x8f, 0x8e, 0x1a, 0xab, 0xcd, 0x7f, 0x14, 0x01, 0x29, 0xaf, 0x3f, 0x89, 0xa3, 0x77, 0xb4,
	0x6b, 0x26, 0x9c, 0x85, 0x51, 0xfd, 0x05, 0xd8, 0xa9, 0xff, 0xe4, 0x64, 0xa1, 0x63, 0x3b, 0xd7,
	0xea, 0x73, 0x01, 0xc1, 0xd5, 0xd1, 0x64, 0xc1, 0x51, 0x1b, 0x6e, 0xd2, 0x48, 0xf6, 0x54, 0xbf,
	0xef, 0xc5, 0x51, 0x7f, 0xec, 0xe5, 0xf3, 0x7f, 0x43, 0x3e, 0x38, 0xf4, 0xe6, 0x49, 0xd4, 0x1f,
	0xa7, 0x65, 0xe3, 0x0d, 0xdc, 0x62, 0x84, 0x27, 0x71, 0xc4, 0xc9, 0xac, 0xc7, 0xd6, 0xae, 0xe7,
	0xb1, 0xad, 0x54, 0x7f, 0xea, 0x4d, 0xf5, 0x73, 0x70, 0x17, 0xf1, 0xca, 0xda, 0x3c, 0x22, 0x2a,
	0x2b, 0x36, 0xf0, 0xad, 0x39, 0x4d, 0xac, 0xb6, 0xaf, 0x88, 0x62, 0xe9, 0xff, 0x78, 0xe6, 0x3d,
	0x83, 0x1b, 0x23, 0xbf, 0x4f, 0x43, 0x99, 0x59, 0x59, 0x7e, 0x2e, 0x7d, 0xa3, 0xe3, 0x46, 0xaa,
	0x94, 0xa6, 0x67, 0xfb, 0xdf, 0x05, 0xb8, 0xa9, 0x42, 0xfa, 0x94, 0xf2, 0x20, 0x1e, 0x11, 0x36,
	0x7e, 0x45, 0xd8, 0x88, 0x06, 0x04, 0xbd, 0x86, 0xea, 0x2b, 0xc1, 0x88, 0x3f, 0xc0, 0xfa, 0x82,
	0xcd, 0x8c, 0x07, 0x19, 0xde, 0xd4, 0x6e, 0x77, 0xe7, 0xd2, 0x7d, 0xed, 0x98, 0xe6, 0xca, 0xbd,
	0xc2, 0x97, 0x05, 0x14, 0x83, 0xf5, 0x2b, 0x22, 0x67, 0xc1, 0xef, 0x89, 0x75, 0xe7, 0x77, 0xff,
	0xfc, 0xee, 0xf7, 0xab, 0xb7, 0x9b, 0x5b, 0xbb, 0xa3, 0xf6, 0x6e, 0x98, 0x6e, 0x3f, 0xd2, 0x55,
	0xe1, 0x51, 0xe1, 0xc7, 0xe7, 0x25, 0xe5, 0x87, 0xbd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xfb,
	0xdf, 0x40, 0xe2, 0xd0, 0x14, 0x00, 0x00,
}
