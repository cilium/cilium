// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/address.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SocketAddress_Protocol int32

const (
	SocketAddress_TCP SocketAddress_Protocol = 0
	// [#not-implemented-hide:]
	SocketAddress_UDP SocketAddress_Protocol = 1
)

var SocketAddress_Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var SocketAddress_Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x SocketAddress_Protocol) String() string {
	return proto.EnumName(SocketAddress_Protocol_name, int32(x))
}
func (SocketAddress_Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1, 0} }

type Pipe struct {
	// Unix Domain Socket path.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Pipe) Reset()                    { *m = Pipe{} }
func (m *Pipe) String() string            { return proto.CompactTextString(m) }
func (*Pipe) ProtoMessage()               {}
func (*Pipe) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Pipe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SocketAddress struct {
	Protocol SocketAddress_Protocol `protobuf:"varint,1,opt,name=protocol,enum=envoy.api.v2.SocketAddress_Protocol" json:"protocol,omitempty"`
	// The address for this socket. :ref:`Listeners <config_listeners>` will bind
	// to the address or outbound connections will be made. An empty address
	// implies a bind to 0.0.0.0 or ::. It's still possible to distinguish on an
	// address via the prefix/suffix matching in FilterChainMatch after connection.
	// For :ref:`clusters <config_cluster_manager_cluster>`, an address may be
	// either an IP or hostname to be resolved via DNS. If it is a hostname,
	// :ref:`resolver_name <envoy_api_field_SocketAddress.resolver_name>` should
	// be set unless default (i.e. DNS) resolution is expected.
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// Types that are valid to be assigned to PortSpecifier:
	//	*SocketAddress_PortValue
	//	*SocketAddress_NamedPort
	PortSpecifier isSocketAddress_PortSpecifier `protobuf_oneof:"port_specifier"`
	// The name of the resolver. This must have been registered with Envoy. If this is
	// empty, a context dependent default applies. If address is a hostname this
	// should be set for resolution other than DNS. If the address is a concrete
	// IP address, no resolution will occur.
	ResolverName string `protobuf:"bytes,5,opt,name=resolver_name,json=resolverName" json:"resolver_name,omitempty"`
}

func (m *SocketAddress) Reset()                    { *m = SocketAddress{} }
func (m *SocketAddress) String() string            { return proto.CompactTextString(m) }
func (*SocketAddress) ProtoMessage()               {}
func (*SocketAddress) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type isSocketAddress_PortSpecifier interface {
	isSocketAddress_PortSpecifier()
}

type SocketAddress_PortValue struct {
	PortValue uint32 `protobuf:"varint,3,opt,name=port_value,json=portValue,oneof"`
}
type SocketAddress_NamedPort struct {
	NamedPort string `protobuf:"bytes,4,opt,name=named_port,json=namedPort,oneof"`
}

func (*SocketAddress_PortValue) isSocketAddress_PortSpecifier() {}
func (*SocketAddress_NamedPort) isSocketAddress_PortSpecifier() {}

func (m *SocketAddress) GetPortSpecifier() isSocketAddress_PortSpecifier {
	if m != nil {
		return m.PortSpecifier
	}
	return nil
}

func (m *SocketAddress) GetProtocol() SocketAddress_Protocol {
	if m != nil {
		return m.Protocol
	}
	return SocketAddress_TCP
}

func (m *SocketAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SocketAddress) GetPortValue() uint32 {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_PortValue); ok {
		return x.PortValue
	}
	return 0
}

func (m *SocketAddress) GetNamedPort() string {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_NamedPort); ok {
		return x.NamedPort
	}
	return ""
}

func (m *SocketAddress) GetResolverName() string {
	if m != nil {
		return m.ResolverName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SocketAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SocketAddress_OneofMarshaler, _SocketAddress_OneofUnmarshaler, _SocketAddress_OneofSizer, []interface{}{
		(*SocketAddress_PortValue)(nil),
		(*SocketAddress_NamedPort)(nil),
	}
}

func _SocketAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NamedPort)
	case nil:
	default:
		return fmt.Errorf("SocketAddress.PortSpecifier has unexpected type %T", x)
	}
	return nil
}

func _SocketAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SocketAddress)
	switch tag {
	case 3: // port_specifier.port_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PortSpecifier = &SocketAddress_PortValue{uint32(x)}
		return true, err
	case 4: // port_specifier.named_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PortSpecifier = &SocketAddress_NamedPort{x}
		return true, err
	default:
		return false, nil
	}
}

func _SocketAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NamedPort)))
		n += len(x.NamedPort)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BindConfig struct {
	// The address to bind to when creating a socket.
	SourceAddress *SocketAddress `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (m *BindConfig) Reset()                    { *m = BindConfig{} }
func (m *BindConfig) String() string            { return proto.CompactTextString(m) }
func (*BindConfig) ProtoMessage()               {}
func (*BindConfig) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *BindConfig) GetSourceAddress() *SocketAddress {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

// Addresses specify either a logical or physical address and port, which are
// used to tell Envoy where to bind/listen, connect to upstream and find
// management servers.
type Address struct {
	// Types that are valid to be assigned to Address:
	//	*Address_SocketAddress
	//	*Address_Pipe
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

type isAddress_Address interface {
	isAddress_Address()
}

type Address_SocketAddress struct {
	SocketAddress *SocketAddress `protobuf:"bytes,1,opt,name=socket_address,json=socketAddress,oneof"`
}
type Address_Pipe struct {
	Pipe *Pipe `protobuf:"bytes,2,opt,name=pipe,oneof"`
}

func (*Address_SocketAddress) isAddress_Address() {}
func (*Address_Pipe) isAddress_Address()          {}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Address) GetSocketAddress() *SocketAddress {
	if x, ok := m.GetAddress().(*Address_SocketAddress); ok {
		return x.SocketAddress
	}
	return nil
}

func (m *Address) GetPipe() *Pipe {
	if x, ok := m.GetAddress().(*Address_Pipe); ok {
		return x.Pipe
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Address) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Address_OneofMarshaler, _Address_OneofUnmarshaler, _Address_OneofSizer, []interface{}{
		(*Address_SocketAddress)(nil),
		(*Address_Pipe)(nil),
	}
}

func _Address_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SocketAddress); err != nil {
			return err
		}
	case *Address_Pipe:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipe); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Address.Address has unexpected type %T", x)
	}
	return nil
}

func _Address_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Address)
	switch tag {
	case 1: // address.socket_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SocketAddress)
		err := b.DecodeMessage(msg)
		m.Address = &Address_SocketAddress{msg}
		return true, err
	case 2: // address.pipe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pipe)
		err := b.DecodeMessage(msg)
		m.Address = &Address_Pipe{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Address_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		s := proto.Size(x.SocketAddress)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Address_Pipe:
		s := proto.Size(x.Pipe)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// CidrRange specifies an IP Address and a prefix length to construct
// the subnet mask for a `CIDR <https://tools.ietf.org/html/rfc4632>`_ range.
type CidrRange struct {
	// IPv4 or IPv6 address, e.g. 192.0.0.0 or 2001:db8::.
	AddressPrefix string `protobuf:"bytes,1,opt,name=address_prefix,json=addressPrefix" json:"address_prefix,omitempty"`
	// Length of prefix, e.g. 0, 32.
	PrefixLen *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=prefix_len,json=prefixLen" json:"prefix_len,omitempty"`
}

func (m *CidrRange) Reset()                    { *m = CidrRange{} }
func (m *CidrRange) String() string            { return proto.CompactTextString(m) }
func (*CidrRange) ProtoMessage()               {}
func (*CidrRange) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *CidrRange) GetAddressPrefix() string {
	if m != nil {
		return m.AddressPrefix
	}
	return ""
}

func (m *CidrRange) GetPrefixLen() *google_protobuf.UInt32Value {
	if m != nil {
		return m.PrefixLen
	}
	return nil
}

func init() {
	proto.RegisterType((*Pipe)(nil), "envoy.api.v2.Pipe")
	proto.RegisterType((*SocketAddress)(nil), "envoy.api.v2.SocketAddress")
	proto.RegisterType((*BindConfig)(nil), "envoy.api.v2.BindConfig")
	proto.RegisterType((*Address)(nil), "envoy.api.v2.Address")
	proto.RegisterType((*CidrRange)(nil), "envoy.api.v2.CidrRange")
	proto.RegisterEnum("envoy.api.v2.SocketAddress_Protocol", SocketAddress_Protocol_name, SocketAddress_Protocol_value)
}

func init() { proto.RegisterFile("api/address.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x18, 0xcd, 0x6c, 0xb2, 0x6e, 0xf3, 0xb5, 0x59, 0xd6, 0xb9, 0x34, 0xd4, 0xaa, 0x25, 0x2a, 0x2c,
	0x1e, 0xb2, 0x92, 0xfe, 0x02, 0xb3, 0x05, 0x57, 0x28, 0x25, 0x44, 0xeb, 0x49, 0x08, 0xd3, 0xcd,
	0xb7, 0xeb, 0x60, 0x9a, 0x19, 0x26, 0xd9, 0xa8, 0x37, 0xf1, 0xe0, 0x41, 0xcf, 0xfe, 0x17, 0xf1,
	0xd4, 0xbf, 0xd3, 0x7f, 0x21, 0x33, 0x49, 0x4a, 0x17, 0x41, 0xe8, 0x6d, 0xf2, 0xbe, 0xf7, 0x5e,
	0xde, 0xbc, 0xf9, 0xe0, 0x3e, 0x93, 0x7c, 0xc6, 0xf2, 0x5c, 0x61, 0x55, 0x85, 0x52, 0x89, 0x5a,
	0xd0, 0x3d, 0x2c, 0x1b, 0xf1, 0x25, 0x64, 0x92, 0x87, 0x4d, 0x74, 0xf0, 0x68, 0x2d, 0xc4, 0xba,
	0xc0, 0x99, 0x99, 0x5d, 0x6c, 0x56, 0xb3, 0x4f, 0x8a, 0x49, 0x89, 0xaa, 0x63, 0x1f, 0xec, 0x37,
	0xac, 0xe0, 0x39, 0xab, 0x71, 0xd6, 0x1f, 0xda, 0x41, 0xf0, 0x0c, 0x9c, 0x84, 0x4b, 0xa4, 0x0f,
	0xc1, 0x91, 0xac, 0xfe, 0xe0, 0x93, 0x23, 0x32, 0x75, 0x63, 0xf7, 0xcf, 0xf5, 0x95, 0xed, 0xa8,
	0xc1, 0x84, 0xa4, 0x06, 0x0e, 0x7e, 0x0d, 0xc0, 0x7b, 0x23, 0x96, 0x1f, 0xb1, 0x7e, 0xd9, 0xa6,
	0xa0, 0xa7, 0xb0, 0x63, 0x1c, 0x96, 0xa2, 0x30, 0xa2, 0x71, 0xf4, 0x34, 0xbc, 0x1d, 0x29, 0xdc,
	0xa2, 0x87, 0x49, 0xc7, 0x8d, 0x41, 0x5b, 0x0f, 0xbf, 0x91, 0x81, 0x6f, 0xa5, 0x37, 0x0e, 0xd4,
	0x87, 0x51, 0x77, 0x3d, 0x7f, 0xa0, 0x13, 0xa4, 0xfd, 0x27, 0x7d, 0x0c, 0x20, 0x85, 0xaa, 0xb3,
	0x86, 0x15, 0x1b, 0xf4, 0xed, 0x23, 0x32, 0xf5, 0x16, 0x56, 0xea, 0x6a, 0xec, 0x9d, 0x86, 0x34,
	0xa1, 0x64, 0x97, 0x98, 0x67, 0x1a, 0xf2, 0x1d, 0xad, 0xd6, 0x04, 0x83, 0x25, 0x42, 0xd5, 0xf4,
	0x09, 0x78, 0x0a, 0x2b, 0x51, 0x34, 0xa8, 0x32, 0x8d, 0xfa, 0x43, 0xf3, 0x87, 0xbd, 0x1e, 0x3c,
	0x63, 0x97, 0x18, 0x1c, 0xc2, 0x4e, 0x1f, 0x91, 0x8e, 0xc0, 0x7e, 0x3b, 0x4f, 0x26, 0x96, 0x3e,
	0x9c, 0x9f, 0x24, 0x13, 0x12, 0xef, 0xc3, 0xd8, 0x84, 0xa8, 0x24, 0x2e, 0xf9, 0x8a, 0xa3, 0xa2,
	0xc3, 0xdf, 0xd7, 0x57, 0x36, 0x09, 0xde, 0x03, 0xc4, 0xbc, 0xcc, 0xe7, 0xa2, 0x5c, 0xf1, 0x35,
	0x3d, 0x83, 0x71, 0x25, 0x36, 0x6a, 0x89, 0x59, 0x7f, 0x19, 0xdd, 0xcc, 0x6e, 0xf4, 0xe0, 0x3f,
	0xcd, 0x74, 0x85, 0xfc, 0x20, 0xba, 0x6c, 0xaf, 0x95, 0x77, 0xa3, 0xe0, 0x27, 0x81, 0x51, 0xdf,
	0xf7, 0x89, 0xf6, 0xd6, 0xba, 0x3b, 0x78, 0x2f, 0x2c, 0xed, 0x78, 0xfb, 0xd5, 0xa6, 0xe0, 0x48,
	0x2e, 0xd1, 0x94, 0xbc, 0x1b, 0xd1, 0x6d, 0xad, 0x5e, 0x84, 0x85, 0x95, 0x1a, 0x46, 0x3c, 0xb9,
	0x79, 0x91, 0xfe, 0xae, 0xdf, 0x09, 0xb8, 0x73, 0x9e, 0xab, 0x94, 0x95, 0x6b, 0xa4, 0x2f, 0x60,
	0xdc, 0xcd, 0x33, 0xa9, 0x70, 0xc5, 0x3f, 0xff, 0xbb, 0x3a, 0x5e, 0x47, 0x48, 0xcc, 0x9c, 0xbe,
	0x02, 0x68, 0x99, 0x59, 0x81, 0x65, 0x97, 0xe0, 0x30, 0x6c, 0x17, 0x37, 0xec, 0x17, 0x37, 0x3c,
	0x7f, 0x5d, 0xd6, 0xc7, 0x91, 0x79, 0xda, 0xae, 0x9a, 0xe7, 0xb6, 0xff, 0x95, 0xa4, 0x6e, 0xab,
	0x3d, 0xc5, 0xf2, 0xe2, 0x9e, 0x21, 0x1f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x94, 0x7e,
	0x05, 0x16, 0x03, 0x00, 0x00,
}
