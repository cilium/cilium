// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/address.proto

package envoy_api_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SocketAddress_Protocol int32

const (
	SocketAddress_TCP SocketAddress_Protocol = 0
	SocketAddress_UDP SocketAddress_Protocol = 1
)

var SocketAddress_Protocol_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}
var SocketAddress_Protocol_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x SocketAddress_Protocol) String() string {
	return proto.EnumName(SocketAddress_Protocol_name, int32(x))
}
func (SocketAddress_Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type Pipe struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
}

func (m *Pipe) Reset()                    { *m = Pipe{} }
func (m *Pipe) String() string            { return proto.CompactTextString(m) }
func (*Pipe) ProtoMessage()               {}
func (*Pipe) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Pipe) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SocketAddress struct {
	Protocol SocketAddress_Protocol `protobuf:"varint,1,opt,name=protocol,enum=envoy.api.v2.SocketAddress_Protocol" json:"protocol,omitempty"`
	// The address for this socket.  Listeners will bind to the address.  An empty
	// address implies a bind to 0.0.0.0 or ::. It's still possible to distinguish on
	// address via the prefix/suffix matching in FilterChainMatch after connection.
	// For clusters, an address may be either an IP or hostname to be resolved via
	// DNS.  If it is a hostname, resolve_name should be set.
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// Types that are valid to be assigned to PortSpecifier:
	//	*SocketAddress_PortValue
	//	*SocketAddress_NamedPort
	PortSpecifier isSocketAddress_PortSpecifier `protobuf_oneof:"port_specifier"`
	// The name of the resolver. This must have been registered with Envoy. If this is
	// empty, a context dependent default applies. If address is a hostname this
	// should be set.  If the address is a concrete IP address, no resolution will occur.
	ResolverName string `protobuf:"bytes,5,opt,name=resolver_name,json=resolverName" json:"resolver_name,omitempty"`
}

func (m *SocketAddress) Reset()                    { *m = SocketAddress{} }
func (m *SocketAddress) String() string            { return proto.CompactTextString(m) }
func (*SocketAddress) ProtoMessage()               {}
func (*SocketAddress) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type isSocketAddress_PortSpecifier interface {
	isSocketAddress_PortSpecifier()
}

type SocketAddress_PortValue struct {
	PortValue uint32 `protobuf:"varint,3,opt,name=port_value,json=portValue,oneof"`
}
type SocketAddress_NamedPort struct {
	NamedPort string `protobuf:"bytes,4,opt,name=named_port,json=namedPort,oneof"`
}

func (*SocketAddress_PortValue) isSocketAddress_PortSpecifier() {}
func (*SocketAddress_NamedPort) isSocketAddress_PortSpecifier() {}

func (m *SocketAddress) GetPortSpecifier() isSocketAddress_PortSpecifier {
	if m != nil {
		return m.PortSpecifier
	}
	return nil
}

func (m *SocketAddress) GetProtocol() SocketAddress_Protocol {
	if m != nil {
		return m.Protocol
	}
	return SocketAddress_TCP
}

func (m *SocketAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SocketAddress) GetPortValue() uint32 {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_PortValue); ok {
		return x.PortValue
	}
	return 0
}

func (m *SocketAddress) GetNamedPort() string {
	if x, ok := m.GetPortSpecifier().(*SocketAddress_NamedPort); ok {
		return x.NamedPort
	}
	return ""
}

func (m *SocketAddress) GetResolverName() string {
	if m != nil {
		return m.ResolverName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SocketAddress) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SocketAddress_OneofMarshaler, _SocketAddress_OneofUnmarshaler, _SocketAddress_OneofSizer, []interface{}{
		(*SocketAddress_PortValue)(nil),
		(*SocketAddress_NamedPort)(nil),
	}
}

func _SocketAddress_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NamedPort)
	case nil:
	default:
		return fmt.Errorf("SocketAddress.PortSpecifier has unexpected type %T", x)
	}
	return nil
}

func _SocketAddress_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SocketAddress)
	switch tag {
	case 3: // port_specifier.port_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.PortSpecifier = &SocketAddress_PortValue{uint32(x)}
		return true, err
	case 4: // port_specifier.named_port
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PortSpecifier = &SocketAddress_NamedPort{x}
		return true, err
	default:
		return false, nil
	}
}

func _SocketAddress_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SocketAddress)
	// port_specifier
	switch x := m.PortSpecifier.(type) {
	case *SocketAddress_PortValue:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.PortValue))
	case *SocketAddress_NamedPort:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.NamedPort)))
		n += len(x.NamedPort)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type BindConfig struct {
	// The address to bind to when creating a socket.
	SourceAddress *SocketAddress `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (m *BindConfig) Reset()                    { *m = BindConfig{} }
func (m *BindConfig) String() string            { return proto.CompactTextString(m) }
func (*BindConfig) ProtoMessage()               {}
func (*BindConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *BindConfig) GetSourceAddress() *SocketAddress {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

// Addresses specify either a logical or physical address and port, which are
// used to tell Envoy where to bind/listen, connect to upstream and find
// management servers.
type Address struct {
	// Types that are valid to be assigned to Address:
	//	*Address_SocketAddress
	//	*Address_Pipe
	Address isAddress_Address `protobuf_oneof:"address"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type isAddress_Address interface {
	isAddress_Address()
}

type Address_SocketAddress struct {
	SocketAddress *SocketAddress `protobuf:"bytes,1,opt,name=socket_address,json=socketAddress,oneof"`
}
type Address_Pipe struct {
	Pipe *Pipe `protobuf:"bytes,2,opt,name=pipe,oneof"`
}

func (*Address_SocketAddress) isAddress_Address() {}
func (*Address_Pipe) isAddress_Address()          {}

func (m *Address) GetAddress() isAddress_Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Address) GetSocketAddress() *SocketAddress {
	if x, ok := m.GetAddress().(*Address_SocketAddress); ok {
		return x.SocketAddress
	}
	return nil
}

func (m *Address) GetPipe() *Pipe {
	if x, ok := m.GetAddress().(*Address_Pipe); ok {
		return x.Pipe
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Address) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Address_OneofMarshaler, _Address_OneofUnmarshaler, _Address_OneofSizer, []interface{}{
		(*Address_SocketAddress)(nil),
		(*Address_Pipe)(nil),
	}
}

func _Address_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SocketAddress); err != nil {
			return err
		}
	case *Address_Pipe:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pipe); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Address.Address has unexpected type %T", x)
	}
	return nil
}

func _Address_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Address)
	switch tag {
	case 1: // address.socket_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SocketAddress)
		err := b.DecodeMessage(msg)
		m.Address = &Address_SocketAddress{msg}
		return true, err
	case 2: // address.pipe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pipe)
		err := b.DecodeMessage(msg)
		m.Address = &Address_Pipe{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Address_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Address)
	// address
	switch x := m.Address.(type) {
	case *Address_SocketAddress:
		s := proto.Size(x.SocketAddress)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Address_Pipe:
		s := proto.Size(x.Pipe)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Pipe)(nil), "envoy.api.v2.Pipe")
	proto.RegisterType((*SocketAddress)(nil), "envoy.api.v2.SocketAddress")
	proto.RegisterType((*BindConfig)(nil), "envoy.api.v2.BindConfig")
	proto.RegisterType((*Address)(nil), "envoy.api.v2.Address")
	proto.RegisterEnum("envoy.api.v2.SocketAddress_Protocol", SocketAddress_Protocol_name, SocketAddress_Protocol_value)
}

func init() { proto.RegisterFile("api/address.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0x5b, 0xa8, 0x02, 0x03, 0x25, 0xb8, 0xa7, 0x06, 0x8d, 0x92, 0xea, 0x81, 0x53, 0x49,
	0xea, 0x17, 0xd0, 0xc2, 0x81, 0x93, 0x69, 0xea, 0x9f, 0x6b, 0xb3, 0xb4, 0x03, 0x6e, 0x2c, 0xdd,
	0xcd, 0xb6, 0xd4, 0x78, 0x35, 0x7e, 0x70, 0xb3, 0x4b, 0x4b, 0xe0, 0x62, 0xe2, 0x6d, 0xe7, 0xf5,
	0xf7, 0x66, 0xa6, 0x6f, 0xe0, 0x82, 0x0a, 0x36, 0xa3, 0x69, 0x2a, 0xb1, 0x28, 0x3c, 0x21, 0x79,
	0xc9, 0xc9, 0x00, 0xf3, 0x8a, 0x7f, 0x79, 0x54, 0x30, 0xaf, 0xf2, 0xc7, 0xd7, 0x1b, 0xce, 0x37,
	0x19, 0xce, 0xf4, 0xb7, 0xd5, 0x6e, 0x3d, 0xfb, 0x94, 0x54, 0x08, 0x94, 0x35, 0xed, 0x8e, 0xc1,
	0x0a, 0x99, 0x40, 0x42, 0xc0, 0x12, 0xb4, 0x7c, 0x77, 0xcc, 0x89, 0x39, 0xed, 0x45, 0xfa, 0xed,
	0x7e, 0xb7, 0xc0, 0x7e, 0xe6, 0xc9, 0x07, 0x96, 0x8f, 0xfb, 0x09, 0xe4, 0x01, 0xba, 0xda, 0x96,
	0xf0, 0x4c, 0x93, 0x43, 0xff, 0xce, 0x3b, 0x1e, 0xe7, 0x9d, 0xe0, 0x5e, 0x58, 0xb3, 0xd1, 0xc1,
	0x45, 0x1c, 0xe8, 0xd4, 0xeb, 0x3a, 0x2d, 0x3d, 0xaa, 0x29, 0xc9, 0x0d, 0x80, 0xe0, 0xb2, 0x8c,
	0x2b, 0x9a, 0xed, 0xd0, 0x69, 0x4f, 0xcc, 0xa9, 0xbd, 0x34, 0xa2, 0x9e, 0xd2, 0xde, 0x94, 0xa4,
	0x80, 0x9c, 0x6e, 0x31, 0x8d, 0x95, 0xe4, 0x58, 0xca, 0xad, 0x00, 0xad, 0x85, 0x5c, 0x96, 0xe4,
	0x16, 0x6c, 0x89, 0x05, 0xcf, 0x2a, 0x94, 0xb1, 0x52, 0x9d, 0x33, 0x3d, 0x61, 0xd0, 0x88, 0x4f,
	0x74, 0x8b, 0xee, 0x15, 0x74, 0x9b, 0xb5, 0x48, 0x07, 0xda, 0x2f, 0xf3, 0x70, 0x64, 0xa8, 0xc7,
	0xeb, 0x22, 0x1c, 0x99, 0xc1, 0x08, 0x86, 0x7a, 0x89, 0x42, 0x60, 0xc2, 0xd6, 0x0c, 0xa5, 0x1b,
	0x02, 0x04, 0x2c, 0x4f, 0xe7, 0x3c, 0x5f, 0xb3, 0x0d, 0x09, 0x60, 0x58, 0xf0, 0x9d, 0x4c, 0x30,
	0x6e, 0xfe, 0x42, 0xc5, 0xd0, 0xf7, 0x2f, 0xff, 0x88, 0x21, 0xb2, 0xf7, 0x96, 0xba, 0x74, 0x7f,
	0x4c, 0xe8, 0x34, 0x81, 0x2e, 0x54, 0x3f, 0xc5, 0xfe, 0xa3, 0xdf, 0xd2, 0x50, 0x1d, 0x8f, 0xcf,
	0x32, 0x05, 0x4b, 0x30, 0x81, 0x3a, 0xd1, 0xbe, 0x4f, 0x4e, 0xbd, 0xea, 0xbc, 0x4b, 0x23, 0xd2,
	0x44, 0xd0, 0x3b, 0xc4, 0xbf, 0x3a, 0xd7, 0x37, 0xb9, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa8,
	0xa8, 0x97, 0xfc, 0x43, 0x02, 0x00, 0x00,
}
