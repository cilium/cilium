// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/filter/network/http_connection_manager.proto

/*
Package network is a generated protocol buffer package.

It is generated from these files:
	api/filter/network/http_connection_manager.proto

It has these top-level messages:
	Rds
	HttpFilter
	HttpConnectionManager
*/
package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v21 "api"
import envoy_api_v22 "api"
import envoy_api_v26 "api"
import envoy_api_v2_filter_accesslog "api/filter/accesslog"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HttpConnectionManager_CodecType int32

const (
	// For every new connection, the connection manager will determine which
	// codec to use. This mode supports both ALPN for TLS listeners as well as
	// protocol inference for plaintext listeners. If ALPN data is available, it
	// is preferred, otherwise protocol inference is used. In almost all cases,
	// this is the right option to choose for this setting.
	HttpConnectionManager_AUTO HttpConnectionManager_CodecType = 0
	// The connection manager will assume that the client is speaking HTTP/1.1.
	HttpConnectionManager_HTTP1 HttpConnectionManager_CodecType = 1
	// The connection manager will assume that the client is speaking HTTP/2
	// (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
	// Prior knowledge is allowed).
	HttpConnectionManager_HTTP2 HttpConnectionManager_CodecType = 2
)

var HttpConnectionManager_CodecType_name = map[int32]string{
	0: "AUTO",
	1: "HTTP1",
	2: "HTTP2",
}
var HttpConnectionManager_CodecType_value = map[string]int32{
	"AUTO":  0,
	"HTTP1": 1,
	"HTTP2": 2,
}

func (x HttpConnectionManager_CodecType) String() string {
	return proto.EnumName(HttpConnectionManager_CodecType_name, int32(x))
}
func (HttpConnectionManager_CodecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
// header.
type HttpConnectionManager_ForwardClientCertDetails int32

const (
	// Do not send the XFCC header to the next hop. This is the default value.
	HttpConnectionManager_SANITIZE HttpConnectionManager_ForwardClientCertDetails = 0
	// When the client connection is mTLS (Mutual TLS), forward the XFCC header
	// in the request.
	HttpConnectionManager_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 1
	// When the client connection is mTLS, append the client certificate
	// information to the request’s XFCC header and forward it.
	HttpConnectionManager_APPEND_FORWARD HttpConnectionManager_ForwardClientCertDetails = 2
	// When the client connection is mTLS, reset the XFCC header with the client
	// certificate information and send it to the next hop.
	HttpConnectionManager_SANITIZE_SET HttpConnectionManager_ForwardClientCertDetails = 3
	// Always forward the XFCC header in the request, regardless of whether the
	// client connection is mTLS.
	HttpConnectionManager_ALWAYS_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 4
)

var HttpConnectionManager_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}
var HttpConnectionManager_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x HttpConnectionManager_ForwardClientCertDetails) String() string {
	return proto.EnumName(HttpConnectionManager_ForwardClientCertDetails_name, int32(x))
}
func (HttpConnectionManager_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1}
}

type HttpConnectionManager_Tracing_OperationName int32

const (
	// The HTTP listener is used for ingress/incoming requests.
	HttpConnectionManager_Tracing_INGRESS HttpConnectionManager_Tracing_OperationName = 0
	// The HTTP listener is used for egress/outgoing requests.
	HttpConnectionManager_Tracing_EGRESS HttpConnectionManager_Tracing_OperationName = 1
)

var HttpConnectionManager_Tracing_OperationName_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}
var HttpConnectionManager_Tracing_OperationName_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x HttpConnectionManager_Tracing_OperationName) String() string {
	return proto.EnumName(HttpConnectionManager_Tracing_OperationName_name, int32(x))
}
func (HttpConnectionManager_Tracing_OperationName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0, 0}
}

type Rds struct {
	// Configuration source specifier for RDS.
	ConfigSource *envoy_api_v21.ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource" json:"config_source,omitempty"`
	// The name of the route configuration. This name will be passed to the RDS
	// API. This allows an Envoy configuration with multiple HTTP listeners (and
	// associated HTTP connection manager filters) to use different route
	// configurations.
	RouteConfigName string `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName" json:"route_config_name,omitempty"`
}

func (m *Rds) Reset()                    { *m = Rds{} }
func (m *Rds) String() string            { return proto.CompactTextString(m) }
func (*Rds) ProtoMessage()               {}
func (*Rds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Rds) GetConfigSource() *envoy_api_v21.ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *Rds) GetRouteConfigName() string {
	if m != nil {
		return m.RouteConfigName
	}
	return ""
}

type HttpFilter struct {
	// The name of the filter to instantiate. The name must match a supported
	// filter. The built-in filters are:
	//
	// [#comment:TODO(mattklein123): Auto generate the following list]
	// * :ref:`envoy.buffer <config_http_filters_buffer>`
	// * :ref:`envoy.cors <config_http_filters_cors>`
	// * :ref:`envoy.fault <config_http_filters_fault_injection>`
	// * :ref:`envoy.http_dynamo_filter <config_http_filters_dynamo>`
	// * :ref:`envoy.grpc_http1_bridge <config_http_filters_grpc_bridge>`
	// * :ref:`envoy.grpc_json_transcoder <config_http_filters_grpc_json_transcoder>`
	// * :ref:`envoy.grpc_web <config_http_filters_grpc_web>`
	// * :ref:`envoy.health_check <config_http_filters_health_check>`
	// * :ref:`envoy.lua <config_http_filters_lua>`
	// * :ref:`envoy.ip_tagging <config_http_filters_ip_tagging>`
	// * :ref:`envoy.rate_limit <config_http_filters_rate_limit>`
	// * :ref:`envoy.router <config_http_filters_router>`
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Filter specific configuration which depends on the filter being
	// instantiated. See the supported filters for further documentation.
	Config *google_protobuf4.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	// [#not-implemented-hide:]
	// This is hidden as type has been deprecated and is no longer required.
	DeprecatedV1 *HttpFilter_DeprecatedV1 `protobuf:"bytes,3,opt,name=deprecated_v1,json=deprecatedV1" json:"deprecated_v1,omitempty"`
}

func (m *HttpFilter) Reset()                    { *m = HttpFilter{} }
func (m *HttpFilter) String() string            { return proto.CompactTextString(m) }
func (*HttpFilter) ProtoMessage()               {}
func (*HttpFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HttpFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HttpFilter) GetConfig() *google_protobuf4.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *HttpFilter) GetDeprecatedV1() *HttpFilter_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

// [#not-implemented-hide:]
// This is hidden as type has been deprecated and is no longer required.
type HttpFilter_DeprecatedV1 struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
}

func (m *HttpFilter_DeprecatedV1) Reset()                    { *m = HttpFilter_DeprecatedV1{} }
func (m *HttpFilter_DeprecatedV1) String() string            { return proto.CompactTextString(m) }
func (*HttpFilter_DeprecatedV1) ProtoMessage()               {}
func (*HttpFilter_DeprecatedV1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *HttpFilter_DeprecatedV1) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type HttpConnectionManager struct {
	// Supplies the type of codec that the connection manager should use.
	CodecType HttpConnectionManager_CodecType `protobuf:"varint,1,opt,name=codec_type,json=codecType,enum=envoy.api.v2.filter.network.HttpConnectionManager_CodecType" json:"codec_type,omitempty"`
	// The human readable prefix to use when emitting statistics for the
	// connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
	// more information.
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to RouteSpecifier:
	//	*HttpConnectionManager_Rds
	//	*HttpConnectionManager_RouteConfig
	RouteSpecifier isHttpConnectionManager_RouteSpecifier `protobuf_oneof:"route_specifier"`
	// A list of individual HTTP filters that make up the filter chain for
	// requests made to the connection manager. Order matters as the filters are
	// processed sequentially as request events happen.
	HttpFilters []*HttpFilter `protobuf:"bytes,5,rep,name=http_filters,json=httpFilters" json:"http_filters,omitempty"`
	// Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
	// and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
	// documentation for more information. Defaults to false.
	AddUserAgent *google_protobuf.BoolValue `protobuf:"bytes,6,opt,name=add_user_agent,json=addUserAgent" json:"add_user_agent,omitempty"`
	// Presence of the object defines whether the connection manager
	// emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
	// <config_tracing>`.
	Tracing *HttpConnectionManager_Tracing `protobuf:"bytes,7,opt,name=tracing" json:"tracing,omitempty"`
	// Additional HTTP/1 settings that are passed to the HTTP/1 codec.
	HttpProtocolOptions *envoy_api_v22.Http1ProtocolOptions `protobuf:"bytes,8,opt,name=http_protocol_options,json=httpProtocolOptions" json:"http_protocol_options,omitempty"`
	// Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
	Http2ProtocolOptions *envoy_api_v22.Http2ProtocolOptions `protobuf:"bytes,9,opt,name=http2_protocol_options,json=http2ProtocolOptions" json:"http2_protocol_options,omitempty"`
	// An optional override that the connection manager will write to the server
	// header in responses. If not set, the default is *envoy*.
	ServerName string `protobuf:"bytes,10,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	// The idle timeout for connections managed by the connection manager. The
	// idle timeout is defined as the period in which there are no active
	// requests. If not set, there is no idle timeout. When the idle timeout is
	// reached the connection will be closed. If the connection is an HTTP/2
	// connection a drain sequence will occur prior to closing the connection. See
	// :ref:`drain_timeout <envoy_api_field_filter.network.HttpConnectionManager.drain_timeout>`.
	IdleTimeout *google_protobuf2.Duration `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	// The time that Envoy will wait between sending an HTTP/2 “shutdown
	// notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
	// This is used so that Envoy provides a grace period for new streams that
	// race with the final GOAWAY frame. During this grace period, Envoy will
	// continue to accept new streams. After the grace period, a final GOAWAY
	// frame is sent and Envoy will start refusing new streams. Draining occurs
	// both when a connection hits the idle timeout or during general server
	// draining. The default grace period is 5000 milliseconds (5 seconds) if this
	// option is not specified.
	DrainTimeout *google_protobuf2.Duration `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout" json:"drain_timeout,omitempty"`
	// Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
	// emitted by the connection manager.
	AccessLog []*envoy_api_v2_filter_accesslog.AccessLog `protobuf:"bytes,13,rep,name=access_log,json=accessLog" json:"access_log,omitempty"`
	// If set to true, the connection manager will use the real remote address
	// of the client connection when determining internal versus external origin and manipulating
	// various headers. If set to false or absent, the connection manager will use the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
	// :ref:`config_http_conn_man_headers_x-forwarded-for`,
	// :ref:`config_http_conn_man_headers_x-envoy-internal`, and
	// :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
	UseRemoteAddress *google_protobuf.BoolValue `protobuf:"bytes,14,opt,name=use_remote_address,json=useRemoteAddress" json:"use_remote_address,omitempty"`
	// Whether the connection manager will generate the :ref:`x-request-id
	// <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to true.
	// Generating a random UUID4 is expensive so in high throughput scenarios where this feature is
	// not desired it can be disabled.
	GenerateRequestId *google_protobuf.BoolValue `protobuf:"bytes,15,opt,name=generate_request_id,json=generateRequestId" json:"generate_request_id,omitempty"`
	// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
	// header.
	ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails `protobuf:"varint,16,opt,name=forward_client_cert_details,json=forwardClientCertDetails,enum=envoy.api.v2.filter.network.HttpConnectionManager_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	// This field is valid only when :ref:`forward_client_cert_details
	// <envoy_api_field_filter.network.HttpConnectionManager.forward_client_cert_details>` is
	// APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
	// the client certificate to be forwarded. Note that in the
	// :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
	// *By* is always set when the client certificate presents the SAN value.
	SetCurrentClientCertDetails *HttpConnectionManager_SetCurrentClientCertDetails `protobuf:"bytes,17,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails" json:"set_current_client_cert_details,omitempty"`
}

func (m *HttpConnectionManager) Reset()                    { *m = HttpConnectionManager{} }
func (m *HttpConnectionManager) String() string            { return proto.CompactTextString(m) }
func (*HttpConnectionManager) ProtoMessage()               {}
func (*HttpConnectionManager) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isHttpConnectionManager_RouteSpecifier interface {
	isHttpConnectionManager_RouteSpecifier()
}

type HttpConnectionManager_Rds struct {
	Rds *Rds `protobuf:"bytes,3,opt,name=rds,oneof"`
}
type HttpConnectionManager_RouteConfig struct {
	RouteConfig *envoy_api_v26.RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig,oneof"`
}

func (*HttpConnectionManager_Rds) isHttpConnectionManager_RouteSpecifier()         {}
func (*HttpConnectionManager_RouteConfig) isHttpConnectionManager_RouteSpecifier() {}

func (m *HttpConnectionManager) GetRouteSpecifier() isHttpConnectionManager_RouteSpecifier {
	if m != nil {
		return m.RouteSpecifier
	}
	return nil
}

func (m *HttpConnectionManager) GetCodecType() HttpConnectionManager_CodecType {
	if m != nil {
		return m.CodecType
	}
	return HttpConnectionManager_AUTO
}

func (m *HttpConnectionManager) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *HttpConnectionManager) GetRds() *Rds {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *HttpConnectionManager) GetRouteConfig() *envoy_api_v26.RouteConfiguration {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_RouteConfig); ok {
		return x.RouteConfig
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpFilters() []*HttpFilter {
	if m != nil {
		return m.HttpFilters
	}
	return nil
}

func (m *HttpConnectionManager) GetAddUserAgent() *google_protobuf.BoolValue {
	if m != nil {
		return m.AddUserAgent
	}
	return nil
}

func (m *HttpConnectionManager) GetTracing() *HttpConnectionManager_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpProtocolOptions() *envoy_api_v22.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetHttp2ProtocolOptions() *envoy_api_v22.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HttpConnectionManager) GetIdleTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetDrainTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetAccessLog() []*envoy_api_v2_filter_accesslog.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *HttpConnectionManager) GetUseRemoteAddress() *google_protobuf.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *HttpConnectionManager) GetGenerateRequestId() *google_protobuf.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *HttpConnectionManager) GetForwardClientCertDetails() HttpConnectionManager_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return HttpConnectionManager_SANITIZE
}

func (m *HttpConnectionManager) GetSetCurrentClientCertDetails() *HttpConnectionManager_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpConnectionManager) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpConnectionManager_OneofMarshaler, _HttpConnectionManager_OneofUnmarshaler, _HttpConnectionManager_OneofSizer, []interface{}{
		(*HttpConnectionManager_Rds)(nil),
		(*HttpConnectionManager_RouteConfig)(nil),
	}
}

func _HttpConnectionManager_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rds); err != nil {
			return err
		}
	case *HttpConnectionManager_RouteConfig:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RouteConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpConnectionManager.RouteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _HttpConnectionManager_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpConnectionManager)
	switch tag {
	case 3: // route_specifier.rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rds)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_Rds{msg}
		return true, err
	case 4: // route_specifier.route_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_api_v26.RouteConfiguration)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_RouteConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpConnectionManager_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		s := proto.Size(x.Rds)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpConnectionManager_RouteConfig:
		s := proto.Size(x.RouteConfig)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HttpConnectionManager_Tracing struct {
	// The span name will be derived from this field.
	OperationName HttpConnectionManager_Tracing_OperationName `protobuf:"varint,1,opt,name=operation_name,json=operationName,enum=envoy.api.v2.filter.network.HttpConnectionManager_Tracing_OperationName" json:"operation_name,omitempty"`
	// A list of header names used to create tags for the active span. The header name is used to
	// populate the tag name, and the header value is used to populate the tag value. The tag is
	// created if the specified header name is present in the request's headers.
	RequestHeadersForTags []string `protobuf:"bytes,2,rep,name=request_headers_for_tags,json=requestHeadersForTags" json:"request_headers_for_tags,omitempty"`
}

func (m *HttpConnectionManager_Tracing) Reset()         { *m = HttpConnectionManager_Tracing{} }
func (m *HttpConnectionManager_Tracing) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager_Tracing) ProtoMessage()    {}
func (*HttpConnectionManager_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

func (m *HttpConnectionManager_Tracing) GetOperationName() HttpConnectionManager_Tracing_OperationName {
	if m != nil {
		return m.OperationName
	}
	return HttpConnectionManager_Tracing_INGRESS
}

func (m *HttpConnectionManager_Tracing) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

type HttpConnectionManager_SetCurrentClientCertDetails struct {
	// Whether to forward the subject of the client cert. Defaults to false.
	Subject *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=subject" json:"subject,omitempty"`
	// Whether to forward the SAN of the client cert. Defaults to false.
	San *google_protobuf.BoolValue `protobuf:"bytes,2,opt,name=san" json:"san,omitempty"`
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) Reset() {
	*m = HttpConnectionManager_SetCurrentClientCertDetails{}
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManager_SetCurrentClientCertDetails) ProtoMessage() {}
func (*HttpConnectionManager_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 1}
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSubject() *google_protobuf.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSan() *google_protobuf.BoolValue {
	if m != nil {
		return m.San
	}
	return nil
}

func init() {
	proto.RegisterType((*Rds)(nil), "envoy.api.v2.filter.network.Rds")
	proto.RegisterType((*HttpFilter)(nil), "envoy.api.v2.filter.network.HttpFilter")
	proto.RegisterType((*HttpFilter_DeprecatedV1)(nil), "envoy.api.v2.filter.network.HttpFilter.DeprecatedV1")
	proto.RegisterType((*HttpConnectionManager)(nil), "envoy.api.v2.filter.network.HttpConnectionManager")
	proto.RegisterType((*HttpConnectionManager_Tracing)(nil), "envoy.api.v2.filter.network.HttpConnectionManager.Tracing")
	proto.RegisterType((*HttpConnectionManager_SetCurrentClientCertDetails)(nil), "envoy.api.v2.filter.network.HttpConnectionManager.SetCurrentClientCertDetails")
	proto.RegisterEnum("envoy.api.v2.filter.network.HttpConnectionManager_CodecType", HttpConnectionManager_CodecType_name, HttpConnectionManager_CodecType_value)
	proto.RegisterEnum("envoy.api.v2.filter.network.HttpConnectionManager_ForwardClientCertDetails", HttpConnectionManager_ForwardClientCertDetails_name, HttpConnectionManager_ForwardClientCertDetails_value)
	proto.RegisterEnum("envoy.api.v2.filter.network.HttpConnectionManager_Tracing_OperationName", HttpConnectionManager_Tracing_OperationName_name, HttpConnectionManager_Tracing_OperationName_value)
}

func init() { proto.RegisterFile("api/filter/network/http_connection_manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0xae, 0x9b, 0xb4, 0xd9, 0x9c, 0xfc, 0x59, 0xef, 0xec, 0x6f, 0x7f, 0x35, 0x29, 0xb0, 0x55,
	0x84, 0x44, 0x04, 0xc8, 0xa1, 0xa1, 0x08, 0x09, 0xad, 0x10, 0x69, 0x9a, 0x6e, 0xba, 0x5b, 0xd2,
	0xca, 0xc9, 0x76, 0xe9, 0xde, 0x8c, 0xa6, 0xf6, 0xc4, 0x35, 0xa4, 0x1e, 0x33, 0x33, 0x6e, 0xa9,
	0xb8, 0x82, 0x3b, 0xb8, 0x46, 0xdc, 0xf2, 0x1a, 0x88, 0xab, 0x7d, 0x0f, 0x9e, 0xa0, 0x6f, 0x81,
	0x3c, 0x63, 0xa7, 0x49, 0xdb, 0xb4, 0xa8, 0x77, 0xc7, 0xe7, 0x7c, 0xdf, 0x37, 0x67, 0xce, 0x39,
	0x33, 0x63, 0xf8, 0x94, 0x44, 0x41, 0x73, 0x14, 0x8c, 0x25, 0xe5, 0xcd, 0x90, 0xca, 0x33, 0xc6,
	0xbf, 0x6f, 0x1e, 0x4b, 0x19, 0x61, 0x97, 0x85, 0x21, 0x75, 0x65, 0xc0, 0x42, 0x7c, 0x42, 0x42,
	0xe2, 0x53, 0x6e, 0x47, 0x9c, 0x49, 0x86, 0x56, 0x69, 0x78, 0xca, 0xce, 0x6d, 0x12, 0x05, 0xf6,
	0x69, 0xcb, 0xd6, 0x54, 0x3b, 0xa5, 0xd6, 0xaa, 0x89, 0xdc, 0x11, 0x11, 0x54, 0x83, 0x6b, 0x28,
	0xf9, 0x56, 0xa6, 0xcb, 0xc6, 0xa9, 0xaf, 0x92, 0xf8, 0xb8, 0x27, 0xd2, 0xcf, 0x0f, 0xa6, 0x32,
	0x20, 0xae, 0x4b, 0x85, 0x18, 0x33, 0xff, 0xd2, 0x4a, 0x51, 0xef, 0xfb, 0x8c, 0xf9, 0x63, 0xaa,
	0xb5, 0x8e, 0xe2, 0x51, 0xd3, 0x8b, 0x39, 0x49, 0xb2, 0x4b, 0xe3, 0xef, 0x5e, 0x8d, 0x0b, 0xc9,
	0x63, 0x57, 0xce, 0x63, 0x9f, 0x71, 0x12, 0x45, 0x94, 0x67, 0x39, 0xac, 0x9c, 0x92, 0x71, 0xe0,
	0x11, 0x49, 0x9b, 0x99, 0xa1, 0x03, 0xf5, 0x5f, 0x0d, 0xc8, 0x39, 0x9e, 0x40, 0x2f, 0xa1, 0xe2,
	0xb2, 0x70, 0x14, 0xf8, 0x58, 0xb0, 0x98, 0xbb, 0xd4, 0x32, 0xd6, 0x8c, 0x46, 0xa9, 0x55, 0xb3,
	0x67, 0x8a, 0xd1, 0x51, 0x90, 0x81, 0x42, 0x6c, 0xc2, 0xdf, 0x17, 0x6f, 0x73, 0x4b, 0xbf, 0x19,
	0x8b, 0xa6, 0xe1, 0x94, 0xdd, 0xa9, 0x08, 0xfa, 0x1c, 0x1e, 0x71, 0x16, 0x4b, 0x8a, 0x53, 0xc9,
	0x90, 0x9c, 0x50, 0x6b, 0x71, 0xcd, 0x68, 0x14, 0x37, 0x8b, 0x09, 0x29, 0xcf, 0x13, 0xce, 0x43,
	0x85, 0xd1, 0x92, 0x7d, 0x72, 0x42, 0xeb, 0xff, 0x18, 0x00, 0x3d, 0x29, 0xa3, 0x6d, 0x55, 0x2b,
	0xf4, 0x1e, 0xe4, 0x15, 0xd1, 0xb8, 0x4a, 0x54, 0x6e, 0xd4, 0x84, 0x65, 0x2d, 0xaf, 0x94, 0x4b,
	0xad, 0x15, 0x5b, 0xd7, 0xc0, 0xce, 0x6a, 0x60, 0x0f, 0x54, 0x85, 0x9c, 0x14, 0x86, 0x0e, 0xa1,
	0xe2, 0xd1, 0x88, 0x53, 0x97, 0x48, 0xea, 0xe1, 0xd3, 0x75, 0x2b, 0xa7, 0x78, 0x1b, 0xf6, 0x2d,
	0xfd, 0xb6, 0x2f, 0xf3, 0xb1, 0xb7, 0x26, 0xe4, 0x83, 0x75, 0xa7, 0xec, 0x4d, 0x7d, 0xd5, 0xea,
	0x50, 0x9e, 0x8e, 0x22, 0x04, 0x79, 0x79, 0x1e, 0xa5, 0xa9, 0x3b, 0xca, 0xae, 0xff, 0xf9, 0x10,
	0x9e, 0x24, 0x6a, 0x9d, 0xc9, 0xdc, 0x7d, 0xa3, 0xc7, 0x0e, 0xf9, 0x00, 0x2e, 0xf3, 0xa8, 0x8b,
	0x27, 0x9c, 0x6a, 0xeb, 0xd9, 0x9d, 0x59, 0x5d, 0xd3, 0xb1, 0x3b, 0x89, 0xc8, 0xf0, 0x3c, 0xca,
	0x5a, 0xf3, 0x8b, 0x6a, 0x4d, 0xd1, 0xcd, 0xdc, 0xe8, 0x23, 0x28, 0x09, 0x49, 0x24, 0x8e, 0x38,
	0x1d, 0x05, 0x3f, 0x5e, 0xef, 0x08, 0x24, 0xd1, 0x7d, 0x15, 0x44, 0x1b, 0x90, 0xe3, 0x9e, 0x48,
	0x6b, 0xb4, 0x76, 0x6b, 0x36, 0x8e, 0x27, 0x7a, 0x0b, 0x4e, 0x02, 0x47, 0x5d, 0x28, 0x4f, 0x77,
	0xde, 0xca, 0xdf, 0x44, 0x77, 0x2e, 0xfb, 0x9e, 0xce, 0x78, 0x6f, 0xc1, 0x29, 0x4d, 0x4d, 0x03,
	0x7a, 0x01, 0x65, 0x75, 0x46, 0xf5, 0x42, 0xc2, 0x5a, 0x5a, 0xcb, 0x35, 0x4a, 0xad, 0x0f, 0xff,
	0x63, 0xa7, 0x9c, 0xd2, 0xf1, 0xc4, 0x16, 0xe8, 0x6b, 0xa8, 0x12, 0xcf, 0xc3, 0xb1, 0xa0, 0x1c,
	0x13, 0x9f, 0x86, 0xd2, 0x5a, 0x4e, 0x47, 0xfb, 0xea, 0xbc, 0x6c, 0x32, 0x36, 0x3e, 0x20, 0xe3,
	0x98, 0x3a, 0x65, 0xe2, 0x79, 0xaf, 0x04, 0xe5, 0xed, 0x04, 0x8f, 0x86, 0x50, 0x90, 0x9c, 0xb8,
	0x41, 0xe8, 0x5b, 0x05, 0x45, 0xfd, 0xf2, 0x1e, 0xcd, 0x19, 0x6a, 0x05, 0x27, 0x93, 0x42, 0x07,
	0xf0, 0x44, 0xed, 0x31, 0xbb, 0x3c, 0x30, 0x8b, 0x12, 0xbc, 0xb0, 0x1e, 0xa8, 0x35, 0xea, 0xb3,
	0x6b, 0x24, 0xa2, 0xeb, 0xfb, 0x29, 0x74, 0x4f, 0x23, 0x9d, 0xc7, 0x89, 0xc0, 0x15, 0x27, 0xfa,
	0x16, 0xfe, 0x9f, 0xb8, 0x5b, 0xd7, 0x85, 0x8b, 0xf3, 0x84, 0x5b, 0x57, 0x85, 0xff, 0x77, 0x7c,
	0x83, 0x17, 0x3d, 0x85, 0x92, 0xa0, 0xfc, 0x94, 0x72, 0x7d, 0xa0, 0x41, 0x0d, 0x37, 0x68, 0x57,
	0x72, 0x80, 0xd1, 0x33, 0x28, 0x07, 0xde, 0x98, 0x62, 0x19, 0x9c, 0x50, 0x16, 0x4b, 0xab, 0xa4,
	0x16, 0x7c, 0xe7, 0x5a, 0xa1, 0xb7, 0xd2, 0xb6, 0x3b, 0xa5, 0x04, 0x3e, 0xd4, 0x68, 0xf4, 0x15,
	0x54, 0x3c, 0x4e, 0x82, 0x70, 0x42, 0x2f, 0xdf, 0x45, 0x2f, 0x2b, 0x7c, 0xc6, 0x7f, 0x0e, 0xa0,
	0x2f, 0x55, 0x3c, 0x66, 0xbe, 0x55, 0x51, 0x23, 0xd3, 0xb8, 0xb1, 0x53, 0x97, 0x77, 0x6f, 0x5b,
	0x59, 0xbb, 0xcc, 0x77, 0x8a, 0x24, 0x33, 0x51, 0x0f, 0x50, 0x2c, 0x28, 0xe6, 0xf4, 0x84, 0x49,
	0x8a, 0x89, 0xe7, 0x71, 0x2a, 0x84, 0x55, 0xbd, 0x73, 0x6a, 0xcc, 0x58, 0x50, 0x47, 0x91, 0xda,
	0x9a, 0x83, 0x5e, 0xc0, 0x63, 0x9f, 0x86, 0x94, 0x13, 0x99, 0xc8, 0xfd, 0x10, 0x53, 0x21, 0x71,
	0xe0, 0x59, 0x0f, 0xef, 0x94, 0x7a, 0x94, 0xd1, 0x1c, 0xcd, 0xda, 0xf1, 0xd0, 0x1f, 0x06, 0xac,
	0x8e, 0x18, 0x3f, 0x23, 0xdc, 0xc3, 0xee, 0x38, 0xa0, 0xa1, 0xc4, 0x2e, 0xe5, 0x12, 0x7b, 0x54,
	0x92, 0x60, 0x2c, 0x2c, 0x53, 0xdd, 0x1b, 0x2f, 0xef, 0x31, 0x9a, 0xdb, 0x5a, 0xb5, 0xa3, 0x44,
	0x3b, 0x94, 0xcb, 0x2d, 0x2d, 0x39, 0x73, 0x8d, 0x58, 0xa3, 0x39, 0x28, 0xf4, 0xbb, 0x01, 0x4f,
	0x05, 0x95, 0xd8, 0x8d, 0x39, 0x57, 0x59, 0xdd, 0x90, 0xdc, 0x23, 0xb5, 0xe3, 0xfe, 0x3d, 0x92,
	0x1b, 0x50, 0xd9, 0xd1, 0xc2, 0xd7, 0x56, 0x76, 0x56, 0xc5, 0xfc, 0x60, 0xed, 0xc2, 0x80, 0x42,
	0x7a, 0xe8, 0xd0, 0x4f, 0x50, 0x65, 0x11, 0xd5, 0x53, 0x83, 0x27, 0x8f, 0x4a, 0xb5, 0xd5, 0xbb,
	0xff, 0x41, 0xb6, 0xf7, 0x32, 0xc1, 0x64, 0xf4, 0x67, 0x4a, 0x55, 0x61, 0xd3, 0x21, 0xf4, 0x05,
	0x58, 0x59, 0xef, 0x8f, 0x29, 0xf1, 0x28, 0x17, 0x78, 0xc4, 0x38, 0x96, 0xc4, 0x17, 0xd6, 0xe2,
	0x5a, 0xae, 0x51, 0x74, 0x9e, 0xa4, 0xf1, 0x9e, 0x0e, 0x6f, 0x33, 0x3e, 0x24, 0xbe, 0xa8, 0x37,
	0xa0, 0x32, 0xb3, 0x08, 0x2a, 0x41, 0x61, 0xa7, 0xff, 0xdc, 0xe9, 0x0e, 0x06, 0xe6, 0x02, 0x02,
	0x58, 0xee, 0x6a, 0xdb, 0xa8, 0xfd, 0x6c, 0xc0, 0xea, 0x2d, 0x85, 0x42, 0x1b, 0x50, 0x10, 0xf1,
	0xd1, 0x77, 0xd4, 0x95, 0x93, 0x77, 0x7d, 0xfe, 0xec, 0x65, 0x50, 0xf4, 0x09, 0xe4, 0x04, 0x09,
	0xd3, 0xe7, 0xf5, 0x36, 0x46, 0x02, 0xab, 0x7f, 0x0c, 0xc5, 0xc9, 0x03, 0x84, 0x1e, 0x40, 0xbe,
	0xfd, 0x6a, 0xb8, 0x67, 0x2e, 0xa0, 0x22, 0x2c, 0xf5, 0x86, 0xc3, 0xfd, 0x75, 0xd3, 0xc8, 0xcc,
	0x96, 0xb9, 0x58, 0x3f, 0x07, 0x6b, 0xde, 0xd4, 0xa1, 0x32, 0x3c, 0x18, 0xb4, 0xfb, 0x3b, 0xc3,
	0x9d, 0x37, 0x5d, 0x73, 0x01, 0x99, 0x50, 0xde, 0xde, 0x73, 0x5e, 0xb7, 0x9d, 0x2d, 0xbc, 0xd7,
	0xdf, 0x3d, 0x34, 0x0d, 0x84, 0xa0, 0xda, 0xde, 0xdf, 0xef, 0xf6, 0xb7, 0x70, 0x1a, 0x30, 0x17,
	0x13, 0x54, 0xc6, 0xc1, 0x83, 0xee, 0xd0, 0xcc, 0xa1, 0x15, 0x78, 0xdc, 0xde, 0x7d, 0xdd, 0x3e,
	0x1c, 0xe0, 0x19, 0x7a, 0x7e, 0xd3, 0x02, 0xfd, 0xe3, 0x81, 0x45, 0x44, 0xdd, 0x60, 0x14, 0x50,
	0x8e, 0x96, 0xfe, 0xba, 0x78, 0x9b, 0x33, 0x36, 0x8b, 0x6f, 0x0a, 0x69, 0xeb, 0x8f, 0x96, 0xd5,
	0x2e, 0x3f, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xad, 0x62, 0x2c, 0x2d, 0x3e, 0x0a, 0x00, 0x00,
}
