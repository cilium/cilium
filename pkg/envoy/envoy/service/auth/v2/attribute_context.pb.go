// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/service/auth/v2/attribute_context.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	envoy/service/auth/v2/attribute_context.proto
	envoy/service/auth/v2/external_auth.proto

It has these top-level messages:
	AttributeContext
	CheckRequest
	CheckResponse
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An attribute is a piece of metadata that describes an activity on a network.
// For example, the size of an HTTP request, or the status code of an HTTP response.
//
// Each attribute has a type and a name, which is logically defined as a proto message field
// of the `AttributeContext`. The `AttributeContext` is a collection of individual attributes
// supported by Envoy authorization system.
type AttributeContext struct {
	// The source of a network activity, such as starting a TCP connection.
	// In a multi hop network activity, the source represents the sender of the
	// last hop.
	Source *AttributeContext_Peer `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	// The destination of a network activity, such as accepting a TCP connection.
	// In a multi hop network activity, the destination represents the receiver of
	// the last hop.
	Destination *AttributeContext_Peer `protobuf:"bytes,2,opt,name=destination" json:"destination,omitempty"`
	// Represents a network request, such as an HTTP request.
	Request *AttributeContext_Request `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
	// This is analogous to http_request.headers, however these contents will not be sent to the
	// upstream server. Context_extensions provide an extension mechanism for sending additional
	// information to the auth server without modifying the proto definition. It maps to the internal
	// opaque context in the filter chain.
	ContextExtensions map[string]string `protobuf:"bytes,10,rep,name=context_extensions,json=contextExtensions" json:"context_extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AttributeContext) Reset()                    { *m = AttributeContext{} }
func (m *AttributeContext) String() string            { return proto.CompactTextString(m) }
func (*AttributeContext) ProtoMessage()               {}
func (*AttributeContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AttributeContext) GetSource() *AttributeContext_Peer {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *AttributeContext) GetDestination() *AttributeContext_Peer {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *AttributeContext) GetRequest() *AttributeContext_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AttributeContext) GetContextExtensions() map[string]string {
	if m != nil {
		return m.ContextExtensions
	}
	return nil
}

// This message defines attributes for a node that handles a network request.
// The node can be either a service or an application that sends, forwards,
// or receives the request. Service peers should fill in the `service`,
// `principal`, and `labels` as appropriate.
type AttributeContext_Peer struct {
	// The address of the peer, this is typically the IP address.
	// It can also be UDS path, or others.
	Address *envoy_api_v2_core.Address `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// The canonical service name of the peer.
	// It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
	// <config_http_conn_man_headers_downstream-service-cluster>`
	// If a more trusted source of the service name is available through mTLS/secure naming, it
	// should be used.
	Service string `protobuf:"bytes,2,opt,name=service" json:"service,omitempty"`
	// The labels associated with the peer.
	// These could be pod labels for Kubernetes or tags for VMs.
	// The source of the labels could be an X.509 certificate or other configuration.
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The authenticated identity of this peer.
	// For example, the identity associated with the workload such as a service account.
	// If an X.509 certificate is used to assert the identity this field should be sourced from
	// `Subject` or `Subject Alternative Names`. The primary identity should be the principal.
	// The principal format is issuer specific.
	//
	// Example:
	// *    SPIFFE format is `spiffe://trust-domain/path`
	// *    Google account format is `https://accounts.google.com/{userid}`
	Principal string `protobuf:"bytes,4,opt,name=principal" json:"principal,omitempty"`
}

func (m *AttributeContext_Peer) Reset()                    { *m = AttributeContext_Peer{} }
func (m *AttributeContext_Peer) String() string            { return proto.CompactTextString(m) }
func (*AttributeContext_Peer) ProtoMessage()               {}
func (*AttributeContext_Peer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *AttributeContext_Peer) GetAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AttributeContext_Peer) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *AttributeContext_Peer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *AttributeContext_Peer) GetPrincipal() string {
	if m != nil {
		return m.Principal
	}
	return ""
}

// Represents a network request, such as an HTTP request.
type AttributeContext_Request struct {
	// The timestamp when the proxy receives the first byte of the request.
	Time *google_protobuf3.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	// Represents an HTTP request or an HTTP-like request.
	Http *AttributeContext_HttpRequest `protobuf:"bytes,2,opt,name=http" json:"http,omitempty"`
}

func (m *AttributeContext_Request) Reset()                    { *m = AttributeContext_Request{} }
func (m *AttributeContext_Request) String() string            { return proto.CompactTextString(m) }
func (*AttributeContext_Request) ProtoMessage()               {}
func (*AttributeContext_Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *AttributeContext_Request) GetTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *AttributeContext_Request) GetHttp() *AttributeContext_HttpRequest {
	if m != nil {
		return m.Http
	}
	return nil
}

// This message defines attributes for an HTTP request.
// HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
type AttributeContext_HttpRequest struct {
	// The unique ID for a request, which can be propagated to downstream
	// systems. The ID should have low probability of collision
	// within a single day for a specific service.
	// For HTTP requests, it should be X-Request-ID or equivalent.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The HTTP request method, such as `GET`, `POST`.
	Method string `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// The HTTP request headers. If multiple headers share the same key, they
	// must be merged according to the HTTP spec. All header keys must be
	// lowercased, because HTTP header keys are case-insensitive.
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The HTTP URL path.
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// The HTTP request `Host` or 'Authority` header value.
	Host string `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	// The HTTP URL scheme, such as `http` and `https`.
	Scheme string `protobuf:"bytes,6,opt,name=scheme" json:"scheme,omitempty"`
	// The HTTP URL query in the format of `name1=value`&name2=value2`, as it
	// appears in the first line of the HTTP request. No decoding is performed.
	Query string `protobuf:"bytes,7,opt,name=query" json:"query,omitempty"`
	// The HTTP URL fragment, excluding leading `#`. No URL decoding is performed.
	Fragment string `protobuf:"bytes,8,opt,name=fragment" json:"fragment,omitempty"`
	// The HTTP request size in bytes. If unknown, it must be -1.
	Size int64 `protobuf:"varint,9,opt,name=size" json:"size,omitempty"`
	// The network protocol used with the request, such as
	// "http/1.1", "spdy/3", "h2", "h2c"
	Protocol string `protobuf:"bytes,10,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *AttributeContext_HttpRequest) Reset()                    { *m = AttributeContext_HttpRequest{} }
func (m *AttributeContext_HttpRequest) String() string            { return proto.CompactTextString(m) }
func (*AttributeContext_HttpRequest) ProtoMessage()               {}
func (*AttributeContext_HttpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *AttributeContext_HttpRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *AttributeContext_HttpRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetFragment() string {
	if m != nil {
		return m.Fragment
	}
	return ""
}

func (m *AttributeContext_HttpRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *AttributeContext_HttpRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func init() {
	proto.RegisterType((*AttributeContext)(nil), "envoy.service.auth.v2.AttributeContext")
	proto.RegisterType((*AttributeContext_Peer)(nil), "envoy.service.auth.v2.AttributeContext.Peer")
	proto.RegisterType((*AttributeContext_Request)(nil), "envoy.service.auth.v2.AttributeContext.Request")
	proto.RegisterType((*AttributeContext_HttpRequest)(nil), "envoy.service.auth.v2.AttributeContext.HttpRequest")
}

func init() { proto.RegisterFile("envoy/service/auth/v2/attribute_context.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0x9c, 0x34, 0xae, 0x27, 0x08, 0x95, 0x15, 0x54, 0x2b, 0x0b, 0xa9, 0x15, 0xa7, 0x1e,
	0x60, 0x2d, 0xa5, 0x1c, 0x4a, 0x0f, 0x88, 0x8a, 0x56, 0x14, 0x09, 0xa1, 0xca, 0xe2, 0xc4, 0xa5,
	0xda, 0xd8, 0xd3, 0x7a, 0x85, 0xed, 0x75, 0x77, 0xd7, 0x51, 0xc3, 0x0d, 0xfe, 0x0a, 0x3f, 0x90,
	0xbf, 0x80, 0xf6, 0xc3, 0x25, 0xaa, 0x7a, 0x68, 0x7b, 0xca, 0xcc, 0xe4, 0xcd, 0x9b, 0xb7, 0x6f,
	0xc6, 0xf0, 0x06, 0xdb, 0xa5, 0x5c, 0x65, 0x1a, 0xd5, 0x52, 0x14, 0x98, 0xf1, 0xde, 0x54, 0xd9,
	0x72, 0x9e, 0x71, 0x63, 0x94, 0x58, 0xf4, 0x06, 0xcf, 0x0b, 0xd9, 0x1a, 0xbc, 0x36, 0xac, 0x53,
	0xd2, 0x48, 0xf2, 0xc2, 0xc1, 0x59, 0x80, 0x33, 0x0b, 0x67, 0xcb, 0x79, 0xba, 0xe3, 0x59, 0x78,
	0x27, 0x6c, 0x73, 0x21, 0x15, 0x66, 0xbc, 0x2c, 0x15, 0x6a, 0xed, 0xfb, 0xd2, 0x9d, 0x4b, 0x29,
	0x2f, 0x6b, 0xcc, 0x5c, 0xb6, 0xe8, 0x2f, 0x32, 0x23, 0x1a, 0xd4, 0x86, 0x37, 0x9d, 0x07, 0xbc,
	0xfa, 0x93, 0xc0, 0xd6, 0xd1, 0x30, 0xf4, 0xa3, 0x9f, 0x49, 0x8e, 0x61, 0xaa, 0x65, 0xaf, 0x0a,
	0xa4, 0xa3, 0xdd, 0xd1, 0xde, 0x6c, 0xfe, 0x9a, 0xdd, 0x39, 0x9e, 0xdd, 0x6e, 0x64, 0x67, 0x88,
	0x2a, 0x0f, 0xbd, 0xe4, 0x2b, 0xcc, 0x4a, 0xd4, 0x46, 0xb4, 0xdc, 0x08, 0xd9, 0xd2, 0xe8, 0x11,
	0x54, 0xeb, 0x04, 0xe4, 0x33, 0xc4, 0x0a, 0xaf, 0x7a, 0xd4, 0x86, 0x4e, 0x1c, 0x57, 0x76, 0x5f,
	0xae, 0xdc, 0xb7, 0xe5, 0x43, 0x3f, 0x69, 0x80, 0x04, 0x7f, 0xcf, 0xf1, 0xda, 0x60, 0xab, 0x85,
	0x6c, 0x35, 0x85, 0xdd, 0xf1, 0xde, 0x6c, 0xfe, 0xfe, 0xbe, 0xac, 0xe1, 0xf7, 0xe4, 0x86, 0xe0,
	0xa4, 0x35, 0x6a, 0x95, 0x3f, 0x2b, 0x6e, 0xd7, 0xd3, 0x5f, 0x11, 0x4c, 0xec, 0x7b, 0xc8, 0x5b,
	0x88, 0xc3, 0x7e, 0x82, 0xb3, 0x69, 0x18, 0xc6, 0x3b, 0x61, 0x67, 0xd8, 0x0d, 0xb2, 0x23, 0x8f,
	0xc8, 0x07, 0x28, 0xa1, 0x10, 0x07, 0x31, 0xce, 0xc4, 0x24, 0x1f, 0x52, 0x72, 0x06, 0xd3, 0x9a,
	0x2f, 0xb0, 0xd6, 0x74, 0xec, 0xb4, 0x1f, 0x3c, 0xc4, 0x5d, 0xf6, 0xc5, 0xb5, 0x7a, 0xd5, 0x81,
	0x87, 0xbc, 0x84, 0xa4, 0x53, 0xa2, 0x2d, 0x44, 0xc7, 0x6b, 0x67, 0x73, 0x92, 0xff, 0x2f, 0xa4,
	0xef, 0x60, 0xb6, 0xd6, 0x44, 0xb6, 0x60, 0xfc, 0x03, 0x57, 0xee, 0x29, 0x49, 0x6e, 0x43, 0xf2,
	0x1c, 0x36, 0x96, 0xbc, 0xee, 0x07, 0xa1, 0x3e, 0x39, 0x8c, 0x0e, 0x46, 0xe9, 0xef, 0x11, 0xc4,
	0x61, 0x0f, 0x84, 0xc1, 0xc4, 0xde, 0xe1, 0x8d, 0x07, 0xfe, 0x48, 0xd9, 0x70, 0xa4, 0xec, 0xdb,
	0x70, 0xa4, 0xb9, 0xc3, 0x91, 0x4f, 0x30, 0xa9, 0x8c, 0xe9, 0xc2, 0x09, 0xed, 0xdf, 0xf7, 0x91,
	0xa7, 0xc6, 0x74, 0xc3, 0xea, 0x1d, 0x41, 0xfa, 0x37, 0x82, 0xd9, 0x5a, 0x95, 0x3c, 0x85, 0x48,
	0x94, 0x41, 0x7f, 0x24, 0x4a, 0xb2, 0x0d, 0xd3, 0x06, 0x4d, 0x25, 0xcb, 0xa0, 0x3f, 0x64, 0xe4,
	0x3b, 0xc4, 0x15, 0xf2, 0x12, 0xd5, 0x60, 0xf4, 0x87, 0x47, 0x68, 0x60, 0xa7, 0x9e, 0xc2, 0x1b,
	0x3e, 0x10, 0x12, 0x02, 0x93, 0x8e, 0x9b, 0x2a, 0x98, 0xed, 0x62, 0x5b, 0xab, 0xa4, 0x36, 0x74,
	0xc3, 0xd7, 0x6c, 0x6c, 0xb5, 0xe9, 0xa2, 0xc2, 0x06, 0xe9, 0xd4, 0x6b, 0xf3, 0x99, 0xb5, 0xfc,
	0xaa, 0x47, 0xb5, 0xa2, 0xb1, 0xb7, 0xdc, 0x25, 0x24, 0x85, 0xcd, 0x0b, 0xc5, 0x2f, 0x1b, 0x6c,
	0x0d, 0xdd, 0x74, 0x7f, 0xdc, 0xe4, 0x96, 0x5d, 0x8b, 0x9f, 0x48, 0x93, 0xdd, 0xd1, 0xde, 0x38,
	0x77, 0xb1, 0xc5, 0x3b, 0xfb, 0x0b, 0x59, 0x53, 0xf0, 0xf8, 0x21, 0x4f, 0x0f, 0xe1, 0xc9, 0xba,
	0xf4, 0x07, 0xad, 0xfd, 0x18, 0xb6, 0xef, 0xfe, 0x4e, 0x1e, 0xc2, 0xb2, 0x98, 0x3a, 0x2d, 0xfb,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xdb, 0x1d, 0xbc, 0x36, 0x05, 0x00, 0x00,
}
