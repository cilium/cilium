// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/cds.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	envoy/api/v2/cds.proto
	envoy/api/v2/discovery.proto
	envoy/api/v2/eds.proto
	envoy/api/v2/lds.proto
	envoy/api/v2/rds.proto

It has these top-level messages:
	Cluster
	UpstreamBindConfig
	DiscoveryRequest
	DiscoveryResponse
	ClusterLoadAssignment
	Listener
	RouteConfiguration
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_auth "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/auth"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_core3 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_core4 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_core5 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_cluster "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/cluster"
import envoy_api_v2_cluster1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/cluster"
import envoy_type "github.com/cilium/cilium/pkg/envoy/envoy/type"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Refer to :ref:`service discovery type <arch_overview_service_discovery_types>`
// for an explanation on each type.
type Cluster_DiscoveryType int32

const (
	// Refer to the :ref:`static discovery type<arch_overview_service_discovery_types_static>`
	// for an explanation.
	Cluster_STATIC Cluster_DiscoveryType = 0
	// Refer to the :ref:`strict DNS discovery
	// type<arch_overview_service_discovery_types_strict_dns>`
	// for an explanation.
	Cluster_STRICT_DNS Cluster_DiscoveryType = 1
	// Refer to the :ref:`logical DNS discovery
	// type<arch_overview_service_discovery_types_logical_dns>`
	// for an explanation.
	Cluster_LOGICAL_DNS Cluster_DiscoveryType = 2
	// Refer to the :ref:`service discovery type<arch_overview_service_discovery_types_sds>`
	// for an explanation.
	Cluster_EDS Cluster_DiscoveryType = 3
	// Refer to the :ref:`original destination discovery
	// type<arch_overview_service_discovery_types_original_destination>`
	// for an explanation.
	Cluster_ORIGINAL_DST Cluster_DiscoveryType = 4
)

var Cluster_DiscoveryType_name = map[int32]string{
	0: "STATIC",
	1: "STRICT_DNS",
	2: "LOGICAL_DNS",
	3: "EDS",
	4: "ORIGINAL_DST",
}
var Cluster_DiscoveryType_value = map[string]int32{
	"STATIC":       0,
	"STRICT_DNS":   1,
	"LOGICAL_DNS":  2,
	"EDS":          3,
	"ORIGINAL_DST": 4,
}

func (x Cluster_DiscoveryType) String() string {
	return proto.EnumName(Cluster_DiscoveryType_name, int32(x))
}
func (Cluster_DiscoveryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Refer to :ref:`load balancer type <arch_overview_load_balancing_types>` architecture
// overview section for information on each type.
type Cluster_LbPolicy int32

const (
	// Refer to the :ref:`round robin load balancing
	// policy<arch_overview_load_balancing_types_round_robin>`
	// for an explanation.
	Cluster_ROUND_ROBIN Cluster_LbPolicy = 0
	// Refer to the :ref:`least request load balancing
	// policy<arch_overview_load_balancing_types_least_request>`
	// for an explanation.
	Cluster_LEAST_REQUEST Cluster_LbPolicy = 1
	// Refer to the :ref:`ring hash load balancing
	// policy<arch_overview_load_balancing_types_ring_hash>`
	// for an explanation.
	Cluster_RING_HASH Cluster_LbPolicy = 2
	// Refer to the :ref:`random load balancing
	// policy<arch_overview_load_balancing_types_random>`
	// for an explanation.
	Cluster_RANDOM Cluster_LbPolicy = 3
	// Refer to the :ref:`original destination load balancing
	// policy<arch_overview_load_balancing_types_original_destination>`
	// for an explanation.
	Cluster_ORIGINAL_DST_LB Cluster_LbPolicy = 4
	// Refer to the :ref:`Maglev load balancing policy<arch_overview_load_balancing_types_maglev>`
	// for an explanation.
	Cluster_MAGLEV Cluster_LbPolicy = 5
)

var Cluster_LbPolicy_name = map[int32]string{
	0: "ROUND_ROBIN",
	1: "LEAST_REQUEST",
	2: "RING_HASH",
	3: "RANDOM",
	4: "ORIGINAL_DST_LB",
	5: "MAGLEV",
}
var Cluster_LbPolicy_value = map[string]int32{
	"ROUND_ROBIN":     0,
	"LEAST_REQUEST":   1,
	"RING_HASH":       2,
	"RANDOM":          3,
	"ORIGINAL_DST_LB": 4,
	"MAGLEV":          5,
}

func (x Cluster_LbPolicy) String() string {
	return proto.EnumName(Cluster_LbPolicy_name, int32(x))
}
func (Cluster_LbPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

// When V4_ONLY is selected, the DNS resolver will only perform a lookup for
// addresses in the IPv4 family. If V6_ONLY is selected, the DNS resolver will
// only perform a lookup for addresses in the IPv6 family. If AUTO is
// specified, the DNS resolver will first perform a lookup for addresses in
// the IPv6 family and fallback to a lookup for addresses in the IPv4 family.
// For cluster types other than
// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>` and
// :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
// this setting is
// ignored.
type Cluster_DnsLookupFamily int32

const (
	Cluster_AUTO    Cluster_DnsLookupFamily = 0
	Cluster_V4_ONLY Cluster_DnsLookupFamily = 1
	Cluster_V6_ONLY Cluster_DnsLookupFamily = 2
)

var Cluster_DnsLookupFamily_name = map[int32]string{
	0: "AUTO",
	1: "V4_ONLY",
	2: "V6_ONLY",
}
var Cluster_DnsLookupFamily_value = map[string]int32{
	"AUTO":    0,
	"V4_ONLY": 1,
	"V6_ONLY": 2,
}

func (x Cluster_DnsLookupFamily) String() string {
	return proto.EnumName(Cluster_DnsLookupFamily_name, int32(x))
}
func (Cluster_DnsLookupFamily) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

type Cluster_ClusterProtocolSelection int32

const (
	// Cluster can only operate on one of the possible upstream protocols (HTTP1.1, HTTP2).
	// If :ref:`http2_protocol_options <envoy_api_field_Cluster.http2_protocol_options>` are
	// present, HTTP2 will be used, otherwise HTTP1.1 will be used.
	Cluster_USE_CONFIGURED_PROTOCOL Cluster_ClusterProtocolSelection = 0
	// Use HTTP1.1 or HTTP2, depending on which one is used on the downstream connection.
	Cluster_USE_DOWNSTREAM_PROTOCOL Cluster_ClusterProtocolSelection = 1
)

var Cluster_ClusterProtocolSelection_name = map[int32]string{
	0: "USE_CONFIGURED_PROTOCOL",
	1: "USE_DOWNSTREAM_PROTOCOL",
}
var Cluster_ClusterProtocolSelection_value = map[string]int32{
	"USE_CONFIGURED_PROTOCOL": 0,
	"USE_DOWNSTREAM_PROTOCOL": 1,
}

func (x Cluster_ClusterProtocolSelection) String() string {
	return proto.EnumName(Cluster_ClusterProtocolSelection_name, int32(x))
}
func (Cluster_ClusterProtocolSelection) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3}
}

// If NO_FALLBACK is selected, a result
// equivalent to no healthy hosts is reported. If ANY_ENDPOINT is selected,
// any cluster endpoint may be returned (subject to policy, health checks,
// etc). If DEFAULT_SUBSET is selected, load balancing is performed over the
// endpoints matching the values from the default_subset field.
type Cluster_LbSubsetConfig_LbSubsetFallbackPolicy int32

const (
	Cluster_LbSubsetConfig_NO_FALLBACK    Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 0
	Cluster_LbSubsetConfig_ANY_ENDPOINT   Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 1
	Cluster_LbSubsetConfig_DEFAULT_SUBSET Cluster_LbSubsetConfig_LbSubsetFallbackPolicy = 2
)

var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name = map[int32]string{
	0: "NO_FALLBACK",
	1: "ANY_ENDPOINT",
	2: "DEFAULT_SUBSET",
}
var Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value = map[string]int32{
	"NO_FALLBACK":    0,
	"ANY_ENDPOINT":   1,
	"DEFAULT_SUBSET": 2,
}

func (x Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) String() string {
	return proto.EnumName(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, int32(x))
}
func (Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

// Configuration for a single upstream cluster.
// [#comment:next free field: 30]
type Cluster struct {
	// Supplies the name of the cluster which must be unique across all clusters.
	// The cluster name is used when emitting
	// :ref:`statistics <config_cluster_manager_cluster_stats>` if :ref:`alt_stat_name
	// <envoy_api_field_Cluster.alt_stat_name>` is not provided.
	// Any ``:`` in the cluster name will be converted to ``_`` when emitting statistics.
	// By default, the maximum length of a cluster name is limited to 60
	// characters. This limit can be increased by setting the
	// :option:`--max-obj-name-len` command line argument to the desired value.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An optional alternative to the cluster name to be used while emitting stats.
	// Any ``:`` in the name will be converted to ``_`` when emitting statistics. This should not be
	// confused with :ref:`Router Filter Header
	// <config_http_filters_router_x-envoy-upstream-alt-stat-name>`.
	AltStatName string `protobuf:"bytes,28,opt,name=alt_stat_name,json=altStatName" json:"alt_stat_name,omitempty"`
	// The :ref:`service discovery type <arch_overview_service_discovery_types>`
	// to use for resolving the cluster.
	Type Cluster_DiscoveryType `protobuf:"varint,2,opt,name=type,enum=envoy.api.v2.Cluster_DiscoveryType" json:"type,omitempty"`
	// Configuration to use for EDS updates for the Cluster.
	EdsClusterConfig *Cluster_EdsClusterConfig `protobuf:"bytes,3,opt,name=eds_cluster_config,json=edsClusterConfig" json:"eds_cluster_config,omitempty"`
	// The timeout for new network connections to hosts in the cluster.
	ConnectTimeout *google_protobuf2.Duration `protobuf:"bytes,4,opt,name=connect_timeout,json=connectTimeout" json:"connect_timeout,omitempty"`
	// Soft limit on size of the cluster’s connections read and write buffers. If
	// unspecified, an implementation defined default is applied (1MiB).
	PerConnectionBufferLimitBytes *google_protobuf.UInt32Value `protobuf:"bytes,5,opt,name=per_connection_buffer_limit_bytes,json=perConnectionBufferLimitBytes" json:"per_connection_buffer_limit_bytes,omitempty"`
	// The :ref:`load balancer type <arch_overview_load_balancing_types>` to use
	// when picking a host in the cluster.
	LbPolicy Cluster_LbPolicy `protobuf:"varint,6,opt,name=lb_policy,json=lbPolicy,enum=envoy.api.v2.Cluster_LbPolicy" json:"lb_policy,omitempty"`
	// If the service discovery type is
	// :ref:`STATIC<envoy_api_enum_value_Cluster.DiscoveryType.STATIC>`,
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// then hosts is required.
	Hosts []*envoy_api_v2_core.Address `protobuf:"bytes,7,rep,name=hosts" json:"hosts,omitempty"`
	// Optional :ref:`active health checking <arch_overview_health_checking>`
	// configuration for the cluster. If no
	// configuration is specified no health checking will be done and all cluster
	// members will be considered healthy at all times.
	HealthChecks []*envoy_api_v2_core4.HealthCheck `protobuf:"bytes,8,rep,name=health_checks,json=healthChecks" json:"health_checks,omitempty"`
	// Optional maximum requests for a single upstream connection. This parameter
	// is respected by both the HTTP/1.1 and HTTP/2 connection pool
	// implementations. If not specified, there is no limit. Setting this
	// parameter to 1 will effectively disable keep alive.
	MaxRequestsPerConnection *google_protobuf.UInt32Value `protobuf:"bytes,9,opt,name=max_requests_per_connection,json=maxRequestsPerConnection" json:"max_requests_per_connection,omitempty"`
	// Optional :ref:`circuit breaking <arch_overview_circuit_break>` for the cluster.
	CircuitBreakers *envoy_api_v2_cluster.CircuitBreakers `protobuf:"bytes,10,opt,name=circuit_breakers,json=circuitBreakers" json:"circuit_breakers,omitempty"`
	// The TLS configuration for connections to the upstream cluster. If no TLS
	// configuration is specified, TLS will not be used for new connections.
	//
	// .. attention::
	//
	//   Server certificate verification is not enabled by default. Configure
	//   :ref:`trusted_ca<envoy_api_field_auth.CertificateValidationContext.trusted_ca>` to enable
	//   verification.
	TlsContext *envoy_api_v2_auth.UpstreamTlsContext `protobuf:"bytes,11,opt,name=tls_context,json=tlsContext" json:"tls_context,omitempty"`
	// Additional options when handling HTTP requests. These options will be applicable to both
	// HTTP1 and HTTP2 requests.
	CommonHttpProtocolOptions *envoy_api_v2_core5.HttpProtocolOptions `protobuf:"bytes,29,opt,name=common_http_protocol_options,json=commonHttpProtocolOptions" json:"common_http_protocol_options,omitempty"`
	// Additional options when handling HTTP1 requests.
	HttpProtocolOptions *envoy_api_v2_core5.Http1ProtocolOptions `protobuf:"bytes,13,opt,name=http_protocol_options,json=httpProtocolOptions" json:"http_protocol_options,omitempty"`
	// Even if default HTTP2 protocol options are desired, this field must be
	// set so that Envoy will assume that the upstream supports HTTP/2 when
	// making new HTTP connection pool connections. Currently, Envoy only
	// supports prior knowledge for upstream connections. Even if TLS is used
	// with ALPN, `http2_protocol_options` must be specified. As an aside this allows HTTP/2
	// connections to happen over plain text.
	Http2ProtocolOptions *envoy_api_v2_core5.Http2ProtocolOptions `protobuf:"bytes,14,opt,name=http2_protocol_options,json=http2ProtocolOptions" json:"http2_protocol_options,omitempty"`
	// If the DNS refresh rate is specified and the cluster type is either
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// this value is used as the cluster’s DNS refresh
	// rate. If this setting is not specified, the value defaults to 5000. For
	// cluster types other than
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
	// this setting is ignored.
	DnsRefreshRate *google_protobuf2.Duration `protobuf:"bytes,16,opt,name=dns_refresh_rate,json=dnsRefreshRate" json:"dns_refresh_rate,omitempty"`
	// The DNS IP address resolution policy. If this setting is not specified, the
	// value defaults to
	// :ref:`AUTO<envoy_api_enum_value_Cluster.DnsLookupFamily.AUTO>`.
	DnsLookupFamily Cluster_DnsLookupFamily `protobuf:"varint,17,opt,name=dns_lookup_family,json=dnsLookupFamily,enum=envoy.api.v2.Cluster_DnsLookupFamily" json:"dns_lookup_family,omitempty"`
	// If DNS resolvers are specified and the cluster type is either
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`,
	// or :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`,
	// this value is used to specify the cluster’s dns resolvers.
	// If this setting is not specified, the value defaults to the default
	// resolver, which uses /etc/resolv.conf for configuration. For cluster types
	// other than
	// :ref:`STRICT_DNS<envoy_api_enum_value_Cluster.DiscoveryType.STRICT_DNS>`
	// and :ref:`LOGICAL_DNS<envoy_api_enum_value_Cluster.DiscoveryType.LOGICAL_DNS>`
	// this setting is ignored.
	DnsResolvers []*envoy_api_v2_core.Address `protobuf:"bytes,18,rep,name=dns_resolvers,json=dnsResolvers" json:"dns_resolvers,omitempty"`
	// If specified, outlier detection will be enabled for this upstream cluster.
	// Each of the configuration values can be overridden via
	// :ref:`runtime values <config_cluster_manager_cluster_runtime_outlier_detection>`.
	OutlierDetection *envoy_api_v2_cluster1.OutlierDetection `protobuf:"bytes,19,opt,name=outlier_detection,json=outlierDetection" json:"outlier_detection,omitempty"`
	// The interval for removing stale hosts from a cluster type
	// :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`.
	// Hosts are considered stale if they have not been used
	// as upstream destinations during this interval. New hosts are added
	// to original destination clusters on demand as new connections are
	// redirected to Envoy, causing the number of hosts in the cluster to
	// grow over time. Hosts that are not stale (they are actively used as
	// destinations) are kept in the cluster, which allows connections to
	// them remain open, saving the latency that would otherwise be spent
	// on opening new connections. If this setting is not specified, the
	// value defaults to 5000ms. For cluster types other than
	// :ref:`ORIGINAL_DST<envoy_api_enum_value_Cluster.DiscoveryType.ORIGINAL_DST>`
	// this setting is ignored.
	CleanupInterval *google_protobuf2.Duration `protobuf:"bytes,20,opt,name=cleanup_interval,json=cleanupInterval" json:"cleanup_interval,omitempty"`
	// Optional configuration used to bind newly established upstream connections.
	// This overrides any bind_config specified in the bootstrap proto.
	// If the address and port are empty, no bind will be performed.
	UpstreamBindConfig *envoy_api_v2_core.BindConfig `protobuf:"bytes,21,opt,name=upstream_bind_config,json=upstreamBindConfig" json:"upstream_bind_config,omitempty"`
	// Configuration for load balancing subsetting.
	LbSubsetConfig *Cluster_LbSubsetConfig `protobuf:"bytes,22,opt,name=lb_subset_config,json=lbSubsetConfig" json:"lb_subset_config,omitempty"`
	// Optional configuration for the load balancing algorithm selected by
	// LbPolicy. Currently only
	// :ref:`RING_HASH<envoy_api_enum_value_Cluster.LbPolicy.RING_HASH>`
	// has additional configuration options.
	// Specifying ring_hash_lb_config without setting the LbPolicy to
	// :ref:`RING_HASH<envoy_api_enum_value_Cluster.LbPolicy.RING_HASH>`
	// will generate an error at runtime.
	//
	// Types that are valid to be assigned to LbConfig:
	//	*Cluster_RingHashLbConfig_
	LbConfig isCluster_LbConfig `protobuf_oneof:"lb_config"`
	// Common configuration for all load balancer implementations.
	CommonLbConfig *Cluster_CommonLbConfig `protobuf:"bytes,27,opt,name=common_lb_config,json=commonLbConfig" json:"common_lb_config,omitempty"`
	// Optional custom transport socket implementation to use for upstream connections.
	TransportSocket *envoy_api_v2_core1.TransportSocket `protobuf:"bytes,24,opt,name=transport_socket,json=transportSocket" json:"transport_socket,omitempty"`
	// The Metadata field can be used to provide additional information about the
	// cluster. It can be used for stats, logging, and varying filter behavior.
	// Fields should use reverse DNS notation to denote which entity within Envoy
	// will need the information. For instance, if the metadata is intended for
	// the Router filter, the filter name should be specified as *envoy.router*.
	Metadata *envoy_api_v2_core1.Metadata `protobuf:"bytes,25,opt,name=metadata" json:"metadata,omitempty"`
	// Determines how Envoy selects the protocol used to speak to upstream hosts.
	ProtocolSelection Cluster_ClusterProtocolSelection `protobuf:"varint,26,opt,name=protocol_selection,json=protocolSelection,enum=envoy.api.v2.Cluster_ClusterProtocolSelection" json:"protocol_selection,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCluster_LbConfig interface {
	isCluster_LbConfig()
}

type Cluster_RingHashLbConfig_ struct {
	RingHashLbConfig *Cluster_RingHashLbConfig `protobuf:"bytes,23,opt,name=ring_hash_lb_config,json=ringHashLbConfig,oneof"`
}

func (*Cluster_RingHashLbConfig_) isCluster_LbConfig() {}

func (m *Cluster) GetLbConfig() isCluster_LbConfig {
	if m != nil {
		return m.LbConfig
	}
	return nil
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetAltStatName() string {
	if m != nil {
		return m.AltStatName
	}
	return ""
}

func (m *Cluster) GetType() Cluster_DiscoveryType {
	if m != nil {
		return m.Type
	}
	return Cluster_STATIC
}

func (m *Cluster) GetEdsClusterConfig() *Cluster_EdsClusterConfig {
	if m != nil {
		return m.EdsClusterConfig
	}
	return nil
}

func (m *Cluster) GetConnectTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.ConnectTimeout
	}
	return nil
}

func (m *Cluster) GetPerConnectionBufferLimitBytes() *google_protobuf.UInt32Value {
	if m != nil {
		return m.PerConnectionBufferLimitBytes
	}
	return nil
}

func (m *Cluster) GetLbPolicy() Cluster_LbPolicy {
	if m != nil {
		return m.LbPolicy
	}
	return Cluster_ROUND_ROBIN
}

func (m *Cluster) GetHosts() []*envoy_api_v2_core.Address {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *Cluster) GetHealthChecks() []*envoy_api_v2_core4.HealthCheck {
	if m != nil {
		return m.HealthChecks
	}
	return nil
}

func (m *Cluster) GetMaxRequestsPerConnection() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxRequestsPerConnection
	}
	return nil
}

func (m *Cluster) GetCircuitBreakers() *envoy_api_v2_cluster.CircuitBreakers {
	if m != nil {
		return m.CircuitBreakers
	}
	return nil
}

func (m *Cluster) GetTlsContext() *envoy_api_v2_auth.UpstreamTlsContext {
	if m != nil {
		return m.TlsContext
	}
	return nil
}

func (m *Cluster) GetCommonHttpProtocolOptions() *envoy_api_v2_core5.HttpProtocolOptions {
	if m != nil {
		return m.CommonHttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttpProtocolOptions() *envoy_api_v2_core5.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *Cluster) GetHttp2ProtocolOptions() *envoy_api_v2_core5.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func (m *Cluster) GetDnsRefreshRate() *google_protobuf2.Duration {
	if m != nil {
		return m.DnsRefreshRate
	}
	return nil
}

func (m *Cluster) GetDnsLookupFamily() Cluster_DnsLookupFamily {
	if m != nil {
		return m.DnsLookupFamily
	}
	return Cluster_AUTO
}

func (m *Cluster) GetDnsResolvers() []*envoy_api_v2_core.Address {
	if m != nil {
		return m.DnsResolvers
	}
	return nil
}

func (m *Cluster) GetOutlierDetection() *envoy_api_v2_cluster1.OutlierDetection {
	if m != nil {
		return m.OutlierDetection
	}
	return nil
}

func (m *Cluster) GetCleanupInterval() *google_protobuf2.Duration {
	if m != nil {
		return m.CleanupInterval
	}
	return nil
}

func (m *Cluster) GetUpstreamBindConfig() *envoy_api_v2_core.BindConfig {
	if m != nil {
		return m.UpstreamBindConfig
	}
	return nil
}

func (m *Cluster) GetLbSubsetConfig() *Cluster_LbSubsetConfig {
	if m != nil {
		return m.LbSubsetConfig
	}
	return nil
}

func (m *Cluster) GetRingHashLbConfig() *Cluster_RingHashLbConfig {
	if x, ok := m.GetLbConfig().(*Cluster_RingHashLbConfig_); ok {
		return x.RingHashLbConfig
	}
	return nil
}

func (m *Cluster) GetCommonLbConfig() *Cluster_CommonLbConfig {
	if m != nil {
		return m.CommonLbConfig
	}
	return nil
}

func (m *Cluster) GetTransportSocket() *envoy_api_v2_core1.TransportSocket {
	if m != nil {
		return m.TransportSocket
	}
	return nil
}

func (m *Cluster) GetMetadata() *envoy_api_v2_core1.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Cluster) GetProtocolSelection() Cluster_ClusterProtocolSelection {
	if m != nil {
		return m.ProtocolSelection
	}
	return Cluster_USE_CONFIGURED_PROTOCOL
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cluster) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cluster_OneofMarshaler, _Cluster_OneofUnmarshaler, _Cluster_OneofSizer, []interface{}{
		(*Cluster_RingHashLbConfig_)(nil),
	}
}

func _Cluster_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cluster)
	// lb_config
	switch x := m.LbConfig.(type) {
	case *Cluster_RingHashLbConfig_:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RingHashLbConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cluster.LbConfig has unexpected type %T", x)
	}
	return nil
}

func _Cluster_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cluster)
	switch tag {
	case 23: // lb_config.ring_hash_lb_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_RingHashLbConfig)
		err := b.DecodeMessage(msg)
		m.LbConfig = &Cluster_RingHashLbConfig_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cluster_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cluster)
	// lb_config
	switch x := m.LbConfig.(type) {
	case *Cluster_RingHashLbConfig_:
		s := proto.Size(x.RingHashLbConfig)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Only valid when discovery type is EDS.
type Cluster_EdsClusterConfig struct {
	// Configuration for the source of EDS updates for this Cluster.
	EdsConfig *envoy_api_v2_core3.ConfigSource `protobuf:"bytes,1,opt,name=eds_config,json=edsConfig" json:"eds_config,omitempty"`
	// Optional alternative to cluster name to present to EDS. This does not
	// have the same restrictions as cluster name, i.e. it may be arbitrary
	// length.
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName" json:"service_name,omitempty"`
}

func (m *Cluster_EdsClusterConfig) Reset()                    { *m = Cluster_EdsClusterConfig{} }
func (m *Cluster_EdsClusterConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_EdsClusterConfig) ProtoMessage()               {}
func (*Cluster_EdsClusterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Cluster_EdsClusterConfig) GetEdsConfig() *envoy_api_v2_core3.ConfigSource {
	if m != nil {
		return m.EdsConfig
	}
	return nil
}

func (m *Cluster_EdsClusterConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// Optionally divide the endpoints in this cluster into subsets defined by
// endpoint metadata and selected by route and weighted cluster metadata.
type Cluster_LbSubsetConfig struct {
	// The behavior used when no endpoint subset matches the selected route's
	// metadata. The value defaults to
	// :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
	FallbackPolicy Cluster_LbSubsetConfig_LbSubsetFallbackPolicy `protobuf:"varint,1,opt,name=fallback_policy,json=fallbackPolicy,enum=envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy" json:"fallback_policy,omitempty"`
	// Specifies the default subset of endpoints used during fallback if
	// fallback_policy is
	// :ref:`DEFAULT_SUBSET<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.DEFAULT_SUBSET>`.
	// Each field in default_subset is
	// compared to the matching LbEndpoint.Metadata under the *envoy.lb*
	// namespace. It is valid for no hosts to match, in which case the behavior
	// is the same as a fallback_policy of
	// :ref:`NO_FALLBACK<envoy_api_enum_value_Cluster.LbSubsetConfig.LbSubsetFallbackPolicy.NO_FALLBACK>`.
	DefaultSubset *google_protobuf4.Struct `protobuf:"bytes,2,opt,name=default_subset,json=defaultSubset" json:"default_subset,omitempty"`
	// For each entry, LbEndpoint.Metadata's
	// *envoy.lb* namespace is traversed and a subset is created for each unique
	// combination of key and value. For example:
	//
	// .. code-block:: json
	//
	//   { "subset_selectors": [
	//       { "keys": [ "version" ] },
	//       { "keys": [ "stage", "hardware_type" ] }
	//   ]}
	//
	// A subset is matched when the metadata from the selected route and
	// weighted cluster contains the same keys and values as the subset's
	// metadata. The same host may appear in multiple subsets.
	SubsetSelectors []*Cluster_LbSubsetConfig_LbSubsetSelector `protobuf:"bytes,3,rep,name=subset_selectors,json=subsetSelectors" json:"subset_selectors,omitempty"`
}

func (m *Cluster_LbSubsetConfig) Reset()                    { *m = Cluster_LbSubsetConfig{} }
func (m *Cluster_LbSubsetConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig) ProtoMessage()               {}
func (*Cluster_LbSubsetConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Cluster_LbSubsetConfig) GetFallbackPolicy() Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
	if m != nil {
		return m.FallbackPolicy
	}
	return Cluster_LbSubsetConfig_NO_FALLBACK
}

func (m *Cluster_LbSubsetConfig) GetDefaultSubset() *google_protobuf4.Struct {
	if m != nil {
		return m.DefaultSubset
	}
	return nil
}

func (m *Cluster_LbSubsetConfig) GetSubsetSelectors() []*Cluster_LbSubsetConfig_LbSubsetSelector {
	if m != nil {
		return m.SubsetSelectors
	}
	return nil
}

// Specifications for subsets.
type Cluster_LbSubsetConfig_LbSubsetSelector struct {
	// List of keys to match with the weighted cluster metadata.
	Keys []string `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) Reset() {
	*m = Cluster_LbSubsetConfig_LbSubsetSelector{}
}
func (m *Cluster_LbSubsetConfig_LbSubsetSelector) String() string { return proto.CompactTextString(m) }
func (*Cluster_LbSubsetConfig_LbSubsetSelector) ProtoMessage()    {}
func (*Cluster_LbSubsetConfig_LbSubsetSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

func (m *Cluster_LbSubsetConfig_LbSubsetSelector) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

// Specific configuration for the :ref:`RingHash<arch_overview_load_balancing_types_ring_hash>`
// load balancing policy.
type Cluster_RingHashLbConfig struct {
	// Minimum hash ring size, i.e. total virtual nodes. A larger size
	// will provide better request distribution since each host in the
	// cluster will have more virtual nodes. Defaults to 1024. In the case
	// that total number of hosts is greater than the minimum, each host will
	// be allocated a single virtual node.
	MinimumRingSize *google_protobuf.UInt64Value `protobuf:"bytes,1,opt,name=minimum_ring_size,json=minimumRingSize" json:"minimum_ring_size,omitempty"`
	// Deprecated settings from v1 config.
	// [#not-implemented-hide:] Hide from docs.
	DeprecatedV1 *Cluster_RingHashLbConfig_DeprecatedV1 `protobuf:"bytes,2,opt,name=deprecated_v1,json=deprecatedV1" json:"deprecated_v1,omitempty"`
}

func (m *Cluster_RingHashLbConfig) Reset()                    { *m = Cluster_RingHashLbConfig{} }
func (m *Cluster_RingHashLbConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_RingHashLbConfig) ProtoMessage()               {}
func (*Cluster_RingHashLbConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *Cluster_RingHashLbConfig) GetMinimumRingSize() *google_protobuf.UInt64Value {
	if m != nil {
		return m.MinimumRingSize
	}
	return nil
}

func (m *Cluster_RingHashLbConfig) GetDeprecatedV1() *Cluster_RingHashLbConfig_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

// [#not-implemented-hide:] Hide from docs.
type Cluster_RingHashLbConfig_DeprecatedV1 struct {
	// Defaults to true, meaning that std::hash is used to hash hosts onto
	// the ketama ring. std::hash can vary by platform. For this reason,
	// Envoy will eventually use `xxHash <https://github.com/Cyan4973/xxHash>`_
	// by default. This field exists for
	// migration purposes and will eventually be deprecated. Set it to false
	// to use `xxHash <https://github.com/Cyan4973/xxHash>`_ now.
	UseStdHash *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=use_std_hash,json=useStdHash" json:"use_std_hash,omitempty"`
}

func (m *Cluster_RingHashLbConfig_DeprecatedV1) Reset()         { *m = Cluster_RingHashLbConfig_DeprecatedV1{} }
func (m *Cluster_RingHashLbConfig_DeprecatedV1) String() string { return proto.CompactTextString(m) }
func (*Cluster_RingHashLbConfig_DeprecatedV1) ProtoMessage()    {}
func (*Cluster_RingHashLbConfig_DeprecatedV1) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 2, 0}
}

func (m *Cluster_RingHashLbConfig_DeprecatedV1) GetUseStdHash() *google_protobuf.BoolValue {
	if m != nil {
		return m.UseStdHash
	}
	return nil
}

// Common configuration for all load balancer implementations.
type Cluster_CommonLbConfig struct {
	// Configures the :ref:`healthy panic threshold <arch_overview_load_balancing_panic_threshold>`.
	// If not specified, the default is 50%.
	//
	// .. note::
	//   The specified percent will be truncated to the nearest 1%.
	HealthyPanicThreshold *envoy_type.Percent `protobuf:"bytes,1,opt,name=healthy_panic_threshold,json=healthyPanicThreshold" json:"healthy_panic_threshold,omitempty"`
	// Types that are valid to be assigned to LocalityConfigSpecifier:
	//	*Cluster_CommonLbConfig_ZoneAwareLbConfig_
	//	*Cluster_CommonLbConfig_LocalityWeightedLbConfig_
	LocalityConfigSpecifier isCluster_CommonLbConfig_LocalityConfigSpecifier `protobuf_oneof:"locality_config_specifier"`
}

func (m *Cluster_CommonLbConfig) Reset()                    { *m = Cluster_CommonLbConfig{} }
func (m *Cluster_CommonLbConfig) String() string            { return proto.CompactTextString(m) }
func (*Cluster_CommonLbConfig) ProtoMessage()               {}
func (*Cluster_CommonLbConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 3} }

type isCluster_CommonLbConfig_LocalityConfigSpecifier interface {
	isCluster_CommonLbConfig_LocalityConfigSpecifier()
}

type Cluster_CommonLbConfig_ZoneAwareLbConfig_ struct {
	ZoneAwareLbConfig *Cluster_CommonLbConfig_ZoneAwareLbConfig `protobuf:"bytes,2,opt,name=zone_aware_lb_config,json=zoneAwareLbConfig,oneof"`
}
type Cluster_CommonLbConfig_LocalityWeightedLbConfig_ struct {
	LocalityWeightedLbConfig *Cluster_CommonLbConfig_LocalityWeightedLbConfig `protobuf:"bytes,3,opt,name=locality_weighted_lb_config,json=localityWeightedLbConfig,oneof"`
}

func (*Cluster_CommonLbConfig_ZoneAwareLbConfig_) isCluster_CommonLbConfig_LocalityConfigSpecifier() {}
func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig_) isCluster_CommonLbConfig_LocalityConfigSpecifier() {
}

func (m *Cluster_CommonLbConfig) GetLocalityConfigSpecifier() isCluster_CommonLbConfig_LocalityConfigSpecifier {
	if m != nil {
		return m.LocalityConfigSpecifier
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetHealthyPanicThreshold() *envoy_type.Percent {
	if m != nil {
		return m.HealthyPanicThreshold
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetZoneAwareLbConfig() *Cluster_CommonLbConfig_ZoneAwareLbConfig {
	if x, ok := m.GetLocalityConfigSpecifier().(*Cluster_CommonLbConfig_ZoneAwareLbConfig_); ok {
		return x.ZoneAwareLbConfig
	}
	return nil
}

func (m *Cluster_CommonLbConfig) GetLocalityWeightedLbConfig() *Cluster_CommonLbConfig_LocalityWeightedLbConfig {
	if x, ok := m.GetLocalityConfigSpecifier().(*Cluster_CommonLbConfig_LocalityWeightedLbConfig_); ok {
		return x.LocalityWeightedLbConfig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cluster_CommonLbConfig) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cluster_CommonLbConfig_OneofMarshaler, _Cluster_CommonLbConfig_OneofUnmarshaler, _Cluster_CommonLbConfig_OneofSizer, []interface{}{
		(*Cluster_CommonLbConfig_ZoneAwareLbConfig_)(nil),
		(*Cluster_CommonLbConfig_LocalityWeightedLbConfig_)(nil),
	}
}

func _Cluster_CommonLbConfig_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cluster_CommonLbConfig)
	// locality_config_specifier
	switch x := m.LocalityConfigSpecifier.(type) {
	case *Cluster_CommonLbConfig_ZoneAwareLbConfig_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ZoneAwareLbConfig); err != nil {
			return err
		}
	case *Cluster_CommonLbConfig_LocalityWeightedLbConfig_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalityWeightedLbConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cluster_CommonLbConfig.LocalityConfigSpecifier has unexpected type %T", x)
	}
	return nil
}

func _Cluster_CommonLbConfig_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cluster_CommonLbConfig)
	switch tag {
	case 2: // locality_config_specifier.zone_aware_lb_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_CommonLbConfig_ZoneAwareLbConfig)
		err := b.DecodeMessage(msg)
		m.LocalityConfigSpecifier = &Cluster_CommonLbConfig_ZoneAwareLbConfig_{msg}
		return true, err
	case 3: // locality_config_specifier.locality_weighted_lb_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_CommonLbConfig_LocalityWeightedLbConfig)
		err := b.DecodeMessage(msg)
		m.LocalityConfigSpecifier = &Cluster_CommonLbConfig_LocalityWeightedLbConfig_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cluster_CommonLbConfig_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cluster_CommonLbConfig)
	// locality_config_specifier
	switch x := m.LocalityConfigSpecifier.(type) {
	case *Cluster_CommonLbConfig_ZoneAwareLbConfig_:
		s := proto.Size(x.ZoneAwareLbConfig)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_CommonLbConfig_LocalityWeightedLbConfig_:
		s := proto.Size(x.LocalityWeightedLbConfig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Configuration for :ref:`zone aware routing
// <arch_overview_load_balancing_zone_aware_routing>`.
// [#not-implemented-hide:]
type Cluster_CommonLbConfig_ZoneAwareLbConfig struct {
	// [#not-implemented-hide:]
	// Configures percentage of requests that will be considered for zone aware routing
	// if zone aware routing is configured. If not specified, the default is 100%.
	// * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
	// * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
	RoutingEnabled *envoy_type.Percent `protobuf:"bytes,1,opt,name=routing_enabled,json=routingEnabled" json:"routing_enabled,omitempty"`
	// [#not-implemented-hide:]
	// Configures minimum upstream cluster size required for zone aware routing
	// If upstream cluster size is less than specified, zone aware routing is not performed
	// even if zone aware routing is configured. If not specified, the default is 6.
	// * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
	// * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
	MinClusterSize *google_protobuf.UInt64Value `protobuf:"bytes,2,opt,name=min_cluster_size,json=minClusterSize" json:"min_cluster_size,omitempty"`
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) Reset() {
	*m = Cluster_CommonLbConfig_ZoneAwareLbConfig{}
}
func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) String() string { return proto.CompactTextString(m) }
func (*Cluster_CommonLbConfig_ZoneAwareLbConfig) ProtoMessage()    {}
func (*Cluster_CommonLbConfig_ZoneAwareLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3, 0}
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) GetRoutingEnabled() *envoy_type.Percent {
	if m != nil {
		return m.RoutingEnabled
	}
	return nil
}

func (m *Cluster_CommonLbConfig_ZoneAwareLbConfig) GetMinClusterSize() *google_protobuf.UInt64Value {
	if m != nil {
		return m.MinClusterSize
	}
	return nil
}

// Configuration for :ref:`locality weighted load balancing
// <arch_overview_load_balancing_locality_weighted_lb>`
type Cluster_CommonLbConfig_LocalityWeightedLbConfig struct {
}

func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) Reset() {
	*m = Cluster_CommonLbConfig_LocalityWeightedLbConfig{}
}
func (m *Cluster_CommonLbConfig_LocalityWeightedLbConfig) String() string {
	return proto.CompactTextString(m)
}
func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig) ProtoMessage() {}
func (*Cluster_CommonLbConfig_LocalityWeightedLbConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 3, 1}
}

// An extensible structure containing the address Envoy should bind to when
// establishing upstream connections.
type UpstreamBindConfig struct {
	// The address Envoy should bind to when establishing upstream connections.
	SourceAddress *envoy_api_v2_core.Address `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress" json:"source_address,omitempty"`
}

func (m *UpstreamBindConfig) Reset()                    { *m = UpstreamBindConfig{} }
func (m *UpstreamBindConfig) String() string            { return proto.CompactTextString(m) }
func (*UpstreamBindConfig) ProtoMessage()               {}
func (*UpstreamBindConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UpstreamBindConfig) GetSourceAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

func init() {
	proto.RegisterType((*Cluster)(nil), "envoy.api.v2.Cluster")
	proto.RegisterType((*Cluster_EdsClusterConfig)(nil), "envoy.api.v2.Cluster.EdsClusterConfig")
	proto.RegisterType((*Cluster_LbSubsetConfig)(nil), "envoy.api.v2.Cluster.LbSubsetConfig")
	proto.RegisterType((*Cluster_LbSubsetConfig_LbSubsetSelector)(nil), "envoy.api.v2.Cluster.LbSubsetConfig.LbSubsetSelector")
	proto.RegisterType((*Cluster_RingHashLbConfig)(nil), "envoy.api.v2.Cluster.RingHashLbConfig")
	proto.RegisterType((*Cluster_RingHashLbConfig_DeprecatedV1)(nil), "envoy.api.v2.Cluster.RingHashLbConfig.DeprecatedV1")
	proto.RegisterType((*Cluster_CommonLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig")
	proto.RegisterType((*Cluster_CommonLbConfig_ZoneAwareLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig.ZoneAwareLbConfig")
	proto.RegisterType((*Cluster_CommonLbConfig_LocalityWeightedLbConfig)(nil), "envoy.api.v2.Cluster.CommonLbConfig.LocalityWeightedLbConfig")
	proto.RegisterType((*UpstreamBindConfig)(nil), "envoy.api.v2.UpstreamBindConfig")
	proto.RegisterEnum("envoy.api.v2.Cluster_DiscoveryType", Cluster_DiscoveryType_name, Cluster_DiscoveryType_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbPolicy", Cluster_LbPolicy_name, Cluster_LbPolicy_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_DnsLookupFamily", Cluster_DnsLookupFamily_name, Cluster_DnsLookupFamily_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_ClusterProtocolSelection", Cluster_ClusterProtocolSelection_name, Cluster_ClusterProtocolSelection_value)
	proto.RegisterEnum("envoy.api.v2.Cluster_LbSubsetConfig_LbSubsetFallbackPolicy", Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_name, Cluster_LbSubsetConfig_LbSubsetFallbackPolicy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterDiscoveryService service

type ClusterDiscoveryServiceClient interface {
	StreamClusters(ctx context.Context, opts ...grpc.CallOption) (ClusterDiscoveryService_StreamClustersClient, error)
	FetchClusters(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type clusterDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewClusterDiscoveryServiceClient(cc *grpc.ClientConn) ClusterDiscoveryServiceClient {
	return &clusterDiscoveryServiceClient{cc}
}

func (c *clusterDiscoveryServiceClient) StreamClusters(ctx context.Context, opts ...grpc.CallOption) (ClusterDiscoveryService_StreamClustersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterDiscoveryService_serviceDesc.Streams[0], c.cc, "/envoy.api.v2.ClusterDiscoveryService/StreamClusters", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterDiscoveryServiceStreamClustersClient{stream}
	return x, nil
}

type ClusterDiscoveryService_StreamClustersClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type clusterDiscoveryServiceStreamClustersClient struct {
	grpc.ClientStream
}

func (x *clusterDiscoveryServiceStreamClustersClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clusterDiscoveryServiceStreamClustersClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clusterDiscoveryServiceClient) FetchClusters(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := grpc.Invoke(ctx, "/envoy.api.v2.ClusterDiscoveryService/FetchClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClusterDiscoveryService service

type ClusterDiscoveryServiceServer interface {
	StreamClusters(ClusterDiscoveryService_StreamClustersServer) error
	FetchClusters(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterClusterDiscoveryServiceServer(s *grpc.Server, srv ClusterDiscoveryServiceServer) {
	s.RegisterService(&_ClusterDiscoveryService_serviceDesc, srv)
}

func _ClusterDiscoveryService_StreamClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterDiscoveryServiceServer).StreamClusters(&clusterDiscoveryServiceStreamClustersServer{stream})
}

type ClusterDiscoveryService_StreamClustersServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type clusterDiscoveryServiceStreamClustersServer struct {
	grpc.ServerStream
}

func (x *clusterDiscoveryServiceStreamClustersServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clusterDiscoveryServiceStreamClustersServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ClusterDiscoveryService_FetchClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterDiscoveryServiceServer).FetchClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.ClusterDiscoveryService/FetchClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterDiscoveryServiceServer).FetchClusters(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.ClusterDiscoveryService",
	HandlerType: (*ClusterDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchClusters",
			Handler:    _ClusterDiscoveryService_FetchClusters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamClusters",
			Handler:       _ClusterDiscoveryService_StreamClusters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/api/v2/cds.proto",
}

func init() { proto.RegisterFile("envoy/api/v2/cds.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x37, 0x65, 0x65, 0x63, 0x3f, 0x5b, 0x12, 0x3d, 0xf9, 0x30, 0x23, 0xe7, 0xc3, 0x51, 0x37,
	0x5b, 0x23, 0x28, 0xe4, 0x8d, 0xb3, 0x9b, 0x02, 0xdb, 0xed, 0x16, 0xfa, 0xb2, 0xad, 0x5d, 0x45,
	0x72, 0x49, 0x3a, 0xc6, 0x76, 0x1b, 0x4c, 0x47, 0xe4, 0xc8, 0x62, 0x4d, 0x91, 0x2c, 0x67, 0xe8,
	0x44, 0x39, 0x14, 0xe8, 0x9e, 0xf6, 0xde, 0x4b, 0x7b, 0xd8, 0x7b, 0xd1, 0x3f, 0xa1, 0xa7, 0x1e,
	0x7b, 0xef, 0xbd, 0x05, 0x8a, 0x02, 0x45, 0xff, 0x8b, 0x82, 0xc3, 0xa1, 0xa2, 0x0f, 0x2a, 0xeb,
	0x05, 0x7a, 0x32, 0xe7, 0xbd, 0xdf, 0xfb, 0xcd, 0x9b, 0xa7, 0xf7, 0xde, 0xbc, 0x31, 0xdc, 0xa6,
	0xde, 0xa5, 0x3f, 0xde, 0x27, 0x81, 0xb3, 0x7f, 0x79, 0xb0, 0x6f, 0xd9, 0xac, 0x1a, 0x84, 0x3e,
	0xf7, 0xd1, 0xa6, 0x90, 0x57, 0x49, 0xe0, 0x54, 0x2f, 0x0f, 0xca, 0x0f, 0x66, 0x51, 0x7e, 0x48,
	0xf7, 0x89, 0x6d, 0x87, 0x94, 0x49, 0x78, 0xf9, 0xee, 0x0c, 0x80, 0x44, 0x7c, 0xb8, 0x6f, 0xd1,
	0x90, 0x67, 0x6a, 0x85, 0x79, 0x9f, 0x30, 0x2a, 0xb5, 0x8f, 0x16, 0xb5, 0x96, 0xef, 0x0d, 0x9c,
	0x73, 0xcc, 0xfc, 0x28, 0xb4, 0x68, 0x26, 0x89, 0xed, 0x30, 0xcb, 0xbf, 0xa4, 0xe1, 0x58, 0x6a,
	0xdf, 0x5f, 0x24, 0x19, 0x52, 0xe2, 0xf2, 0x21, 0xb6, 0x86, 0xd4, 0xba, 0x90, 0xa8, 0xdd, 0x45,
	0x94, 0x50, 0x58, 0xbe, 0x2b, 0x11, 0x8f, 0x67, 0x11, 0x6e, 0xc4, 0x38, 0x0d, 0xf7, 0x2d, 0x27,
	0xb4, 0x22, 0x87, 0xe3, 0x7e, 0x48, 0xc9, 0x05, 0x0d, 0x25, 0xf6, 0x47, 0x99, 0x58, 0x3f, 0xe2,
	0xae, 0x43, 0x43, 0x6c, 0x53, 0x4e, 0x2d, 0xee, 0xf8, 0x9e, 0x44, 0x6b, 0x09, 0x9a, 0x8f, 0x03,
	0xba, 0x1f, 0xd0, 0xd0, 0xa2, 0xde, 0x24, 0x3c, 0xe7, 0xbe, 0x7f, 0xee, 0x52, 0x41, 0x44, 0x3c,
	0xcf, 0xe7, 0x24, 0x36, 0x4b, 0x43, 0x7b, 0x5f, 0x6a, 0xc5, 0xaa, 0x1f, 0x0d, 0xf6, 0xed, 0x28,
	0x24, 0x53, 0xbc, 0x77, 0xe7, 0xf5, 0x8c, 0x87, 0x91, 0xc5, 0x97, 0x59, 0xbf, 0x0a, 0x49, 0x10,
	0xd0, 0x30, 0x65, 0xdf, 0xbe, 0x24, 0xae, 0x63, 0x13, 0x4e, 0xf7, 0xd3, 0x0f, 0xa9, 0xb8, 0x79,
	0xee, 0x9f, 0xfb, 0xe2, 0x73, 0x3f, 0xfe, 0x4a, 0xa4, 0x95, 0xdf, 0xdd, 0x87, 0xeb, 0x8d, 0xe4,
	0xa0, 0xe8, 0x1e, 0xe4, 0x3d, 0x32, 0xa2, 0x9a, 0xb2, 0xab, 0xec, 0xad, 0xd7, 0xd7, 0xff, 0xf2,
	0xdf, 0xbf, 0xae, 0xe6, 0xc3, 0xdc, 0xae, 0xa2, 0x0b, 0x31, 0xaa, 0x40, 0x81, 0xb8, 0x1c, 0x33,
	0x4e, 0x38, 0x16, 0xb8, 0xbb, 0x31, 0x4e, 0xdf, 0x20, 0x2e, 0x37, 0x38, 0xe1, 0xdd, 0x18, 0xd3,
	0x80, 0x7c, 0x1c, 0x0f, 0x2d, 0xb7, 0xab, 0xec, 0x15, 0x0f, 0x7e, 0x50, 0x9d, 0x4e, 0xba, 0xaa,
	0xdc, 0xa7, 0xda, 0x4c, 0x7f, 0x6a, 0x73, 0x1c, 0xd0, 0x3a, 0xc4, 0xfb, 0x5c, 0xfb, 0x5a, 0xc9,
	0xa9, 0x8a, 0x2e, 0x8c, 0x91, 0x09, 0x88, 0xda, 0x0c, 0xcb, 0xf8, 0xe3, 0x24, 0x77, 0xb4, 0xd5,
	0x5d, 0x65, 0x6f, 0xe3, 0xe0, 0x83, 0x6c, 0xca, 0x96, 0xcd, 0xe4, 0x67, 0x43, 0xa0, 0x75, 0x95,
	0xce, 0x49, 0xd0, 0x0b, 0x28, 0x59, 0xbe, 0xe7, 0x51, 0x8b, 0x63, 0xee, 0x8c, 0xa8, 0x1f, 0x71,
	0x2d, 0x2f, 0x28, 0xef, 0x54, 0x93, 0x90, 0x56, 0xd3, 0x90, 0x56, 0x9b, 0xf2, 0x07, 0xa9, 0xa3,
	0xbf, 0xfd, 0xe3, 0xc1, 0xca, 0x1f, 0xfe, 0xf9, 0x40, 0x11, 0x3e, 0xfe, 0x59, 0xc9, 0x3d, 0x5e,
	0xd1, 0x8b, 0x92, 0xc5, 0x4c, 0x48, 0xd0, 0x00, 0x1e, 0x06, 0x89, 0x97, 0x5e, 0x92, 0x1e, 0xb8,
	0x1f, 0x0d, 0x06, 0x34, 0xc4, 0xae, 0x33, 0x8a, 0x33, 0x6c, 0xcc, 0x29, 0xd3, 0xae, 0x89, 0x9d,
	0xee, 0x2e, 0xec, 0x74, 0xda, 0xf6, 0xf8, 0xd3, 0x83, 0x17, 0xc4, 0x8d, 0xa8, 0x7e, 0x2f, 0x10,
	0xbe, 0x4a, 0x96, 0xba, 0x20, 0xe9, 0xc4, 0x1c, 0xf5, 0x98, 0x02, 0x1d, 0xc1, 0xba, 0xdb, 0xc7,
	0x81, 0xef, 0x3a, 0xd6, 0x58, 0x7b, 0x4f, 0xc4, 0xf7, 0x7e, 0x76, 0x30, 0x3a, 0xfd, 0x13, 0x81,
	0x9a, 0x09, 0xed, 0x9a, 0x2b, 0xa5, 0xe8, 0x43, 0xb8, 0x36, 0xf4, 0x19, 0x67, 0xda, 0xf5, 0xdd,
	0xd5, 0xbd, 0x8d, 0x83, 0xf2, 0x2c, 0x49, 0x5c, 0x43, 0xd5, 0x5a, 0xd2, 0x0b, 0xf4, 0x04, 0x88,
	0x1a, 0x50, 0x98, 0xae, 0x3d, 0xa6, 0xad, 0x09, 0xcb, 0xfb, 0x19, 0x96, 0xc7, 0x02, 0xd7, 0x88,
	0x61, 0xfa, 0xe6, 0xf0, 0xed, 0x82, 0xa1, 0xaf, 0x60, 0x67, 0x44, 0x5e, 0xe3, 0x90, 0xfe, 0x26,
	0xa2, 0x8c, 0x33, 0x3c, 0x1b, 0x34, 0x6d, 0xfd, 0x0a, 0x11, 0xd2, 0x46, 0xe4, 0xb5, 0x2e, 0xed,
	0x4f, 0xa6, 0x83, 0x85, 0x4e, 0x40, 0x9d, 0x2b, 0x69, 0xa6, 0x81, 0x60, 0x7c, 0x34, 0xe7, 0xa4,
	0x8c, 0x51, 0x23, 0x41, 0xd7, 0x25, 0x58, 0x2f, 0x59, 0xb3, 0x02, 0x74, 0x08, 0x1b, 0xdc, 0x65,
	0xb1, 0x87, 0x9c, 0xbe, 0xe6, 0xda, 0x46, 0x16, 0x59, 0xdc, 0x16, 0xab, 0xa7, 0x01, 0xe3, 0x21,
	0x25, 0x23, 0xd3, 0x65, 0x8d, 0x04, 0xac, 0x03, 0x9f, 0x7c, 0xa3, 0x73, 0xb8, 0x6b, 0xf9, 0xa3,
	0x91, 0xef, 0xe1, 0x21, 0xe7, 0x01, 0x4e, 0xbb, 0x13, 0xf6, 0x03, 0xd1, 0x13, 0xb4, 0x7b, 0x59,
	0x69, 0x9d, 0x84, 0x92, 0xf3, 0xe0, 0x44, 0xc2, 0x7b, 0x09, 0x5a, 0xbf, 0x93, 0x70, 0x65, 0xa8,
	0xd0, 0x57, 0x70, 0x2b, 0x7b, 0x87, 0x82, 0xd8, 0xe1, 0x87, 0x4b, 0x76, 0x78, 0x32, 0xbf, 0xc5,
	0x8d, 0x61, 0x06, 0xf9, 0x4b, 0xb8, 0x1d, 0x8b, 0x0f, 0x16, 0xd9, 0x8b, 0xef, 0x64, 0x3f, 0x98,
	0x67, 0xbf, 0x39, 0xcc, 0x90, 0x22, 0x03, 0x54, 0xdb, 0x63, 0x38, 0xa4, 0x83, 0x90, 0xb2, 0x21,
	0x0e, 0x09, 0xa7, 0x9a, 0xfa, 0x5d, 0xc5, 0x59, 0x9c, 0x2f, 0x4c, 0xdb, 0x63, 0x7a, 0xc2, 0xa0,
	0x13, 0x4e, 0xd1, 0x4b, 0xd8, 0x8a, 0x49, 0x5d, 0xdf, 0xbf, 0x88, 0x02, 0x3c, 0x20, 0x23, 0xc7,
	0x1d, 0x6b, 0x5b, 0xa2, 0x70, 0x1e, 0x2d, 0x69, 0x4c, 0x1e, 0xeb, 0x08, 0xf4, 0xa1, 0x00, 0xcf,
	0xd4, 0x4f, 0xc9, 0x9e, 0x55, 0xa2, 0x9f, 0x41, 0x21, 0xf1, 0x99, 0xf9, 0xee, 0x65, 0x9c, 0x6f,
	0xe8, 0x3b, 0xcb, 0x69, 0x53, 0x78, 0x28, 0xf1, 0xc8, 0x80, 0xad, 0x85, 0xab, 0x45, 0xbb, 0x91,
	0x99, 0x0e, 0xd2, 0xbf, 0x5e, 0x02, 0x6f, 0xa6, 0x68, 0x5d, 0xf5, 0xe7, 0x24, 0xc8, 0x04, 0xd5,
	0x72, 0x29, 0xf1, 0xa2, 0x00, 0x3b, 0x1e, 0xa7, 0xe1, 0x25, 0x71, 0xb5, 0x9b, 0xdf, 0x37, 0x92,
	0x25, 0x49, 0xd1, 0x96, 0x0c, 0xa8, 0x07, 0x37, 0x23, 0x99, 0xe6, 0xb8, 0xef, 0x78, 0x76, 0xda,
	0x93, 0x6f, 0x09, 0xe6, 0x7b, 0x19, 0x47, 0xae, 0x3b, 0x9e, 0x2d, 0x5b, 0x31, 0x4a, 0x4d, 0xdf,
	0xca, 0x50, 0x17, 0x54, 0xb7, 0x8f, 0x59, 0xd4, 0x67, 0x94, 0xa7, 0x64, 0xb7, 0x05, 0xd9, 0xfb,
	0xcb, 0x7a, 0x9a, 0x21, 0xc0, 0x92, 0xb3, 0xe8, 0xce, 0xac, 0xd1, 0x19, 0xdc, 0x08, 0x1d, 0xef,
	0x1c, 0x0f, 0x09, 0x1b, 0x62, 0xb7, 0x9f, 0x52, 0x6e, 0xbf, 0xeb, 0xce, 0xd0, 0x1d, 0xef, 0xfc,
	0x98, 0xb0, 0x61, 0xa7, 0x9f, 0x90, 0x1c, 0xaf, 0xe8, 0x6a, 0x38, 0x27, 0x8b, 0x1d, 0x95, 0xe5,
	0xfb, 0x96, 0x75, 0xe7, 0x5d, 0x8e, 0x36, 0x04, 0x3a, 0xb5, 0x8f, 0x6f, 0x8b, 0xe9, 0x35, 0x7a,
	0x0e, 0x2a, 0x0f, 0x89, 0xc7, 0x02, 0x3f, 0xe4, 0x98, 0xf9, 0xd6, 0x05, 0xe5, 0x9a, 0x26, 0xf8,
	0x2a, 0x19, 0x51, 0x34, 0x53, 0xa8, 0x21, 0x90, 0x7a, 0x89, 0xcf, 0x0a, 0xd0, 0x8f, 0x61, 0x6d,
	0x44, 0x39, 0xb1, 0x09, 0x27, 0xda, 0x1d, 0x41, 0xb3, 0x93, 0x41, 0xf3, 0x5c, 0x42, 0xf4, 0x09,
	0x18, 0xbd, 0x04, 0x34, 0x29, 0x65, 0x46, 0x5d, 0x99, 0x7d, 0x65, 0x51, 0x1d, 0xd5, 0x25, 0x27,
	0x4b, 0xfe, 0xa6, 0xb5, 0x6b, 0xa4, 0x56, 0xfa, 0x56, 0x30, 0x2f, 0x2a, 0x47, 0xa0, 0xce, 0x5f,
	0xc9, 0xe8, 0x33, 0x00, 0x71, 0xad, 0x27, 0x41, 0x54, 0x84, 0xb7, 0x0f, 0x32, 0xbc, 0x4d, 0xe0,
	0x86, 0x18, 0x15, 0xf5, 0xf5, 0xf8, 0x1e, 0x4f, 0xec, 0x1f, 0xc2, 0x26, 0xa3, 0xe1, 0xa5, 0x63,
	0xd1, 0x64, 0xfc, 0xc8, 0x25, 0xe3, 0x87, 0x94, 0xc5, 0xe3, 0x47, 0xf9, 0xdb, 0x55, 0x28, 0xce,
	0x66, 0x0a, 0x0a, 0xa0, 0x34, 0x20, 0xae, 0xdb, 0x27, 0xd6, 0x45, 0x7a, 0x79, 0x2a, 0xe2, 0x94,
	0x3f, 0xb9, 0x4a, 0xa2, 0x4d, 0x96, 0x87, 0x92, 0x23, 0xe3, 0x66, 0x2d, 0x0e, 0x66, 0x74, 0xe8,
	0x33, 0x28, 0xda, 0x74, 0x40, 0xa2, 0x78, 0x56, 0x12, 0xb6, 0xc2, 0xd3, 0x8d, 0x83, 0xed, 0x85,
	0x02, 0x34, 0xc4, 0x60, 0xa7, 0x17, 0x24, 0x3c, 0xd9, 0x09, 0xfd, 0x0a, 0x54, 0x59, 0x18, 0xc9,
	0x0f, 0xe3, 0x87, 0x4c, 0x5b, 0x15, 0xbd, 0xe5, 0xe3, 0xef, 0xe5, 0xb2, 0x21, 0xad, 0xf5, 0x12,
	0x9b, 0x59, 0xb3, 0xf2, 0x07, 0xa0, 0xce, 0x83, 0x10, 0x82, 0xfc, 0x05, 0x1d, 0x33, 0x4d, 0xd9,
	0x5d, 0xdd, 0x5b, 0xd7, 0xc5, 0x77, 0xa5, 0x07, 0xb7, 0xb3, 0xcf, 0x8f, 0x4a, 0xb0, 0xd1, 0xed,
	0xe1, 0xc3, 0x5a, 0xa7, 0x53, 0xaf, 0x35, 0xbe, 0x50, 0x57, 0x90, 0x0a, 0x9b, 0xb5, 0xee, 0x97,
	0xb8, 0xd5, 0x6d, 0x9e, 0xf4, 0xda, 0x5d, 0x53, 0x55, 0x10, 0x82, 0x62, 0xb3, 0x75, 0x58, 0x3b,
	0xed, 0x98, 0xd8, 0x38, 0xad, 0x1b, 0x2d, 0x53, 0xcd, 0x95, 0xbf, 0xc9, 0x81, 0x3a, 0x5f, 0x76,
	0xe8, 0x18, 0xb6, 0x46, 0x8e, 0xe7, 0x8c, 0xa2, 0x11, 0x16, 0x35, 0xcc, 0x9c, 0x37, 0x54, 0xa6,
	0x47, 0xf6, 0x38, 0xf0, 0xec, 0xa3, 0x64, 0x1c, 0x28, 0x49, 0xb3, 0x98, 0xd1, 0x70, 0xde, 0x50,
	0xf4, 0x4b, 0x28, 0xd8, 0x34, 0x08, 0xa9, 0x45, 0x38, 0xb5, 0xf1, 0xe5, 0x13, 0x19, 0xf8, 0xa7,
	0x57, 0xab, 0xff, 0x6a, 0x73, 0x62, 0xfb, 0xe2, 0x49, 0x3d, 0xa7, 0x29, 0xfa, 0xa6, 0x3d, 0x25,
	0x29, 0x77, 0x60, 0x73, 0x1a, 0x81, 0x3e, 0x85, 0xcd, 0x88, 0x51, 0xcc, 0xb8, 0x2d, 0xda, 0x8e,
	0x74, 0xb9, 0xbc, 0xe0, 0x72, 0xdd, 0xf7, 0xdd, 0xc4, 0x61, 0x88, 0x18, 0x35, 0xb8, 0x1d, 0x6f,
	0x5a, 0xfe, 0x36, 0x0f, 0xc5, 0xd9, 0x5e, 0x81, 0xbe, 0x80, 0xed, 0x64, 0x62, 0x1a, 0xe3, 0x80,
	0x78, 0x8e, 0x85, 0xf9, 0x30, 0xbe, 0xcc, 0x7c, 0xd7, 0x96, 0xdc, 0x37, 0xe4, 0x41, 0xe2, 0x29,
	0xb9, 0x7a, 0x92, 0x3c, 0x39, 0xf4, 0x5b, 0xd2, 0xe6, 0x24, 0x36, 0x31, 0x53, 0x0b, 0xe4, 0xc0,
	0xcd, 0x37, 0xbe, 0x47, 0x31, 0x79, 0x45, 0x42, 0x3a, 0xd5, 0xbc, 0x92, 0x90, 0x3c, 0xbb, 0x4a,
	0xf3, 0xaa, 0xfe, 0xc2, 0xf7, 0x68, 0x2d, 0xb6, 0x9f, 0x6a, 0x91, 0x5b, 0x6f, 0xe6, 0x85, 0xe8,
	0xb7, 0xb0, 0xe3, 0xfa, 0x16, 0x71, 0x1d, 0x3e, 0xc6, 0xaf, 0xa8, 0x73, 0x3e, 0x8c, 0xa3, 0xff,
	0x76, 0xc7, 0x64, 0x70, 0xff, 0xe9, 0x95, 0x76, 0xec, 0x48, 0x9e, 0x33, 0x49, 0x33, 0xb5, 0xb1,
	0xe6, 0x2e, 0xd1, 0x95, 0xff, 0xa8, 0xc0, 0xd6, 0x82, 0xab, 0xe8, 0x53, 0x28, 0x85, 0x7e, 0xc4,
	0xe3, 0x8c, 0xa2, 0x1e, 0xe9, 0xbb, 0xf4, 0x9d, 0x51, 0x2c, 0x4a, 0x6c, 0x2b, 0x81, 0xa2, 0x43,
	0x50, 0x47, 0x8e, 0x37, 0x79, 0x83, 0x88, 0x9c, 0xcc, 0x5d, 0x21, 0x27, 0x8b, 0x23, 0xc7, 0x93,
	0x67, 0x8b, 0x53, 0xb2, 0x5c, 0x06, 0x6d, 0xd9, 0x99, 0xea, 0x3b, 0x70, 0x67, 0x12, 0xb7, 0xf4,
	0x81, 0x1c, 0x50, 0xcb, 0x19, 0x38, 0x34, 0xac, 0x9c, 0x41, 0x61, 0xe6, 0x9d, 0x84, 0x00, 0xde,
	0x33, 0xcc, 0x9a, 0xd9, 0x6e, 0xa8, 0x2b, 0xa8, 0x08, 0x60, 0x98, 0x7a, 0xbb, 0x61, 0xe2, 0x66,
	0xd7, 0x50, 0x95, 0xb8, 0x1c, 0x3b, 0xbd, 0xa3, 0x76, 0xa3, 0xd6, 0x11, 0x82, 0x1c, 0xba, 0x0e,
	0xab, 0xad, 0xa6, 0xa1, 0xae, 0xc6, 0x75, 0xd9, 0xd3, 0xdb, 0x47, 0xed, 0x6e, 0xac, 0x32, 0x4c,
	0x35, 0x5f, 0xf9, 0x35, 0xac, 0xa5, 0x0f, 0x84, 0xd8, 0x4e, 0xef, 0x9d, 0x76, 0x9b, 0x58, 0xef,
	0xd5, 0xdb, 0x5d, 0x75, 0x05, 0x6d, 0x41, 0xa1, 0xd3, 0xaa, 0x19, 0x26, 0xd6, 0x5b, 0x3f, 0x3f,
	0x6d, 0x19, 0x71, 0x1d, 0x17, 0x60, 0x5d, 0x6f, 0x77, 0x8f, 0xf0, 0x71, 0xcd, 0x38, 0x56, 0x73,
	0xb1, 0x1b, 0x7a, 0xad, 0xdb, 0xec, 0x3d, 0x57, 0x57, 0xd1, 0x0d, 0x28, 0x4d, 0x93, 0xe3, 0x4e,
	0x5d, 0xcd, 0xc7, 0x80, 0xe7, 0xb5, 0xa3, 0x4e, 0xeb, 0x85, 0x7a, 0xad, 0xf2, 0x31, 0x94, 0xe6,
	0x66, 0x2a, 0xb4, 0x06, 0xf9, 0xda, 0xa9, 0xd9, 0x53, 0x57, 0xd0, 0x06, 0x5c, 0x7f, 0xf1, 0x11,
	0xee, 0x75, 0x3b, 0x5f, 0xaa, 0x8a, 0x58, 0x3c, 0x4b, 0x16, 0xb9, 0x8a, 0x09, 0xda, 0xb2, 0xcb,
	0x06, 0xed, 0xc0, 0xf6, 0xa9, 0xd1, 0xc2, 0x8d, 0x5e, 0xf7, 0xb0, 0x7d, 0x74, 0xaa, 0xb7, 0x9a,
	0xf8, 0x44, 0xef, 0x99, 0xbd, 0x46, 0xaf, 0xa3, 0xae, 0xa4, 0xca, 0x66, 0xef, 0xac, 0x6b, 0x98,
	0x7a, 0xab, 0xf6, 0xfc, 0xad, 0x52, 0xa9, 0x6f, 0x88, 0x07, 0x54, 0x12, 0xe8, 0xcf, 0xf3, 0x6b,
	0x9b, 0x6a, 0xe1, 0xf3, 0xfc, 0x5a, 0x49, 0x55, 0x2b, 0x67, 0x80, 0x4e, 0x17, 0x47, 0x94, 0x1a,
	0x14, 0x93, 0x7f, 0x57, 0x60, 0xf9, 0x9f, 0x91, 0x49, 0x81, 0x2f, 0x1f, 0xf0, 0x0a, 0x89, 0x85,
	0x5c, 0x1e, 0xfc, 0x47, 0x81, 0x6d, 0x79, 0x90, 0xc9, 0x6f, 0x69, 0x24, 0xd7, 0x15, 0x3a, 0x83,
	0xa2, 0x21, 0xb6, 0x94, 0x00, 0x86, 0xe6, 0x9e, 0x53, 0x13, 0x0b, 0xf9, 0xe2, 0x29, 0x3f, 0x58,
	0xaa, 0x67, 0x81, 0xef, 0x31, 0x5a, 0x59, 0xd9, 0x53, 0x3e, 0x54, 0x10, 0x83, 0xc2, 0x21, 0xe5,
	0xd6, 0xf0, 0xff, 0xc7, 0xfb, 0xf0, 0xeb, 0xbf, 0xff, 0xfb, 0xf7, 0xb9, 0x9d, 0xca, 0xed, 0x99,
	0xff, 0xd3, 0x7c, 0x22, 0x6b, 0x83, 0x7d, 0xa2, 0x3c, 0xae, 0x5f, 0xff, 0xd3, 0xbf, 0xee, 0x2b,
	0xdf, 0x28, 0x4a, 0xff, 0x3d, 0x51, 0x15, 0x4f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x77, 0xbf,
	0x76, 0xff, 0x87, 0x12, 0x00, 0x00,
}
