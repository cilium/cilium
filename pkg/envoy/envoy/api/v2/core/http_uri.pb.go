// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/core/http_uri.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Envoy external URI descriptor
type HttpUri struct {
	// The HTTP server URI. It should be a full FQDN with protocol, host and path.
	//
	// Example:
	//
	// .. code-block:: yaml
	//
	//    uri: https://www.googleapis.com/oauth2/v1/certs
	//
	Uri string `protobuf:"bytes,1,opt,name=uri" json:"uri,omitempty"`
	// Specify how `uri` is to be fetched. Today, this requires an explicit
	// cluster, but in the future we may support dynamic cluster creation or
	// inline DNS resolution. See `issue
	// <https://github.com/envoyproxy/envoy/issues/1606>`_.
	//
	// Types that are valid to be assigned to HttpUpstreamType:
	//	*HttpUri_Cluster
	HttpUpstreamType isHttpUri_HttpUpstreamType `protobuf_oneof:"http_upstream_type"`
	// Sets the maximum duration in milliseconds that a response can take to arrive upon request.
	Timeout *google_protobuf3.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *HttpUri) Reset()                    { *m = HttpUri{} }
func (m *HttpUri) String() string            { return proto.CompactTextString(m) }
func (*HttpUri) ProtoMessage()               {}
func (*HttpUri) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type isHttpUri_HttpUpstreamType interface {
	isHttpUri_HttpUpstreamType()
}

type HttpUri_Cluster struct {
	Cluster string `protobuf:"bytes,2,opt,name=cluster,oneof"`
}

func (*HttpUri_Cluster) isHttpUri_HttpUpstreamType() {}

func (m *HttpUri) GetHttpUpstreamType() isHttpUri_HttpUpstreamType {
	if m != nil {
		return m.HttpUpstreamType
	}
	return nil
}

func (m *HttpUri) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HttpUri) GetCluster() string {
	if x, ok := m.GetHttpUpstreamType().(*HttpUri_Cluster); ok {
		return x.Cluster
	}
	return ""
}

func (m *HttpUri) GetTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpUri) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpUri_OneofMarshaler, _HttpUri_OneofUnmarshaler, _HttpUri_OneofSizer, []interface{}{
		(*HttpUri_Cluster)(nil),
	}
}

func _HttpUri_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpUri)
	// http_upstream_type
	switch x := m.HttpUpstreamType.(type) {
	case *HttpUri_Cluster:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Cluster)
	case nil:
	default:
		return fmt.Errorf("HttpUri.HttpUpstreamType has unexpected type %T", x)
	}
	return nil
}

func _HttpUri_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpUri)
	switch tag {
	case 2: // http_upstream_type.cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HttpUpstreamType = &HttpUri_Cluster{x}
		return true, err
	default:
		return false, nil
	}
}

func _HttpUri_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpUri)
	// http_upstream_type
	switch x := m.HttpUpstreamType.(type) {
	case *HttpUri_Cluster:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Cluster)))
		n += len(x.Cluster)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*HttpUri)(nil), "envoy.api.v2.core.HttpUri")
}

func init() { proto.RegisterFile("envoy/api/v2/core/http_uri.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0x9b, 0x19, 0xeb, 0xd8, 0xb8, 0x32, 0x08, 0x8e, 0x2d, 0xe8, 0x20, 0x08, 0x5d, 0x25,
	0x30, 0xde, 0x60, 0x70, 0xd1, 0x8d, 0x9b, 0x01, 0xd7, 0x25, 0x6d, 0xe3, 0x18, 0x98, 0xf6, 0x85,
	0xd7, 0x97, 0x81, 0xde, 0xc4, 0x33, 0x78, 0x02, 0x75, 0xd5, 0x9b, 0xb8, 0xee, 0x2d, 0x64, 0xfe,
	0x64, 0xe3, 0xee, 0xc7, 0xfb, 0x7e, 0xf9, 0xf8, 0x08, 0xcf, 0xcc, 0xae, 0x81, 0x83, 0xd2, 0xce,
	0xaa, 0x26, 0x57, 0x6b, 0x40, 0xa3, 0xde, 0x89, 0xdc, 0xd2, 0xa3, 0x95, 0x0e, 0x81, 0x40, 0x5c,
	0x75, 0x86, 0xd4, 0xce, 0xca, 0x26, 0x97, 0xad, 0x31, 0xbd, 0xab, 0x00, 0xaa, 0xda, 0xa8, 0x4e,
	0x58, 0xf9, 0x37, 0xb5, 0xf1, 0xa8, 0xc9, 0xc2, 0xae, 0x7f, 0x32, 0xbd, 0xae, 0xa0, 0x82, 0x0e,
	0x55, 0x4b, 0xc3, 0xf5, 0xa6, 0xd1, 0xb5, 0xdd, 0x68, 0x32, 0x2a, 0x40, 0x1f, 0x3c, 0x7c, 0x33,
	0x9e, 0x2c, 0x88, 0xdc, 0x2b, 0x5a, 0x31, 0xe3, 0xb1, 0x47, 0x9b, 0xb2, 0x8c, 0xcd, 0x27, 0xc5,
	0xe4, 0xe7, 0x74, 0x8c, 0xcf, 0x30, 0xca, 0x58, 0xd9, 0x5e, 0xc5, 0x23, 0x4f, 0xd6, 0xb5, 0xdf,
	0x93, 0xc1, 0x34, 0xfa, 0x27, 0x2c, 0x46, 0x65, 0xc8, 0xc4, 0x0b, 0x4f, 0xc8, 0x6e, 0x0d, 0x78,
	0x4a, 0xe3, 0x8c, 0xcd, 0x2f, 0xf3, 0x5b, 0xd9, 0x0f, 0x96, 0x61, 0xb0, 0x7c, 0x1e, 0x06, 0x17,
	0xe9, 0xc7, 0xef, 0x3d, 0x6b, 0x5b, 0xc6, 0x9f, 0x2c, 0xca, 0x47, 0x81, 0x2e, 0x58, 0x19, 0x3a,
	0x8a, 0x19, 0x17, 0xfd, 0x97, 0xb8, 0x3d, 0xa1, 0xd1, 0xdb, 0x25, 0x1d, 0x9c, 0x11, 0xe3, 0xaf,
	0xd3, 0x31, 0x66, 0xab, 0xf3, 0xae, 0xf2, 0xe9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x4f, 0x20,
	0xb9, 0x48, 0x01, 0x00, 0x00,
}
