// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/core/protocol.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// [#not-implemented-hide:]
type TcpProtocolOptions struct {
}

func (m *TcpProtocolOptions) Reset()                    { *m = TcpProtocolOptions{} }
func (m *TcpProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*TcpProtocolOptions) ProtoMessage()               {}
func (*TcpProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type Http1ProtocolOptions struct {
	// Handle HTTP requests with absolute URLs in the requests. These requests
	// are generally sent by clients to forward/explicit proxies. This allows clients to configure
	// envoy as their HTTP proxy. In Unix, for example, this is typically done by setting the
	// *http_proxy* environment variable.
	AllowAbsoluteUrl *google_protobuf.BoolValue `protobuf:"bytes,1,opt,name=allow_absolute_url,json=allowAbsoluteUrl" json:"allow_absolute_url,omitempty"`
}

func (m *Http1ProtocolOptions) Reset()                    { *m = Http1ProtocolOptions{} }
func (m *Http1ProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*Http1ProtocolOptions) ProtoMessage()               {}
func (*Http1ProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *Http1ProtocolOptions) GetAllowAbsoluteUrl() *google_protobuf.BoolValue {
	if m != nil {
		return m.AllowAbsoluteUrl
	}
	return nil
}

type Http2ProtocolOptions struct {
	// `Maximum table size <http://httpwg.org/specs/rfc7541.html#rfc.section.4.2>`_
	// (in octets) that the encoder is permitted to use for the dynamic HPACK table. Valid values
	// range from 0 to 4294967295 (2^32 - 1) and defaults to 4096. 0 effectively disables header
	// compression.
	HpackTableSize *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=hpack_table_size,json=hpackTableSize" json:"hpack_table_size,omitempty"`
	// `Maximum concurrent streams <http://httpwg.org/specs/rfc7540.html#rfc.section.5.1.2>`_
	// allowed for peer on one HTTP/2 connection. Valid values range from 1 to 2147483647 (2^31 - 1)
	// and defaults to 2147483647.
	MaxConcurrentStreams *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=max_concurrent_streams,json=maxConcurrentStreams" json:"max_concurrent_streams,omitempty"`
	// This field also acts as a soft limit on the number of bytes Envoy will buffer per-stream in the
	// HTTP/2 codec buffers. Once the buffer reaches this pointer, watermark callbacks will fire to
	// stop the flow of data to the codec buffers.
	InitialStreamWindowSize *google_protobuf.UInt32Value `protobuf:"bytes,3,opt,name=initial_stream_window_size,json=initialStreamWindowSize" json:"initial_stream_window_size,omitempty"`
	// Similar to *initial_stream_window_size*, but for connection-level flow-control
	// window. Currently, this has the same minimum/maximum/default as *initial_stream_window_size*.
	InitialConnectionWindowSize *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=initial_connection_window_size,json=initialConnectionWindowSize" json:"initial_connection_window_size,omitempty"`
}

func (m *Http2ProtocolOptions) Reset()                    { *m = Http2ProtocolOptions{} }
func (m *Http2ProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*Http2ProtocolOptions) ProtoMessage()               {}
func (*Http2ProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Http2ProtocolOptions) GetHpackTableSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.HpackTableSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetMaxConcurrentStreams() *google_protobuf.UInt32Value {
	if m != nil {
		return m.MaxConcurrentStreams
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialStreamWindowSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.InitialStreamWindowSize
	}
	return nil
}

func (m *Http2ProtocolOptions) GetInitialConnectionWindowSize() *google_protobuf.UInt32Value {
	if m != nil {
		return m.InitialConnectionWindowSize
	}
	return nil
}

// [#not-implemented-hide:]
type GrpcProtocolOptions struct {
	Http2ProtocolOptions *Http2ProtocolOptions `protobuf:"bytes,1,opt,name=http2_protocol_options,json=http2ProtocolOptions" json:"http2_protocol_options,omitempty"`
}

func (m *GrpcProtocolOptions) Reset()                    { *m = GrpcProtocolOptions{} }
func (m *GrpcProtocolOptions) String() string            { return proto.CompactTextString(m) }
func (*GrpcProtocolOptions) ProtoMessage()               {}
func (*GrpcProtocolOptions) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GrpcProtocolOptions) GetHttp2ProtocolOptions() *Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpProtocolOptions)(nil), "envoy.api.v2.core.TcpProtocolOptions")
	proto.RegisterType((*Http1ProtocolOptions)(nil), "envoy.api.v2.core.Http1ProtocolOptions")
	proto.RegisterType((*Http2ProtocolOptions)(nil), "envoy.api.v2.core.Http2ProtocolOptions")
	proto.RegisterType((*GrpcProtocolOptions)(nil), "envoy.api.v2.core.GrpcProtocolOptions")
}

func init() { proto.RegisterFile("envoy/api/v2/core/protocol.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x6e, 0xd4, 0x30,
	0x14, 0x86, 0x35, 0x4c, 0x05, 0xc8, 0x20, 0x68, 0x43, 0xd4, 0x8e, 0x02, 0x1a, 0x55, 0xd9, 0x50,
	0x75, 0xe1, 0x88, 0xf4, 0x04, 0x4c, 0x25, 0x28, 0x2b, 0x50, 0xda, 0xc2, 0x0a, 0x19, 0xc7, 0x35,
	0x19, 0x0b, 0x8f, 0x9f, 0xe5, 0x38, 0x49, 0xe9, 0x85, 0xe0, 0x0c, 0xac, 0x38, 0x0b, 0x3b, 0x4e,
	0x11, 0x14, 0xdb, 0x29, 0x62, 0x3a, 0x12, 0x88, 0xdd, 0x93, 0xfd, 0xfe, 0xef, 0x7b, 0xc9, 0x33,
	0xda, 0xe7, 0xaa, 0x85, 0xcf, 0x19, 0xd5, 0x22, 0x6b, 0xf3, 0x8c, 0x81, 0xe1, 0x99, 0x36, 0x60,
	0x81, 0x81, 0xc4, 0xae, 0x88, 0x76, 0x5c, 0x07, 0xa6, 0x5a, 0xe0, 0x36, 0xc7, 0x43, 0x47, 0x32,
	0xaf, 0x00, 0x2a, 0x19, 0x3a, 0xcb, 0xe6, 0x63, 0xd6, 0x19, 0xaa, 0x35, 0x37, 0xb5, 0x8f, 0x24,
	0x7b, 0x2d, 0x95, 0xe2, 0x82, 0x5a, 0x9e, 0x8d, 0x45, 0xb8, 0x88, 0x2b, 0xa8, 0xc0, 0x95, 0xd9,
	0x50, 0xf9, 0xd3, 0x34, 0x46, 0xd1, 0x19, 0xd3, 0x6f, 0x82, 0xf6, 0xb5, 0xb6, 0x02, 0x54, 0x9d,
	0x7e, 0x40, 0xf1, 0x89, 0xb5, 0xfa, 0xd9, 0xda, 0x79, 0x74, 0x82, 0x22, 0x2a, 0x25, 0x74, 0x84,
	0x96, 0x35, 0xc8, 0xc6, 0x72, 0xd2, 0x18, 0x39, 0x9b, 0xec, 0x4f, 0x0e, 0xee, 0xe5, 0x09, 0xf6,
	0x93, 0xe1, 0x71, 0x32, 0xbc, 0x00, 0x90, 0x6f, 0xa9, 0x6c, 0x78, 0xb1, 0xed, 0x52, 0xcf, 0x43,
	0xe8, 0xdc, 0xc8, 0xf4, 0xcb, 0xd4, 0x2b, 0xf2, 0x75, 0xc5, 0x0b, 0xb4, 0xbd, 0xd4, 0x94, 0x7d,
	0x22, 0x96, 0x96, 0x92, 0x93, 0x5a, 0x5c, 0xf1, 0x20, 0x78, 0x72, 0x43, 0x70, 0xfe, 0x4a, 0xd9,
	0xa3, 0xdc, 0x2b, 0x1e, 0xb8, 0xd4, 0xd9, 0x10, 0x3a, 0x15, 0x57, 0x3c, 0x62, 0x68, 0x77, 0x45,
	0x2f, 0x09, 0x03, 0xc5, 0x1a, 0x63, 0xb8, 0xb2, 0xa4, 0xb6, 0x86, 0xd3, 0x55, 0x3d, 0xbb, 0xf5,
	0x77, 0xda, 0xe2, 0xe1, 0xb7, 0x9f, 0xdf, 0xa7, 0xe8, 0xf0, 0xee, 0xac, 0xef, 0xfb, 0xfe, 0xce,
	0xc1, 0xa4, 0x88, 0x57, 0xf4, 0xf2, 0xf8, 0x9a, 0x75, 0xea, 0x51, 0x91, 0x44, 0x89, 0x50, 0xc2,
	0x0a, 0x2a, 0x03, 0x9d, 0x74, 0x42, 0x5d, 0x40, 0xe7, 0xc7, 0x9e, 0xfe, 0x83, 0x68, 0x67, 0x10,
	0xdd, 0x3f, 0x44, 0x41, 0xd4, 0xf7, 0xd3, 0x62, 0x2f, 0x20, 0xbd, 0xe4, 0x9d, 0x03, 0xba, 0x4f,
	0xb2, 0x68, 0x3e, 0xda, 0x18, 0x28, 0xc5, 0xd9, 0xf0, 0xc7, 0xfe, 0x30, 0x6e, 0xfd, 0x9f, 0xf1,
	0x71, 0xc0, 0x1e, 0x5f, 0x53, 0x7f, 0x5b, 0x53, 0x8b, 0x1e, 0xbd, 0x34, 0x9a, 0xad, 0xef, 0xe9,
	0x3d, 0xda, 0x5d, 0x0e, 0xfb, 0x23, 0xe3, 0x93, 0x25, 0xe0, 0x6f, 0xc2, 0xb6, 0x9e, 0xe2, 0x1b,
	0x6f, 0x17, 0x6f, 0x5a, 0x78, 0x11, 0x2f, 0x37, 0x9c, 0x2e, 0xb6, 0xbe, 0xfe, 0x98, 0x4f, 0xca,
	0xdb, 0x0e, 0x7e, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xee, 0xe2, 0xea, 0x2a, 0x03, 0x00,
	0x00,
}
