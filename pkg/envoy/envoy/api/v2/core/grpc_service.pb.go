// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/core/grpc_service.proto

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// gRPC service configuration. This is used by :ref:`ApiConfigSource
// <envoy_api_msg_core.ApiConfigSource>` and filter configurations.
type GrpcService struct {
	// Types that are valid to be assigned to TargetSpecifier:
	//	*GrpcService_EnvoyGrpc_
	//	*GrpcService_GoogleGrpc_
	TargetSpecifier isGrpcService_TargetSpecifier `protobuf_oneof:"target_specifier"`
	// The timeout for the gRPC request. This is the timeout for a specific
	// request.
	Timeout *google_protobuf2.Duration `protobuf:"bytes,3,opt,name=timeout" json:"timeout,omitempty"`
	// A set of credentials that will be composed to form the `channel credentials
	// <https://grpc.io/docs/guides/auth.html#credential-types>`_.
	Credentials []*GrpcService_Credentials `protobuf:"bytes,4,rep,name=credentials" json:"credentials,omitempty"`
}

func (m *GrpcService) Reset()                    { *m = GrpcService{} }
func (m *GrpcService) String() string            { return proto.CompactTextString(m) }
func (*GrpcService) ProtoMessage()               {}
func (*GrpcService) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type isGrpcService_TargetSpecifier interface {
	isGrpcService_TargetSpecifier()
}

type GrpcService_EnvoyGrpc_ struct {
	EnvoyGrpc *GrpcService_EnvoyGrpc `protobuf:"bytes,1,opt,name=envoy_grpc,json=envoyGrpc,oneof"`
}
type GrpcService_GoogleGrpc_ struct {
	GoogleGrpc *GrpcService_GoogleGrpc `protobuf:"bytes,2,opt,name=google_grpc,json=googleGrpc,oneof"`
}

func (*GrpcService_EnvoyGrpc_) isGrpcService_TargetSpecifier()  {}
func (*GrpcService_GoogleGrpc_) isGrpcService_TargetSpecifier() {}

func (m *GrpcService) GetTargetSpecifier() isGrpcService_TargetSpecifier {
	if m != nil {
		return m.TargetSpecifier
	}
	return nil
}

func (m *GrpcService) GetEnvoyGrpc() *GrpcService_EnvoyGrpc {
	if x, ok := m.GetTargetSpecifier().(*GrpcService_EnvoyGrpc_); ok {
		return x.EnvoyGrpc
	}
	return nil
}

func (m *GrpcService) GetGoogleGrpc() *GrpcService_GoogleGrpc {
	if x, ok := m.GetTargetSpecifier().(*GrpcService_GoogleGrpc_); ok {
		return x.GoogleGrpc
	}
	return nil
}

func (m *GrpcService) GetTimeout() *google_protobuf2.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *GrpcService) GetCredentials() []*GrpcService_Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GrpcService) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GrpcService_OneofMarshaler, _GrpcService_OneofUnmarshaler, _GrpcService_OneofSizer, []interface{}{
		(*GrpcService_EnvoyGrpc_)(nil),
		(*GrpcService_GoogleGrpc_)(nil),
	}
}

func _GrpcService_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GrpcService)
	// target_specifier
	switch x := m.TargetSpecifier.(type) {
	case *GrpcService_EnvoyGrpc_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnvoyGrpc); err != nil {
			return err
		}
	case *GrpcService_GoogleGrpc_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GoogleGrpc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GrpcService.TargetSpecifier has unexpected type %T", x)
	}
	return nil
}

func _GrpcService_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GrpcService)
	switch tag {
	case 1: // target_specifier.envoy_grpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GrpcService_EnvoyGrpc)
		err := b.DecodeMessage(msg)
		m.TargetSpecifier = &GrpcService_EnvoyGrpc_{msg}
		return true, err
	case 2: // target_specifier.google_grpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GrpcService_GoogleGrpc)
		err := b.DecodeMessage(msg)
		m.TargetSpecifier = &GrpcService_GoogleGrpc_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GrpcService_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GrpcService)
	// target_specifier
	switch x := m.TargetSpecifier.(type) {
	case *GrpcService_EnvoyGrpc_:
		s := proto.Size(x.EnvoyGrpc)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GrpcService_GoogleGrpc_:
		s := proto.Size(x.GoogleGrpc)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GrpcService_EnvoyGrpc struct {
	// The name of the upstream gRPC cluster. SSL credentials will be supplied
	// in the :ref:`Cluster <envoy_api_msg_Cluster>` :ref:`tls_context
	// <envoy_api_field_Cluster.tls_context>`.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
}

func (m *GrpcService_EnvoyGrpc) Reset()                    { *m = GrpcService_EnvoyGrpc{} }
func (m *GrpcService_EnvoyGrpc) String() string            { return proto.CompactTextString(m) }
func (*GrpcService_EnvoyGrpc) ProtoMessage()               {}
func (*GrpcService_EnvoyGrpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 0} }

func (m *GrpcService_EnvoyGrpc) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

type GrpcService_GoogleGrpc struct {
	// The target URI when using the `Google C++ gRPC client
	// <https://github.com/grpc/grpc>`_. SSL credentials will be supplied in
	// :ref:`credentials <envoy_api_field_core.GrpcService.credentials>`.
	TargetUri      string                                 `protobuf:"bytes,1,opt,name=target_uri,json=targetUri" json:"target_uri,omitempty"`
	SslCredentials *GrpcService_GoogleGrpc_SslCredentials `protobuf:"bytes,2,opt,name=ssl_credentials,json=sslCredentials" json:"ssl_credentials,omitempty"`
	// The human readable prefix to use when emitting statistics for the gRPC
	// service.
	//
	// .. csv-table::
	//    :header: Name, Type, Description
	//    :widths: 1, 1, 2
	//
	//    streams_total, Counter, Total number of streams opened
	//    streams_closed_<gRPC status code>, Counter, Total streams closed with <gRPC status code>
	StatPrefix string `protobuf:"bytes,3,opt,name=stat_prefix,json=statPrefix" json:"stat_prefix,omitempty"`
	// Additional configuration for site-specific customizations of the Google
	// gRPC library.
	Config *google_protobuf4.Struct `protobuf:"bytes,4,opt,name=config" json:"config,omitempty"`
}

func (m *GrpcService_GoogleGrpc) Reset()                    { *m = GrpcService_GoogleGrpc{} }
func (m *GrpcService_GoogleGrpc) String() string            { return proto.CompactTextString(m) }
func (*GrpcService_GoogleGrpc) ProtoMessage()               {}
func (*GrpcService_GoogleGrpc) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 1} }

func (m *GrpcService_GoogleGrpc) GetTargetUri() string {
	if m != nil {
		return m.TargetUri
	}
	return ""
}

func (m *GrpcService_GoogleGrpc) GetSslCredentials() *GrpcService_GoogleGrpc_SslCredentials {
	if m != nil {
		return m.SslCredentials
	}
	return nil
}

func (m *GrpcService_GoogleGrpc) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *GrpcService_GoogleGrpc) GetConfig() *google_protobuf4.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// See https://grpc.io/grpc/cpp/structgrpc_1_1_ssl_credentials_options.html.
type GrpcService_GoogleGrpc_SslCredentials struct {
	// PEM encoded server root certificates.
	RootCerts *DataSource `protobuf:"bytes,1,opt,name=root_certs,json=rootCerts" json:"root_certs,omitempty"`
	// PEM encoded client private key.
	PrivateKey *DataSource `protobuf:"bytes,2,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	// PEM encoded client certificate chain.
	CertChain *DataSource `protobuf:"bytes,3,opt,name=cert_chain,json=certChain" json:"cert_chain,omitempty"`
}

func (m *GrpcService_GoogleGrpc_SslCredentials) Reset()         { *m = GrpcService_GoogleGrpc_SslCredentials{} }
func (m *GrpcService_GoogleGrpc_SslCredentials) String() string { return proto.CompactTextString(m) }
func (*GrpcService_GoogleGrpc_SslCredentials) ProtoMessage()    {}
func (*GrpcService_GoogleGrpc_SslCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor3, []int{0, 1, 0}
}

func (m *GrpcService_GoogleGrpc_SslCredentials) GetRootCerts() *DataSource {
	if m != nil {
		return m.RootCerts
	}
	return nil
}

func (m *GrpcService_GoogleGrpc_SslCredentials) GetPrivateKey() *DataSource {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *GrpcService_GoogleGrpc_SslCredentials) GetCertChain() *DataSource {
	if m != nil {
		return m.CertChain
	}
	return nil
}

// gRPC credentials as described at
// https://grpc.io/docs/guides/auth.html#credential-types.
//
// .. note::
//
//   Credentials are only currently implemented for the Google gRPC client.
type GrpcService_Credentials struct {
	// Types that are valid to be assigned to CredentialSpecifier:
	//	*GrpcService_Credentials_AccessToken
	CredentialSpecifier isGrpcService_Credentials_CredentialSpecifier `protobuf_oneof:"credential_specifier"`
}

func (m *GrpcService_Credentials) Reset()                    { *m = GrpcService_Credentials{} }
func (m *GrpcService_Credentials) String() string            { return proto.CompactTextString(m) }
func (*GrpcService_Credentials) ProtoMessage()               {}
func (*GrpcService_Credentials) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0, 2} }

type isGrpcService_Credentials_CredentialSpecifier interface {
	isGrpcService_Credentials_CredentialSpecifier()
}

type GrpcService_Credentials_AccessToken struct {
	AccessToken string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,oneof"`
}

func (*GrpcService_Credentials_AccessToken) isGrpcService_Credentials_CredentialSpecifier() {}

func (m *GrpcService_Credentials) GetCredentialSpecifier() isGrpcService_Credentials_CredentialSpecifier {
	if m != nil {
		return m.CredentialSpecifier
	}
	return nil
}

func (m *GrpcService_Credentials) GetAccessToken() string {
	if x, ok := m.GetCredentialSpecifier().(*GrpcService_Credentials_AccessToken); ok {
		return x.AccessToken
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GrpcService_Credentials) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GrpcService_Credentials_OneofMarshaler, _GrpcService_Credentials_OneofUnmarshaler, _GrpcService_Credentials_OneofSizer, []interface{}{
		(*GrpcService_Credentials_AccessToken)(nil),
	}
}

func _GrpcService_Credentials_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GrpcService_Credentials)
	// credential_specifier
	switch x := m.CredentialSpecifier.(type) {
	case *GrpcService_Credentials_AccessToken:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.AccessToken)
	case nil:
	default:
		return fmt.Errorf("GrpcService_Credentials.CredentialSpecifier has unexpected type %T", x)
	}
	return nil
}

func _GrpcService_Credentials_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GrpcService_Credentials)
	switch tag {
	case 1: // credential_specifier.access_token
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.CredentialSpecifier = &GrpcService_Credentials_AccessToken{x}
		return true, err
	default:
		return false, nil
	}
}

func _GrpcService_Credentials_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GrpcService_Credentials)
	// credential_specifier
	switch x := m.CredentialSpecifier.(type) {
	case *GrpcService_Credentials_AccessToken:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.AccessToken)))
		n += len(x.AccessToken)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*GrpcService)(nil), "envoy.api.v2.core.GrpcService")
	proto.RegisterType((*GrpcService_EnvoyGrpc)(nil), "envoy.api.v2.core.GrpcService.EnvoyGrpc")
	proto.RegisterType((*GrpcService_GoogleGrpc)(nil), "envoy.api.v2.core.GrpcService.GoogleGrpc")
	proto.RegisterType((*GrpcService_GoogleGrpc_SslCredentials)(nil), "envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials")
	proto.RegisterType((*GrpcService_Credentials)(nil), "envoy.api.v2.core.GrpcService.Credentials")
}

func init() { proto.RegisterFile("envoy/api/v2/core/grpc_service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xae, 0x9b, 0xfc, 0xad, 0x3c, 0xae, 0xfa, 0xc3, 0xaa, 0x52, 0x53, 0xab, 0xad, 0x2a, 0xe0,
	0x10, 0x2a, 0x64, 0x4b, 0xe9, 0x05, 0x24, 0xc4, 0xa1, 0x29, 0x6a, 0x11, 0x08, 0x81, 0x03, 0x67,
	0x6b, 0xb3, 0x99, 0x98, 0x55, 0x1d, 0xaf, 0xb5, 0xbb, 0xb6, 0xc8, 0xab, 0xf0, 0x04, 0x3c, 0x02,
	0xe2, 0xd4, 0x0b, 0x37, 0x9e, 0x82, 0x5b, 0xdf, 0x02, 0xed, 0x7a, 0xd3, 0x24, 0x04, 0x29, 0xdc,
	0x76, 0xe6, 0x9b, 0x6f, 0x66, 0xbe, 0x6f, 0x07, 0x1e, 0x61, 0x51, 0x8b, 0x69, 0x4c, 0x4b, 0x1e,
	0xd7, 0xbd, 0x98, 0x09, 0x89, 0x71, 0x26, 0x4b, 0x96, 0x2a, 0x94, 0x35, 0x67, 0x18, 0x95, 0x52,
	0x68, 0x41, 0xee, 0xdb, 0xaa, 0x88, 0x96, 0x3c, 0xaa, 0x7b, 0x91, 0xa9, 0x0a, 0x0f, 0x57, 0x89,
	0x43, 0xaa, 0x1c, 0x21, 0x3c, 0xce, 0x84, 0xc8, 0x72, 0x8c, 0x6d, 0x34, 0xac, 0xc6, 0xf1, 0xa8,
	0x92, 0x54, 0x73, 0x51, 0x38, 0xfc, 0xf0, 0x4f, 0x5c, 0x69, 0x59, 0x31, 0xed, 0xd0, 0xfd, 0x9a,
	0xe6, 0x7c, 0x44, 0x35, 0xc6, 0xb3, 0x87, 0x03, 0xf6, 0x32, 0x91, 0x09, 0xfb, 0x8c, 0xcd, 0xab,
	0xc9, 0x3e, 0xf8, 0xb2, 0x0d, 0xc1, 0xa5, 0x2c, 0xd9, 0xa0, 0xd9, 0x99, 0xbc, 0x02, 0xb0, 0xcb,
	0xa5, 0x46, 0x49, 0xc7, 0x3b, 0xf1, 0xba, 0x41, 0xaf, 0x1b, 0xad, 0x48, 0x88, 0x16, 0x38, 0xd1,
	0x4b, 0x83, 0x9a, 0xc4, 0xd5, 0x46, 0xe2, 0xe3, 0x2c, 0x20, 0x6f, 0x20, 0x68, 0x36, 0x6d, 0x7a,
	0x6d, 0xda, 0x5e, 0x8f, 0xd7, 0xf4, 0xba, 0xb4, 0x0c, 0xd7, 0x0c, 0xb2, 0xbb, 0x88, 0x9c, 0xc1,
	0xb6, 0xe6, 0x13, 0x14, 0x95, 0xee, 0xb4, 0x6c, 0xa7, 0x83, 0xa8, 0x41, 0xa3, 0x99, 0x0f, 0xd1,
	0x85, 0xf3, 0x29, 0x99, 0x55, 0x9a, 0x15, 0x98, 0xc4, 0x11, 0x16, 0x9a, 0xd3, 0x5c, 0x75, 0xda,
	0x27, 0xad, 0x6e, 0xd0, 0x3b, 0x5d, 0xb3, 0x42, 0x7f, 0xce, 0x48, 0x16, 0xe9, 0xe1, 0x33, 0xf0,
	0xef, 0xa4, 0x92, 0x27, 0xb0, 0xc3, 0xf2, 0x4a, 0x69, 0x94, 0x69, 0x41, 0x27, 0x68, 0xad, 0xf2,
	0xcf, 0xfd, 0xef, 0xb7, 0x37, 0xad, 0xb6, 0xdc, 0x3c, 0xf1, 0x92, 0xc0, 0xc1, 0x6f, 0xe9, 0x04,
	0xc3, 0x1f, 0x2d, 0x80, 0xb9, 0x34, 0xd2, 0x05, 0xd0, 0x54, 0x66, 0xa8, 0xd3, 0x4a, 0xf2, 0x55,
	0xaa, 0xdf, 0x80, 0x1f, 0x25, 0x27, 0x14, 0xfe, 0x57, 0x2a, 0x4f, 0x17, 0x55, 0x34, 0x46, 0x3e,
	0xfd, 0x67, 0x23, 0xa3, 0x81, 0xca, 0x17, 0x35, 0xed, 0xaa, 0xa5, 0x98, 0x9c, 0x42, 0xa0, 0x34,
	0xd5, 0x69, 0x29, 0x71, 0xcc, 0x3f, 0x5b, 0x77, 0x97, 0xb6, 0x01, 0x83, 0xbe, 0xb3, 0x20, 0x89,
	0x61, 0x8b, 0x89, 0x62, 0xcc, 0xb3, 0x4e, 0xdb, 0x6e, 0xb1, 0xbf, 0xf2, 0x09, 0x03, 0x7b, 0x8c,
	0x89, 0x2b, 0x0b, 0x7f, 0x7a, 0xb0, 0xbb, 0x3c, 0x9f, 0x3c, 0x07, 0x90, 0x42, 0xe8, 0x94, 0xa1,
	0xd4, 0xca, 0x9d, 0xd8, 0xd1, 0x5f, 0xd4, 0x5c, 0x50, 0x4d, 0x07, 0xa2, 0x92, 0x0c, 0x13, 0xdf,
	0x10, 0xfa, 0xa6, 0x9e, 0xbc, 0x80, 0xa0, 0x94, 0xbc, 0xa6, 0x1a, 0xd3, 0x6b, 0x9c, 0x3a, 0x33,
	0xd6, 0xd0, 0xc1, 0x31, 0x5e, 0xe3, 0xd4, 0x4c, 0x37, 0x83, 0x53, 0xf6, 0x89, 0xf2, 0xc2, 0x9d,
	0xd2, 0xba, 0xe9, 0x86, 0xd0, 0x37, 0xf5, 0xe1, 0x7b, 0x08, 0x16, 0xa5, 0x3c, 0x84, 0x1d, 0xca,
	0x18, 0x2a, 0x95, 0x6a, 0x71, 0x8d, 0x45, 0xf3, 0x93, 0x57, 0x1b, 0x49, 0xd0, 0x64, 0x3f, 0x98,
	0xe4, 0xf9, 0x11, 0xec, 0xcd, 0xbf, 0x2f, 0x55, 0x25, 0x32, 0x3e, 0xe6, 0x28, 0xc9, 0x7f, 0xdf,
	0x6e, 0x6f, 0x5a, 0xde, 0xf9, 0x01, 0xdc, 0x73, 0xb7, 0xb0, 0x02, 0xb5, 0xbf, 0xfe, 0x3a, 0xf6,
	0x86, 0x5b, 0xd6, 0xdb, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x24, 0x7f, 0xea, 0x95, 0x6f,
	0x04, 0x00, 0x00,
}
