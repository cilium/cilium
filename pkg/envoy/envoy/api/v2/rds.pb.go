// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/rds.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_route "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/route"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RouteConfiguration struct {
	// The name of the route configuration. For example, it might match
	// :ref:`route_config_name
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.Rds.route_config_name>` in
	// :ref:`envoy_api_msg_config.filter.network.http_connection_manager.v2.Rds`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An array of virtual hosts that make up the route table.
	VirtualHosts []*envoy_api_v2_route.VirtualHost `protobuf:"bytes,2,rep,name=virtual_hosts,json=virtualHosts" json:"virtual_hosts,omitempty"`
	// Optionally specifies a list of HTTP headers that the connection manager
	// will consider to be internal only. If they are found on external requests they will be cleaned
	// prior to filter invocation. See :ref:`config_http_conn_man_headers_x-envoy-internal` for more
	// information.
	InternalOnlyHeaders []string `protobuf:"bytes,3,rep,name=internal_only_headers,json=internalOnlyHeaders" json:"internal_only_headers,omitempty"`
	// Specifies a list of HTTP headers that should be added to each response that
	// the connection manager encodes. Headers specified at this level are applied
	// after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
	// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	ResponseHeadersToAdd []*envoy_api_v2_core1.HeaderValueOption `protobuf:"bytes,4,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// that the connection manager encodes.
	ResponseHeadersToRemove []string `protobuf:"bytes,5,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request
	// routed by the HTTP connection manager. Headers specified at this level are
	// applied after headers from any enclosed :ref:`envoy_api_msg_route.VirtualHost` or
	// :ref:`envoy_api_msg_route.RouteAction`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*envoy_api_v2_core1.HeaderValueOption `protobuf:"bytes,6,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// An optional boolean that specifies whether the clusters that the route
	// table refers to will be validated by the cluster manager. If set to true
	// and a route refers to a non-existent cluster, the route table will not
	// load. If set to false and a route refers to a non-existent cluster, the
	// route table will load and the router filter will return a 404 if the route
	// is selected at runtime. This setting defaults to true if the route table
	// is statically defined via the :ref:`route_config
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.route_config>`
	// option. This setting default to false if the route table is loaded dynamically via the
	// :ref:`rds
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.rds>`
	// option. Users may which to override the default behavior in certain cases (for example when
	// using CDS with a static route table).
	ValidateClusters *google_protobuf.BoolValue `protobuf:"bytes,7,opt,name=validate_clusters,json=validateClusters" json:"validate_clusters,omitempty"`
}

func (m *RouteConfiguration) Reset()                    { *m = RouteConfiguration{} }
func (m *RouteConfiguration) String() string            { return proto.CompactTextString(m) }
func (*RouteConfiguration) ProtoMessage()               {}
func (*RouteConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *RouteConfiguration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteConfiguration) GetVirtualHosts() []*envoy_api_v2_route.VirtualHost {
	if m != nil {
		return m.VirtualHosts
	}
	return nil
}

func (m *RouteConfiguration) GetInternalOnlyHeaders() []string {
	if m != nil {
		return m.InternalOnlyHeaders
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToAdd() []*envoy_api_v2_core1.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteConfiguration) GetRequestHeadersToAdd() []*envoy_api_v2_core1.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteConfiguration) GetValidateClusters() *google_protobuf.BoolValue {
	if m != nil {
		return m.ValidateClusters
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteConfiguration)(nil), "envoy.api.v2.RouteConfiguration")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteDiscoveryService service

type RouteDiscoveryServiceClient interface {
	StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error)
	FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type routeDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouteDiscoveryServiceClient(cc *grpc.ClientConn) RouteDiscoveryServiceClient {
	return &routeDiscoveryServiceClient{cc}
}

func (c *routeDiscoveryServiceClient) StreamRoutes(ctx context.Context, opts ...grpc.CallOption) (RouteDiscoveryService_StreamRoutesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteDiscoveryService_serviceDesc.Streams[0], c.cc, "/envoy.api.v2.RouteDiscoveryService/StreamRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeDiscoveryServiceStreamRoutesClient{stream}
	return x, nil
}

type RouteDiscoveryService_StreamRoutesClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type routeDiscoveryServiceStreamRoutesClient struct {
	grpc.ClientStream
}

func (x *routeDiscoveryServiceStreamRoutesClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeDiscoveryServiceClient) FetchRoutes(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := grpc.Invoke(ctx, "/envoy.api.v2.RouteDiscoveryService/FetchRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RouteDiscoveryService service

type RouteDiscoveryServiceServer interface {
	StreamRoutes(RouteDiscoveryService_StreamRoutesServer) error
	FetchRoutes(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterRouteDiscoveryServiceServer(s *grpc.Server, srv RouteDiscoveryServiceServer) {
	s.RegisterService(&_RouteDiscoveryService_serviceDesc, srv)
}

func _RouteDiscoveryService_StreamRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteDiscoveryServiceServer).StreamRoutes(&routeDiscoveryServiceStreamRoutesServer{stream})
}

type RouteDiscoveryService_StreamRoutesServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type routeDiscoveryServiceStreamRoutesServer struct {
	grpc.ServerStream
}

func (x *routeDiscoveryServiceStreamRoutesServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeDiscoveryServiceStreamRoutesServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteDiscoveryService_FetchRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.RouteDiscoveryService/FetchRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteDiscoveryServiceServer).FetchRoutes(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.RouteDiscoveryService",
	HandlerType: (*RouteDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchRoutes",
			Handler:    _RouteDiscoveryService_FetchRoutes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoutes",
			Handler:       _RouteDiscoveryService_StreamRoutes_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/api/v2/rds.proto",
}

func init() { proto.RegisterFile("envoy/api/v2/rds.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xef, 0x74, 0xd7, 0x96, 0xce, 0xae, 0xa0, 0xd3, 0x6d, 0x1b, 0x17, 0xd9, 0x5d, 0x16, 0x0f,
	0xc1, 0x43, 0x22, 0xf1, 0x56, 0x4f, 0x6e, 0x45, 0x8b, 0x97, 0x42, 0xaa, 0x05, 0xf1, 0x10, 0x66,
	0x93, 0xd7, 0x6c, 0x20, 0x3b, 0x2f, 0xce, 0x4c, 0x22, 0x7b, 0xf5, 0xe4, 0xdd, 0x2f, 0xe1, 0x47,
	0xf1, 0xee, 0x5d, 0x41, 0xc4, 0xcf, 0x21, 0x99, 0x49, 0xd4, 0x54, 0x3d, 0x08, 0x5e, 0xc2, 0xcb,
	0xfb, 0xfd, 0x99, 0x5f, 0xde, 0x9b, 0xd0, 0x43, 0x10, 0x15, 0x6e, 0x7c, 0x5e, 0x64, 0x7e, 0x15,
	0xf8, 0x32, 0x51, 0x5e, 0x21, 0x51, 0x23, 0x1b, 0x9a, 0xbe, 0xc7, 0x8b, 0xcc, 0xab, 0x82, 0xf1,
	0xed, 0x0e, 0x2b, 0x46, 0x09, 0xfe, 0x92, 0x2b, 0xb0, 0xdc, 0x2b, 0x68, 0x92, 0xa9, 0x18, 0x2b,
	0x90, 0x9b, 0x06, 0x9d, 0x74, 0x4f, 0xc0, 0x52, 0x83, 0x7d, 0xb6, 0xea, 0x14, 0x31, 0xcd, 0xc1,
	0x10, 0xb8, 0x10, 0xa8, 0xb9, 0xce, 0x50, 0xa8, 0x56, 0xdd, 0xa0, 0xe6, 0x6d, 0x59, 0x5e, 0xfa,
	0xaf, 0x25, 0x2f, 0x0a, 0x90, 0x2d, 0x3e, 0x4a, 0x31, 0x45, 0x53, 0xfa, 0x75, 0x65, 0xbb, 0xf3,
	0x6f, 0x3d, 0xca, 0xc2, 0xfa, 0x8c, 0x13, 0x14, 0x97, 0x59, 0x5a, 0x4a, 0xe3, 0xc9, 0x18, 0xed,
	0x0b, 0xbe, 0x06, 0x87, 0xcc, 0x88, 0xbb, 0x17, 0x9a, 0x9a, 0x3d, 0xa5, 0xd7, 0xab, 0x4c, 0xea,
	0x92, 0xe7, 0xd1, 0x0a, 0x95, 0x56, 0xce, 0xf6, 0xac, 0xe7, 0x0e, 0x82, 0xa9, 0xf7, 0xeb, 0x00,
	0x3c, 0x1b, 0xf8, 0xc2, 0x12, 0x4f, 0x51, 0xe9, 0x45, 0xff, 0xc3, 0xa7, 0xe9, 0x56, 0x38, 0xac,
	0x7e, 0xb6, 0x14, 0x0b, 0xe8, 0x41, 0x26, 0x34, 0x48, 0xc1, 0xf3, 0x08, 0x45, 0xbe, 0x89, 0x56,
	0xc0, 0x13, 0x90, 0xca, 0xe9, 0xcd, 0x7a, 0xee, 0x5e, 0xb8, 0xdf, 0x82, 0x67, 0x22, 0xdf, 0x9c,
	0x5a, 0x88, 0xbd, 0xa4, 0x47, 0x12, 0x54, 0x81, 0x42, 0x41, 0x4b, 0x8f, 0x34, 0x46, 0x3c, 0x49,
	0x9c, 0xbe, 0x49, 0x72, 0xa7, 0x9b, 0xa4, 0x1e, 0xbe, 0x67, 0xc5, 0x17, 0x3c, 0x2f, 0xe1, 0xac,
	0xa8, 0x3f, 0x2d, 0x1c, 0xb5, 0x26, 0x8d, 0xef, 0x33, 0x7c, 0x98, 0x24, 0xec, 0x01, 0x1d, 0xff,
	0xc9, 0x5c, 0xc2, 0x1a, 0x2b, 0x70, 0xae, 0x99, 0x54, 0x47, 0xbf, 0x29, 0x43, 0x03, 0xb3, 0x17,
	0xf4, 0x50, 0xc2, 0xab, 0x12, 0x94, 0xbe, 0x1a, 0x6c, 0xe7, 0x1f, 0x82, 0xed, 0x37, 0x1e, 0x9d,
	0x5c, 0x4f, 0xe8, 0xcd, 0x8a, 0xe7, 0x59, 0xc2, 0x35, 0x44, 0x71, 0x5e, 0x2a, 0x5d, 0x0f, 0x69,
	0x77, 0x46, 0xdc, 0x41, 0x30, 0xf6, 0xec, 0xc6, 0xbd, 0x76, 0xe3, 0xde, 0x02, 0x31, 0x37, 0x8e,
	0xe1, 0x8d, 0x56, 0x74, 0xd2, 0x68, 0x82, 0xcf, 0x84, 0x1e, 0x98, 0x45, 0x3f, 0x6a, 0x6f, 0xdd,
	0x39, 0xc8, 0x2a, 0x8b, 0x81, 0x3d, 0xa7, 0xc3, 0x73, 0x2d, 0x81, 0xaf, 0x0d, 0xac, 0xd8, 0xa4,
	0x9b, 0xf6, 0x07, 0x3f, 0xb4, 0xf1, 0xc6, 0xd3, 0xbf, 0xe2, 0x76, 0x3a, 0xf3, 0x2d, 0x97, 0xdc,
	0x23, 0x0c, 0xe9, 0xe0, 0x31, 0xe8, 0x78, 0xf5, 0xbf, 0x5c, 0xa7, 0x6f, 0x3e, 0x7e, 0x7d, 0xb7,
	0x7d, 0x6b, 0x3e, 0xea, 0xfc, 0x3a, 0xc7, 0xe6, 0xbe, 0xa9, 0x63, 0x72, 0x77, 0xb1, 0xfb, 0xfe,
	0xcb, 0x84, 0xbc, 0x25, 0x64, 0xb9, 0x63, 0x06, 0x72, 0xff, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0xe2, 0xd8, 0xeb, 0xb2, 0x03, 0x00, 0x00,
}
