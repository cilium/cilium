// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/eds.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import endpoint "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/endpoint"
import _type "github.com/cilium/cilium/pkg/envoy/envoy/type"
import _ "github.com/gogo/protobuf/gogoproto"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Each route from RDS will map to a single cluster or traffic split across
// clusters using weights expressed in the RDS WeightedCluster.
//
// With EDS, each cluster is treated independently from a LB perspective, with
// LB taking place between the Localities within a cluster and at a finer
// granularity between the hosts within a locality. For a given cluster, the
// effective weight of a host is its load_balancing_weight multiplied by the
// load_balancing_weight of its Locality.
type ClusterLoadAssignment struct {
	// Name of the cluster. This will be the :ref:`service_name
	// <envoy_api_field_Cluster.EdsClusterConfig.service_name>` value if specified
	// in the cluster :ref:`EdsClusterConfig
	// <envoy_api_msg_Cluster.EdsClusterConfig>`.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// List of endpoints to load balance to.
	Endpoints []*endpoint.LocalityLbEndpoints `protobuf:"bytes,2,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// Load balancing policy settings.
	Policy               *ClusterLoadAssignment_Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *ClusterLoadAssignment) Reset()         { *m = ClusterLoadAssignment{} }
func (m *ClusterLoadAssignment) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment) ProtoMessage()    {}
func (*ClusterLoadAssignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_eds_4c9516e992193157, []int{0}
}
func (m *ClusterLoadAssignment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment.Marshal(b, m, deterministic)
}
func (dst *ClusterLoadAssignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment.Merge(dst, src)
}
func (m *ClusterLoadAssignment) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment.Size(m)
}
func (m *ClusterLoadAssignment) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment proto.InternalMessageInfo

func (m *ClusterLoadAssignment) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterLoadAssignment) GetEndpoints() []*endpoint.LocalityLbEndpoints {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ClusterLoadAssignment) GetPolicy() *ClusterLoadAssignment_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// Load balancing policy settings.
type ClusterLoadAssignment_Policy struct {
	// Action to trim the overall incoming traffic to protect the upstream
	// hosts. This action allows protection in case the hosts are unable to
	// recover from an outage, or unable to autoscale or unable to handle
	// incoming traffic volume for any reason.
	//
	// At the client each category is applied one after the other to generate
	// the 'actual' drop percentage on all outgoing traffic. For example:
	//
	// .. code-block:: json
	//
	//  { "drop_overloads": [
	//      { "category": "throttle", "drop_percentage": 60 }
	//      { "category": "lb", "drop_percentage": 50 }
	//  ]}
	//
	// The actual drop percentages applied to the traffic at the clients will be
	//    "throttle"_drop = 60%
	//    "lb"_drop = 20%  // 50% of the remaining 'actual' load, which is 40%.
	//    actual_outgoing_load = 20% // remaining after applying all categories.
	DropOverloads []*ClusterLoadAssignment_Policy_DropOverload `protobuf:"bytes,2,rep,name=drop_overloads,json=dropOverloads,proto3" json:"drop_overloads,omitempty"`
	// Priority levels and localities are considered overprovisioned with this
	// factor (in percentage). This means that we don't consider a priority
	// level or locality unhealthy until the percentage of healthy hosts
	// multiplied by the overprovisioning factor drops below 100.
	// With the default value 140(1.4), Envoy doesn't consider a priority level
	// or a locality unhealthy until their percentage of healthy hosts drops
	// below 72%.
	// Read more at :ref:`priority levels <arch_overview_load_balancing_priority_levels>` and
	// :ref:`localities <arch_overview_load_balancing_locality_weighted_lb>`.
	OverprovisioningFactor *wrappers.UInt32Value `protobuf:"bytes,3,opt,name=overprovisioning_factor,json=overprovisioningFactor,proto3" json:"overprovisioning_factor,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}              `json:"-"`
	XXX_unrecognized       []byte                `json:"-"`
	XXX_sizecache          int32                 `json:"-"`
}

func (m *ClusterLoadAssignment_Policy) Reset()         { *m = ClusterLoadAssignment_Policy{} }
func (m *ClusterLoadAssignment_Policy) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment_Policy) ProtoMessage()    {}
func (*ClusterLoadAssignment_Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_eds_4c9516e992193157, []int{0, 0}
}
func (m *ClusterLoadAssignment_Policy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment_Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Marshal(b, m, deterministic)
}
func (dst *ClusterLoadAssignment_Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment_Policy.Merge(dst, src)
}
func (m *ClusterLoadAssignment_Policy) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment_Policy.Size(m)
}
func (m *ClusterLoadAssignment_Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment_Policy proto.InternalMessageInfo

func (m *ClusterLoadAssignment_Policy) GetDropOverloads() []*ClusterLoadAssignment_Policy_DropOverload {
	if m != nil {
		return m.DropOverloads
	}
	return nil
}

func (m *ClusterLoadAssignment_Policy) GetOverprovisioningFactor() *wrappers.UInt32Value {
	if m != nil {
		return m.OverprovisioningFactor
	}
	return nil
}

type ClusterLoadAssignment_Policy_DropOverload struct {
	// Identifier for the policy specifying the drop.
	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	// Percentage of traffic that should be dropped for the category.
	DropPercentage       *_type.FractionalPercent `protobuf:"bytes,2,opt,name=drop_percentage,json=dropPercentage,proto3" json:"drop_percentage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ClusterLoadAssignment_Policy_DropOverload) Reset() {
	*m = ClusterLoadAssignment_Policy_DropOverload{}
}
func (m *ClusterLoadAssignment_Policy_DropOverload) String() string { return proto.CompactTextString(m) }
func (*ClusterLoadAssignment_Policy_DropOverload) ProtoMessage()    {}
func (*ClusterLoadAssignment_Policy_DropOverload) Descriptor() ([]byte, []int) {
	return fileDescriptor_eds_4c9516e992193157, []int{0, 0, 0}
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Unmarshal(m, b)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Marshal(b, m, deterministic)
}
func (dst *ClusterLoadAssignment_Policy_DropOverload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Merge(dst, src)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_Size() int {
	return xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.Size(m)
}
func (m *ClusterLoadAssignment_Policy_DropOverload) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterLoadAssignment_Policy_DropOverload proto.InternalMessageInfo

func (m *ClusterLoadAssignment_Policy_DropOverload) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *ClusterLoadAssignment_Policy_DropOverload) GetDropPercentage() *_type.FractionalPercent {
	if m != nil {
		return m.DropPercentage
	}
	return nil
}

func init() {
	proto.RegisterType((*ClusterLoadAssignment)(nil), "envoy.api.v2.ClusterLoadAssignment")
	proto.RegisterType((*ClusterLoadAssignment_Policy)(nil), "envoy.api.v2.ClusterLoadAssignment.Policy")
	proto.RegisterType((*ClusterLoadAssignment_Policy_DropOverload)(nil), "envoy.api.v2.ClusterLoadAssignment.Policy.DropOverload")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EndpointDiscoveryServiceClient is the client API for EndpointDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EndpointDiscoveryServiceClient interface {
	// The resource_names field in DiscoveryRequest specifies a list of clusters
	// to subscribe to updates for.
	StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (EndpointDiscoveryService_StreamEndpointsClient, error)
	FetchEndpoints(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
}

type endpointDiscoveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewEndpointDiscoveryServiceClient(cc *grpc.ClientConn) EndpointDiscoveryServiceClient {
	return &endpointDiscoveryServiceClient{cc}
}

func (c *endpointDiscoveryServiceClient) StreamEndpoints(ctx context.Context, opts ...grpc.CallOption) (EndpointDiscoveryService_StreamEndpointsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EndpointDiscoveryService_serviceDesc.Streams[0], "/envoy.api.v2.EndpointDiscoveryService/StreamEndpoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &endpointDiscoveryServiceStreamEndpointsClient{stream}
	return x, nil
}

type EndpointDiscoveryService_StreamEndpointsClient interface {
	Send(*DiscoveryRequest) error
	Recv() (*DiscoveryResponse, error)
	grpc.ClientStream
}

type endpointDiscoveryServiceStreamEndpointsClient struct {
	grpc.ClientStream
}

func (x *endpointDiscoveryServiceStreamEndpointsClient) Send(m *DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *endpointDiscoveryServiceStreamEndpointsClient) Recv() (*DiscoveryResponse, error) {
	m := new(DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *endpointDiscoveryServiceClient) FetchEndpoints(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/envoy.api.v2.EndpointDiscoveryService/FetchEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointDiscoveryServiceServer is the server API for EndpointDiscoveryService service.
type EndpointDiscoveryServiceServer interface {
	// The resource_names field in DiscoveryRequest specifies a list of clusters
	// to subscribe to updates for.
	StreamEndpoints(EndpointDiscoveryService_StreamEndpointsServer) error
	FetchEndpoints(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
}

func RegisterEndpointDiscoveryServiceServer(s *grpc.Server, srv EndpointDiscoveryServiceServer) {
	s.RegisterService(&_EndpointDiscoveryService_serviceDesc, srv)
}

func _EndpointDiscoveryService_StreamEndpoints_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EndpointDiscoveryServiceServer).StreamEndpoints(&endpointDiscoveryServiceStreamEndpointsServer{stream})
}

type EndpointDiscoveryService_StreamEndpointsServer interface {
	Send(*DiscoveryResponse) error
	Recv() (*DiscoveryRequest, error)
	grpc.ServerStream
}

type endpointDiscoveryServiceStreamEndpointsServer struct {
	grpc.ServerStream
}

func (x *endpointDiscoveryServiceStreamEndpointsServer) Send(m *DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *endpointDiscoveryServiceStreamEndpointsServer) Recv() (*DiscoveryRequest, error) {
	m := new(DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EndpointDiscoveryService_FetchEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointDiscoveryServiceServer).FetchEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/envoy.api.v2.EndpointDiscoveryService/FetchEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointDiscoveryServiceServer).FetchEndpoints(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EndpointDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "envoy.api.v2.EndpointDiscoveryService",
	HandlerType: (*EndpointDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchEndpoints",
			Handler:    _EndpointDiscoveryService_FetchEndpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEndpoints",
			Handler:       _EndpointDiscoveryService_StreamEndpoints_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "envoy/api/v2/eds.proto",
}

func init() { proto.RegisterFile("envoy/api/v2/eds.proto", fileDescriptor_eds_4c9516e992193157) }

var fileDescriptor_eds_4c9516e992193157 = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xde, 0xc9, 0x96, 0x75, 0x3b, 0x5b, 0x77, 0x25, 0xe8, 0x36, 0x84, 0xda, 0x2d, 0x45, 0xa1,
	0x14, 0x49, 0xa4, 0x7b, 0x10, 0xf6, 0x66, 0x5d, 0x0b, 0x4a, 0x59, 0x4b, 0x16, 0xc5, 0x93, 0x75,
	0x9a, 0xbc, 0x8d, 0x03, 0xe9, 0xcc, 0x38, 0x99, 0x46, 0x72, 0xf0, 0xe2, 0xc9, 0xbb, 0x7f, 0x42,
	0xf0, 0x1f, 0x78, 0xf2, 0xe8, 0xcd, 0x83, 0x77, 0x0f, 0xe2, 0x45, 0xfc, 0x13, 0xd2, 0xc9, 0x24,
	0xb6, 0xae, 0x82, 0x07, 0x6f, 0x2f, 0xf3, 0xbd, 0xef, 0xe3, 0x7b, 0xef, 0x7b, 0xc1, 0xfb, 0xc0,
	0x32, 0x9e, 0xfb, 0x44, 0x50, 0x3f, 0x1b, 0xf8, 0x10, 0xa5, 0x9e, 0x90, 0x5c, 0x71, 0xbb, 0xa1,
	0xdf, 0x3d, 0x22, 0xa8, 0x97, 0x0d, 0xdc, 0xd6, 0x5a, 0x57, 0x44, 0xd3, 0x90, 0x67, 0x20, 0xf3,
	0xa2, 0xd7, 0xbd, 0xb6, 0xae, 0xc1, 0x22, 0xc1, 0x29, 0x53, 0x55, 0x61, 0xba, 0x9c, 0xa2, 0x4b,
	0xe5, 0x02, 0x7c, 0x01, 0x32, 0x84, 0x0a, 0x69, 0xc5, 0x9c, 0xc7, 0x09, 0x68, 0x01, 0xc2, 0x18,
	0x57, 0x44, 0x51, 0xce, 0x8c, 0x13, 0xb7, 0x99, 0x91, 0x84, 0x46, 0x44, 0x81, 0x5f, 0x16, 0x06,
	0xb8, 0x1c, 0xf3, 0x98, 0xeb, 0xd2, 0x5f, 0x56, 0xe6, 0xb5, 0x6d, 0xc4, 0xf4, 0xd7, 0x6c, 0x71,
	0xe6, 0xbf, 0x90, 0x44, 0x08, 0x90, 0x46, 0xae, 0xfb, 0xae, 0x86, 0xaf, 0xdc, 0x49, 0x16, 0xa9,
	0x02, 0x39, 0xe6, 0x24, 0xba, 0x9d, 0xa6, 0x34, 0x66, 0x73, 0x60, 0xca, 0xbe, 0x81, 0x1b, 0x61,
	0x01, 0x4c, 0x19, 0x99, 0x83, 0x83, 0x3a, 0xa8, 0x57, 0x1f, 0xd6, 0xdf, 0x7f, 0xff, 0xb0, 0x59,
	0x93, 0x56, 0x07, 0x05, 0x3b, 0x06, 0x3e, 0x21, 0x73, 0xb0, 0x4f, 0x70, 0xbd, 0x1c, 0x30, 0x75,
	0xac, 0xce, 0x66, 0x6f, 0x67, 0xd0, 0xf7, 0x56, 0x97, 0xe6, 0x55, 0xf3, 0x8f, 0x79, 0x48, 0x12,
	0xaa, 0xf2, 0xf1, 0xec, 0x6e, 0xc9, 0x18, 0xd6, 0x3e, 0x7e, 0x39, 0xd8, 0x08, 0x7e, 0x49, 0xd8,
	0x43, 0xbc, 0x25, 0x78, 0x42, 0xc3, 0xdc, 0xa9, 0x75, 0xd0, 0x79, 0xb1, 0x3f, 0x5a, 0xf6, 0x26,
	0x9a, 0x11, 0x18, 0xa6, 0xfb, 0xc9, 0xc2, 0x5b, 0xc5, 0x93, 0xfd, 0x04, 0xef, 0x46, 0x92, 0x8b,
	0xe9, 0x32, 0xa7, 0x84, 0x93, 0xa8, 0xf4, 0x78, 0xeb, 0xdf, 0x65, 0xbd, 0x63, 0xc9, 0xc5, 0x03,
	0xc3, 0x0f, 0x2e, 0x46, 0x2b, 0x5f, 0xa9, 0xfd, 0x14, 0x37, 0x97, 0xd2, 0x42, 0xf2, 0x8c, 0xa6,
	0x94, 0x33, 0xca, 0xe2, 0xe9, 0x19, 0x09, 0x15, 0x97, 0xce, 0xa6, 0xf6, 0xdf, 0xf2, 0x8a, 0x20,
	0xbc, 0x32, 0x08, 0xef, 0xe1, 0x3d, 0xa6, 0x0e, 0x07, 0x8f, 0x48, 0xb2, 0x00, 0xb3, 0xd5, 0xbe,
	0xd5, 0xd9, 0x08, 0xf6, 0x7f, 0xd7, 0x19, 0x69, 0x19, 0xf7, 0x25, 0x6e, 0xac, 0x1a, 0xb0, 0xaf,
	0xe3, 0xed, 0x90, 0x28, 0x88, 0xb9, 0xcc, 0xcf, 0x47, 0x53, 0x41, 0xf6, 0x08, 0xef, 0xe9, 0xc1,
	0xcd, 0x89, 0x91, 0x18, 0x1c, 0x4b, 0x1b, 0xba, 0x6a, 0x26, 0x5f, 0x1e, 0xa0, 0x37, 0x92, 0x24,
	0x5c, 0x1e, 0x19, 0x49, 0x26, 0x45, 0x5f, 0xa0, 0xd7, 0x35, 0xa9, 0x48, 0xf7, 0x6b, 0xdb, 0xe8,
	0x92, 0x35, 0xf8, 0x81, 0xb0, 0x53, 0x86, 0x76, 0x5c, 0x9e, 0xfd, 0x29, 0xc8, 0x8c, 0x86, 0x60,
	0x3f, 0xc6, 0x7b, 0xa7, 0x4a, 0x02, 0x99, 0x57, 0xb1, 0xda, 0xed, 0xf5, 0xf5, 0x56, 0x94, 0x00,
	0x9e, 0x2f, 0x20, 0x55, 0xee, 0xc1, 0x5f, 0xf1, 0x54, 0x70, 0x96, 0x42, 0x77, 0xa3, 0x87, 0x6e,
	0x22, 0x7b, 0x81, 0x77, 0x47, 0xa0, 0xc2, 0x67, 0xff, 0x51, 0xb8, 0xfb, 0xea, 0xf3, 0xb7, 0x37,
	0x56, 0xab, 0xdb, 0x5c, 0xfb, 0x83, 0x8f, 0xaa, 0x03, 0x3c, 0x42, 0xfd, 0xe1, 0x85, 0xb7, 0x5f,
	0xdb, 0xe8, 0x35, 0x42, 0xb3, 0x2d, 0x1d, 0xda, 0xe1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0x48, 0x7f, 0xc3, 0x1e, 0x04, 0x00, 0x00,
}
