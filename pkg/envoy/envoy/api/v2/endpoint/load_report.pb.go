// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/endpoint/load_report.proto

package endpoint

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// These are stats Envoy reports to GLB every so often. Report frequency is
// defined by
// :ref:`LoadStatsResponse.load_reporting_interval<envoy_api_field_load_stats.LoadStatsResponse.load_reporting_interval>`.
// Stats per upstream region/zone and optionally per subzone.
// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type UpstreamLocalityStats struct {
	// Name of zone, region and optionally endpoint group these metrics were
	// collected from. Zone and region names could be empty if unknown.
	Locality *envoy_api_v2_core1.Locality `protobuf:"bytes,1,opt,name=locality" json:"locality,omitempty"`
	// The total number of requests sent by this Envoy since the last report. A
	// single HTTP or gRPC request or stream is counted as one request. A TCP
	// connection is also treated as one request. There is no explicit
	// total_requests field below for a locality, but it may be inferred from:
	//
	// .. code-block:: none
	//
	//   total_requests = total_successful_requests + total_requests_in_progress +
	//     total_error_requests
	//
	// The total number of requests successfully completed by the endpoints in the
	// locality. These include non-5xx responses for HTTP, where errors
	// originate at the client and the endpoint responded successfuly. For gRPC,
	// the grpc-status values are those not covered by total_error_requests below.
	TotalSuccessfulRequests uint64 `protobuf:"varint,2,opt,name=total_successful_requests,json=totalSuccessfulRequests" json:"total_successful_requests,omitempty"`
	// The total number of unfinished requests
	TotalRequestsInProgress uint64 `protobuf:"varint,3,opt,name=total_requests_in_progress,json=totalRequestsInProgress" json:"total_requests_in_progress,omitempty"`
	// The total number of requests that failed due to errors at the endpoint.
	// For HTTP these are responses with 5xx status codes and for gRPC the
	// grpc-status values:
	//
	//   - DeadlineExceeded
	//   - Unimplemented
	//   - Internal
	//   - Unavailable
	//   - Unknown
	//   - DataLoss
	TotalErrorRequests uint64 `protobuf:"varint,4,opt,name=total_error_requests,json=totalErrorRequests" json:"total_error_requests,omitempty"`
	// Stats for multi-dimensional load balancing.
	LoadMetricStats []*EndpointLoadMetricStats `protobuf:"bytes,5,rep,name=load_metric_stats,json=loadMetricStats" json:"load_metric_stats,omitempty"`
	// [#not-implemented-hide:] The priority of the endpoint group these metrics
	// were collected from.
	Priority uint32 `protobuf:"varint,6,opt,name=priority" json:"priority,omitempty"`
}

func (m *UpstreamLocalityStats) Reset()                    { *m = UpstreamLocalityStats{} }
func (m *UpstreamLocalityStats) String() string            { return proto.CompactTextString(m) }
func (*UpstreamLocalityStats) ProtoMessage()               {}
func (*UpstreamLocalityStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *UpstreamLocalityStats) GetLocality() *envoy_api_v2_core1.Locality {
	if m != nil {
		return m.Locality
	}
	return nil
}

func (m *UpstreamLocalityStats) GetTotalSuccessfulRequests() uint64 {
	if m != nil {
		return m.TotalSuccessfulRequests
	}
	return 0
}

func (m *UpstreamLocalityStats) GetTotalRequestsInProgress() uint64 {
	if m != nil {
		return m.TotalRequestsInProgress
	}
	return 0
}

func (m *UpstreamLocalityStats) GetTotalErrorRequests() uint64 {
	if m != nil {
		return m.TotalErrorRequests
	}
	return 0
}

func (m *UpstreamLocalityStats) GetLoadMetricStats() []*EndpointLoadMetricStats {
	if m != nil {
		return m.LoadMetricStats
	}
	return nil
}

func (m *UpstreamLocalityStats) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type EndpointLoadMetricStats struct {
	// Name of the metric; may be empty.
	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// Number of calls that finished and included this metric.
	NumRequestsFinishedWithMetric uint64 `protobuf:"varint,2,opt,name=num_requests_finished_with_metric,json=numRequestsFinishedWithMetric" json:"num_requests_finished_with_metric,omitempty"`
	// Sum of metric values across all calls that finished with this metric for
	// load_reporting_interval.
	TotalMetricValue float64 `protobuf:"fixed64,3,opt,name=total_metric_value,json=totalMetricValue" json:"total_metric_value,omitempty"`
}

func (m *EndpointLoadMetricStats) Reset()                    { *m = EndpointLoadMetricStats{} }
func (m *EndpointLoadMetricStats) String() string            { return proto.CompactTextString(m) }
func (*EndpointLoadMetricStats) ProtoMessage()               {}
func (*EndpointLoadMetricStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *EndpointLoadMetricStats) GetMetricName() string {
	if m != nil {
		return m.MetricName
	}
	return ""
}

func (m *EndpointLoadMetricStats) GetNumRequestsFinishedWithMetric() uint64 {
	if m != nil {
		return m.NumRequestsFinishedWithMetric
	}
	return 0
}

func (m *EndpointLoadMetricStats) GetTotalMetricValue() float64 {
	if m != nil {
		return m.TotalMetricValue
	}
	return 0
}

// Per cluster load stats. Envoy reports these stats a management server in a
// :ref:`LoadStatsRequest<envoy_api_msg_load_stats.LoadStatsRequest>`
// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type ClusterStats struct {
	// The name of the cluster.
	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName" json:"cluster_name,omitempty"`
	// Need at least one.
	UpstreamLocalityStats []*UpstreamLocalityStats `protobuf:"bytes,2,rep,name=upstream_locality_stats,json=upstreamLocalityStats" json:"upstream_locality_stats,omitempty"`
	// Cluster-level stats such as total_successful_requests may be computed by
	// summing upstream_locality_stats. In addition, below there are additional
	// cluster-wide stats. The following total_requests equality holds at the
	// cluster-level:
	//
	// .. code-block:: none
	//
	//   sum_locality(total_successful_requests) + sum_locality(total_requests_in_progress) +
	//     sum_locality(total_error_requests) + total_dropped_requests`
	//
	// The total number of dropped requests. This covers requests
	// deliberately dropped by the drop_overload policy and circuit breaking.
	TotalDroppedRequests uint64 `protobuf:"varint,3,opt,name=total_dropped_requests,json=totalDroppedRequests" json:"total_dropped_requests,omitempty"`
}

func (m *ClusterStats) Reset()                    { *m = ClusterStats{} }
func (m *ClusterStats) String() string            { return proto.CompactTextString(m) }
func (*ClusterStats) ProtoMessage()               {}
func (*ClusterStats) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClusterStats) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterStats) GetUpstreamLocalityStats() []*UpstreamLocalityStats {
	if m != nil {
		return m.UpstreamLocalityStats
	}
	return nil
}

func (m *ClusterStats) GetTotalDroppedRequests() uint64 {
	if m != nil {
		return m.TotalDroppedRequests
	}
	return 0
}

func init() {
	proto.RegisterType((*UpstreamLocalityStats)(nil), "envoy.api.v2.endpoint.UpstreamLocalityStats")
	proto.RegisterType((*EndpointLoadMetricStats)(nil), "envoy.api.v2.endpoint.EndpointLoadMetricStats")
	proto.RegisterType((*ClusterStats)(nil), "envoy.api.v2.endpoint.ClusterStats")
}

func init() { proto.RegisterFile("envoy/api/v2/endpoint/load_report.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb5, 0x49, 0x5a, 0xa5, 0x93, 0x22, 0x60, 0xd5, 0x90, 0x10, 0x40, 0x98, 0x5c, 0xc8,
	0x21, 0xb2, 0x51, 0x40, 0x42, 0x82, 0x5b, 0xa1, 0x08, 0xa4, 0x82, 0x90, 0x2b, 0x40, 0xe2, 0x62,
	0x6d, 0xed, 0x69, 0xb2, 0x92, 0xed, 0x5d, 0x76, 0xd7, 0x46, 0x7d, 0x0d, 0x1e, 0x85, 0x23, 0x27,
	0x1e, 0x86, 0x0b, 0x67, 0x5e, 0x00, 0x79, 0x77, 0x9d, 0x34, 0x52, 0x7a, 0x9b, 0x9d, 0x7f, 0x7e,
	0xcf, 0xcc, 0xa7, 0x31, 0x3c, 0xc6, 0xb2, 0x16, 0x97, 0x11, 0x93, 0x3c, 0xaa, 0x17, 0x11, 0x96,
	0x99, 0x14, 0xbc, 0x34, 0x51, 0x2e, 0x58, 0x96, 0x28, 0x94, 0x42, 0x99, 0x50, 0x2a, 0x61, 0x04,
	0x1d, 0xda, 0xc2, 0x90, 0x49, 0x1e, 0xd6, 0x8b, 0xb0, 0x2d, 0x9c, 0xdc, 0xdf, 0xf2, 0xa7, 0x42,
	0x61, 0x74, 0xce, 0x34, 0x3a, 0xd3, 0x64, 0x54, 0xb3, 0x9c, 0x67, 0xcc, 0x60, 0xd4, 0x06, 0x5e,
	0x38, 0x5a, 0x8a, 0xa5, 0xb0, 0x61, 0xd4, 0x44, 0x2e, 0x3b, 0xfd, 0xd7, 0x81, 0xe1, 0x27, 0xa9,
	0x8d, 0x42, 0x56, 0x9c, 0x8a, 0x94, 0xe5, 0xdc, 0x5c, 0x9e, 0x19, 0x66, 0x34, 0x7d, 0x0e, 0xfd,
	0xdc, 0x27, 0xc6, 0x24, 0x20, 0xb3, 0xc1, 0xe2, 0x5e, 0xb8, 0x35, 0x50, 0xd3, 0x39, 0x6c, 0x3d,
	0xf1, 0xba, 0x98, 0xbe, 0x80, 0xbb, 0x46, 0x18, 0x96, 0x27, 0xba, 0x4a, 0x53, 0xd4, 0xfa, 0xa2,
	0xca, 0x13, 0x85, 0xdf, 0x2a, 0xd4, 0x46, 0x8f, 0x3b, 0x01, 0x99, 0xf5, 0xe2, 0x91, 0x2d, 0x38,
	0x5b, 0xeb, 0xb1, 0x97, 0xe9, 0x4b, 0x98, 0x38, 0x6f, 0x6b, 0x48, 0x78, 0x99, 0x48, 0x25, 0x96,
	0x0a, 0xb5, 0x1e, 0x77, 0xaf, 0x98, 0x5b, 0xcb, 0xbb, 0xf2, 0xa3, 0x97, 0xe9, 0x13, 0x38, 0x72,
	0x66, 0x54, 0x4a, 0xa8, 0x4d, 0xcf, 0x9e, 0xb5, 0x51, 0xab, 0x9d, 0x34, 0xd2, 0xba, 0xdd, 0x57,
	0xb8, 0x6d, 0xb1, 0x17, 0x68, 0x14, 0x4f, 0x13, 0xdd, 0x2c, 0x3e, 0xde, 0x0b, 0xba, 0xb3, 0xc1,
	0x22, 0x0c, 0x77, 0xd2, 0x0f, 0x4f, 0x7c, 0x70, 0x2a, 0x58, 0xf6, 0xde, 0xda, 0x2c, 0xae, 0xf8,
	0x66, 0xbe, 0x9d, 0xa0, 0x13, 0xe8, 0x4b, 0xc5, 0x85, 0x6a, 0xf8, 0xed, 0x07, 0x64, 0x76, 0x23,
	0x5e, 0xbf, 0xa7, 0x3f, 0x09, 0x8c, 0xae, 0xf9, 0x10, 0x7d, 0x08, 0x03, 0x3f, 0x4e, 0xc9, 0x0a,
	0xb4, 0xe8, 0x0f, 0x62, 0x70, 0xa9, 0x0f, 0xac, 0x40, 0xfa, 0x16, 0x1e, 0x95, 0x55, 0xb1, 0x21,
	0x74, 0xc1, 0x4b, 0xae, 0x57, 0x98, 0x25, 0xdf, 0xb9, 0x59, 0xf9, 0x55, 0x3c, 0xe7, 0x07, 0x65,
	0x55, 0xb4, 0xcb, 0xbe, 0xf1, 0x65, 0x5f, 0xb8, 0x59, 0xb9, 0x7e, 0x74, 0x0e, 0x0e, 0x4a, 0xbb,
	0x7f, 0xcd, 0xf2, 0x0a, 0x2d, 0x65, 0x12, 0xdf, 0xb2, 0x8a, 0x2b, 0xfc, 0xdc, 0xe4, 0xa7, 0x7f,
	0x08, 0x1c, 0xbe, 0xca, 0x2b, 0x6d, 0x50, 0xb9, 0x49, 0xe7, 0x70, 0x98, 0xba, 0xf7, 0x95, 0x51,
	0x8f, 0x0f, 0x7e, 0xfd, 0xfd, 0xdd, 0xed, 0xa9, 0x4e, 0x40, 0xe2, 0x81, 0x97, 0xed, 0xd8, 0x12,
	0x46, 0x95, 0x3f, 0xb4, 0xa4, 0xbd, 0x15, 0x4f, 0xbc, 0x63, 0x89, 0xcf, 0xaf, 0x21, 0xbe, 0xf3,
	0x3c, 0x8f, 0xa1, 0x69, 0xb3, 0xf7, 0x83, 0x74, 0xfa, 0x24, 0x1e, 0x56, 0x3b, 0x2f, 0xf8, 0x19,
	0xdc, 0x71, 0xeb, 0x65, 0x4a, 0x48, 0x89, 0xd9, 0xe6, 0x22, 0xdc, 0x21, 0xb9, 0x6b, 0x79, 0xed,
	0xc4, 0x16, 0xd3, 0xf9, 0xbe, 0xfd, 0x31, 0x9e, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x14, 0x81,
	0x32, 0x75, 0xa7, 0x03, 0x00, 0x00,
}
