// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/api/v2/route/route.proto

/*
Package route is a generated protocol buffer package.

It is generated from these files:
	envoy/api/v2/route/route.proto

It has these top-level messages:
	VirtualHost
	Route
	WeightedCluster
	RouteMatch
	CorsPolicy
	RouteAction
	RedirectAction
	DirectResponseAction
	Decorator
	VirtualCluster
	RateLimit
	HeaderMatcher
	QueryParameterMatcher
*/
package route

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_type "github.com/cilium/cilium/pkg/envoy/envoy/type"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VirtualHost_TlsRequirementType int32

const (
	// No TLS requirement for the virtual host.
	VirtualHost_NONE VirtualHost_TlsRequirementType = 0
	// External requests must use TLS. If a request is external and it is not
	// using TLS, a 301 redirect will be sent telling the client to use HTTPS.
	VirtualHost_EXTERNAL_ONLY VirtualHost_TlsRequirementType = 1
	// All requests must use TLS. If a request is not using TLS, a 301 redirect
	// will be sent telling the client to use HTTPS.
	VirtualHost_ALL VirtualHost_TlsRequirementType = 2
)

var VirtualHost_TlsRequirementType_name = map[int32]string{
	0: "NONE",
	1: "EXTERNAL_ONLY",
	2: "ALL",
}
var VirtualHost_TlsRequirementType_value = map[string]int32{
	"NONE":          0,
	"EXTERNAL_ONLY": 1,
	"ALL":           2,
}

func (x VirtualHost_TlsRequirementType) String() string {
	return proto.EnumName(VirtualHost_TlsRequirementType_name, int32(x))
}
func (VirtualHost_TlsRequirementType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type RouteAction_ClusterNotFoundResponseCode int32

const (
	// HTTP status code - 503 Service Unavailable.
	RouteAction_SERVICE_UNAVAILABLE RouteAction_ClusterNotFoundResponseCode = 0
	// HTTP status code - 404 Not Found.
	RouteAction_NOT_FOUND RouteAction_ClusterNotFoundResponseCode = 1
)

var RouteAction_ClusterNotFoundResponseCode_name = map[int32]string{
	0: "SERVICE_UNAVAILABLE",
	1: "NOT_FOUND",
}
var RouteAction_ClusterNotFoundResponseCode_value = map[string]int32{
	"SERVICE_UNAVAILABLE": 0,
	"NOT_FOUND":           1,
}

func (x RouteAction_ClusterNotFoundResponseCode) String() string {
	return proto.EnumName(RouteAction_ClusterNotFoundResponseCode_name, int32(x))
}
func (RouteAction_ClusterNotFoundResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 0}
}

type RedirectAction_RedirectResponseCode int32

const (
	// Moved Permanently HTTP Status Code - 301.
	RedirectAction_MOVED_PERMANENTLY RedirectAction_RedirectResponseCode = 0
	// Found HTTP Status Code - 302.
	RedirectAction_FOUND RedirectAction_RedirectResponseCode = 1
	// See Other HTTP Status Code - 303.
	RedirectAction_SEE_OTHER RedirectAction_RedirectResponseCode = 2
	// Temporary Redirect HTTP Status Code - 307.
	RedirectAction_TEMPORARY_REDIRECT RedirectAction_RedirectResponseCode = 3
	// Permanent Redirect HTTP Status Code - 308.
	RedirectAction_PERMANENT_REDIRECT RedirectAction_RedirectResponseCode = 4
)

var RedirectAction_RedirectResponseCode_name = map[int32]string{
	0: "MOVED_PERMANENTLY",
	1: "FOUND",
	2: "SEE_OTHER",
	3: "TEMPORARY_REDIRECT",
	4: "PERMANENT_REDIRECT",
}
var RedirectAction_RedirectResponseCode_value = map[string]int32{
	"MOVED_PERMANENTLY":  0,
	"FOUND":              1,
	"SEE_OTHER":          2,
	"TEMPORARY_REDIRECT": 3,
	"PERMANENT_REDIRECT": 4,
}

func (x RedirectAction_RedirectResponseCode) String() string {
	return proto.EnumName(RedirectAction_RedirectResponseCode_name, int32(x))
}
func (RedirectAction_RedirectResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

// The top level element in the routing configuration is a virtual host. Each virtual host has
// a logical name as well as a set of domains that get routed to it based on the incoming request's
// host header. This allows a single listener to service multiple top level domain path trees. Once
// a virtual host is selected based on the domain, the routes are processed in order to see which
// upstream cluster to route to or whether to perform a redirect.
type VirtualHost struct {
	// The logical name of the virtual host. This is used when emitting certain
	// statistics but is not relevant for routing.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// A list of domains (host/authority header) that will be matched to this
	// virtual host. Wildcard hosts are supported in the form of “*.foo.com” or
	// “*-bar.foo.com”.
	//
	// .. note::
	//
	//   The wildcard will not match the empty string.
	//   e.g. “*-bar.foo.com” will match “baz-bar.foo.com” but not “-bar.foo.com”.
	//   Additionally, a special entry “*” is allowed which will match any
	//   host/authority header. Only a single virtual host in the entire route
	//   configuration can match on “*”. A domain must be unique across all virtual
	//   hosts or the config will fail to load.
	Domains []string `protobuf:"bytes,2,rep,name=domains" json:"domains,omitempty"`
	// The list of routes that will be matched, in order, for incoming requests.
	// The first route that matches will be used.
	Routes []*Route `protobuf:"bytes,3,rep,name=routes" json:"routes,omitempty"`
	// Specifies the type of TLS enforcement the virtual host expects. If this option is not
	// specified, there is no TLS requirement for the virtual host.
	RequireTls VirtualHost_TlsRequirementType `protobuf:"varint,4,opt,name=require_tls,json=requireTls,enum=envoy.api.v2.route.VirtualHost_TlsRequirementType" json:"require_tls,omitempty"`
	// A list of virtual clusters defined for this virtual host. Virtual clusters
	// are used for additional statistics gathering.
	VirtualClusters []*VirtualCluster `protobuf:"bytes,5,rep,name=virtual_clusters,json=virtualClusters" json:"virtual_clusters,omitempty"`
	// Specifies a set of rate limit configurations that will be applied to the
	// virtual host.
	RateLimits []*RateLimit `protobuf:"bytes,6,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
	// Specifies a list of HTTP headers that should be added to each request
	// handled by this virtual host. Headers specified at this level are applied
	// after headers from enclosed :ref:`envoy_api_msg_route.Route` and before headers from the
	// enclosing :ref:`envoy_api_msg_RouteConfiguration`. For more information, including
	// details on header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,7,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be added to each response
	// handled by this virtual host. Headers specified at this level are applied
	// after headers from enclosed :ref:`envoy_api_msg_route.Route` and before headers from the
	// enclosing :ref:`envoy_api_msg_RouteConfiguration`. For more information, including
	// details on header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	ResponseHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,10,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// handled by this virtual host.
	ResponseHeadersToRemove []string `protobuf:"bytes,11,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Indicates that the virtual host has a CORS policy.
	Cors *CorsPolicy `protobuf:"bytes,8,opt,name=cors" json:"cors,omitempty"`
	// The per_filter_config field can be used to provide virtual host-specific
	// configurations for filters. The key should match the filter name, such as
	// *envoy.buffer* for the HTTP buffer filter. Use of this field is filter
	// specific; see the :ref:`HTTP filter documentation <config_http_filters>`
	// for if and how it is utilized.
	PerFilterConfig map[string]*google_protobuf.Struct `protobuf:"bytes,12,rep,name=per_filter_config,json=perFilterConfig" json:"per_filter_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *VirtualHost) Reset()                    { *m = VirtualHost{} }
func (m *VirtualHost) String() string            { return proto.CompactTextString(m) }
func (*VirtualHost) ProtoMessage()               {}
func (*VirtualHost) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VirtualHost) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualHost) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *VirtualHost) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *VirtualHost) GetRequireTls() VirtualHost_TlsRequirementType {
	if m != nil {
		return m.RequireTls
	}
	return VirtualHost_NONE
}

func (m *VirtualHost) GetVirtualClusters() []*VirtualCluster {
	if m != nil {
		return m.VirtualClusters
	}
	return nil
}

func (m *VirtualHost) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *VirtualHost) GetRequestHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *VirtualHost) GetResponseHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *VirtualHost) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *VirtualHost) GetCors() *CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *VirtualHost) GetPerFilterConfig() map[string]*google_protobuf.Struct {
	if m != nil {
		return m.PerFilterConfig
	}
	return nil
}

// A route is both a specification of how to match a request as well as an indication of what to do
// next (e.g., redirect, forward, rewrite, etc.).
//
// .. attention::
//
//   Envoy supports routing on HTTP method via :ref:`header matching
//   <envoy_api_msg_route.HeaderMatcher>`.
type Route struct {
	// Route matching parameters.
	Match *RouteMatch `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	// Types that are valid to be assigned to Action:
	//	*Route_Route
	//	*Route_Redirect
	//	*Route_DirectResponse
	Action isRoute_Action `protobuf_oneof:"action"`
	// The Metadata field can be used to provide additional information
	// about the route. It can be used for configuration, stats, and logging.
	// The metadata should go under the filter namespace that will need it.
	// For instance, if the metadata is intended for the Router filter,
	// the filter name should be specified as *envoy.router*.
	Metadata *envoy_api_v2_core.Metadata `protobuf:"bytes,4,opt,name=metadata" json:"metadata,omitempty"`
	// Decorator for the matched route.
	Decorator *Decorator `protobuf:"bytes,5,opt,name=decorator" json:"decorator,omitempty"`
	// The per_filter_config field can be used to provide route-specific
	// configurations for filters. The key should match the filter name, such as
	// *envoy.buffer* for the HTTP buffer filter. Use of this field is filter
	// specific; see the :ref:`HTTP filter documentation <config_http_filters>` for
	// if and how it is utilized.
	PerFilterConfig map[string]*google_protobuf.Struct `protobuf:"bytes,8,rep,name=per_filter_config,json=perFilterConfig" json:"per_filter_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies a set of headers that will be added to requests matching this
	// route. Headers specified at this level are applied before headers from the
	// enclosing :ref:`envoy_api_msg_route.VirtualHost` and
	// :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,9,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Specifies a set of headers that will be added to responses to requests
	// matching this route. Headers specified at this level are applied before
	// headers from the enclosing :ref:`envoy_api_msg_route.VirtualHost` and
	// :ref:`envoy_api_msg_RouteConfiguration`. For more information, including
	// details on header value syntax, see the documentation on
	// :ref:`custom request headers <config_http_conn_man_headers_custom_request_headers>`.
	ResponseHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,10,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Specifies a list of HTTP headers that should be removed from each response
	// to requests matching this route.
	ResponseHeadersToRemove []string `protobuf:"bytes,11,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isRoute_Action interface {
	isRoute_Action()
}

type Route_Route struct {
	Route *RouteAction `protobuf:"bytes,2,opt,name=route,oneof"`
}
type Route_Redirect struct {
	Redirect *RedirectAction `protobuf:"bytes,3,opt,name=redirect,oneof"`
}
type Route_DirectResponse struct {
	DirectResponse *DirectResponseAction `protobuf:"bytes,7,opt,name=direct_response,json=directResponse,oneof"`
}

func (*Route_Route) isRoute_Action()          {}
func (*Route_Redirect) isRoute_Action()       {}
func (*Route_DirectResponse) isRoute_Action() {}

func (m *Route) GetAction() isRoute_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (m *Route) GetMatch() *RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *Route) GetRoute() *RouteAction {
	if x, ok := m.GetAction().(*Route_Route); ok {
		return x.Route
	}
	return nil
}

func (m *Route) GetRedirect() *RedirectAction {
	if x, ok := m.GetAction().(*Route_Redirect); ok {
		return x.Redirect
	}
	return nil
}

func (m *Route) GetDirectResponse() *DirectResponseAction {
	if x, ok := m.GetAction().(*Route_DirectResponse); ok {
		return x.DirectResponse
	}
	return nil
}

func (m *Route) GetMetadata() *envoy_api_v2_core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Route) GetDecorator() *Decorator {
	if m != nil {
		return m.Decorator
	}
	return nil
}

func (m *Route) GetPerFilterConfig() map[string]*google_protobuf.Struct {
	if m != nil {
		return m.PerFilterConfig
	}
	return nil
}

func (m *Route) GetRequestHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *Route) GetResponseHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *Route) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Route) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Route_OneofMarshaler, _Route_OneofUnmarshaler, _Route_OneofSizer, []interface{}{
		(*Route_Route)(nil),
		(*Route_Redirect)(nil),
		(*Route_DirectResponse)(nil),
	}
}

func _Route_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Route)
	// action
	switch x := m.Action.(type) {
	case *Route_Route:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Route); err != nil {
			return err
		}
	case *Route_Redirect:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redirect); err != nil {
			return err
		}
	case *Route_DirectResponse:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DirectResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Route.Action has unexpected type %T", x)
	}
	return nil
}

func _Route_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Route)
	switch tag {
	case 2: // action.route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction)
		err := b.DecodeMessage(msg)
		m.Action = &Route_Route{msg}
		return true, err
	case 3: // action.redirect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RedirectAction)
		err := b.DecodeMessage(msg)
		m.Action = &Route_Redirect{msg}
		return true, err
	case 7: // action.direct_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DirectResponseAction)
		err := b.DecodeMessage(msg)
		m.Action = &Route_DirectResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Route_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Route)
	// action
	switch x := m.Action.(type) {
	case *Route_Route:
		s := proto.Size(x.Route)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Route_Redirect:
		s := proto.Size(x.Redirect)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Route_DirectResponse:
		s := proto.Size(x.DirectResponse)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Compared to the :ref:`cluster <envoy_api_field_route.RouteAction.cluster>` field that specifies a
// single upstream cluster as the target of a request, the :ref:`weighted_clusters
// <envoy_api_field_route.RouteAction.weighted_clusters>` option allows for specification of
// multiple upstream clusters along with weights that indicate the percentage of
// traffic to be forwarded to each cluster. The router selects an upstream cluster based on the
// weights.
type WeightedCluster struct {
	// Specifies one or more upstream clusters associated with the route.
	Clusters []*WeightedCluster_ClusterWeight `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	// Specifies the total weight across all clusters. The sum of all cluster weights must equal this
	// value, which must be greater than 0. Defaults to 100.
	TotalWeight *google_protobuf1.UInt32Value `protobuf:"bytes,3,opt,name=total_weight,json=totalWeight" json:"total_weight,omitempty"`
	// Specifies the runtime key prefix that should be used to construct the
	// runtime keys associated with each cluster. When the *runtime_key_prefix* is
	// specified, the router will look for weights associated with each upstream
	// cluster under the key *runtime_key_prefix* + "." + *cluster[i].name* where
	// *cluster[i]* denotes an entry in the clusters array field. If the runtime
	// key for the cluster does not exist, the value specified in the
	// configuration file will be used as the default weight. See the :ref:`runtime documentation
	// <operations_runtime>` for how key names map to the underlying implementation.
	RuntimeKeyPrefix string `protobuf:"bytes,2,opt,name=runtime_key_prefix,json=runtimeKeyPrefix" json:"runtime_key_prefix,omitempty"`
}

func (m *WeightedCluster) Reset()                    { *m = WeightedCluster{} }
func (m *WeightedCluster) String() string            { return proto.CompactTextString(m) }
func (*WeightedCluster) ProtoMessage()               {}
func (*WeightedCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WeightedCluster) GetClusters() []*WeightedCluster_ClusterWeight {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *WeightedCluster) GetTotalWeight() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.TotalWeight
	}
	return nil
}

func (m *WeightedCluster) GetRuntimeKeyPrefix() string {
	if m != nil {
		return m.RuntimeKeyPrefix
	}
	return ""
}

type WeightedCluster_ClusterWeight struct {
	// Name of the upstream cluster. The cluster must exist in the
	// :ref:`cluster manager configuration <config_cluster_manager>`.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// An integer between 0 and :ref:`total_weight
	// <envoy_api_field_route.WeightedCluster.total_weight>`. When a request matches the route,
	// the choice of an upstream cluster is determined by its weight. The sum of weights across all
	// entries in the clusters array must add up to the total_weight, which defaults to 100.
	Weight *google_protobuf1.UInt32Value `protobuf:"bytes,2,opt,name=weight" json:"weight,omitempty"`
	// Optional endpoint metadata match criteria. Only endpoints in the upstream
	// cluster with metadata matching that set in metadata_match will be
	// considered. The filter name should be specified as *envoy.lb*.
	MetadataMatch *envoy_api_v2_core.Metadata `protobuf:"bytes,3,opt,name=metadata_match,json=metadataMatch" json:"metadata_match,omitempty"`
	// Specifies a list of headers to be added to requests when this cluster is selected
	// through the enclosing :ref:`envoy_api_msg_route.RouteAction`.
	// Headers specified at this level are applied before headers from the enclosing
	// :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_route.VirtualHost`, and
	// :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	RequestHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,4,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// Specifies a list of headers to be added to responses when this cluster is selected
	// through the enclosing :ref:`envoy_api_msg_route.RouteAction`.
	// Headers specified at this level are applied before headers from the enclosing
	// :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_route.VirtualHost`, and
	// :ref:`envoy_api_msg_RouteConfiguration`. For more information, including details on
	// header value syntax, see the documentation on :ref:`custom request headers
	// <config_http_conn_man_headers_custom_request_headers>`.
	ResponseHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,5,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// Specifies a list of headers to be removed from responses when this cluster is selected
	// through the enclosing :ref:`envoy_api_msg_route.RouteAction`.
	ResponseHeadersToRemove []string `protobuf:"bytes,6,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// The per_filter_config field can be used to provide weighted cluster-specific
	// configurations for filters. The key should match the filter name, such as
	// *envoy.buffer* for the HTTP buffer filter. Use of this field is filter
	// specific; see the :ref:`HTTP filter documentation <config_http_filters>`
	// for if and how it is utilized.
	PerFilterConfig map[string]*google_protobuf.Struct `protobuf:"bytes,8,rep,name=per_filter_config,json=perFilterConfig" json:"per_filter_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *WeightedCluster_ClusterWeight) Reset()         { *m = WeightedCluster_ClusterWeight{} }
func (m *WeightedCluster_ClusterWeight) String() string { return proto.CompactTextString(m) }
func (*WeightedCluster_ClusterWeight) ProtoMessage()    {}
func (*WeightedCluster_ClusterWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

func (m *WeightedCluster_ClusterWeight) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WeightedCluster_ClusterWeight) GetWeight() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetMetadataMatch() *envoy_api_v2_core.Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetRequestHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetResponseHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *WeightedCluster_ClusterWeight) GetPerFilterConfig() map[string]*google_protobuf.Struct {
	if m != nil {
		return m.PerFilterConfig
	}
	return nil
}

type RouteMatch struct {
	// Types that are valid to be assigned to PathSpecifier:
	//	*RouteMatch_Prefix
	//	*RouteMatch_Path
	//	*RouteMatch_Regex
	PathSpecifier isRouteMatch_PathSpecifier `protobuf_oneof:"path_specifier"`
	// Indicates that prefix/path matching should be case insensitive. The default
	// is true.
	CaseSensitive *google_protobuf1.BoolValue `protobuf:"bytes,4,opt,name=case_sensitive,json=caseSensitive" json:"case_sensitive,omitempty"`
	// Indicates that the route should additionally match on a runtime key. An
	// integer between 0-100. Every time the route is considered for a match, a
	// random number between 0-99 is selected. If the number is <= the value found
	// in the key (checked first) or, if the key is not present, the default
	// value, the route is a match (assuming everything also about the route
	// matches). A runtime route configuration can be used to roll out route changes in a
	// gradual manner without full code/config deploys. Refer to the
	// :ref:`traffic shifting <config_http_conn_man_route_table_traffic_splitting_shift>` docs
	// for additional documentation.
	Runtime *envoy_api_v2_core.RuntimeUInt32 `protobuf:"bytes,5,opt,name=runtime" json:"runtime,omitempty"`
	// Specifies a set of headers that the route should match on. The router will
	// check the request’s headers against all the specified headers in the route
	// config. A match will happen if all the headers in the route are present in
	// the request with the same values (or based on presence if the value field
	// is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
	// Specifies a set of URL query parameters on which the route should
	// match. The router will check the query string from the *path* header
	// against all the specified query parameters. If the number of specified
	// query parameters is nonzero, they all must match the *path* header's
	// query string for a match to occur.
	QueryParameters []*QueryParameterMatcher `protobuf:"bytes,7,rep,name=query_parameters,json=queryParameters" json:"query_parameters,omitempty"`
}

func (m *RouteMatch) Reset()                    { *m = RouteMatch{} }
func (m *RouteMatch) String() string            { return proto.CompactTextString(m) }
func (*RouteMatch) ProtoMessage()               {}
func (*RouteMatch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isRouteMatch_PathSpecifier interface {
	isRouteMatch_PathSpecifier()
}

type RouteMatch_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,oneof"`
}
type RouteMatch_Path struct {
	Path string `protobuf:"bytes,2,opt,name=path,oneof"`
}
type RouteMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,oneof"`
}

func (*RouteMatch_Prefix) isRouteMatch_PathSpecifier() {}
func (*RouteMatch_Path) isRouteMatch_PathSpecifier()   {}
func (*RouteMatch_Regex) isRouteMatch_PathSpecifier()  {}

func (m *RouteMatch) GetPathSpecifier() isRouteMatch_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *RouteMatch) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *RouteMatch) GetPath() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Path); ok {
		return x.Path
	}
	return ""
}

func (m *RouteMatch) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*RouteMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *RouteMatch) GetCaseSensitive() *google_protobuf1.BoolValue {
	if m != nil {
		return m.CaseSensitive
	}
	return nil
}

func (m *RouteMatch) GetRuntime() *envoy_api_v2_core.RuntimeUInt32 {
	if m != nil {
		return m.Runtime
	}
	return nil
}

func (m *RouteMatch) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RouteMatch) GetQueryParameters() []*QueryParameterMatcher {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteMatch_OneofMarshaler, _RouteMatch_OneofUnmarshaler, _RouteMatch_OneofSizer, []interface{}{
		(*RouteMatch_Prefix)(nil),
		(*RouteMatch_Path)(nil),
		(*RouteMatch_Regex)(nil),
	}
}

func _RouteMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteMatch)
	// path_specifier
	switch x := m.PathSpecifier.(type) {
	case *RouteMatch_Prefix:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *RouteMatch_Path:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *RouteMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("RouteMatch.PathSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteMatch)
	switch tag {
	case 1: // path_specifier.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Prefix{x}
		return true, err
	case 2: // path_specifier.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Path{x}
		return true, err
	case 3: // path_specifier.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathSpecifier = &RouteMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _RouteMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteMatch)
	// path_specifier
	switch x := m.PathSpecifier.(type) {
	case *RouteMatch_Prefix:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *RouteMatch_Path:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *RouteMatch_Regex:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// [#comment:next free field: 9]
type CorsPolicy struct {
	// Specifies the origins that will be allowed to do CORS requests.
	//
	// An origin is allowed if either allow_origin or allow_origin_regex match.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin" json:"allow_origin,omitempty"`
	// Specifies regex patterns that match allowed origins.
	//
	// An origin is allowed if either allow_origin or allow_origin_regex match.
	AllowOriginRegex []string `protobuf:"bytes,8,rep,name=allow_origin_regex,json=allowOriginRegex" json:"allow_origin_regex,omitempty"`
	// Specifies the content for the *access-control-allow-methods* header.
	AllowMethods string `protobuf:"bytes,2,opt,name=allow_methods,json=allowMethods" json:"allow_methods,omitempty"`
	// Specifies the content for the *access-control-allow-headers* header.
	AllowHeaders string `protobuf:"bytes,3,opt,name=allow_headers,json=allowHeaders" json:"allow_headers,omitempty"`
	// Specifies the content for the *access-control-expose-headers* header.
	ExposeHeaders string `protobuf:"bytes,4,opt,name=expose_headers,json=exposeHeaders" json:"expose_headers,omitempty"`
	// Specifies the content for the *access-control-max-age* header.
	MaxAge string `protobuf:"bytes,5,opt,name=max_age,json=maxAge" json:"max_age,omitempty"`
	// Specifies whether the resource allows credentials.
	AllowCredentials *google_protobuf1.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials" json:"allow_credentials,omitempty"`
	// Specifies if CORS is enabled. Defaults to true. Only effective on route.
	Enabled *google_protobuf1.BoolValue `protobuf:"bytes,7,opt,name=enabled" json:"enabled,omitempty"`
}

func (m *CorsPolicy) Reset()                    { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string            { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()               {}
func (*CorsPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowOriginRegex() []string {
	if m != nil {
		return m.AllowOriginRegex
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() string {
	if m != nil {
		return m.AllowMethods
	}
	return ""
}

func (m *CorsPolicy) GetAllowHeaders() string {
	if m != nil {
		return m.AllowHeaders
	}
	return ""
}

func (m *CorsPolicy) GetExposeHeaders() string {
	if m != nil {
		return m.ExposeHeaders
	}
	return ""
}

func (m *CorsPolicy) GetMaxAge() string {
	if m != nil {
		return m.MaxAge
	}
	return ""
}

func (m *CorsPolicy) GetAllowCredentials() *google_protobuf1.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

func (m *CorsPolicy) GetEnabled() *google_protobuf1.BoolValue {
	if m != nil {
		return m.Enabled
	}
	return nil
}

// [#comment:next free field: 25]
type RouteAction struct {
	// Types that are valid to be assigned to ClusterSpecifier:
	//	*RouteAction_Cluster
	//	*RouteAction_ClusterHeader
	//	*RouteAction_WeightedClusters
	ClusterSpecifier isRouteAction_ClusterSpecifier `protobuf_oneof:"cluster_specifier"`
	// The HTTP status code to use when configured cluster is not found.
	// The default response code is 503 Service Unavailable.
	ClusterNotFoundResponseCode RouteAction_ClusterNotFoundResponseCode `protobuf:"varint,20,opt,name=cluster_not_found_response_code,json=clusterNotFoundResponseCode,enum=envoy.api.v2.route.RouteAction_ClusterNotFoundResponseCode" json:"cluster_not_found_response_code,omitempty"`
	// Optional endpoint metadata match criteria. Only endpoints in the upstream
	// cluster with metadata matching that set in metadata_match will be
	// considered. The filter name should be specified as *envoy.lb*.
	MetadataMatch *envoy_api_v2_core.Metadata `protobuf:"bytes,4,opt,name=metadata_match,json=metadataMatch" json:"metadata_match,omitempty"`
	// Indicates that during forwarding, the matched prefix (or path) should be
	// swapped with this value. This option allows application URLs to be rooted
	// at a different path from those exposed at the reverse proxy layer. The router filter will
	// place the original path before rewrite into the :ref:`x-envoy-original-path
	// <config_http_filters_router_x-envoy-original-path>` header.
	//
	// .. attention::
	//
	//   Pay careful attention to the use of trailing slashes in the
	//   :ref:`route's match <envoy_api_field_route.Route.match>` prefix value.
	//   Stripping a prefix from a path requires multiple Routes to handle all cases. For example,
	//   rewriting */prefix* to */* and */prefix/etc* to */etc* cannot be done in a single
	//   :ref:`Route <envoy_api_msg_route.Route>`, as shown by the below config entries:
	//
	//   .. code-block:: yaml
	//
	//     - match:
	//         prefix: "/prefix/"
	//       route:
	//         prefix_rewrite: "/"
	//     - match:
	//         prefix: "/prefix"
	//       route:
	//         prefix_rewrite: "/"
	//
	//   Having above entries in the config, requests to */prefix* will be stripped to */*, while
	//   requests to */prefix/etc* will be stripped to */etc*.
	PrefixRewrite string `protobuf:"bytes,5,opt,name=prefix_rewrite,json=prefixRewrite" json:"prefix_rewrite,omitempty"`
	// Types that are valid to be assigned to HostRewriteSpecifier:
	//	*RouteAction_HostRewrite
	//	*RouteAction_AutoHostRewrite
	HostRewriteSpecifier isRouteAction_HostRewriteSpecifier `protobuf_oneof:"host_rewrite_specifier"`
	// Specifies the upstream timeout for the route. If not specified, the default is 15s. This
	// spans between the point at which the entire downstream request (i.e. end-of-stream) has been
	// processed and when the upstream response has been completely processed.
	//
	// .. note::
	//
	//   This timeout includes all retries. See also
	//   :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`,
	//   :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`, and the
	//   :ref:`retry overview <arch_overview_http_routing_retry>`.
	Timeout *google_protobuf3.Duration `protobuf:"bytes,8,opt,name=timeout" json:"timeout,omitempty"`
	// Specifies the idle timeout for the route. If not specified, there is no per-route idle timeout
	// specified, although the connection manager wide :ref:`stream_idle_timeout
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.stream_idle_timeout>`
	// will still apply. A value of 0 will completely disable the route's idle timeout, even if a
	// connection manager stream idle timeout is configured.
	//
	// The idle timeout is distinct to :ref:`timeout
	// <envoy_api_field_route.RouteAction.timeout>`, which provides an upper bound
	// on the upstream response time; :ref:`idle_timeout
	// <envoy_api_field_route.RouteAction.idle_timeout>` instead bounds the amount
	// of time the request's stream may be idle.
	//
	// After header decoding, the idle timeout will apply on downstream and
	// upstream request events. Each time an encode/decode event for headers or
	// data is processed for the stream, the timer will be reset. If the timeout
	// fires, the stream is terminated with a 408 Request Timeout error code if no
	// upstream response header has been received, otherwise a stream reset
	// occurs.
	IdleTimeout *google_protobuf3.Duration `protobuf:"bytes,24,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	// Indicates that the route has a retry policy.
	RetryPolicy *RouteAction_RetryPolicy `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy" json:"retry_policy,omitempty"`
	// Indicates that the route has a request mirroring policy.
	RequestMirrorPolicy *RouteAction_RequestMirrorPolicy `protobuf:"bytes,10,opt,name=request_mirror_policy,json=requestMirrorPolicy" json:"request_mirror_policy,omitempty"`
	// Optionally specifies the :ref:`routing priority <arch_overview_http_routing_priority>`.
	// [#comment:TODO(htuch): add (validate.rules).enum.defined_only = true once
	// https://github.com/lyft/protoc-gen-validate/issues/42 is resolved.]
	Priority envoy_api_v2_core.RoutingPriority `protobuf:"varint,11,opt,name=priority,enum=envoy.api.v2.core.RoutingPriority" json:"priority,omitempty"`
	// [#not-implemented-hide:]
	RequestHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,12,rep,name=request_headers_to_add,json=requestHeadersToAdd" json:"request_headers_to_add,omitempty"`
	// [#not-implemented-hide:]
	ResponseHeadersToAdd []*envoy_api_v2_core.HeaderValueOption `protobuf:"bytes,18,rep,name=response_headers_to_add,json=responseHeadersToAdd" json:"response_headers_to_add,omitempty"`
	// [#not-implemented-hide:]
	ResponseHeadersToRemove []string `protobuf:"bytes,19,rep,name=response_headers_to_remove,json=responseHeadersToRemove" json:"response_headers_to_remove,omitempty"`
	// Specifies a set of rate limit configurations that could be applied to the
	// route.
	RateLimits []*RateLimit `protobuf:"bytes,13,rep,name=rate_limits,json=rateLimits" json:"rate_limits,omitempty"`
	// Specifies if the rate limit filter should include the virtual host rate
	// limits. By default, if the route configured rate limits, the virtual host
	// :ref:`rate_limits <envoy_api_field_route.VirtualHost.rate_limits>` are not applied to the
	// request.
	IncludeVhRateLimits *google_protobuf1.BoolValue `protobuf:"bytes,14,opt,name=include_vh_rate_limits,json=includeVhRateLimits" json:"include_vh_rate_limits,omitempty"`
	// Specifies a list of hash policies to use for ring hash load balancing. Each
	// hash policy is evaluated individually and the combined result is used to
	// route the request. The method of combination is deterministic such that
	// identical lists of hash policies will produce the same hash. Since a hash
	// policy examines specific parts of a request, it can fail to produce a hash
	// (i.e. if the hashed header is not present). If (and only if) all configured
	// hash policies fail to generate a hash, no hash will be produced for
	// the route. In this case, the behavior is the same as if no hash policies
	// were specified (i.e. the ring hash load balancer will choose a random
	// backend).
	HashPolicy []*RouteAction_HashPolicy `protobuf:"bytes,15,rep,name=hash_policy,json=hashPolicy" json:"hash_policy,omitempty"`
	// Indicates that a HTTP/1.1 client connection to this particular route is allowed to
	// upgrade to a WebSocket connection. The default is false.
	//
	// .. attention::
	//
	//   If a connection is upgraded to a WebSocket connection, Envoy will set up plain TCP
	//   proxying between the client and the upstream server. Hence, an upstream
	//   server that rejects the WebSocket upgrade request is also responsible for
	//   closing the associated connection. Until then, Envoy will continue to
	//   proxy data from the client to the upstream server.
	//
	//   Redirects are not supported on routes where WebSocket upgrades are allowed.
	UseWebsocket *google_protobuf1.BoolValue `protobuf:"bytes,16,opt,name=use_websocket,json=useWebsocket" json:"use_websocket,omitempty"`
	// Proxy configuration used for WebSocket connections. If unset, the default values as specified
	// in :ref:`TcpProxy <envoy_api_msg_config.filter.network.tcp_proxy.v2.TcpProxy>` are used.
	WebsocketConfig *RouteAction_WebSocketProxyConfig `protobuf:"bytes,22,opt,name=websocket_config,json=websocketConfig" json:"websocket_config,omitempty"`
	// Indicates that the route has a CORS policy.
	Cors *CorsPolicy `protobuf:"bytes,17,opt,name=cors" json:"cors,omitempty"`
	// If present, and the request is a gRPC request, use the
	// `grpc-timeout header <https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md>`_,
	// or its default value (infinity) instead of
	// :ref:`timeout <envoy_api_field_route.RouteAction.timeout>`, but limit the applied timeout
	// to the maximum value specified here. If configured as 0, the maximum allowed timeout for
	// gRPC requests is infinity. If not configured at all, the `grpc-timeout` header is not used
	// and gRPC requests time out like any other requests using
	// :ref:`timeout <envoy_api_field_route.RouteAction.timeout>` or its default.
	// This can be used to prevent unexpected upstream request timeouts due to potentially long
	// time gaps between gRPC request and response in gRPC streaming mode.
	MaxGrpcTimeout *google_protobuf3.Duration `protobuf:"bytes,23,opt,name=max_grpc_timeout,json=maxGrpcTimeout" json:"max_grpc_timeout,omitempty"`
}

func (m *RouteAction) Reset()                    { *m = RouteAction{} }
func (m *RouteAction) String() string            { return proto.CompactTextString(m) }
func (*RouteAction) ProtoMessage()               {}
func (*RouteAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isRouteAction_ClusterSpecifier interface {
	isRouteAction_ClusterSpecifier()
}
type isRouteAction_HostRewriteSpecifier interface {
	isRouteAction_HostRewriteSpecifier()
}

type RouteAction_Cluster struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster,oneof"`
}
type RouteAction_ClusterHeader struct {
	ClusterHeader string `protobuf:"bytes,2,opt,name=cluster_header,json=clusterHeader,oneof"`
}
type RouteAction_WeightedClusters struct {
	WeightedClusters *WeightedCluster `protobuf:"bytes,3,opt,name=weighted_clusters,json=weightedClusters,oneof"`
}
type RouteAction_HostRewrite struct {
	HostRewrite string `protobuf:"bytes,6,opt,name=host_rewrite,json=hostRewrite,oneof"`
}
type RouteAction_AutoHostRewrite struct {
	AutoHostRewrite *google_protobuf1.BoolValue `protobuf:"bytes,7,opt,name=auto_host_rewrite,json=autoHostRewrite,oneof"`
}

func (*RouteAction_Cluster) isRouteAction_ClusterSpecifier()             {}
func (*RouteAction_ClusterHeader) isRouteAction_ClusterSpecifier()       {}
func (*RouteAction_WeightedClusters) isRouteAction_ClusterSpecifier()    {}
func (*RouteAction_HostRewrite) isRouteAction_HostRewriteSpecifier()     {}
func (*RouteAction_AutoHostRewrite) isRouteAction_HostRewriteSpecifier() {}

func (m *RouteAction) GetClusterSpecifier() isRouteAction_ClusterSpecifier {
	if m != nil {
		return m.ClusterSpecifier
	}
	return nil
}
func (m *RouteAction) GetHostRewriteSpecifier() isRouteAction_HostRewriteSpecifier {
	if m != nil {
		return m.HostRewriteSpecifier
	}
	return nil
}

func (m *RouteAction) GetCluster() string {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_Cluster); ok {
		return x.Cluster
	}
	return ""
}

func (m *RouteAction) GetClusterHeader() string {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_ClusterHeader); ok {
		return x.ClusterHeader
	}
	return ""
}

func (m *RouteAction) GetWeightedClusters() *WeightedCluster {
	if x, ok := m.GetClusterSpecifier().(*RouteAction_WeightedClusters); ok {
		return x.WeightedClusters
	}
	return nil
}

func (m *RouteAction) GetClusterNotFoundResponseCode() RouteAction_ClusterNotFoundResponseCode {
	if m != nil {
		return m.ClusterNotFoundResponseCode
	}
	return RouteAction_SERVICE_UNAVAILABLE
}

func (m *RouteAction) GetMetadataMatch() *envoy_api_v2_core.Metadata {
	if m != nil {
		return m.MetadataMatch
	}
	return nil
}

func (m *RouteAction) GetPrefixRewrite() string {
	if m != nil {
		return m.PrefixRewrite
	}
	return ""
}

func (m *RouteAction) GetHostRewrite() string {
	if x, ok := m.GetHostRewriteSpecifier().(*RouteAction_HostRewrite); ok {
		return x.HostRewrite
	}
	return ""
}

func (m *RouteAction) GetAutoHostRewrite() *google_protobuf1.BoolValue {
	if x, ok := m.GetHostRewriteSpecifier().(*RouteAction_AutoHostRewrite); ok {
		return x.AutoHostRewrite
	}
	return nil
}

func (m *RouteAction) GetTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *RouteAction) GetIdleTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *RouteAction) GetRetryPolicy() *RouteAction_RetryPolicy {
	if m != nil {
		return m.RetryPolicy
	}
	return nil
}

func (m *RouteAction) GetRequestMirrorPolicy() *RouteAction_RequestMirrorPolicy {
	if m != nil {
		return m.RequestMirrorPolicy
	}
	return nil
}

func (m *RouteAction) GetPriority() envoy_api_v2_core.RoutingPriority {
	if m != nil {
		return m.Priority
	}
	return envoy_api_v2_core.RoutingPriority_DEFAULT
}

func (m *RouteAction) GetRequestHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.RequestHeadersToAdd
	}
	return nil
}

func (m *RouteAction) GetResponseHeadersToAdd() []*envoy_api_v2_core.HeaderValueOption {
	if m != nil {
		return m.ResponseHeadersToAdd
	}
	return nil
}

func (m *RouteAction) GetResponseHeadersToRemove() []string {
	if m != nil {
		return m.ResponseHeadersToRemove
	}
	return nil
}

func (m *RouteAction) GetRateLimits() []*RateLimit {
	if m != nil {
		return m.RateLimits
	}
	return nil
}

func (m *RouteAction) GetIncludeVhRateLimits() *google_protobuf1.BoolValue {
	if m != nil {
		return m.IncludeVhRateLimits
	}
	return nil
}

func (m *RouteAction) GetHashPolicy() []*RouteAction_HashPolicy {
	if m != nil {
		return m.HashPolicy
	}
	return nil
}

func (m *RouteAction) GetUseWebsocket() *google_protobuf1.BoolValue {
	if m != nil {
		return m.UseWebsocket
	}
	return nil
}

func (m *RouteAction) GetWebsocketConfig() *RouteAction_WebSocketProxyConfig {
	if m != nil {
		return m.WebsocketConfig
	}
	return nil
}

func (m *RouteAction) GetCors() *CorsPolicy {
	if m != nil {
		return m.Cors
	}
	return nil
}

func (m *RouteAction) GetMaxGrpcTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.MaxGrpcTimeout
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteAction_OneofMarshaler, _RouteAction_OneofUnmarshaler, _RouteAction_OneofSizer, []interface{}{
		(*RouteAction_Cluster)(nil),
		(*RouteAction_ClusterHeader)(nil),
		(*RouteAction_WeightedClusters)(nil),
		(*RouteAction_HostRewrite)(nil),
		(*RouteAction_AutoHostRewrite)(nil),
	}
}

func _RouteAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteAction)
	// cluster_specifier
	switch x := m.ClusterSpecifier.(type) {
	case *RouteAction_Cluster:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Cluster)
	case *RouteAction_ClusterHeader:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ClusterHeader)
	case *RouteAction_WeightedClusters:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.WeightedClusters); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction.ClusterSpecifier has unexpected type %T", x)
	}
	// host_rewrite_specifier
	switch x := m.HostRewriteSpecifier.(type) {
	case *RouteAction_HostRewrite:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.HostRewrite)
	case *RouteAction_AutoHostRewrite:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AutoHostRewrite); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction.HostRewriteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteAction)
	switch tag {
	case 1: // cluster_specifier.cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClusterSpecifier = &RouteAction_Cluster{x}
		return true, err
	case 2: // cluster_specifier.cluster_header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClusterSpecifier = &RouteAction_ClusterHeader{x}
		return true, err
	case 3: // cluster_specifier.weighted_clusters
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(WeightedCluster)
		err := b.DecodeMessage(msg)
		m.ClusterSpecifier = &RouteAction_WeightedClusters{msg}
		return true, err
	case 6: // host_rewrite_specifier.host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HostRewriteSpecifier = &RouteAction_HostRewrite{x}
		return true, err
	case 7: // host_rewrite_specifier.auto_host_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.BoolValue)
		err := b.DecodeMessage(msg)
		m.HostRewriteSpecifier = &RouteAction_AutoHostRewrite{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteAction)
	// cluster_specifier
	switch x := m.ClusterSpecifier.(type) {
	case *RouteAction_Cluster:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Cluster)))
		n += len(x.Cluster)
	case *RouteAction_ClusterHeader:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ClusterHeader)))
		n += len(x.ClusterHeader)
	case *RouteAction_WeightedClusters:
		s := proto.Size(x.WeightedClusters)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// host_rewrite_specifier
	switch x := m.HostRewriteSpecifier.(type) {
	case *RouteAction_HostRewrite:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.HostRewrite)))
		n += len(x.HostRewrite)
	case *RouteAction_AutoHostRewrite:
		s := proto.Size(x.AutoHostRewrite)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// HTTP retry :ref:`architecture overview <arch_overview_http_routing_retry>`.
type RouteAction_RetryPolicy struct {
	// Specifies the conditions under which retry takes place. These are the same
	// conditions documented for :ref:`config_http_filters_router_x-envoy-retry-on` and
	// :ref:`config_http_filters_router_x-envoy-retry-grpc-on`.
	RetryOn string `protobuf:"bytes,1,opt,name=retry_on,json=retryOn" json:"retry_on,omitempty"`
	// Specifies the allowed number of retries. This parameter is optional and
	// defaults to 1. These are the same conditions documented for
	// :ref:`config_http_filters_router_x-envoy-max-retries`.
	NumRetries *google_protobuf1.UInt32Value `protobuf:"bytes,2,opt,name=num_retries,json=numRetries" json:"num_retries,omitempty"`
	// Specifies a non-zero upstream timeout per retry attempt. This parameter is optional. The
	// same conditions documented for
	// :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms` apply.
	//
	// .. note::
	//
	//   If left unspecified, Envoy will use the global
	//   :ref:`route timeout <envoy_api_field_route.RouteAction.timeout>` for the request.
	//   Consequently, when using a :ref:`5xx <config_http_filters_router_x-envoy-retry-on>` based
	//   retry policy, a request that times out will not be retried as the total timeout budget
	//   would have been exhausted.
	PerTryTimeout *google_protobuf3.Duration `protobuf:"bytes,3,opt,name=per_try_timeout,json=perTryTimeout" json:"per_try_timeout,omitempty"`
}

func (m *RouteAction_RetryPolicy) Reset()                    { *m = RouteAction_RetryPolicy{} }
func (m *RouteAction_RetryPolicy) String() string            { return proto.CompactTextString(m) }
func (*RouteAction_RetryPolicy) ProtoMessage()               {}
func (*RouteAction_RetryPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *RouteAction_RetryPolicy) GetRetryOn() string {
	if m != nil {
		return m.RetryOn
	}
	return ""
}

func (m *RouteAction_RetryPolicy) GetNumRetries() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.NumRetries
	}
	return nil
}

func (m *RouteAction_RetryPolicy) GetPerTryTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

// The router is capable of shadowing traffic from one cluster to another. The current
// implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
// respond before returning the response from the primary cluster. All normal statistics are
// collected for the shadow cluster making this feature useful for testing.
//
// During shadowing, the host/authority header is altered such that *-shadow* is appended. This is
// useful for logging. For example, *cluster1* becomes *cluster1-shadow*.
type RouteAction_RequestMirrorPolicy struct {
	// Specifies the cluster that requests will be mirrored to. The cluster must
	// exist in the cluster manager configuration.
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	// If not specified, all requests to the target cluster will be mirrored. If
	// specified, Envoy will lookup the runtime key to get the % of requests to
	// mirror. Valid values are from 0 to 10000, allowing for increments of
	// 0.01% of requests to be mirrored. If the runtime key is specified in the
	// configuration but not present in runtime, 0 is the default and thus 0% of
	// requests will be mirrored.
	RuntimeKey string `protobuf:"bytes,2,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RouteAction_RequestMirrorPolicy) Reset()         { *m = RouteAction_RequestMirrorPolicy{} }
func (m *RouteAction_RequestMirrorPolicy) String() string { return proto.CompactTextString(m) }
func (*RouteAction_RequestMirrorPolicy) ProtoMessage()    {}
func (*RouteAction_RequestMirrorPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 1}
}

func (m *RouteAction_RequestMirrorPolicy) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RouteAction_RequestMirrorPolicy) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

// Specifies the route's hashing policy if the upstream cluster uses a hashing :ref:`load balancer
// <arch_overview_load_balancing_types>`.
type RouteAction_HashPolicy struct {
	// Types that are valid to be assigned to PolicySpecifier:
	//	*RouteAction_HashPolicy_Header_
	//	*RouteAction_HashPolicy_Cookie_
	//	*RouteAction_HashPolicy_ConnectionProperties_
	PolicySpecifier isRouteAction_HashPolicy_PolicySpecifier `protobuf_oneof:"policy_specifier"`
}

func (m *RouteAction_HashPolicy) Reset()                    { *m = RouteAction_HashPolicy{} }
func (m *RouteAction_HashPolicy) String() string            { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy) ProtoMessage()               {}
func (*RouteAction_HashPolicy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 2} }

type isRouteAction_HashPolicy_PolicySpecifier interface {
	isRouteAction_HashPolicy_PolicySpecifier()
}

type RouteAction_HashPolicy_Header_ struct {
	Header *RouteAction_HashPolicy_Header `protobuf:"bytes,1,opt,name=header,oneof"`
}
type RouteAction_HashPolicy_Cookie_ struct {
	Cookie *RouteAction_HashPolicy_Cookie `protobuf:"bytes,2,opt,name=cookie,oneof"`
}
type RouteAction_HashPolicy_ConnectionProperties_ struct {
	ConnectionProperties *RouteAction_HashPolicy_ConnectionProperties `protobuf:"bytes,3,opt,name=connection_properties,json=connectionProperties,oneof"`
}

func (*RouteAction_HashPolicy_Header_) isRouteAction_HashPolicy_PolicySpecifier()               {}
func (*RouteAction_HashPolicy_Cookie_) isRouteAction_HashPolicy_PolicySpecifier()               {}
func (*RouteAction_HashPolicy_ConnectionProperties_) isRouteAction_HashPolicy_PolicySpecifier() {}

func (m *RouteAction_HashPolicy) GetPolicySpecifier() isRouteAction_HashPolicy_PolicySpecifier {
	if m != nil {
		return m.PolicySpecifier
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetHeader() *RouteAction_HashPolicy_Header {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_Header_); ok {
		return x.Header
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetCookie() *RouteAction_HashPolicy_Cookie {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_Cookie_); ok {
		return x.Cookie
	}
	return nil
}

func (m *RouteAction_HashPolicy) GetConnectionProperties() *RouteAction_HashPolicy_ConnectionProperties {
	if x, ok := m.GetPolicySpecifier().(*RouteAction_HashPolicy_ConnectionProperties_); ok {
		return x.ConnectionProperties
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RouteAction_HashPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RouteAction_HashPolicy_OneofMarshaler, _RouteAction_HashPolicy_OneofUnmarshaler, _RouteAction_HashPolicy_OneofSizer, []interface{}{
		(*RouteAction_HashPolicy_Header_)(nil),
		(*RouteAction_HashPolicy_Cookie_)(nil),
		(*RouteAction_HashPolicy_ConnectionProperties_)(nil),
	}
}

func _RouteAction_HashPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RouteAction_HashPolicy)
	// policy_specifier
	switch x := m.PolicySpecifier.(type) {
	case *RouteAction_HashPolicy_Header_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Header); err != nil {
			return err
		}
	case *RouteAction_HashPolicy_Cookie_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cookie); err != nil {
			return err
		}
	case *RouteAction_HashPolicy_ConnectionProperties_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ConnectionProperties); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RouteAction_HashPolicy.PolicySpecifier has unexpected type %T", x)
	}
	return nil
}

func _RouteAction_HashPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RouteAction_HashPolicy)
	switch tag {
	case 1: // policy_specifier.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_Header)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_Header_{msg}
		return true, err
	case 2: // policy_specifier.cookie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_Cookie)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_Cookie_{msg}
		return true, err
	case 3: // policy_specifier.connection_properties
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RouteAction_HashPolicy_ConnectionProperties)
		err := b.DecodeMessage(msg)
		m.PolicySpecifier = &RouteAction_HashPolicy_ConnectionProperties_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RouteAction_HashPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RouteAction_HashPolicy)
	// policy_specifier
	switch x := m.PolicySpecifier.(type) {
	case *RouteAction_HashPolicy_Header_:
		s := proto.Size(x.Header)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteAction_HashPolicy_Cookie_:
		s := proto.Size(x.Cookie)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RouteAction_HashPolicy_ConnectionProperties_:
		s := proto.Size(x.ConnectionProperties)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RouteAction_HashPolicy_Header struct {
	// The name of the request header that will be used to obtain the hash
	// key. If the request header is not present, no hash will be produced.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName" json:"header_name,omitempty"`
}

func (m *RouteAction_HashPolicy_Header) Reset()         { *m = RouteAction_HashPolicy_Header{} }
func (m *RouteAction_HashPolicy_Header) String() string { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy_Header) ProtoMessage()    {}
func (*RouteAction_HashPolicy_Header) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 2, 0}
}

func (m *RouteAction_HashPolicy_Header) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

// Envoy supports two types of cookie affinity:
//
// 1. Passive. Envoy takes a cookie that's present in the cookies header and
//    hashes on its value.
//
// 2. Generated. Envoy generates and sets a cookie with an expiration (TTL)
//    on the first request from the client in its response to the client,
//    based on the endpoint the request gets sent to. The client then
//    presents this on the next and all subsequent requests. The hash of
//    this is sufficient to ensure these requests get sent to the same
//    endpoint. The cookie is generated by hashing the source and
//    destination ports and addresses so that multiple independent HTTP2
//    streams on the same connection will independently receive the same
//    cookie, even if they arrive at the Envoy simultaneously.
type RouteAction_HashPolicy_Cookie struct {
	// The name of the cookie that will be used to obtain the hash key. If the
	// cookie is not present and ttl below is not set, no hash will be
	// produced.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// If specified, a cookie with the TTL will be generated if the cookie is
	// not present. If the TTL is present and zero, the generated cookie will
	// be a session cookie.
	Ttl *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=ttl" json:"ttl,omitempty"`
	// The name of the path for the cookie. If no path is specified here, no path
	// will be set for the cookie.
	Path string `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (m *RouteAction_HashPolicy_Cookie) Reset()         { *m = RouteAction_HashPolicy_Cookie{} }
func (m *RouteAction_HashPolicy_Cookie) String() string { return proto.CompactTextString(m) }
func (*RouteAction_HashPolicy_Cookie) ProtoMessage()    {}
func (*RouteAction_HashPolicy_Cookie) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 2, 1}
}

func (m *RouteAction_HashPolicy_Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RouteAction_HashPolicy_Cookie) GetTtl() *google_protobuf3.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

func (m *RouteAction_HashPolicy_Cookie) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type RouteAction_HashPolicy_ConnectionProperties struct {
	// Hash on source IP address.
	SourceIp bool `protobuf:"varint,1,opt,name=source_ip,json=sourceIp" json:"source_ip,omitempty"`
}

func (m *RouteAction_HashPolicy_ConnectionProperties) Reset() {
	*m = RouteAction_HashPolicy_ConnectionProperties{}
}
func (m *RouteAction_HashPolicy_ConnectionProperties) String() string {
	return proto.CompactTextString(m)
}
func (*RouteAction_HashPolicy_ConnectionProperties) ProtoMessage() {}
func (*RouteAction_HashPolicy_ConnectionProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 2, 2}
}

func (m *RouteAction_HashPolicy_ConnectionProperties) GetSourceIp() bool {
	if m != nil {
		return m.SourceIp
	}
	return false
}

type RouteAction_WebSocketProxyConfig struct {
	// See :ref:`stat_prefix
	// <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.stat_prefix>`. If the parameter
	// is not specified, the default value of "websocket" is used.
	//
	// WebSocket connections support the :ref:`downstream statistics
	// <config_network_filters_tcp_proxy_stats>` for TCP proxy, except for the following, which are
	// reported in the :ref:`HTTP Connection Manager statistics <config_http_conn_man_stats>`:
	// - downstream_cx_tx_bytes_total
	// - downstream_cx_tx_bytes_buffered
	// - downstream_cx_rx_bytes_total
	// - downstream_cx_rx_bytes_buffered
	StatPrefix string `protobuf:"bytes,1,opt,name=stat_prefix,json=statPrefix" json:"stat_prefix,omitempty"`
	// See :ref:`idle_timeout
	// <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.idle_timeout>`. This timeout is
	// only in effect after the WebSocket upgrade request is received by Envoy. It does not cover
	// the initial part of the HTTP request.
	IdleTimeout *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=idle_timeout,json=idleTimeout" json:"idle_timeout,omitempty"`
	// See :ref:`max_connect_attempts
	// <envoy_api_field_config.filter.network.tcp_proxy.v2.TcpProxy.max_connect_attempts>`.
	MaxConnectAttempts *google_protobuf1.UInt32Value `protobuf:"bytes,3,opt,name=max_connect_attempts,json=maxConnectAttempts" json:"max_connect_attempts,omitempty"`
}

func (m *RouteAction_WebSocketProxyConfig) Reset()         { *m = RouteAction_WebSocketProxyConfig{} }
func (m *RouteAction_WebSocketProxyConfig) String() string { return proto.CompactTextString(m) }
func (*RouteAction_WebSocketProxyConfig) ProtoMessage()    {}
func (*RouteAction_WebSocketProxyConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5, 3}
}

func (m *RouteAction_WebSocketProxyConfig) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *RouteAction_WebSocketProxyConfig) GetIdleTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *RouteAction_WebSocketProxyConfig) GetMaxConnectAttempts() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.MaxConnectAttempts
	}
	return nil
}

type RedirectAction struct {
	// The host portion of the URL will be swapped with this value.
	HostRedirect string `protobuf:"bytes,1,opt,name=host_redirect,json=hostRedirect" json:"host_redirect,omitempty"`
	// Types that are valid to be assigned to PathRewriteSpecifier:
	//	*RedirectAction_PathRedirect
	//	*RedirectAction_PrefixRewrite
	PathRewriteSpecifier isRedirectAction_PathRewriteSpecifier `protobuf_oneof:"path_rewrite_specifier"`
	// The HTTP status code to use in the redirect response. The default response
	// code is MOVED_PERMANENTLY (301).
	ResponseCode RedirectAction_RedirectResponseCode `protobuf:"varint,3,opt,name=response_code,json=responseCode,enum=envoy.api.v2.route.RedirectAction_RedirectResponseCode" json:"response_code,omitempty"`
	// The scheme portion of the URL will be swapped with "https".
	HttpsRedirect bool `protobuf:"varint,4,opt,name=https_redirect,json=httpsRedirect" json:"https_redirect,omitempty"`
	// Indicates that during redirection, the query portion of the URL will
	// be removed. Default value is false.
	StripQuery bool `protobuf:"varint,6,opt,name=strip_query,json=stripQuery" json:"strip_query,omitempty"`
}

func (m *RedirectAction) Reset()                    { *m = RedirectAction{} }
func (m *RedirectAction) String() string            { return proto.CompactTextString(m) }
func (*RedirectAction) ProtoMessage()               {}
func (*RedirectAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isRedirectAction_PathRewriteSpecifier interface {
	isRedirectAction_PathRewriteSpecifier()
}

type RedirectAction_PathRedirect struct {
	PathRedirect string `protobuf:"bytes,2,opt,name=path_redirect,json=pathRedirect,oneof"`
}
type RedirectAction_PrefixRewrite struct {
	PrefixRewrite string `protobuf:"bytes,5,opt,name=prefix_rewrite,json=prefixRewrite,oneof"`
}

func (*RedirectAction_PathRedirect) isRedirectAction_PathRewriteSpecifier()  {}
func (*RedirectAction_PrefixRewrite) isRedirectAction_PathRewriteSpecifier() {}

func (m *RedirectAction) GetPathRewriteSpecifier() isRedirectAction_PathRewriteSpecifier {
	if m != nil {
		return m.PathRewriteSpecifier
	}
	return nil
}

func (m *RedirectAction) GetHostRedirect() string {
	if m != nil {
		return m.HostRedirect
	}
	return ""
}

func (m *RedirectAction) GetPathRedirect() string {
	if x, ok := m.GetPathRewriteSpecifier().(*RedirectAction_PathRedirect); ok {
		return x.PathRedirect
	}
	return ""
}

func (m *RedirectAction) GetPrefixRewrite() string {
	if x, ok := m.GetPathRewriteSpecifier().(*RedirectAction_PrefixRewrite); ok {
		return x.PrefixRewrite
	}
	return ""
}

func (m *RedirectAction) GetResponseCode() RedirectAction_RedirectResponseCode {
	if m != nil {
		return m.ResponseCode
	}
	return RedirectAction_MOVED_PERMANENTLY
}

func (m *RedirectAction) GetHttpsRedirect() bool {
	if m != nil {
		return m.HttpsRedirect
	}
	return false
}

func (m *RedirectAction) GetStripQuery() bool {
	if m != nil {
		return m.StripQuery
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RedirectAction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RedirectAction_OneofMarshaler, _RedirectAction_OneofUnmarshaler, _RedirectAction_OneofSizer, []interface{}{
		(*RedirectAction_PathRedirect)(nil),
		(*RedirectAction_PrefixRewrite)(nil),
	}
}

func _RedirectAction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RedirectAction)
	// path_rewrite_specifier
	switch x := m.PathRewriteSpecifier.(type) {
	case *RedirectAction_PathRedirect:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PathRedirect)
	case *RedirectAction_PrefixRewrite:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PrefixRewrite)
	case nil:
	default:
		return fmt.Errorf("RedirectAction.PathRewriteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RedirectAction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RedirectAction)
	switch tag {
	case 2: // path_rewrite_specifier.path_redirect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathRewriteSpecifier = &RedirectAction_PathRedirect{x}
		return true, err
	case 5: // path_rewrite_specifier.prefix_rewrite
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.PathRewriteSpecifier = &RedirectAction_PrefixRewrite{x}
		return true, err
	default:
		return false, nil
	}
}

func _RedirectAction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RedirectAction)
	// path_rewrite_specifier
	switch x := m.PathRewriteSpecifier.(type) {
	case *RedirectAction_PathRedirect:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PathRedirect)))
		n += len(x.PathRedirect)
	case *RedirectAction_PrefixRewrite:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PrefixRewrite)))
		n += len(x.PrefixRewrite)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DirectResponseAction struct {
	// Specifies the HTTP response status to be returned.
	Status uint32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	// Specifies the content of the response body. If this setting is omitted,
	// no body is included in the generated response.
	//
	// .. note::
	//
	//   Headers can be specified using *response_headers_to_add* in the enclosing
	//   :ref:`envoy_api_msg_route.Route`, :ref:`envoy_api_msg_RouteConfiguration` or
	//   :ref:`envoy_api_msg_route.VirtualHost`.
	Body *envoy_api_v2_core.DataSource `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *DirectResponseAction) Reset()                    { *m = DirectResponseAction{} }
func (m *DirectResponseAction) String() string            { return proto.CompactTextString(m) }
func (*DirectResponseAction) ProtoMessage()               {}
func (*DirectResponseAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DirectResponseAction) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *DirectResponseAction) GetBody() *envoy_api_v2_core.DataSource {
	if m != nil {
		return m.Body
	}
	return nil
}

type Decorator struct {
	// The operation name associated with the request matched to this route. If tracing is
	// enabled, this information will be used as the span name reported for this request.
	//
	// .. note::
	//
	//   For ingress (inbound) requests, or egress (outbound) responses, this value may be overridden
	//   by the :ref:`x-envoy-decorator-operation
	//   <config_http_filters_router_x-envoy-decorator-operation>` header.
	Operation string `protobuf:"bytes,1,opt,name=operation" json:"operation,omitempty"`
}

func (m *Decorator) Reset()                    { *m = Decorator{} }
func (m *Decorator) String() string            { return proto.CompactTextString(m) }
func (*Decorator) ProtoMessage()               {}
func (*Decorator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Decorator) GetOperation() string {
	if m != nil {
		return m.Operation
	}
	return ""
}

// A virtual cluster is a way of specifying a regex matching rule against
// certain important endpoints such that statistics are generated explicitly for
// the matched requests. The reason this is useful is that when doing
// prefix/path matching Envoy does not always know what the application
// considers to be an endpoint. Thus, it’s impossible for Envoy to generically
// emit per endpoint statistics. However, often systems have highly critical
// endpoints that they wish to get “perfect” statistics on. Virtual cluster
// statistics are perfect in the sense that they are emitted on the downstream
// side such that they include network level failures.
//
// Documentation for :ref:`virtual cluster statistics <config_http_filters_router_stats>`.
//
// .. note::
//
//    Virtual clusters are a useful tool, but we do not recommend setting up a virtual cluster for
//    every application endpoint. This is both not easily maintainable and as well the matching and
//    statistics output are not free.
type VirtualCluster struct {
	// Specifies a regex pattern to use for matching requests. The entire path of the request
	// must match the regex. The regex grammar used is defined `here
	// <http://en.cppreference.com/w/cpp/regex/ecmascript>`_.
	//
	// Examples:
	//
	// * The regex */rides/\d+* matches the path */rides/0*
	// * The regex */rides/\d+* matches the path */rides/123*
	// * The regex */rides/\d+* does not match the path */rides/123/456*
	Pattern string `protobuf:"bytes,1,opt,name=pattern" json:"pattern,omitempty"`
	//  Specifies the name of the virtual cluster. The virtual cluster name as well
	// as the virtual host name are used when emitting statistics. The statistics are emitted by the
	// router filter and are documented :ref:`here <config_http_filters_router_stats>`.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Optionally specifies the HTTP method to match on. For example GET, PUT,
	// etc.
	// [#comment:TODO(htuch): add (validate.rules).enum.defined_only = true once
	// https://github.com/lyft/protoc-gen-validate/issues/42 is resolved.]
	Method envoy_api_v2_core.RequestMethod `protobuf:"varint,3,opt,name=method,enum=envoy.api.v2.core.RequestMethod" json:"method,omitempty"`
}

func (m *VirtualCluster) Reset()                    { *m = VirtualCluster{} }
func (m *VirtualCluster) String() string            { return proto.CompactTextString(m) }
func (*VirtualCluster) ProtoMessage()               {}
func (*VirtualCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VirtualCluster) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *VirtualCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VirtualCluster) GetMethod() envoy_api_v2_core.RequestMethod {
	if m != nil {
		return m.Method
	}
	return envoy_api_v2_core.RequestMethod_METHOD_UNSPECIFIED
}

// Global rate limiting :ref:`architecture overview <arch_overview_rate_limit>`.
type RateLimit struct {
	// Refers to the stage set in the filter. The rate limit configuration only
	// applies to filters with the same stage number. The default stage number is
	// 0.
	//
	// .. note::
	//
	//   The filter supports a range of 0 - 10 inclusively for stage numbers.
	Stage *google_protobuf1.UInt32Value `protobuf:"bytes,1,opt,name=stage" json:"stage,omitempty"`
	// The key to be set in runtime to disable this rate limit configuration.
	DisableKey string `protobuf:"bytes,2,opt,name=disable_key,json=disableKey" json:"disable_key,omitempty"`
	// A list of actions that are to be applied for this rate limit configuration.
	// Order matters as the actions are processed sequentially and the descriptor
	// is composed by appending descriptor entries in that sequence. If an action
	// cannot append a descriptor entry, no descriptor is generated for the
	// configuration. See :ref:`composing actions
	// <config_http_filters_rate_limit_composing_actions>` for additional documentation.
	Actions []*RateLimit_Action `protobuf:"bytes,3,rep,name=actions" json:"actions,omitempty"`
}

func (m *RateLimit) Reset()                    { *m = RateLimit{} }
func (m *RateLimit) String() string            { return proto.CompactTextString(m) }
func (*RateLimit) ProtoMessage()               {}
func (*RateLimit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *RateLimit) GetStage() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *RateLimit) GetDisableKey() string {
	if m != nil {
		return m.DisableKey
	}
	return ""
}

func (m *RateLimit) GetActions() []*RateLimit_Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type RateLimit_Action struct {
	// Types that are valid to be assigned to ActionSpecifier:
	//	*RateLimit_Action_SourceCluster_
	//	*RateLimit_Action_DestinationCluster_
	//	*RateLimit_Action_RequestHeaders_
	//	*RateLimit_Action_RemoteAddress_
	//	*RateLimit_Action_GenericKey_
	//	*RateLimit_Action_HeaderValueMatch_
	ActionSpecifier isRateLimit_Action_ActionSpecifier `protobuf_oneof:"action_specifier"`
}

func (m *RateLimit_Action) Reset()                    { *m = RateLimit_Action{} }
func (m *RateLimit_Action) String() string            { return proto.CompactTextString(m) }
func (*RateLimit_Action) ProtoMessage()               {}
func (*RateLimit_Action) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10, 0} }

type isRateLimit_Action_ActionSpecifier interface {
	isRateLimit_Action_ActionSpecifier()
}

type RateLimit_Action_SourceCluster_ struct {
	SourceCluster *RateLimit_Action_SourceCluster `protobuf:"bytes,1,opt,name=source_cluster,json=sourceCluster,oneof"`
}
type RateLimit_Action_DestinationCluster_ struct {
	DestinationCluster *RateLimit_Action_DestinationCluster `protobuf:"bytes,2,opt,name=destination_cluster,json=destinationCluster,oneof"`
}
type RateLimit_Action_RequestHeaders_ struct {
	RequestHeaders *RateLimit_Action_RequestHeaders `protobuf:"bytes,3,opt,name=request_headers,json=requestHeaders,oneof"`
}
type RateLimit_Action_RemoteAddress_ struct {
	RemoteAddress *RateLimit_Action_RemoteAddress `protobuf:"bytes,4,opt,name=remote_address,json=remoteAddress,oneof"`
}
type RateLimit_Action_GenericKey_ struct {
	GenericKey *RateLimit_Action_GenericKey `protobuf:"bytes,5,opt,name=generic_key,json=genericKey,oneof"`
}
type RateLimit_Action_HeaderValueMatch_ struct {
	HeaderValueMatch *RateLimit_Action_HeaderValueMatch `protobuf:"bytes,6,opt,name=header_value_match,json=headerValueMatch,oneof"`
}

func (*RateLimit_Action_SourceCluster_) isRateLimit_Action_ActionSpecifier()      {}
func (*RateLimit_Action_DestinationCluster_) isRateLimit_Action_ActionSpecifier() {}
func (*RateLimit_Action_RequestHeaders_) isRateLimit_Action_ActionSpecifier()     {}
func (*RateLimit_Action_RemoteAddress_) isRateLimit_Action_ActionSpecifier()      {}
func (*RateLimit_Action_GenericKey_) isRateLimit_Action_ActionSpecifier()         {}
func (*RateLimit_Action_HeaderValueMatch_) isRateLimit_Action_ActionSpecifier()   {}

func (m *RateLimit_Action) GetActionSpecifier() isRateLimit_Action_ActionSpecifier {
	if m != nil {
		return m.ActionSpecifier
	}
	return nil
}

func (m *RateLimit_Action) GetSourceCluster() *RateLimit_Action_SourceCluster {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_SourceCluster_); ok {
		return x.SourceCluster
	}
	return nil
}

func (m *RateLimit_Action) GetDestinationCluster() *RateLimit_Action_DestinationCluster {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_DestinationCluster_); ok {
		return x.DestinationCluster
	}
	return nil
}

func (m *RateLimit_Action) GetRequestHeaders() *RateLimit_Action_RequestHeaders {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_RequestHeaders_); ok {
		return x.RequestHeaders
	}
	return nil
}

func (m *RateLimit_Action) GetRemoteAddress() *RateLimit_Action_RemoteAddress {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_RemoteAddress_); ok {
		return x.RemoteAddress
	}
	return nil
}

func (m *RateLimit_Action) GetGenericKey() *RateLimit_Action_GenericKey {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_GenericKey_); ok {
		return x.GenericKey
	}
	return nil
}

func (m *RateLimit_Action) GetHeaderValueMatch() *RateLimit_Action_HeaderValueMatch {
	if x, ok := m.GetActionSpecifier().(*RateLimit_Action_HeaderValueMatch_); ok {
		return x.HeaderValueMatch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RateLimit_Action) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RateLimit_Action_OneofMarshaler, _RateLimit_Action_OneofUnmarshaler, _RateLimit_Action_OneofSizer, []interface{}{
		(*RateLimit_Action_SourceCluster_)(nil),
		(*RateLimit_Action_DestinationCluster_)(nil),
		(*RateLimit_Action_RequestHeaders_)(nil),
		(*RateLimit_Action_RemoteAddress_)(nil),
		(*RateLimit_Action_GenericKey_)(nil),
		(*RateLimit_Action_HeaderValueMatch_)(nil),
	}
}

func _RateLimit_Action_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RateLimit_Action)
	// action_specifier
	switch x := m.ActionSpecifier.(type) {
	case *RateLimit_Action_SourceCluster_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SourceCluster); err != nil {
			return err
		}
	case *RateLimit_Action_DestinationCluster_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DestinationCluster); err != nil {
			return err
		}
	case *RateLimit_Action_RequestHeaders_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestHeaders); err != nil {
			return err
		}
	case *RateLimit_Action_RemoteAddress_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteAddress); err != nil {
			return err
		}
	case *RateLimit_Action_GenericKey_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GenericKey); err != nil {
			return err
		}
	case *RateLimit_Action_HeaderValueMatch_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderValueMatch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RateLimit_Action.ActionSpecifier has unexpected type %T", x)
	}
	return nil
}

func _RateLimit_Action_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RateLimit_Action)
	switch tag {
	case 1: // action_specifier.source_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_SourceCluster)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_SourceCluster_{msg}
		return true, err
	case 2: // action_specifier.destination_cluster
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_DestinationCluster)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_DestinationCluster_{msg}
		return true, err
	case 3: // action_specifier.request_headers
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_RequestHeaders)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_RequestHeaders_{msg}
		return true, err
	case 4: // action_specifier.remote_address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_RemoteAddress)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_RemoteAddress_{msg}
		return true, err
	case 5: // action_specifier.generic_key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_GenericKey)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_GenericKey_{msg}
		return true, err
	case 6: // action_specifier.header_value_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RateLimit_Action_HeaderValueMatch)
		err := b.DecodeMessage(msg)
		m.ActionSpecifier = &RateLimit_Action_HeaderValueMatch_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RateLimit_Action_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RateLimit_Action)
	// action_specifier
	switch x := m.ActionSpecifier.(type) {
	case *RateLimit_Action_SourceCluster_:
		s := proto.Size(x.SourceCluster)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_DestinationCluster_:
		s := proto.Size(x.DestinationCluster)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_RequestHeaders_:
		s := proto.Size(x.RequestHeaders)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_RemoteAddress_:
		s := proto.Size(x.RemoteAddress)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_GenericKey_:
		s := proto.Size(x.GenericKey)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RateLimit_Action_HeaderValueMatch_:
		s := proto.Size(x.HeaderValueMatch)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// The following descriptor entry is appended to the descriptor:
//
// .. code-block:: cpp
//
//   ("source_cluster", "<local service cluster>")
//
// <local service cluster> is derived from the :option:`--service-cluster` option.
type RateLimit_Action_SourceCluster struct {
}

func (m *RateLimit_Action_SourceCluster) Reset()         { *m = RateLimit_Action_SourceCluster{} }
func (m *RateLimit_Action_SourceCluster) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_SourceCluster) ProtoMessage()    {}
func (*RateLimit_Action_SourceCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 0}
}

// The following descriptor entry is appended to the descriptor:
//
// .. code-block:: cpp
//
//   ("destination_cluster", "<routed target cluster>")
//
// Once a request matches against a route table rule, a routed cluster is determined by one of
// the following :ref:`route table configuration <envoy_api_msg_RouteConfiguration>`
// settings:
//
// * :ref:`cluster <envoy_api_field_route.RouteAction.cluster>` indicates the upstream cluster
//   to route to.
// * :ref:`weighted_clusters <envoy_api_field_route.RouteAction.weighted_clusters>`
//   chooses a cluster randomly from a set of clusters with attributed weight.
// * :ref:`cluster_header <envoy_api_field_route.RouteAction.cluster_header>` indicates which
//   header in the request contains the target cluster.
type RateLimit_Action_DestinationCluster struct {
}

func (m *RateLimit_Action_DestinationCluster) Reset()         { *m = RateLimit_Action_DestinationCluster{} }
func (m *RateLimit_Action_DestinationCluster) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_DestinationCluster) ProtoMessage()    {}
func (*RateLimit_Action_DestinationCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 1}
}

// The following descriptor entry is appended when a header contains a key that matches the
// *header_name*:
//
// .. code-block:: cpp
//
//   ("<descriptor_key>", "<header_value_queried_from_header>")
type RateLimit_Action_RequestHeaders struct {
	// The header name to be queried from the request headers. The header’s
	// value is used to populate the value of the descriptor entry for the
	// descriptor_key.
	HeaderName string `protobuf:"bytes,1,opt,name=header_name,json=headerName" json:"header_name,omitempty"`
	// The key to use in the descriptor entry.
	DescriptorKey string `protobuf:"bytes,2,opt,name=descriptor_key,json=descriptorKey" json:"descriptor_key,omitempty"`
}

func (m *RateLimit_Action_RequestHeaders) Reset()         { *m = RateLimit_Action_RequestHeaders{} }
func (m *RateLimit_Action_RequestHeaders) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_RequestHeaders) ProtoMessage()    {}
func (*RateLimit_Action_RequestHeaders) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 2}
}

func (m *RateLimit_Action_RequestHeaders) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

func (m *RateLimit_Action_RequestHeaders) GetDescriptorKey() string {
	if m != nil {
		return m.DescriptorKey
	}
	return ""
}

// The following descriptor entry is appended to the descriptor and is populated using the
// trusted address from :ref:`x-forwarded-for <config_http_conn_man_headers_x-forwarded-for>`:
//
// .. code-block:: cpp
//
//   ("remote_address", "<trusted address from x-forwarded-for>")
type RateLimit_Action_RemoteAddress struct {
}

func (m *RateLimit_Action_RemoteAddress) Reset()         { *m = RateLimit_Action_RemoteAddress{} }
func (m *RateLimit_Action_RemoteAddress) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_RemoteAddress) ProtoMessage()    {}
func (*RateLimit_Action_RemoteAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 3}
}

// The following descriptor entry is appended to the descriptor:
//
// .. code-block:: cpp
//
//   ("generic_key", "<descriptor_value>")
type RateLimit_Action_GenericKey struct {
	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue" json:"descriptor_value,omitempty"`
}

func (m *RateLimit_Action_GenericKey) Reset()         { *m = RateLimit_Action_GenericKey{} }
func (m *RateLimit_Action_GenericKey) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_GenericKey) ProtoMessage()    {}
func (*RateLimit_Action_GenericKey) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 4}
}

func (m *RateLimit_Action_GenericKey) GetDescriptorValue() string {
	if m != nil {
		return m.DescriptorValue
	}
	return ""
}

// The following descriptor entry is appended to the descriptor:
//
// .. code-block:: cpp
//
//   ("header_match", "<descriptor_value>")
type RateLimit_Action_HeaderValueMatch struct {
	// The value to use in the descriptor entry.
	DescriptorValue string `protobuf:"bytes,1,opt,name=descriptor_value,json=descriptorValue" json:"descriptor_value,omitempty"`
	// If set to true, the action will append a descriptor entry when the
	// request matches the headers. If set to false, the action will append a
	// descriptor entry when the request does not match the headers. The
	// default value is true.
	ExpectMatch *google_protobuf1.BoolValue `protobuf:"bytes,2,opt,name=expect_match,json=expectMatch" json:"expect_match,omitempty"`
	// Specifies a set of headers that the rate limit action should match
	// on. The action will check the request’s headers against all the
	// specified headers in the config. A match will happen if all the
	// headers in the config are present in the request with the same values
	// (or based on presence if the value field is not in the config).
	Headers []*HeaderMatcher `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
}

func (m *RateLimit_Action_HeaderValueMatch) Reset()         { *m = RateLimit_Action_HeaderValueMatch{} }
func (m *RateLimit_Action_HeaderValueMatch) String() string { return proto.CompactTextString(m) }
func (*RateLimit_Action_HeaderValueMatch) ProtoMessage()    {}
func (*RateLimit_Action_HeaderValueMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0, 5}
}

func (m *RateLimit_Action_HeaderValueMatch) GetDescriptorValue() string {
	if m != nil {
		return m.DescriptorValue
	}
	return ""
}

func (m *RateLimit_Action_HeaderValueMatch) GetExpectMatch() *google_protobuf1.BoolValue {
	if m != nil {
		return m.ExpectMatch
	}
	return nil
}

func (m *RateLimit_Action_HeaderValueMatch) GetHeaders() []*HeaderMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

// .. attention::
//
//   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*
//   header. Thus, if attempting to match on *Host*, match on *:authority* instead.
//
// .. attention::
//
//   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both
//   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,
//
//   .. code-block:: json
//
//     {
//       "name": ":method",
//       "value": "POST"
//     }
//
// .. attention::
//   In the absence of any header match specifier, match will default to :ref:`present_match
//   <envoy_api_field_route.HeaderMatcher.present_match>`. i.e, a request that has the :ref:`name
//   <envoy_api_field_route.HeaderMatcher.name>` header will match, regardless of the header's
//   value.
//
type HeaderMatcher struct {
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Specifies how the header match will be performed to route the request.
	//
	// Types that are valid to be assigned to HeaderMatchSpecifier:
	//	*HeaderMatcher_ExactMatch
	//	*HeaderMatcher_RegexMatch
	//	*HeaderMatcher_RangeMatch
	//	*HeaderMatcher_PresentMatch
	//	*HeaderMatcher_PrefixMatch
	//	*HeaderMatcher_SuffixMatch
	HeaderMatchSpecifier isHeaderMatcher_HeaderMatchSpecifier `protobuf_oneof:"header_match_specifier"`
	// If specified, the match result will be inverted before checking. Defaults to false.
	//
	// Examples:
	//
	// * The regex *\d{3}* does not match the value *1234*, so it will match when inverted.
	// * The range [-10,0) will match the value -1, so it will not match when inverted.
	InvertMatch bool `protobuf:"varint,8,opt,name=invert_match,json=invertMatch" json:"invert_match,omitempty"`
}

func (m *HeaderMatcher) Reset()                    { *m = HeaderMatcher{} }
func (m *HeaderMatcher) String() string            { return proto.CompactTextString(m) }
func (*HeaderMatcher) ProtoMessage()               {}
func (*HeaderMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type isHeaderMatcher_HeaderMatchSpecifier interface {
	isHeaderMatcher_HeaderMatchSpecifier()
}

type HeaderMatcher_ExactMatch struct {
	ExactMatch string `protobuf:"bytes,4,opt,name=exact_match,json=exactMatch,oneof"`
}
type HeaderMatcher_RegexMatch struct {
	RegexMatch string `protobuf:"bytes,5,opt,name=regex_match,json=regexMatch,oneof"`
}
type HeaderMatcher_RangeMatch struct {
	RangeMatch *envoy_type.Int64Range `protobuf:"bytes,6,opt,name=range_match,json=rangeMatch,oneof"`
}
type HeaderMatcher_PresentMatch struct {
	PresentMatch bool `protobuf:"varint,7,opt,name=present_match,json=presentMatch,oneof"`
}
type HeaderMatcher_PrefixMatch struct {
	PrefixMatch string `protobuf:"bytes,9,opt,name=prefix_match,json=prefixMatch,oneof"`
}
type HeaderMatcher_SuffixMatch struct {
	SuffixMatch string `protobuf:"bytes,10,opt,name=suffix_match,json=suffixMatch,oneof"`
}

func (*HeaderMatcher_ExactMatch) isHeaderMatcher_HeaderMatchSpecifier()   {}
func (*HeaderMatcher_RegexMatch) isHeaderMatcher_HeaderMatchSpecifier()   {}
func (*HeaderMatcher_RangeMatch) isHeaderMatcher_HeaderMatchSpecifier()   {}
func (*HeaderMatcher_PresentMatch) isHeaderMatcher_HeaderMatchSpecifier() {}
func (*HeaderMatcher_PrefixMatch) isHeaderMatcher_HeaderMatchSpecifier()  {}
func (*HeaderMatcher_SuffixMatch) isHeaderMatcher_HeaderMatchSpecifier()  {}

func (m *HeaderMatcher) GetHeaderMatchSpecifier() isHeaderMatcher_HeaderMatchSpecifier {
	if m != nil {
		return m.HeaderMatchSpecifier
	}
	return nil
}

func (m *HeaderMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcher) GetExactMatch() string {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

func (m *HeaderMatcher) GetRegexMatch() string {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_RegexMatch); ok {
		return x.RegexMatch
	}
	return ""
}

func (m *HeaderMatcher) GetRangeMatch() *envoy_type.Int64Range {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_RangeMatch); ok {
		return x.RangeMatch
	}
	return nil
}

func (m *HeaderMatcher) GetPresentMatch() bool {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_PresentMatch); ok {
		return x.PresentMatch
	}
	return false
}

func (m *HeaderMatcher) GetPrefixMatch() string {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_PrefixMatch); ok {
		return x.PrefixMatch
	}
	return ""
}

func (m *HeaderMatcher) GetSuffixMatch() string {
	if x, ok := m.GetHeaderMatchSpecifier().(*HeaderMatcher_SuffixMatch); ok {
		return x.SuffixMatch
	}
	return ""
}

func (m *HeaderMatcher) GetInvertMatch() bool {
	if m != nil {
		return m.InvertMatch
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HeaderMatcher) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HeaderMatcher_OneofMarshaler, _HeaderMatcher_OneofUnmarshaler, _HeaderMatcher_OneofSizer, []interface{}{
		(*HeaderMatcher_ExactMatch)(nil),
		(*HeaderMatcher_RegexMatch)(nil),
		(*HeaderMatcher_RangeMatch)(nil),
		(*HeaderMatcher_PresentMatch)(nil),
		(*HeaderMatcher_PrefixMatch)(nil),
		(*HeaderMatcher_SuffixMatch)(nil),
	}
}

func _HeaderMatcher_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HeaderMatcher)
	// header_match_specifier
	switch x := m.HeaderMatchSpecifier.(type) {
	case *HeaderMatcher_ExactMatch:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ExactMatch)
	case *HeaderMatcher_RegexMatch:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.RegexMatch)
	case *HeaderMatcher_RangeMatch:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RangeMatch); err != nil {
			return err
		}
	case *HeaderMatcher_PresentMatch:
		t := uint64(0)
		if x.PresentMatch {
			t = 1
		}
		b.EncodeVarint(7<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *HeaderMatcher_PrefixMatch:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.PrefixMatch)
	case *HeaderMatcher_SuffixMatch:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.SuffixMatch)
	case nil:
	default:
		return fmt.Errorf("HeaderMatcher.HeaderMatchSpecifier has unexpected type %T", x)
	}
	return nil
}

func _HeaderMatcher_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HeaderMatcher)
	switch tag {
	case 4: // header_match_specifier.exact_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HeaderMatchSpecifier = &HeaderMatcher_ExactMatch{x}
		return true, err
	case 5: // header_match_specifier.regex_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HeaderMatchSpecifier = &HeaderMatcher_RegexMatch{x}
		return true, err
	case 6: // header_match_specifier.range_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_type.Int64Range)
		err := b.DecodeMessage(msg)
		m.HeaderMatchSpecifier = &HeaderMatcher_RangeMatch{msg}
		return true, err
	case 7: // header_match_specifier.present_match
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HeaderMatchSpecifier = &HeaderMatcher_PresentMatch{x != 0}
		return true, err
	case 9: // header_match_specifier.prefix_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HeaderMatchSpecifier = &HeaderMatcher_PrefixMatch{x}
		return true, err
	case 10: // header_match_specifier.suffix_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HeaderMatchSpecifier = &HeaderMatcher_SuffixMatch{x}
		return true, err
	default:
		return false, nil
	}
}

func _HeaderMatcher_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HeaderMatcher)
	// header_match_specifier
	switch x := m.HeaderMatchSpecifier.(type) {
	case *HeaderMatcher_ExactMatch:
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ExactMatch)))
		n += len(x.ExactMatch)
	case *HeaderMatcher_RegexMatch:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RegexMatch)))
		n += len(x.RegexMatch)
	case *HeaderMatcher_RangeMatch:
		s := proto.Size(x.RangeMatch)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HeaderMatcher_PresentMatch:
		n += proto.SizeVarint(7<<3 | proto.WireVarint)
		n += 1
	case *HeaderMatcher_PrefixMatch:
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.PrefixMatch)))
		n += len(x.PrefixMatch)
	case *HeaderMatcher_SuffixMatch:
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.SuffixMatch)))
		n += len(x.SuffixMatch)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Query parameter matching treats the query string of a request's :path header
// as an ampersand-separated list of keys and/or key=value elements.
type QueryParameterMatcher struct {
	// Specifies the name of a key that must be present in the requested
	// *path*'s query string.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Specifies the value of the key. If the value is absent, a request
	// that contains the key in its query string will match, whether the
	// key appears with a value (e.g., "?debug=true") or not (e.g., "?debug")
	Value string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	// Specifies whether the query parameter value is a regular expression.
	// Defaults to false. The entire query parameter value (i.e., the part to
	// the right of the equals sign in "key=value") must match the regex.
	// E.g., the regex "\d+$" will match "123" but not "a123" or "123a".
	Regex *google_protobuf1.BoolValue `protobuf:"bytes,4,opt,name=regex" json:"regex,omitempty"`
}

func (m *QueryParameterMatcher) Reset()                    { *m = QueryParameterMatcher{} }
func (m *QueryParameterMatcher) String() string            { return proto.CompactTextString(m) }
func (*QueryParameterMatcher) ProtoMessage()               {}
func (*QueryParameterMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *QueryParameterMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryParameterMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *QueryParameterMatcher) GetRegex() *google_protobuf1.BoolValue {
	if m != nil {
		return m.Regex
	}
	return nil
}

func init() {
	proto.RegisterType((*VirtualHost)(nil), "envoy.api.v2.route.VirtualHost")
	proto.RegisterType((*Route)(nil), "envoy.api.v2.route.Route")
	proto.RegisterType((*WeightedCluster)(nil), "envoy.api.v2.route.WeightedCluster")
	proto.RegisterType((*WeightedCluster_ClusterWeight)(nil), "envoy.api.v2.route.WeightedCluster.ClusterWeight")
	proto.RegisterType((*RouteMatch)(nil), "envoy.api.v2.route.RouteMatch")
	proto.RegisterType((*CorsPolicy)(nil), "envoy.api.v2.route.CorsPolicy")
	proto.RegisterType((*RouteAction)(nil), "envoy.api.v2.route.RouteAction")
	proto.RegisterType((*RouteAction_RetryPolicy)(nil), "envoy.api.v2.route.RouteAction.RetryPolicy")
	proto.RegisterType((*RouteAction_RequestMirrorPolicy)(nil), "envoy.api.v2.route.RouteAction.RequestMirrorPolicy")
	proto.RegisterType((*RouteAction_HashPolicy)(nil), "envoy.api.v2.route.RouteAction.HashPolicy")
	proto.RegisterType((*RouteAction_HashPolicy_Header)(nil), "envoy.api.v2.route.RouteAction.HashPolicy.Header")
	proto.RegisterType((*RouteAction_HashPolicy_Cookie)(nil), "envoy.api.v2.route.RouteAction.HashPolicy.Cookie")
	proto.RegisterType((*RouteAction_HashPolicy_ConnectionProperties)(nil), "envoy.api.v2.route.RouteAction.HashPolicy.ConnectionProperties")
	proto.RegisterType((*RouteAction_WebSocketProxyConfig)(nil), "envoy.api.v2.route.RouteAction.WebSocketProxyConfig")
	proto.RegisterType((*RedirectAction)(nil), "envoy.api.v2.route.RedirectAction")
	proto.RegisterType((*DirectResponseAction)(nil), "envoy.api.v2.route.DirectResponseAction")
	proto.RegisterType((*Decorator)(nil), "envoy.api.v2.route.Decorator")
	proto.RegisterType((*VirtualCluster)(nil), "envoy.api.v2.route.VirtualCluster")
	proto.RegisterType((*RateLimit)(nil), "envoy.api.v2.route.RateLimit")
	proto.RegisterType((*RateLimit_Action)(nil), "envoy.api.v2.route.RateLimit.Action")
	proto.RegisterType((*RateLimit_Action_SourceCluster)(nil), "envoy.api.v2.route.RateLimit.Action.SourceCluster")
	proto.RegisterType((*RateLimit_Action_DestinationCluster)(nil), "envoy.api.v2.route.RateLimit.Action.DestinationCluster")
	proto.RegisterType((*RateLimit_Action_RequestHeaders)(nil), "envoy.api.v2.route.RateLimit.Action.RequestHeaders")
	proto.RegisterType((*RateLimit_Action_RemoteAddress)(nil), "envoy.api.v2.route.RateLimit.Action.RemoteAddress")
	proto.RegisterType((*RateLimit_Action_GenericKey)(nil), "envoy.api.v2.route.RateLimit.Action.GenericKey")
	proto.RegisterType((*RateLimit_Action_HeaderValueMatch)(nil), "envoy.api.v2.route.RateLimit.Action.HeaderValueMatch")
	proto.RegisterType((*HeaderMatcher)(nil), "envoy.api.v2.route.HeaderMatcher")
	proto.RegisterType((*QueryParameterMatcher)(nil), "envoy.api.v2.route.QueryParameterMatcher")
	proto.RegisterEnum("envoy.api.v2.route.VirtualHost_TlsRequirementType", VirtualHost_TlsRequirementType_name, VirtualHost_TlsRequirementType_value)
	proto.RegisterEnum("envoy.api.v2.route.RouteAction_ClusterNotFoundResponseCode", RouteAction_ClusterNotFoundResponseCode_name, RouteAction_ClusterNotFoundResponseCode_value)
	proto.RegisterEnum("envoy.api.v2.route.RedirectAction_RedirectResponseCode", RedirectAction_RedirectResponseCode_name, RedirectAction_RedirectResponseCode_value)
}

func init() { proto.RegisterFile("envoy/api/v2/route/route.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2925 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0x4b, 0x70, 0x23, 0x47,
	0x19, 0xd6, 0x48, 0xb2, 0x1e, 0xbf, 0x1e, 0x1e, 0xf7, 0x7a, 0x6d, 0xad, 0x36, 0xd9, 0x87, 0x76,
	0xb7, 0x62, 0x16, 0x90, 0xb3, 0x5e, 0xc3, 0x26, 0xd9, 0x4a, 0x82, 0x65, 0x6b, 0x57, 0xf6, 0xfa,
	0x45, 0xdb, 0xd9, 0xb0, 0xd9, 0x82, 0x61, 0xac, 0x69, 0x4b, 0xc3, 0x4a, 0x33, 0x93, 0x9e, 0x96,
	0x6d, 0x5d, 0x38, 0x70, 0xa2, 0xa8, 0x82, 0x03, 0xc5, 0x01, 0xce, 0x1c, 0xa0, 0x38, 0x71, 0xa4,
	0x38, 0xe5, 0x48, 0x71, 0xe2, 0x98, 0x4b, 0x80, 0xe2, 0x40, 0x55, 0xee, 0xdc, 0x43, 0xf5, 0x63,
	0x46, 0x92, 0x3d, 0xb6, 0x64, 0xa8, 0x54, 0x51, 0x5c, 0xec, 0x99, 0xbf, 0xbf, 0xff, 0x9f, 0x7e,
	0xfc, 0x8f, 0xef, 0x6f, 0xc1, 0x0d, 0xe2, 0x1c, 0xb9, 0xfd, 0x45, 0xd3, 0xb3, 0x17, 0x8f, 0x96,
	0x16, 0xa9, 0xdb, 0x63, 0x44, 0xfe, 0xad, 0x7a, 0xd4, 0x65, 0x2e, 0x42, 0x62, 0xbc, 0x6a, 0x7a,
	0x76, 0xf5, 0x68, 0xa9, 0x2a, 0x46, 0xca, 0xaf, 0x8d, 0xe8, 0x34, 0x5d, 0x4a, 0x16, 0x0f, 0x4c,
	0x5f, 0x69, 0x94, 0xe7, 0xe4, 0x28, 0xeb, 0x7b, 0x64, 0x91, 0x9a, 0x4e, 0x2b, 0x90, 0xdf, 0x68,
	0xb9, 0x6e, 0xab, 0x43, 0x16, 0xc5, 0xdb, 0x41, 0xef, 0x70, 0xd1, 0xea, 0x51, 0x93, 0xd9, 0xae,
	0xa3, 0xc6, 0x5f, 0x3b, 0x3d, 0xee, 0x33, 0xda, 0x6b, 0xb2, 0xf3, 0xb4, 0x8f, 0xa9, 0xe9, 0x79,
	0x84, 0xfa, 0x6a, 0x7c, 0xfe, 0xc8, 0xec, 0xd8, 0x96, 0xc9, 0xc8, 0x62, 0xf0, 0xa0, 0x06, 0x66,
	0x5b, 0x6e, 0xcb, 0x15, 0x8f, 0x8b, 0xfc, 0x49, 0x4a, 0x2b, 0xbf, 0x4a, 0x43, 0xee, 0xb9, 0x4d,
	0x59, 0xcf, 0xec, 0x34, 0x5c, 0x9f, 0xa1, 0xd7, 0x21, 0xe9, 0x98, 0x5d, 0x52, 0xd2, 0x6e, 0x69,
	0x0b, 0xd9, 0x5a, 0xf6, 0x8f, 0x9f, 0x7f, 0x92, 0x48, 0xd2, 0xf8, 0x2d, 0x0d, 0x0b, 0x31, 0xba,
	0x0b, 0x69, 0xcb, 0xed, 0x9a, 0xb6, 0xe3, 0x97, 0xe2, 0xb7, 0x12, 0x0b, 0xd9, 0x1a, 0x70, 0xc4,
	0xd4, 0xcf, 0xb5, 0x78, 0x46, 0xc3, 0xc1, 0x10, 0x7a, 0x04, 0x29, 0xb1, 0x41, 0x7e, 0x29, 0x71,
	0x2b, 0xb1, 0x90, 0x5b, 0xba, 0x56, 0x3d, 0xbb, 0x79, 0x55, 0xcc, 0xff, 0xd6, 0x92, 0x7f, 0xfa,
	0xeb, 0xcd, 0x18, 0x56, 0x70, 0xb4, 0x07, 0x39, 0x4a, 0x3e, 0xee, 0xd9, 0x94, 0x18, 0xac, 0xe3,
	0x97, 0x92, 0xb7, 0xb4, 0x85, 0xe2, 0xd2, 0x52, 0x94, 0xf6, 0xd0, 0x9c, 0xab, 0xfb, 0x1d, 0x1f,
	0x4b, 0xad, 0x2e, 0x71, 0xd8, 0x7e, 0xdf, 0x23, 0x18, 0x94, 0x99, 0xfd, 0x8e, 0x8f, 0xb6, 0x40,
	0x3f, 0x92, 0x68, 0xa3, 0xd9, 0xe9, 0xf9, 0x8c, 0x50, 0xbf, 0x34, 0x25, 0xe6, 0x55, 0xb9, 0xc0,
	0xf2, 0xaa, 0x84, 0xe2, 0xe9, 0xa3, 0x91, 0x77, 0x1f, 0xbd, 0x07, 0x39, 0x6a, 0x32, 0x62, 0x74,
	0xec, 0xae, 0xcd, 0xfc, 0x52, 0x4a, 0x58, 0x7a, 0x3d, 0x72, 0x85, 0x26, 0x23, 0x9b, 0x1c, 0x85,
	0x81, 0x06, 0x8f, 0x3e, 0x7a, 0x01, 0x73, 0x7c, 0x72, 0xc4, 0x67, 0x46, 0x9b, 0x98, 0x16, 0xa1,
	0xbe, 0xc1, 0x5c, 0xc3, 0xb4, 0xac, 0x52, 0x5a, 0x98, 0xba, 0x3b, 0x6a, 0x8a, 0x7b, 0x55, 0xb5,
	0x21, 0x80, 0xcf, 0xcd, 0x4e, 0x8f, 0xec, 0x78, 0xdc, 0x55, 0xf0, 0x15, 0x65, 0x43, 0x8e, 0xf8,
	0xfb, 0xee, 0x8a, 0x65, 0xa1, 0x97, 0x30, 0x4f, 0x89, 0xef, 0xb9, 0x8e, 0x4f, 0x4e, 0xdb, 0x86,
	0x4b, 0xd8, 0x9e, 0x0d, 0x8c, 0x8c, 0x18, 0x7f, 0x0c, 0xe5, 0x28, 0xe3, 0x94, 0x74, 0xdd, 0x23,
	0x52, 0xca, 0x71, 0x6f, 0xc0, 0xf3, 0x67, 0x34, 0xb1, 0x18, 0x46, 0x4b, 0x90, 0x6c, 0xba, 0xd4,
	0x2f, 0x65, 0x6e, 0x69, 0x0b, 0xb9, 0xa5, 0x1b, 0x51, 0xbb, 0xb5, 0xea, 0x52, 0x7f, 0xd7, 0xed,
	0xd8, 0xcd, 0x3e, 0x16, 0x58, 0xf4, 0x7d, 0x98, 0xf1, 0x08, 0x35, 0x0e, 0xed, 0x0e, 0x23, 0xd4,
	0x68, 0xba, 0xce, 0xa1, 0xdd, 0x2a, 0xe5, 0xc5, 0x3a, 0x96, 0xc7, 0xb9, 0xc4, 0x2e, 0xa1, 0x4f,
	0x84, 0xde, 0xaa, 0x50, 0xab, 0x3b, 0x8c, 0xf6, 0xf1, 0xb4, 0x37, 0x2a, 0x2d, 0xbf, 0x84, 0xd9,
	0x28, 0x20, 0xd2, 0x21, 0xf1, 0x8a, 0xf4, 0x65, 0x0c, 0x60, 0xfe, 0x88, 0xbe, 0x0e, 0x53, 0x47,
	0x7c, 0x87, 0x4a, 0x71, 0xb1, 0x80, 0xf9, 0xaa, 0x8c, 0xc2, 0x6a, 0x10, 0x85, 0xd5, 0x3d, 0x11,
	0xa3, 0x58, 0xa2, 0xde, 0x89, 0xbf, 0xa5, 0x55, 0xde, 0x01, 0x74, 0xd6, 0x31, 0x51, 0x06, 0x92,
	0xdb, 0x3b, 0xdb, 0x75, 0x3d, 0x86, 0x66, 0xa0, 0x50, 0xff, 0xce, 0x7e, 0x1d, 0x6f, 0xaf, 0x6c,
	0x1a, 0x3b, 0xdb, 0x9b, 0x2f, 0x74, 0x0d, 0xa5, 0x21, 0xb1, 0xb2, 0xb9, 0xa9, 0xc7, 0x37, 0x92,
	0x99, 0xac, 0x0e, 0x95, 0x4f, 0x53, 0x30, 0x25, 0xa2, 0x04, 0xad, 0xc1, 0x54, 0xd7, 0x64, 0xcd,
	0xb6, 0x98, 0xd2, 0x39, 0xfb, 0x27, 0x90, 0x5b, 0x1c, 0x55, 0x2b, 0xf2, 0xa0, 0x12, 0x81, 0xf9,
	0x13, 0x2d, 0xae, 0x6b, 0x58, 0x2a, 0xa3, 0x47, 0x30, 0x25, 0xa0, 0x6a, 0x11, 0x37, 0xcf, 0xb5,
	0xb2, 0xd2, 0xe4, 0x7e, 0xd0, 0x88, 0x61, 0x89, 0x47, 0xdf, 0x82, 0x0c, 0x25, 0x96, 0x4d, 0x49,
	0x93, 0x95, 0x12, 0x42, 0x37, 0x32, 0x72, 0xb0, 0xc2, 0x84, 0xea, 0xa1, 0x16, 0xda, 0x83, 0x69,
	0xf9, 0x64, 0x04, 0x1e, 0x52, 0x4a, 0x0b, 0x43, 0x0b, 0x51, 0x86, 0xd6, 0x04, 0x14, 0x2b, 0x64,
	0x68, 0xae, 0x68, 0x8d, 0xc8, 0xd1, 0x23, 0xc8, 0x74, 0x09, 0x33, 0x2d, 0x93, 0x99, 0x22, 0x55,
	0xe4, 0x96, 0xae, 0x47, 0xf8, 0xf7, 0x96, 0x82, 0xe0, 0x10, 0x8c, 0x1e, 0x43, 0xd6, 0x22, 0x4d,
	0x97, 0x9a, 0xcc, 0xa5, 0xa5, 0x29, 0xa1, 0x19, 0x19, 0xc0, 0x6b, 0x01, 0x08, 0x0f, 0xf0, 0xe8,
	0xa3, 0x28, 0xb7, 0xcc, 0x08, 0xb7, 0xac, 0x9e, 0xbb, 0xa3, 0x93, 0x39, 0xe4, 0x05, 0xb9, 0x21,
	0xfb, 0x7f, 0x9b, 0x1b, 0xbe, 0xd4, 0x28, 0xac, 0x4d, 0x43, 0xca, 0x14, 0xfe, 0x83, 0xa6, 0xfe,
	0xf0, 0xf9, 0x27, 0x09, 0x6d, 0x23, 0x99, 0x49, 0xe9, 0xe9, 0xca, 0x67, 0x29, 0x98, 0xfe, 0x90,
	0xd8, 0xad, 0x36, 0x23, 0x96, 0xca, 0xec, 0xe8, 0x05, 0x64, 0xc2, 0xfa, 0xa0, 0x89, 0x2d, 0x79,
	0x10, 0x75, 0x9e, 0xa7, 0xd4, 0xaa, 0xea, 0xbf, 0x14, 0x8f, 0xd4, 0xc3, 0xd0, 0x1c, 0xda, 0x80,
	0x3c, 0x73, 0x99, 0xd9, 0x31, 0x8e, 0x05, 0x4a, 0x05, 0xd1, 0x6b, 0x67, 0xe6, 0xff, 0xc1, 0xba,
	0xc3, 0x1e, 0x2e, 0x89, 0xfd, 0x56, 0xb5, 0xf7, 0x7e, 0x7c, 0x41, 0xc3, 0x39, 0xa1, 0x2c, 0xbf,
	0x80, 0xbe, 0x06, 0x88, 0xf6, 0x1c, 0x66, 0x77, 0x89, 0xf1, 0x8a, 0xf4, 0x0d, 0x8f, 0x92, 0x43,
	0xfb, 0x44, 0xec, 0x48, 0x16, 0xeb, 0x6a, 0xe4, 0x19, 0xe9, 0xef, 0x0a, 0x79, 0xf9, 0x5f, 0x49,
	0x28, 0x8c, 0xcc, 0x70, 0x5c, 0x85, 0x5f, 0x86, 0x94, 0x9a, 0x64, 0x7c, 0xfc, 0x24, 0xb1, 0xc2,
	0xa2, 0x1a, 0x14, 0x83, 0xe8, 0x32, 0x64, 0xa6, 0x4a, 0x8c, 0x0f, 0xc8, 0x42, 0xa0, 0x22, 0xb2,
	0xd6, 0x05, 0xce, 0x9f, 0xfc, 0x12, 0x9d, 0x7f, 0xea, 0x4b, 0x76, 0xfe, 0xd4, 0xc5, 0x85, 0x91,
	0x9e, 0x9f, 0x4d, 0x9e, 0x5c, 0xda, 0xfb, 0xfe, 0x07, 0xca, 0xde, 0x46, 0x32, 0x93, 0xd6, 0x33,
	0x95, 0x2f, 0xe2, 0x00, 0x83, 0x82, 0x84, 0x4a, 0x90, 0x52, 0x7e, 0x2a, 0x8c, 0x37, 0x62, 0x58,
	0xbd, 0xa3, 0x59, 0x48, 0x7a, 0x26, 0x6b, 0x4b, 0xff, 0x6d, 0xc4, 0xb0, 0x78, 0x43, 0x73, 0x30,
	0x45, 0x49, 0x8b, 0x9c, 0x08, 0x2f, 0xca, 0x8a, 0x42, 0xc4, 0x5f, 0xd1, 0x0a, 0x14, 0x9b, 0xa6,
	0x4f, 0x0c, 0x9f, 0x38, 0xbe, 0xcd, 0xec, 0x23, 0xa2, 0xf2, 0x7e, 0xf9, 0xcc, 0xc4, 0x6a, 0xae,
	0xdb, 0x91, 0x2e, 0x5a, 0xe0, 0x1a, 0x7b, 0x81, 0x02, 0x7a, 0x07, 0xd2, 0x2a, 0x48, 0x54, 0xe6,
	0xbf, 0x15, 0x71, 0xf4, 0x58, 0x22, 0xa4, 0xa7, 0xe3, 0x40, 0x01, 0x3d, 0x86, 0xb4, 0x3a, 0x60,
	0x45, 0xfb, 0x6e, 0x47, 0x1d, 0x91, 0x3c, 0x62, 0xb1, 0x70, 0x42, 0x71, 0xa0, 0x81, 0xf6, 0x41,
	0xff, 0xb8, 0x47, 0x68, 0xdf, 0xf0, 0x4c, 0x6a, 0x76, 0x89, 0x48, 0x33, 0x92, 0xf1, 0x7d, 0x25,
	0xca, 0xca, 0xb7, 0x39, 0x76, 0x37, 0x80, 0x06, 0xd6, 0xa6, 0x3f, 0x1e, 0x11, 0xfb, 0xb5, 0x79,
	0x28, 0xf2, 0x1d, 0x33, 0x7c, 0x8f, 0x34, 0xed, 0x43, 0x9b, 0x50, 0x95, 0xe7, 0x2a, 0xff, 0x8c,
	0x03, 0x0c, 0x28, 0x15, 0xba, 0x0d, 0x79, 0xb3, 0xd3, 0x71, 0x8f, 0x0d, 0x97, 0xda, 0x2d, 0xdb,
	0x11, 0x09, 0x2e, 0x8b, 0x73, 0x42, 0xb6, 0x23, 0x44, 0x3c, 0xb1, 0x0c, 0x43, 0x0c, 0x79, 0x02,
	0x19, 0x01, 0xd4, 0x87, 0x80, 0x58, 0x1c, 0xc5, 0x1d, 0x28, 0x48, 0x74, 0x97, 0xb0, 0xb6, 0x6b,
	0xf9, 0x2a, 0x03, 0xc9, 0xaf, 0x6c, 0x49, 0xd9, 0x00, 0x14, 0x6c, 0x5b, 0x62, 0x08, 0xa4, 0x42,
	0x01, 0xdd, 0x83, 0x22, 0x39, 0xf1, 0xdc, 0x41, 0xf4, 0x88, 0x43, 0xcd, 0xe2, 0x82, 0x94, 0x06,
	0xb0, 0x79, 0x48, 0x77, 0xcd, 0x13, 0xc3, 0x6c, 0xc9, 0x83, 0xcb, 0xe2, 0x54, 0xd7, 0x3c, 0x59,
	0x69, 0x11, 0xf4, 0x14, 0x66, 0xe4, 0x47, 0x9a, 0x94, 0x58, 0xc4, 0x61, 0xb6, 0xd9, 0xe1, 0xe7,
	0x33, 0xce, 0x2f, 0xe4, 0x92, 0x56, 0x07, 0x3a, 0x68, 0x19, 0xd2, 0xc4, 0x31, 0x0f, 0x3a, 0xc4,
	0x52, 0xe4, 0xe4, 0x22, 0xf5, 0x00, 0x5a, 0xf9, 0xcd, 0x1c, 0xe4, 0x86, 0x58, 0x13, 0x2a, 0x43,
	0x5a, 0xe5, 0xfd, 0xd0, 0xd9, 0x03, 0x01, 0x7a, 0x03, 0x8a, 0xea, 0x51, 0xad, 0x35, 0xf4, 0xfb,
	0x82, 0x92, 0xcb, 0xd5, 0x22, 0x0c, 0x33, 0xc7, 0x2a, 0xd2, 0x07, 0x4d, 0x8b, 0x4c, 0xa9, 0x77,
	0x26, 0x48, 0x0b, 0x8d, 0x18, 0xd6, 0x8f, 0x47, 0x45, 0x3e, 0xfa, 0xa9, 0x06, 0x37, 0x83, 0xaf,
	0x3b, 0x2e, 0x33, 0x0e, 0xdd, 0x9e, 0x63, 0x85, 0x7c, 0xcc, 0x68, 0xba, 0x16, 0x29, 0xcd, 0x8a,
	0x8e, 0xeb, 0xf1, 0x18, 0x66, 0x18, 0x64, 0x9d, 0x6d, 0x97, 0x3d, 0xe1, 0x46, 0x02, 0x46, 0xb6,
	0xea, 0x5a, 0x44, 0x55, 0xc0, 0x1f, 0x09, 0xe2, 0x79, 0xbd, 0x79, 0x3e, 0x30, 0xa2, 0x66, 0x24,
	0x2f, 0x5d, 0x33, 0xee, 0x41, 0x51, 0x26, 0x12, 0x83, 0x92, 0x63, 0x6a, 0xb3, 0xc0, 0x37, 0x0a,
	0x52, 0x8a, 0xa5, 0x10, 0xdd, 0x81, 0x7c, 0xdb, 0xf5, 0x59, 0x08, 0x4a, 0x89, 0x5d, 0xd7, 0x70,
	0x8e, 0x4b, 0x03, 0x50, 0x03, 0x66, 0xcc, 0x1e, 0x73, 0x8d, 0x11, 0xe4, 0x58, 0x47, 0x68, 0x68,
	0x78, 0x9a, 0xab, 0x35, 0x86, 0x2c, 0xbd, 0x0d, 0x69, 0x9e, 0x2f, 0xdc, 0x1e, 0x53, 0x0d, 0xcf,
	0xb5, 0x33, 0xfa, 0x6b, 0xaa, 0xe7, 0xaf, 0x25, 0x7f, 0xf9, 0xb7, 0x9b, 0x1a, 0x0e, 0xf0, 0x68,
	0x13, 0xf2, 0xb6, 0xd5, 0x21, 0x46, 0xa0, 0x5f, 0x1a, 0xa7, 0x5f, 0xe4, 0xfa, 0x62, 0xcb, 0x7f,
	0xa7, 0xc5, 0xef, 0xc7, 0x70, 0x8e, 0xab, 0xef, 0x2b, 0x6b, 0xdb, 0x90, 0xa7, 0x84, 0xf1, 0x9c,
	0x23, 0xb2, 0x40, 0x29, 0x2b, 0xac, 0x7d, 0x75, 0xdc, 0xf1, 0x62, 0xae, 0xa3, 0x7a, 0xb1, 0x1c,
	0x1d, 0xbc, 0xa0, 0x16, 0x5c, 0x0d, 0x4a, 0x74, 0xd7, 0xa6, 0xd4, 0xa5, 0x81, 0x61, 0x10, 0x86,
	0x1f, 0x8e, 0x37, 0x2c, 0x94, 0xb7, 0x84, 0xae, 0xfa, 0x40, 0x50, 0xb0, 0x87, 0x85, 0xe8, 0x3d,
	0xc8, 0x78, 0xd4, 0x76, 0xa9, 0xcd, 0xfa, 0xa5, 0x9c, 0xf0, 0xc9, 0x4a, 0x54, 0x9a, 0x76, 0x7b,
	0xcc, 0x76, 0x5a, 0xbb, 0x0a, 0x89, 0x43, 0x1d, 0xf4, 0xdd, 0x73, 0xb9, 0x44, 0x7e, 0xf2, 0x7a,
	0x5f, 0x8b, 0x97, 0xb4, 0x68, 0x3e, 0x61, 0x9c, 0xcf, 0x27, 0xd0, 0x25, 0xed, 0x47, 0x73, 0x8a,
	0xf7, 0x2f, 0xe4, 0x14, 0x57, 0xc4, 0xd5, 0x0b, 0xd7, 0x3e, 0x97, 0x57, 0x9c, 0xba, 0xa5, 0x28,
	0x5c, 0xf6, 0x96, 0x62, 0x07, 0xe6, 0x6c, 0xa7, 0xd9, 0xe9, 0x59, 0xc4, 0x38, 0x6a, 0x1b, 0xc3,
	0xa6, 0x8a, 0x63, 0x53, 0xe3, 0x15, 0xa5, 0xf9, 0xbc, 0x8d, 0x07, 0x06, 0x9f, 0x41, 0xae, 0x6d,
	0xfa, 0xed, 0xc0, 0x61, 0xa6, 0xc5, 0x84, 0xee, 0x8f, 0x73, 0x98, 0x86, 0xe9, 0xb7, 0x95, 0x9f,
	0x40, 0x3b, 0x7c, 0x46, 0xab, 0x50, 0xe8, 0xf9, 0xc4, 0x38, 0x26, 0x07, 0xbe, 0xdb, 0x7c, 0x45,
	0x58, 0x49, 0x1f, 0x37, 0x29, 0xb1, 0x5b, 0xf9, 0x9e, 0x4f, 0x3e, 0x0c, 0x74, 0x50, 0x13, 0xf4,
	0xd0, 0x40, 0xc0, 0xbc, 0xe6, 0x84, 0x9d, 0xe5, 0x71, 0xd3, 0xfa, 0x90, 0x1c, 0xec, 0x09, 0xbd,
	0x5d, 0xea, 0x9e, 0xf4, 0x25, 0x87, 0x12, 0x5f, 0x98, 0x0e, 0x2d, 0xaa, 0x8e, 0x2e, 0xb8, 0xf8,
	0x98, 0xb9, 0xc4, 0xc5, 0xc7, 0x3a, 0xe8, 0xbc, 0xd2, 0xb5, 0xa8, 0xd7, 0x0c, 0xf3, 0xc0, 0xfc,
	0x64, 0x79, 0xa4, 0xd8, 0x35, 0x4f, 0x9e, 0x52, 0xaf, 0xa9, 0x12, 0x40, 0xf9, 0xf7, 0x1a, 0xe4,
	0x86, 0xa2, 0x19, 0x5d, 0xe3, 0x9d, 0x3c, 0x4f, 0x08, 0xae, 0xa3, 0x78, 0x5e, 0x5a, 0xbc, 0xef,
	0x38, 0xe8, 0x5d, 0xc8, 0x39, 0xbd, 0xae, 0xc1, 0x5f, 0x6d, 0xe2, 0x4f, 0xc4, 0xfe, 0xc1, 0xe9,
	0x75, 0xb1, 0xc4, 0xa3, 0xa7, 0xc0, 0x79, 0xa6, 0xc1, 0x6d, 0x07, 0x73, 0x4e, 0x4c, 0x36, 0xe7,
	0x82, 0x47, 0xe8, 0x3e, 0xed, 0x07, 0x53, 0x7e, 0x09, 0x57, 0x22, 0xd2, 0x04, 0xba, 0x73, 0xaa,
	0xac, 0x0e, 0x77, 0x2e, 0x61, 0x7d, 0xbd, 0x09, 0xb9, 0xa1, 0xde, 0x48, 0x51, 0x12, 0x18, 0x34,
	0x45, 0xe5, 0x5f, 0x24, 0x01, 0x06, 0x3e, 0x85, 0x9e, 0x41, 0x4a, 0xd5, 0x61, 0x79, 0xb1, 0xf2,
	0x60, 0x72, 0x7f, 0x54, 0xe1, 0xcc, 0xa9, 0xac, 0x34, 0xc1, 0x8d, 0x35, 0x5d, 0xf7, 0x95, 0x1d,
	0xb0, 0xe5, 0xcb, 0x18, 0x5b, 0x15, 0x8a, 0xdc, 0x98, 0x34, 0x81, 0x8e, 0xe0, 0x6a, 0xd3, 0x75,
	0x1c, 0x22, 0x90, 0x86, 0x47, 0x5d, 0x8f, 0x50, 0x66, 0x93, 0x80, 0x04, 0xbc, 0x7f, 0x29, 0xdb,
	0x81, 0x9d, 0xdd, 0xd0, 0x4c, 0x23, 0x86, 0x67, 0x9b, 0x11, 0xf2, 0xf2, 0x32, 0xa4, 0x14, 0x05,
	0xb9, 0x0f, 0x39, 0xb9, 0x30, 0x23, 0xba, 0x5d, 0x04, 0x39, 0xba, 0x6d, 0x76, 0x49, 0xd9, 0x81,
	0x94, 0x5c, 0xc1, 0xb8, 0xee, 0xf2, 0x01, 0x24, 0x18, 0xeb, 0xa8, 0x0d, 0x1a, 0xeb, 0x19, 0x1c,
	0x8b, 0x90, 0xea, 0x10, 0x24, 0x75, 0x14, 0xcf, 0xe5, 0x87, 0x30, 0x1b, 0xb5, 0x2a, 0x74, 0x1d,
	0xb2, 0xbe, 0xdb, 0xa3, 0x4d, 0x62, 0xd8, 0x9e, 0x98, 0x42, 0x06, 0x67, 0xa4, 0x60, 0xdd, 0xab,
	0x5d, 0x03, 0x5d, 0x26, 0x9f, 0x33, 0x64, 0xb9, 0xfc, 0x77, 0x0d, 0x66, 0xa3, 0x62, 0x9a, 0x3b,
	0x94, 0xcf, 0x4c, 0x66, 0x0c, 0x77, 0x2f, 0x18, 0xb8, 0x48, 0xf6, 0xd7, 0x67, 0xea, 0x75, 0xfc,
	0xbf, 0xaa, 0xd7, 0x2f, 0x60, 0x96, 0x47, 0xbe, 0x3a, 0x19, 0xc3, 0x64, 0x8c, 0x74, 0x3d, 0xe6,
	0x5f, 0xf6, 0xbe, 0x00, 0x75, 0xcd, 0x13, 0xb5, 0x3f, 0x2b, 0xca, 0x44, 0xa5, 0x0e, 0xd7, 0x2f,
	0x60, 0x6d, 0x68, 0x1e, 0xae, 0xec, 0xd5, 0xf1, 0xf3, 0xf5, 0xd5, 0xba, 0xf1, 0xc1, 0xf6, 0xca,
	0xf3, 0x95, 0xf5, 0xcd, 0x95, 0xda, 0x66, 0x5d, 0x8f, 0xa1, 0x02, 0x64, 0xb7, 0x77, 0xf6, 0x8d,
	0x27, 0x3b, 0x1f, 0x6c, 0xaf, 0xe9, 0x5a, 0xad, 0x0c, 0x33, 0x01, 0x87, 0x3c, 0xbd, 0x8b, 0xb5,
	0x12, 0xcc, 0x0d, 0x73, 0xa7, 0x01, 0x60, 0x23, 0x99, 0xb9, 0xaa, 0xcf, 0x55, 0xfe, 0x9c, 0x80,
	0xe2, 0xe8, 0x1d, 0x21, 0x6f, 0x10, 0x94, 0x8a, 0xba, 0x5e, 0x94, 0x3b, 0x9c, 0x97, 0xbc, 0x4c,
	0x5d, 0x1e, 0xde, 0x83, 0x82, 0xe8, 0x71, 0x42, 0x50, 0x40, 0x9a, 0xf3, 0x5c, 0x1c, 0xc2, 0xde,
	0x88, 0xe6, 0x82, 0x9c, 0x5c, 0x8f, 0xb2, 0xc1, 0x36, 0x14, 0x46, 0x59, 0x6f, 0x42, 0x30, 0x8c,
	0x47, 0xe3, 0xef, 0x34, 0xc3, 0xd7, 0x73, 0x19, 0x6f, 0x9e, 0x0e, 0xef, 0xea, 0x3d, 0x28, 0xb6,
	0x19, 0xf3, 0xfc, 0xc1, 0xd4, 0x93, 0xc2, 0x29, 0x0b, 0x42, 0x1a, 0xce, 0x5c, 0x78, 0x19, 0xb5,
	0x3d, 0x43, 0x74, 0x77, 0x82, 0x9d, 0x66, 0xb8, 0x97, 0x51, 0xdb, 0x13, 0x6d, 0x60, 0xe5, 0x18,
	0x66, 0xa3, 0xbe, 0x8c, 0xae, 0xc2, 0xcc, 0xd6, 0xce, 0xf3, 0xfa, 0x9a, 0xb1, 0x5b, 0xc7, 0x5b,
	0x2b, 0xdb, 0xf5, 0xed, 0xfd, 0xcd, 0x17, 0x7a, 0x0c, 0x65, 0x61, 0x4a, 0x9d, 0x17, 0x3f, 0xbe,
	0xbd, 0x7a, 0xdd, 0xd8, 0xd9, 0x6f, 0xd4, 0xb1, 0x1e, 0x47, 0x73, 0x80, 0xf6, 0xeb, 0x5b, 0xbb,
	0x3b, 0x78, 0x05, 0xbf, 0x30, 0x70, 0x7d, 0x6d, 0x1d, 0xd7, 0x57, 0xf7, 0xf5, 0x04, 0x97, 0x87,
	0x26, 0x06, 0xf2, 0x24, 0x3f, 0x52, 0xb5, 0xf5, 0xa7, 0x8e, 0xb4, 0xe2, 0xc2, 0x6c, 0xd4, 0x35,
	0x2d, 0xba, 0x0b, 0x29, 0x1e, 0x1e, 0x3d, 0x5f, 0x1c, 0x65, 0xa1, 0x96, 0xe7, 0x9b, 0x93, 0xbe,
	0x3f, 0xa5, 0x7f, 0x9a, 0x5c, 0xb0, 0xb0, 0x1a, 0x43, 0x0f, 0x20, 0x79, 0xe0, 0x5a, 0x7d, 0x15,
	0x2e, 0xaf, 0x47, 0xb0, 0xa5, 0x35, 0x93, 0x99, 0x7b, 0x22, 0x74, 0xb1, 0x80, 0x56, 0x96, 0x21,
	0x1b, 0xde, 0xc7, 0xa2, 0x37, 0x20, 0xcb, 0x83, 0x5e, 0x84, 0xd4, 0xd9, 0x5c, 0x33, 0x18, 0xab,
	0xfc, 0x4c, 0x83, 0xe2, 0xe8, 0x2f, 0x3a, 0xbc, 0x92, 0x78, 0x3c, 0xb2, 0x68, 0x84, 0x66, 0x30,
	0x12, 0xe6, 0xb1, 0x78, 0x74, 0x1e, 0x7b, 0x0b, 0x52, 0xb2, 0xef, 0x55, 0xbe, 0x13, 0x79, 0x89,
	0xa0, 0xaa, 0x98, 0xc0, 0x61, 0x85, 0xaf, 0x7c, 0x96, 0x85, 0x6c, 0x48, 0x8b, 0xd0, 0xbb, 0x30,
	0xe5, 0x33, 0xde, 0xd2, 0x6a, 0x97, 0x88, 0xf0, 0x12, 0x60, 0xa9, 0xc5, 0x1d, 0xc7, 0xb2, 0x7d,
	0xde, 0x87, 0x0e, 0xd7, 0x3b, 0x25, 0x7a, 0x46, 0xfa, 0x68, 0x03, 0xd2, 0xf2, 0xfa, 0x33, 0xf8,
	0x29, 0xee, 0xee, 0x85, 0x14, 0xb0, 0x2a, 0x0f, 0x71, 0xf4, 0x57, 0x3d, 0x65, 0xa0, 0xfc, 0xeb,
	0x0c, 0xa4, 0xd4, 0x21, 0xbf, 0x84, 0xa2, 0xca, 0xb3, 0xc3, 0x35, 0x39, 0x17, 0xfd, 0x53, 0xdd,
	0x69, 0xeb, 0x55, 0x79, 0xac, 0x83, 0x56, 0xb5, 0xe0, 0x0f, 0x0b, 0xd0, 0x0f, 0xe0, 0x8a, 0x45,
	0x7c, 0x66, 0x3b, 0xe2, 0x04, 0xc3, 0x2f, 0x48, 0x57, 0x79, 0x34, 0xd1, 0x17, 0xd6, 0x06, 0xfa,
	0x83, 0xcf, 0x20, 0xeb, 0x8c, 0x14, 0x7d, 0x0f, 0xa6, 0x4f, 0xf5, 0x09, 0x2a, 0xd7, 0x3e, 0x9c,
	0xe8, 0x3b, 0x78, 0xa4, 0x37, 0x68, 0xc4, 0x70, 0x71, 0xb4, 0x5b, 0xe0, 0x1b, 0xc5, 0x39, 0x3b,
	0x23, 0xbc, 0x37, 0xa0, 0xc4, 0xf7, 0x55, 0x8f, 0xbb, 0x34, 0xa1, 0x79, 0xae, 0xba, 0x22, 0x35,
	0xf9, 0x46, 0xd1, 0x61, 0x01, 0xc2, 0x90, 0x6b, 0x11, 0x87, 0x50, 0xbb, 0x29, 0x4e, 0x5f, 0x5e,
	0x67, 0x2d, 0x4e, 0x64, 0xf9, 0xa9, 0xd4, 0x7b, 0x46, 0xfa, 0x8d, 0x18, 0x86, 0x56, 0xf8, 0x86,
	0x08, 0x20, 0x55, 0xf5, 0xc5, 0x95, 0x9e, 0x6a, 0xcc, 0xe5, 0x6d, 0xca, 0x37, 0x26, 0x32, 0x3d,
	0xd4, 0xe6, 0x88, 0x1e, 0xbd, 0x11, 0xc3, 0x7a, 0xfb, 0x94, 0xac, 0x3c, 0x0d, 0x85, 0x11, 0x2f,
	0x28, 0xcf, 0x02, 0x3a, 0x7b, 0x68, 0x65, 0x87, 0x17, 0x8c, 0x91, 0x0d, 0xbd, 0x04, 0x2b, 0x41,
	0x6f, 0x42, 0xd1, 0x22, 0x7e, 0x93, 0xda, 0x1e, 0x73, 0xe9, 0x20, 0x40, 0x86, 0xe1, 0x85, 0x01,
	0x80, 0xd3, 0xc3, 0x69, 0x28, 0x8c, 0xec, 0x79, 0xb9, 0x06, 0x30, 0xd8, 0x2a, 0xb4, 0x0c, 0xfa,
	0x90, 0x41, 0x79, 0x33, 0x7a, 0x66, 0x06, 0xd3, 0x03, 0x88, 0x58, 0x70, 0xf9, 0x2f, 0x1a, 0xe8,
	0xa7, 0x37, 0xe5, 0x3f, 0x33, 0x85, 0xde, 0x85, 0x3c, 0x39, 0xf1, 0x38, 0x35, 0x90, 0xe7, 0x12,
	0x1f, 0xdb, 0x8b, 0xe5, 0x24, 0x5e, 0x7e, 0xf4, 0xe9, 0xe0, 0xfe, 0x32, 0x31, 0xe1, 0xfd, 0xe5,
	0x68, 0x2a, 0x50, 0xda, 0x9c, 0x4a, 0xc9, 0xac, 0x70, 0xf6, 0xde, 0xf1, 0x8b, 0x38, 0x14, 0x46,
	0x2c, 0x8c, 0xa3, 0x84, 0xb7, 0x21, 0x47, 0x4e, 0xcc, 0x70, 0x49, 0x49, 0x55, 0xb3, 0x41, 0x08,
	0xe5, 0xbc, 0x6f, 0x43, 0x4e, 0x5c, 0x46, 0x2a, 0x48, 0x50, 0xd6, 0x41, 0x08, 0x25, 0xe4, 0x6d,
	0xde, 0xef, 0x3a, 0xad, 0x51, 0x87, 0x9d, 0x53, 0xcb, 0x63, 0x7d, 0x8f, 0x54, 0xd7, 0x1d, 0xf6,
	0xcd, 0x65, 0xcc, 0x31, 0x42, 0x95, 0x3f, 0x04, 0x77, 0x48, 0x9c, 0x1f, 0xf8, 0xc4, 0x09, 0xa6,
	0x90, 0xe6, 0xf5, 0x57, 0xd0, 0x0b, 0x29, 0x96, 0xb0, 0x2a, 0xe4, 0x15, 0xbd, 0x90, 0xa8, 0xec,
	0xa9, 0xe5, 0x34, 0x62, 0x38, 0x27, 0x01, 0x21, 0xde, 0xef, 0x1d, 0x0e, 0xf0, 0x10, 0x81, 0x97,
	0x80, 0x60, 0x91, 0x79, 0xdb, 0x39, 0x22, 0x34, 0x98, 0x45, 0x46, 0xb0, 0x80, 0x9c, 0x94, 0xc9,
	0xdf, 0x75, 0x39, 0xc1, 0x92, 0xce, 0x2f, 0x20, 0x23, 0x04, 0x2b, 0xae, 0x27, 0x36, 0x92, 0x99,
	0x84, 0x9e, 0xac, 0xfc, 0x10, 0xae, 0x46, 0x5e, 0x1e, 0x8f, 0x3b, 0x88, 0xd9, 0xe0, 0xb2, 0x5f,
	0x32, 0x6d, 0xf9, 0x82, 0xde, 0x0c, 0xae, 0xe2, 0xc7, 0xdf, 0xb4, 0x4b, 0x60, 0xad, 0xf8, 0xdb,
	0x7f, 0xdc, 0xd0, 0x3e, 0x92, 0x3f, 0x1d, 0xff, 0x58, 0xd3, 0x0e, 0x52, 0x02, 0xfa, 0xf0, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x60, 0x79, 0xb5, 0x92, 0x62, 0x23, 0x00, 0x00,
}
