// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/accesslog/v2/als.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	envoy/config/accesslog/v2/als.proto

It has these top-level messages:
	TcpGrpcAccessLogConfig
	HttpGrpcAccessLogConfig
	CommonGrpcAccessLogConfig
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Configuration for the built-in *envoy.tcp_grpc_access_log* type. This configuration will
// populate *StreamAccessLogsMessage.tcp_logs*.
// [#not-implemented-hide:]
// [#comment:TODO(mattklein123): Block type in non-tcp proxy cases?]
type TcpGrpcAccessLogConfig struct {
	CommonConfig *CommonGrpcAccessLogConfig `protobuf:"bytes,1,opt,name=common_config,json=commonConfig" json:"common_config,omitempty"`
}

func (m *TcpGrpcAccessLogConfig) Reset()                    { *m = TcpGrpcAccessLogConfig{} }
func (m *TcpGrpcAccessLogConfig) String() string            { return proto.CompactTextString(m) }
func (*TcpGrpcAccessLogConfig) ProtoMessage()               {}
func (*TcpGrpcAccessLogConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TcpGrpcAccessLogConfig) GetCommonConfig() *CommonGrpcAccessLogConfig {
	if m != nil {
		return m.CommonConfig
	}
	return nil
}

// Configuration for the built-in *envoy.http_grpc_access_log* type. This configuration will
// populate *StreamAccessLogsMessage.http_logs*.
// [#not-implemented-hide:]
// [#comment:TODO(mattklein123): Block type in non-http/router proxy cases?]
type HttpGrpcAccessLogConfig struct {
	CommonConfig *CommonGrpcAccessLogConfig `protobuf:"bytes,1,opt,name=common_config,json=commonConfig" json:"common_config,omitempty"`
	// Additional request headers to log in *HTTPRequestProperties.request_headers*.
	AdditionalRequestHeadersToLog []string `protobuf:"bytes,2,rep,name=additional_request_headers_to_log,json=additionalRequestHeadersToLog" json:"additional_request_headers_to_log,omitempty"`
	// Additional response headers to log in *HTTPResponseProperties.response_headers*.
	AdditionalResponseHeadersToLog []string `protobuf:"bytes,3,rep,name=additional_response_headers_to_log,json=additionalResponseHeadersToLog" json:"additional_response_headers_to_log,omitempty"`
}

func (m *HttpGrpcAccessLogConfig) Reset()                    { *m = HttpGrpcAccessLogConfig{} }
func (m *HttpGrpcAccessLogConfig) String() string            { return proto.CompactTextString(m) }
func (*HttpGrpcAccessLogConfig) ProtoMessage()               {}
func (*HttpGrpcAccessLogConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HttpGrpcAccessLogConfig) GetCommonConfig() *CommonGrpcAccessLogConfig {
	if m != nil {
		return m.CommonConfig
	}
	return nil
}

func (m *HttpGrpcAccessLogConfig) GetAdditionalRequestHeadersToLog() []string {
	if m != nil {
		return m.AdditionalRequestHeadersToLog
	}
	return nil
}

func (m *HttpGrpcAccessLogConfig) GetAdditionalResponseHeadersToLog() []string {
	if m != nil {
		return m.AdditionalResponseHeadersToLog
	}
	return nil
}

// Common configuration for gRPC access logs.
// [#not-implemented-hide:]
type CommonGrpcAccessLogConfig struct {
	// The friendly name of the access log to be returned in StreamAccessLogsMessage.Identifier. This
	// allows the access log server to differentiate between different access logs coming from the
	// same Envoy.
	LogName string `protobuf:"bytes,1,opt,name=log_name,json=logName" json:"log_name,omitempty"`
	// The gRPC service for the access log service.
	GrpcService *envoy_api_v2_core1.GrpcService `protobuf:"bytes,2,opt,name=grpc_service,json=grpcService" json:"grpc_service,omitempty"`
}

func (m *CommonGrpcAccessLogConfig) Reset()                    { *m = CommonGrpcAccessLogConfig{} }
func (m *CommonGrpcAccessLogConfig) String() string            { return proto.CompactTextString(m) }
func (*CommonGrpcAccessLogConfig) ProtoMessage()               {}
func (*CommonGrpcAccessLogConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommonGrpcAccessLogConfig) GetLogName() string {
	if m != nil {
		return m.LogName
	}
	return ""
}

func (m *CommonGrpcAccessLogConfig) GetGrpcService() *envoy_api_v2_core1.GrpcService {
	if m != nil {
		return m.GrpcService
	}
	return nil
}

func init() {
	proto.RegisterType((*TcpGrpcAccessLogConfig)(nil), "envoy.config.accesslog.v2.TcpGrpcAccessLogConfig")
	proto.RegisterType((*HttpGrpcAccessLogConfig)(nil), "envoy.config.accesslog.v2.HttpGrpcAccessLogConfig")
	proto.RegisterType((*CommonGrpcAccessLogConfig)(nil), "envoy.config.accesslog.v2.CommonGrpcAccessLogConfig")
}

func init() { proto.RegisterFile("envoy/config/accesslog/v2/als.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xbd, 0x4e, 0xc3, 0x30,
	0x10, 0xc7, 0x95, 0xb4, 0x7c, 0xd4, 0x2d, 0x12, 0xca, 0x40, 0x3f, 0x24, 0xaa, 0x12, 0x3a, 0x74,
	0x4a, 0xa4, 0xc0, 0x0b, 0xd0, 0x0e, 0x54, 0xa8, 0x30, 0x84, 0x4e, 0x2c, 0x91, 0x71, 0x0e, 0x13,
	0x29, 0xc9, 0x05, 0xdb, 0x44, 0x62, 0x62, 0x67, 0x62, 0xe2, 0x61, 0x98, 0x78, 0x1d, 0xde, 0x02,
	0xc5, 0xe6, 0x23, 0x45, 0x74, 0x66, 0xb3, 0x74, 0x3f, 0xff, 0xee, 0xee, 0xaf, 0x23, 0x87, 0x90,
	0x97, 0xf8, 0xe0, 0x33, 0xcc, 0x6f, 0x12, 0xee, 0x53, 0xc6, 0x40, 0xca, 0x14, 0xb9, 0x5f, 0x06,
	0x3e, 0x4d, 0xa5, 0x57, 0x08, 0x54, 0xe8, 0xf4, 0x35, 0xe4, 0x19, 0xc8, 0xfb, 0x86, 0xbc, 0x32,
	0x18, 0x8c, 0xcd, 0x7f, 0x5a, 0x24, 0xd5, 0x17, 0x86, 0x02, 0x7c, 0x2e, 0x0a, 0x16, 0x49, 0x10,
	0x65, 0xc2, 0xc0, 0x08, 0x06, 0xdd, 0x92, 0xa6, 0x49, 0x4c, 0x15, 0xf8, 0x5f, 0x0f, 0x53, 0x70,
	0x1f, 0xc9, 0xde, 0x92, 0x15, 0xa7, 0xa2, 0x60, 0x27, 0xda, 0xba, 0x40, 0x3e, 0xd3, 0x5d, 0x1c,
	0x20, 0x3b, 0x0c, 0xb3, 0x0c, 0xf3, 0xc8, 0xb4, 0xed, 0x59, 0x23, 0x6b, 0xd2, 0x0e, 0x8e, 0xbd,
	0xb5, 0xb3, 0x78, 0x33, 0xcd, 0xff, 0x21, 0x9b, 0x92, 0xd7, 0xf7, 0xb7, 0xc6, 0xc6, 0x93, 0x65,
	0xef, 0x5a, 0x61, 0xc7, 0x68, 0x4d, 0xc5, 0x7d, 0xb1, 0x49, 0x77, 0xae, 0xd4, 0x3f, 0x8e, 0xe0,
	0xcc, 0xc9, 0x01, 0x8d, 0xe3, 0x44, 0x25, 0x98, 0xd3, 0x34, 0x12, 0x70, 0x77, 0x0f, 0x52, 0x45,
	0xb7, 0x40, 0x63, 0x10, 0x32, 0x52, 0x18, 0xa5, 0xc8, 0x7b, 0xf6, 0xa8, 0x31, 0x69, 0x85, 0xfb,
	0x3f, 0x60, 0x68, 0xb8, 0xb9, 0xc1, 0x96, 0xb8, 0x40, 0xee, 0x9c, 0x11, 0x77, 0xc5, 0x24, 0x0b,
	0xcc, 0x25, 0xfc, 0x56, 0x35, 0xb4, 0x6a, 0x58, 0x57, 0x19, 0xb0, 0xee, 0x72, 0x9f, 0x2d, 0xd2,
	0x5f, 0xbb, 0x8d, 0x33, 0x26, 0xdb, 0x29, 0xf2, 0x28, 0xa7, 0x19, 0xe8, 0x54, 0x5a, 0xd3, 0x56,
	0xb5, 0x5f, 0x53, 0xd8, 0x23, 0x2b, 0xdc, 0x4a, 0x91, 0x5f, 0xd0, 0x0c, 0x9c, 0x73, 0xd2, 0xa9,
	0x1f, 0x43, 0xcf, 0xd6, 0xf9, 0x0d, 0x3f, 0xf3, 0xa3, 0x45, 0x52, 0x45, 0x56, 0xdd, 0x8c, 0x57,
	0xf5, 0xb8, 0x34, 0xd4, 0x4a, 0x52, 0x6d, 0x5e, 0x2b, 0x34, 0xaf, 0xec, 0x32, 0xb8, 0xde, 0xd4,
	0x97, 0x73, 0xf4, 0x11, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x6e, 0x6a, 0x37, 0xba, 0x02, 0x00, 0x00,
}
