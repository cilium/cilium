// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/accesslog/v2/accesslog.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	envoy/config/filter/accesslog/v2/accesslog.proto

It has these top-level messages:
	AccessLog
	AccessLogFilter
	ComparisonFilter
	StatusCodeFilter
	DurationFilter
	NotHealthCheckFilter
	TraceableFilter
	RuntimeFilter
	AndFilter
	OrFilter
	HeaderFilter
	ResponseFlagFilter
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_route "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/route"
import envoy_type1 "github.com/cilium/cilium/pkg/envoy/envoy/type"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ComparisonFilter_Op int32

const (
	// =
	ComparisonFilter_EQ ComparisonFilter_Op = 0
	// >=
	ComparisonFilter_GE ComparisonFilter_Op = 1
	// <=
	ComparisonFilter_LE ComparisonFilter_Op = 2
)

var ComparisonFilter_Op_name = map[int32]string{
	0: "EQ",
	1: "GE",
	2: "LE",
}
var ComparisonFilter_Op_value = map[string]int32{
	"EQ": 0,
	"GE": 1,
	"LE": 2,
}

func (x ComparisonFilter_Op) String() string {
	return proto.EnumName(ComparisonFilter_Op_name, int32(x))
}
func (ComparisonFilter_Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type AccessLog struct {
	// The name of the access log implementation to instantiate. The name must
	// match a statically registered access log. Current built-in loggers include:
	//
	// #. "envoy.file_access_log"
	// #. "envoy.http_grpc_access_log"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Filter which is used to determine if the access log needs to be written.
	Filter *AccessLogFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// Custom configuration that depends on the access log being instantiated. Built-in configurations
	// include:
	//
	// #. "envoy.file_access_log": :ref:`FileAccessLog
	//    <envoy_api_msg_config.accesslog.v2.FileAccessLog>`
	// #. "envoy.http_grpc_access_log": :ref:`HttpGrpcAccessLogConfig
	//    <envoy_api_msg_config.accesslog.v2.HttpGrpcAccessLogConfig>`
	Config *google_protobuf.Struct `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *AccessLog) Reset()                    { *m = AccessLog{} }
func (m *AccessLog) String() string            { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()               {}
func (*AccessLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccessLog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessLog) GetFilter() *AccessLogFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *AccessLog) GetConfig() *google_protobuf.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type AccessLogFilter struct {
	// Types that are valid to be assigned to FilterSpecifier:
	//	*AccessLogFilter_StatusCodeFilter
	//	*AccessLogFilter_DurationFilter
	//	*AccessLogFilter_NotHealthCheckFilter
	//	*AccessLogFilter_TraceableFilter
	//	*AccessLogFilter_RuntimeFilter
	//	*AccessLogFilter_AndFilter
	//	*AccessLogFilter_OrFilter
	//	*AccessLogFilter_HeaderFilter
	//	*AccessLogFilter_ResponseFlagFilter
	FilterSpecifier isAccessLogFilter_FilterSpecifier `protobuf_oneof:"filter_specifier"`
}

func (m *AccessLogFilter) Reset()                    { *m = AccessLogFilter{} }
func (m *AccessLogFilter) String() string            { return proto.CompactTextString(m) }
func (*AccessLogFilter) ProtoMessage()               {}
func (*AccessLogFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isAccessLogFilter_FilterSpecifier interface {
	isAccessLogFilter_FilterSpecifier()
}

type AccessLogFilter_StatusCodeFilter struct {
	StatusCodeFilter *StatusCodeFilter `protobuf:"bytes,1,opt,name=status_code_filter,json=statusCodeFilter,oneof"`
}
type AccessLogFilter_DurationFilter struct {
	DurationFilter *DurationFilter `protobuf:"bytes,2,opt,name=duration_filter,json=durationFilter,oneof"`
}
type AccessLogFilter_NotHealthCheckFilter struct {
	NotHealthCheckFilter *NotHealthCheckFilter `protobuf:"bytes,3,opt,name=not_health_check_filter,json=notHealthCheckFilter,oneof"`
}
type AccessLogFilter_TraceableFilter struct {
	TraceableFilter *TraceableFilter `protobuf:"bytes,4,opt,name=traceable_filter,json=traceableFilter,oneof"`
}
type AccessLogFilter_RuntimeFilter struct {
	RuntimeFilter *RuntimeFilter `protobuf:"bytes,5,opt,name=runtime_filter,json=runtimeFilter,oneof"`
}
type AccessLogFilter_AndFilter struct {
	AndFilter *AndFilter `protobuf:"bytes,6,opt,name=and_filter,json=andFilter,oneof"`
}
type AccessLogFilter_OrFilter struct {
	OrFilter *OrFilter `protobuf:"bytes,7,opt,name=or_filter,json=orFilter,oneof"`
}
type AccessLogFilter_HeaderFilter struct {
	HeaderFilter *HeaderFilter `protobuf:"bytes,8,opt,name=header_filter,json=headerFilter,oneof"`
}
type AccessLogFilter_ResponseFlagFilter struct {
	ResponseFlagFilter *ResponseFlagFilter `protobuf:"bytes,9,opt,name=response_flag_filter,json=responseFlagFilter,oneof"`
}

func (*AccessLogFilter_StatusCodeFilter) isAccessLogFilter_FilterSpecifier()     {}
func (*AccessLogFilter_DurationFilter) isAccessLogFilter_FilterSpecifier()       {}
func (*AccessLogFilter_NotHealthCheckFilter) isAccessLogFilter_FilterSpecifier() {}
func (*AccessLogFilter_TraceableFilter) isAccessLogFilter_FilterSpecifier()      {}
func (*AccessLogFilter_RuntimeFilter) isAccessLogFilter_FilterSpecifier()        {}
func (*AccessLogFilter_AndFilter) isAccessLogFilter_FilterSpecifier()            {}
func (*AccessLogFilter_OrFilter) isAccessLogFilter_FilterSpecifier()             {}
func (*AccessLogFilter_HeaderFilter) isAccessLogFilter_FilterSpecifier()         {}
func (*AccessLogFilter_ResponseFlagFilter) isAccessLogFilter_FilterSpecifier()   {}

func (m *AccessLogFilter) GetFilterSpecifier() isAccessLogFilter_FilterSpecifier {
	if m != nil {
		return m.FilterSpecifier
	}
	return nil
}

func (m *AccessLogFilter) GetStatusCodeFilter() *StatusCodeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_StatusCodeFilter); ok {
		return x.StatusCodeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetDurationFilter() *DurationFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_DurationFilter); ok {
		return x.DurationFilter
	}
	return nil
}

func (m *AccessLogFilter) GetNotHealthCheckFilter() *NotHealthCheckFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_NotHealthCheckFilter); ok {
		return x.NotHealthCheckFilter
	}
	return nil
}

func (m *AccessLogFilter) GetTraceableFilter() *TraceableFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_TraceableFilter); ok {
		return x.TraceableFilter
	}
	return nil
}

func (m *AccessLogFilter) GetRuntimeFilter() *RuntimeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_RuntimeFilter); ok {
		return x.RuntimeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetAndFilter() *AndFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_AndFilter); ok {
		return x.AndFilter
	}
	return nil
}

func (m *AccessLogFilter) GetOrFilter() *OrFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_OrFilter); ok {
		return x.OrFilter
	}
	return nil
}

func (m *AccessLogFilter) GetHeaderFilter() *HeaderFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_HeaderFilter); ok {
		return x.HeaderFilter
	}
	return nil
}

func (m *AccessLogFilter) GetResponseFlagFilter() *ResponseFlagFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_ResponseFlagFilter); ok {
		return x.ResponseFlagFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AccessLogFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AccessLogFilter_OneofMarshaler, _AccessLogFilter_OneofUnmarshaler, _AccessLogFilter_OneofSizer, []interface{}{
		(*AccessLogFilter_StatusCodeFilter)(nil),
		(*AccessLogFilter_DurationFilter)(nil),
		(*AccessLogFilter_NotHealthCheckFilter)(nil),
		(*AccessLogFilter_TraceableFilter)(nil),
		(*AccessLogFilter_RuntimeFilter)(nil),
		(*AccessLogFilter_AndFilter)(nil),
		(*AccessLogFilter_OrFilter)(nil),
		(*AccessLogFilter_HeaderFilter)(nil),
		(*AccessLogFilter_ResponseFlagFilter)(nil),
	}
}

func _AccessLogFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatusCodeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_DurationFilter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DurationFilter); err != nil {
			return err
		}
	case *AccessLogFilter_NotHealthCheckFilter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotHealthCheckFilter); err != nil {
			return err
		}
	case *AccessLogFilter_TraceableFilter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TraceableFilter); err != nil {
			return err
		}
	case *AccessLogFilter_RuntimeFilter:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuntimeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_AndFilter:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AndFilter); err != nil {
			return err
		}
	case *AccessLogFilter_OrFilter:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrFilter); err != nil {
			return err
		}
	case *AccessLogFilter_HeaderFilter:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HeaderFilter); err != nil {
			return err
		}
	case *AccessLogFilter_ResponseFlagFilter:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ResponseFlagFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AccessLogFilter.FilterSpecifier has unexpected type %T", x)
	}
	return nil
}

func _AccessLogFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AccessLogFilter)
	switch tag {
	case 1: // filter_specifier.status_code_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusCodeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_StatusCodeFilter{msg}
		return true, err
	case 2: // filter_specifier.duration_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_DurationFilter{msg}
		return true, err
	case 3: // filter_specifier.not_health_check_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotHealthCheckFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_NotHealthCheckFilter{msg}
		return true, err
	case 4: // filter_specifier.traceable_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceableFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_TraceableFilter{msg}
		return true, err
	case 5: // filter_specifier.runtime_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_RuntimeFilter{msg}
		return true, err
	case 6: // filter_specifier.and_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AndFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_AndFilter{msg}
		return true, err
	case 7: // filter_specifier.or_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_OrFilter{msg}
		return true, err
	case 8: // filter_specifier.header_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HeaderFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_HeaderFilter{msg}
		return true, err
	case 9: // filter_specifier.response_flag_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ResponseFlagFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_ResponseFlagFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AccessLogFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		s := proto.Size(x.StatusCodeFilter)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_DurationFilter:
		s := proto.Size(x.DurationFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_NotHealthCheckFilter:
		s := proto.Size(x.NotHealthCheckFilter)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_TraceableFilter:
		s := proto.Size(x.TraceableFilter)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_RuntimeFilter:
		s := proto.Size(x.RuntimeFilter)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_AndFilter:
		s := proto.Size(x.AndFilter)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_OrFilter:
		s := proto.Size(x.OrFilter)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_HeaderFilter:
		s := proto.Size(x.HeaderFilter)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_ResponseFlagFilter:
		s := proto.Size(x.ResponseFlagFilter)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Filter on an integer comparison.
type ComparisonFilter struct {
	// Comparison operator.
	Op ComparisonFilter_Op `protobuf:"varint,1,opt,name=op,enum=envoy.config.filter.accesslog.v2.ComparisonFilter_Op" json:"op,omitempty"`
	// Value to compare against.
	Value *envoy_api_v2_core.RuntimeUInt32 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ComparisonFilter) Reset()                    { *m = ComparisonFilter{} }
func (m *ComparisonFilter) String() string            { return proto.CompactTextString(m) }
func (*ComparisonFilter) ProtoMessage()               {}
func (*ComparisonFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ComparisonFilter) GetOp() ComparisonFilter_Op {
	if m != nil {
		return m.Op
	}
	return ComparisonFilter_EQ
}

func (m *ComparisonFilter) GetValue() *envoy_api_v2_core.RuntimeUInt32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Filters on HTTP response/status code.
type StatusCodeFilter struct {
	// Comparison.
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *StatusCodeFilter) Reset()                    { *m = StatusCodeFilter{} }
func (m *StatusCodeFilter) String() string            { return proto.CompactTextString(m) }
func (*StatusCodeFilter) ProtoMessage()               {}
func (*StatusCodeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatusCodeFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

// Filters on total request duration in milliseconds.
type DurationFilter struct {
	// Comparison.
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *DurationFilter) Reset()                    { *m = DurationFilter{} }
func (m *DurationFilter) String() string            { return proto.CompactTextString(m) }
func (*DurationFilter) ProtoMessage()               {}
func (*DurationFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DurationFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

// Filters for requests that are not health check requests. A health check
// request is marked by the health check filter.
type NotHealthCheckFilter struct {
}

func (m *NotHealthCheckFilter) Reset()                    { *m = NotHealthCheckFilter{} }
func (m *NotHealthCheckFilter) String() string            { return proto.CompactTextString(m) }
func (*NotHealthCheckFilter) ProtoMessage()               {}
func (*NotHealthCheckFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// Filters for requests that are traceable. See the tracing overview for more
// information on how a request becomes traceable.
type TraceableFilter struct {
}

func (m *TraceableFilter) Reset()                    { *m = TraceableFilter{} }
func (m *TraceableFilter) String() string            { return proto.CompactTextString(m) }
func (*TraceableFilter) ProtoMessage()               {}
func (*TraceableFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Filters for random sampling of requests.
type RuntimeFilter struct {
	// Runtime key to get an optional overridden numerator for use in the *percent_sampled* field.
	// If found in runtime, this value will replace the default numerator.
	RuntimeKey string `protobuf:"bytes,1,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
	// The default sampling percentage. If not specified, defaults to 0% with denominator of 100.
	PercentSampled *envoy_type1.FractionalPercent `protobuf:"bytes,2,opt,name=percent_sampled,json=percentSampled" json:"percent_sampled,omitempty"`
	// By default, sampling pivots on the header
	// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being present. If
	// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is present, the filter will
	// consistently sample across multiple hosts based on the runtime key value and the value
	// extracted from :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is
	// missing, or *use_independent_randomness* is set to true, the filter will randomly sample based
	// on the runtime key value alone. *use_independent_randomness* can be used for logging kill
	// switches within complex nested :ref:`AndFilter
	// <envoy_api_msg_config.filter.accesslog.v2.AndFilter>` and :ref:`OrFilter
	// <envoy_api_msg_config.filter.accesslog.v2.OrFilter>` blocks that are easier to reason about
	// from a probability perspective (i.e., setting to true will cause the filter to behave like
	// an independent random variable when composed within logical operator filters).
	UseIndependentRandomness bool `protobuf:"varint,3,opt,name=use_independent_randomness,json=useIndependentRandomness" json:"use_independent_randomness,omitempty"`
}

func (m *RuntimeFilter) Reset()                    { *m = RuntimeFilter{} }
func (m *RuntimeFilter) String() string            { return proto.CompactTextString(m) }
func (*RuntimeFilter) ProtoMessage()               {}
func (*RuntimeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RuntimeFilter) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

func (m *RuntimeFilter) GetPercentSampled() *envoy_type1.FractionalPercent {
	if m != nil {
		return m.PercentSampled
	}
	return nil
}

func (m *RuntimeFilter) GetUseIndependentRandomness() bool {
	if m != nil {
		return m.UseIndependentRandomness
	}
	return false
}

// Performs a logical “and” operation on the result of each filter in filters.
// Filters are evaluated sequentially and if one of them returns false, the
// filter returns false immediately.
type AndFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *AndFilter) Reset()                    { *m = AndFilter{} }
func (m *AndFilter) String() string            { return proto.CompactTextString(m) }
func (*AndFilter) ProtoMessage()               {}
func (*AndFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AndFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Performs a logical “or” operation on the result of each individual filter.
// Filters are evaluated sequentially and if one of them returns true, the
// filter returns true immediately.
type OrFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *OrFilter) Reset()                    { *m = OrFilter{} }
func (m *OrFilter) String() string            { return proto.CompactTextString(m) }
func (*OrFilter) ProtoMessage()               {}
func (*OrFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *OrFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Filters requests based on the presence or value of a request header.
type HeaderFilter struct {
	// Only requests with a header which matches the specified HeaderMatcher will pass the filter
	// check.
	Header *envoy_api_v2_route.HeaderMatcher `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *HeaderFilter) Reset()                    { *m = HeaderFilter{} }
func (m *HeaderFilter) String() string            { return proto.CompactTextString(m) }
func (*HeaderFilter) ProtoMessage()               {}
func (*HeaderFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *HeaderFilter) GetHeader() *envoy_api_v2_route.HeaderMatcher {
	if m != nil {
		return m.Header
	}
	return nil
}

// Filters requests that received responses with an Envoy response flag set.
// A list of the response flags can be found
// in the access log formatter :ref:`documentation<config_access_log_format_response_flags>`.
type ResponseFlagFilter struct {
	// Only responses with the any of the flags listed in this field will be logged.
	// This field is optional. If it is not specified, then any response flag will pass
	// the filter check.
	Flags []string `protobuf:"bytes,1,rep,name=flags" json:"flags,omitempty"`
}

func (m *ResponseFlagFilter) Reset()                    { *m = ResponseFlagFilter{} }
func (m *ResponseFlagFilter) String() string            { return proto.CompactTextString(m) }
func (*ResponseFlagFilter) ProtoMessage()               {}
func (*ResponseFlagFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ResponseFlagFilter) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

func init() {
	proto.RegisterType((*AccessLog)(nil), "envoy.config.filter.accesslog.v2.AccessLog")
	proto.RegisterType((*AccessLogFilter)(nil), "envoy.config.filter.accesslog.v2.AccessLogFilter")
	proto.RegisterType((*ComparisonFilter)(nil), "envoy.config.filter.accesslog.v2.ComparisonFilter")
	proto.RegisterType((*StatusCodeFilter)(nil), "envoy.config.filter.accesslog.v2.StatusCodeFilter")
	proto.RegisterType((*DurationFilter)(nil), "envoy.config.filter.accesslog.v2.DurationFilter")
	proto.RegisterType((*NotHealthCheckFilter)(nil), "envoy.config.filter.accesslog.v2.NotHealthCheckFilter")
	proto.RegisterType((*TraceableFilter)(nil), "envoy.config.filter.accesslog.v2.TraceableFilter")
	proto.RegisterType((*RuntimeFilter)(nil), "envoy.config.filter.accesslog.v2.RuntimeFilter")
	proto.RegisterType((*AndFilter)(nil), "envoy.config.filter.accesslog.v2.AndFilter")
	proto.RegisterType((*OrFilter)(nil), "envoy.config.filter.accesslog.v2.OrFilter")
	proto.RegisterType((*HeaderFilter)(nil), "envoy.config.filter.accesslog.v2.HeaderFilter")
	proto.RegisterType((*ResponseFlagFilter)(nil), "envoy.config.filter.accesslog.v2.ResponseFlagFilter")
	proto.RegisterEnum("envoy.config.filter.accesslog.v2.ComparisonFilter_Op", ComparisonFilter_Op_name, ComparisonFilter_Op_value)
}

func init() { proto.RegisterFile("envoy/config/filter/accesslog/v2/accesslog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x41, 0x6f, 0xdb, 0x36,
	0x14, 0xc7, 0x2b, 0xc6, 0x76, 0xed, 0xd7, 0xc6, 0xf6, 0x88, 0x60, 0xf1, 0x82, 0x6c, 0xf0, 0x74,
	0x2a, 0x3a, 0x40, 0xea, 0xdc, 0x2d, 0x18, 0x86, 0xed, 0x50, 0xa7, 0xf6, 0x62, 0xcc, 0x6b, 0x56,
	0xa6, 0xc6, 0x82, 0x0d, 0xa8, 0x40, 0x4b, 0xb4, 0x2d, 0x54, 0x16, 0x05, 0x8a, 0x32, 0x90, 0xeb,
	0x8e, 0x3b, 0xf6, 0xba, 0x2f, 0x32, 0x6c, 0x97, 0xee, 0xe3, 0xf4, 0xba, 0x4f, 0x30, 0x88, 0xa4,
	0x14, 0xdb, 0x0d, 0xe0, 0x60, 0x58, 0x0f, 0xb6, 0x44, 0x3e, 0xfe, 0x7f, 0xef, 0x3d, 0x8a, 0xef,
	0x11, 0x1e, 0xb1, 0x78, 0xc5, 0xaf, 0x5c, 0x9f, 0xc7, 0xb3, 0x70, 0xee, 0xce, 0xc2, 0x48, 0x32,
	0xe1, 0x52, 0xdf, 0x67, 0x69, 0x1a, 0xf1, 0xb9, 0xbb, 0xea, 0x5d, 0x0f, 0x9c, 0x44, 0x70, 0xc9,
	0x71, 0x57, 0x29, 0x1c, 0xad, 0x70, 0xb4, 0xc2, 0xb9, 0x5e, 0xb4, 0xea, 0x1d, 0x1d, 0x6b, 0x26,
	0x4d, 0xc2, 0x5c, 0xef, 0x73, 0xc1, 0xdc, 0x29, 0x4d, 0x99, 0xd6, 0x1f, 0x7d, 0xb2, 0x61, 0x15,
	0x3c, 0x93, 0x4c, 0xff, 0x1b, 0x7b, 0x47, 0xdb, 0xe5, 0x55, 0xc2, 0xdc, 0x84, 0x09, 0x9f, 0xc5,
	0xd2, 0x58, 0x8e, 0xe7, 0x9c, 0xcf, 0x23, 0xe6, 0xaa, 0xd1, 0x34, 0x9b, 0xb9, 0xa9, 0x14, 0x99,
	0x5f, 0x58, 0x0f, 0x57, 0x34, 0x0a, 0x03, 0x2a, 0x99, 0x5b, 0xbc, 0x68, 0x83, 0xfd, 0xbb, 0x05,
	0x8d, 0x27, 0x2a, 0xbe, 0x31, 0x9f, 0x63, 0x0c, 0x95, 0x98, 0x2e, 0x59, 0xc7, 0xea, 0x5a, 0x0f,
	0x1a, 0x44, 0xbd, 0xe3, 0x11, 0xd4, 0x74, 0x1e, 0x1d, 0xd4, 0xb5, 0x1e, 0xdc, 0xeb, 0x7d, 0xee,
	0xec, 0xca, 0xd1, 0x29, 0x81, 0x43, 0x65, 0x24, 0x06, 0x80, 0x5d, 0xa8, 0x69, 0x55, 0x67, 0x4f,
	0xa1, 0x0e, 0x1d, 0x1d, 0xb4, 0x53, 0x04, 0xed, 0x5c, 0xa8, 0xa0, 0x89, 0x59, 0x66, 0xff, 0x53,
	0x83, 0xd6, 0x16, 0x0c, 0x4f, 0x01, 0xa7, 0x92, 0xca, 0x2c, 0xf5, 0x7c, 0x1e, 0x30, 0xcf, 0xc4,
	0x66, 0x29, 0x60, 0x6f, 0x77, 0x6c, 0x17, 0x4a, 0x7b, 0xca, 0x03, 0xa6, 0x79, 0x67, 0x77, 0x48,
	0x3b, 0xdd, 0x9a, 0xc3, 0xbf, 0x40, 0x2b, 0xc8, 0x04, 0x95, 0x21, 0x8f, 0xbd, 0x8d, 0xe4, 0x1f,
	0xed, 0x76, 0xf0, 0xd4, 0x08, 0x4b, 0x7c, 0x33, 0xd8, 0x98, 0xc1, 0x1c, 0x0e, 0x63, 0x2e, 0xbd,
	0x05, 0xa3, 0x91, 0x5c, 0x78, 0xfe, 0x82, 0xf9, 0xaf, 0x0a, 0x27, 0x7a, 0x5b, 0x4e, 0x76, 0x3b,
	0x79, 0xc6, 0xe5, 0x99, 0xd2, 0x9f, 0xe6, 0xf2, 0xd2, 0xd5, 0x41, 0x7c, 0xc3, 0x3c, 0x7e, 0x09,
	0x6d, 0x29, 0xa8, 0xcf, 0xe8, 0x34, 0x2a, 0xf7, 0xab, 0x72, 0xdb, 0x6f, 0xf9, 0xa2, 0x50, 0x96,
	0x4e, 0x5a, 0x72, 0x73, 0x0a, 0x5f, 0x42, 0x53, 0x64, 0xb1, 0x0c, 0x97, 0x25, 0xbd, 0xaa, 0xe8,
	0xee, 0x6e, 0x3a, 0xd1, 0xba, 0x92, 0xbd, 0x2f, 0xd6, 0x27, 0xf0, 0x18, 0x80, 0xc6, 0x41, 0x41,
	0xad, 0x29, 0xea, 0x67, 0xb7, 0x38, 0x7f, 0x71, 0x50, 0x12, 0x1b, 0xb4, 0x18, 0xe0, 0x11, 0x34,
	0xb8, 0x28, 0x60, 0x77, 0x15, 0xec, 0xe1, 0x6e, 0xd8, 0xb9, 0x28, 0x59, 0x75, 0x6e, 0xde, 0xf1,
	0x04, 0xf6, 0x17, 0x8c, 0x06, 0xac, 0xc4, 0xd5, 0x15, 0xce, 0xd9, 0x8d, 0x3b, 0x53, 0xb2, 0x12,
	0x79, 0x7f, 0xb1, 0x36, 0xc6, 0x0b, 0x38, 0x10, 0x2c, 0x4d, 0x78, 0x9c, 0x32, 0x6f, 0x16, 0xd1,
	0x79, 0x41, 0x6f, 0x28, 0xfa, 0x17, 0xb7, 0xd8, 0x4f, 0xa3, 0x1e, 0x46, 0x74, 0x5e, 0xfa, 0xc0,
	0xe2, 0x9d, 0xd9, 0xfe, 0x47, 0xd0, 0xd6, 0x7a, 0x2f, 0x4d, 0x98, 0x1f, 0xce, 0x42, 0x26, 0x70,
	0xf5, 0x8f, 0xb7, 0x6f, 0xf6, 0x2c, 0xfb, 0x2f, 0x0b, 0xda, 0xa7, 0x7c, 0x99, 0x50, 0x11, 0xa6,
	0xe5, 0xa1, 0x7d, 0x0e, 0x88, 0x27, 0xaa, 0xca, 0x9a, 0xbd, 0x2f, 0x77, 0xc7, 0xb1, 0xad, 0x77,
	0xce, 0x93, 0x3e, 0xfc, 0xf9, 0xf6, 0xcd, 0x5e, 0xf5, 0x57, 0x0b, 0xb5, 0x2d, 0x82, 0x78, 0x82,
	0x4f, 0xa0, 0xba, 0xa2, 0x51, 0xc6, 0x4c, 0x69, 0x75, 0x0d, 0x95, 0x26, 0x61, 0x4e, 0xc8, 0x3b,
	0x63, 0x71, 0x3c, 0x26, 0xa3, 0x58, 0x3e, 0xee, 0x11, 0xbd, 0xdc, 0x3e, 0x06, 0x74, 0x9e, 0xe0,
	0x1a, 0xa0, 0xc1, 0xf3, 0xf6, 0x9d, 0xfc, 0xf9, 0xdd, 0xa0, 0x6d, 0xe5, 0xcf, 0xf1, 0xa0, 0x8d,
	0x6c, 0x01, 0xed, 0xed, 0x12, 0xc7, 0x2f, 0x01, 0xfc, 0x32, 0xa0, 0xdb, 0xb7, 0x8a, 0xed, 0x24,
	0x4c, 0x06, 0xbf, 0xa9, 0x0c, 0xd6, 0x88, 0x76, 0x02, 0xcd, 0xcd, 0xaa, 0x7f, 0xef, 0x1e, 0x3f,
	0x84, 0x83, 0x9b, 0x5a, 0x80, 0xfd, 0x01, 0xb4, 0xb6, 0x0a, 0xd6, 0xfe, 0xdb, 0x82, 0xfd, 0x8d,
	0x32, 0xc3, 0x0f, 0xe1, 0x5e, 0x51, 0xaf, 0xaf, 0xd8, 0x95, 0x6e, 0xf6, 0xfd, 0x46, 0xee, 0xa9,
	0x22, 0x50, 0xd7, 0x22, 0x60, 0xac, 0xdf, 0xb3, 0x2b, 0x3c, 0x84, 0x96, 0xb9, 0x67, 0xbc, 0x94,
	0x2e, 0x93, 0x88, 0x05, 0xe6, 0x73, 0x7d, 0x6c, 0xb2, 0xc9, 0xaf, 0x22, 0x67, 0x28, 0xa8, 0x9f,
	0x67, 0x4f, 0xa3, 0x1f, 0xf5, 0x62, 0xd2, 0x34, 0xaa, 0x0b, 0x2d, 0xc2, 0xdf, 0xc0, 0x51, 0x96,
	0x32, 0x2f, 0x8c, 0x03, 0x96, 0xb0, 0x38, 0xc8, 0x79, 0x82, 0xc6, 0x01, 0x5f, 0xc6, 0x2c, 0x4d,
	0x55, 0xdf, 0xab, 0x93, 0x4e, 0x96, 0xb2, 0xd1, 0xf5, 0x02, 0x52, 0xda, 0xed, 0x00, 0x1a, 0x65,
	0x4d, 0xe3, 0x9f, 0xe0, 0xae, 0xde, 0xbb, 0xb4, 0x63, 0x75, 0xf7, 0xfe, 0xd3, 0x8d, 0x64, 0xf6,
	0xf5, 0xb5, 0x85, 0xea, 0x88, 0x14, 0x34, 0xdb, 0x87, 0x7a, 0x51, 0xec, 0xeb, 0x4e, 0xd0, 0xff,
	0xea, 0x64, 0x02, 0xf7, 0xd7, 0x5b, 0x00, 0x1e, 0x40, 0x4d, 0xb7, 0x00, 0x73, 0x4a, 0x3e, 0xdd,
	0x2c, 0x03, 0x7d, 0xf9, 0x6b, 0xc5, 0x0f, 0x54, 0xfa, 0x8b, 0xad, 0x43, 0x61, 0xc4, 0x76, 0x0c,
	0xf8, 0xdd, 0xda, 0xc7, 0x97, 0x50, 0xcd, 0xdb, 0x88, 0xde, 0xa8, 0x46, 0xbf, 0x9f, 0x0b, 0xbf,
	0x7d, 0x6d, 0x7d, 0x6d, 0x7f, 0x25, 0x4e, 0x08, 0x1a, 0x9f, 0x11, 0x34, 0xc9, 0x7f, 0x2f, 0x08,
	0x1a, 0x13, 0x82, 0x26, 0xf9, 0x6f, 0x48, 0xd0, 0xe4, 0x94, 0xa0, 0xc9, 0x39, 0x41, 0xcf, 0x08,
	0x41, 0x4f, 0x47, 0x04, 0x0d, 0x47, 0x04, 0x91, 0x31, 0xa9, 0x4c, 0x9e, 0x0c, 0x2e, 0x89, 0x06,
	0xf6, 0x2b, 0x3f, 0xa3, 0x55, 0x6f, 0x5a, 0x53, 0x17, 0xf7, 0xe3, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xba, 0x9f, 0x3d, 0xc8, 0x29, 0x09, 0x00, 0x00,
}
