// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/accesslog/v2/accesslog.proto

/*
Package v2 is a generated protocol buffer package.

It is generated from these files:
	envoy/config/filter/accesslog/v2/accesslog.proto

It has these top-level messages:
	AccessLogCommon
	ResponseFlags
	TLSProperties
	TCPAccessLogEntry
	HTTPRequestProperties
	HTTPResponseProperties
	HTTPAccessLogEntry
	AccessLog
	AccessLogFilter
	ComparisonFilter
	StatusCodeFilter
	DurationFilter
	NotHealthCheckFilter
	TraceableFilter
	RuntimeFilter
	AndFilter
	OrFilter
	FileAccessLog
*/
package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import google_protobuf2 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf3 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TLSProperties_TLSVersion int32

const (
	TLSProperties_VERSION_UNSPECIFIED TLSProperties_TLSVersion = 0
	TLSProperties_TLSv1               TLSProperties_TLSVersion = 1
	TLSProperties_TLSv1_1             TLSProperties_TLSVersion = 2
	TLSProperties_TLSv1_2             TLSProperties_TLSVersion = 3
	TLSProperties_TLSv1_3             TLSProperties_TLSVersion = 4
)

var TLSProperties_TLSVersion_name = map[int32]string{
	0: "VERSION_UNSPECIFIED",
	1: "TLSv1",
	2: "TLSv1_1",
	3: "TLSv1_2",
	4: "TLSv1_3",
}
var TLSProperties_TLSVersion_value = map[string]int32{
	"VERSION_UNSPECIFIED": 0,
	"TLSv1":               1,
	"TLSv1_1":             2,
	"TLSv1_2":             3,
	"TLSv1_3":             4,
}

func (x TLSProperties_TLSVersion) String() string {
	return proto.EnumName(TLSProperties_TLSVersion_name, int32(x))
}
func (TLSProperties_TLSVersion) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// HTTP version
type HTTPAccessLogEntry_HTTPVersion int32

const (
	HTTPAccessLogEntry_PROTOCOL_UNSPECIFIED HTTPAccessLogEntry_HTTPVersion = 0
	HTTPAccessLogEntry_HTTP10               HTTPAccessLogEntry_HTTPVersion = 1
	HTTPAccessLogEntry_HTTP11               HTTPAccessLogEntry_HTTPVersion = 2
	HTTPAccessLogEntry_HTTP2                HTTPAccessLogEntry_HTTPVersion = 3
)

var HTTPAccessLogEntry_HTTPVersion_name = map[int32]string{
	0: "PROTOCOL_UNSPECIFIED",
	1: "HTTP10",
	2: "HTTP11",
	3: "HTTP2",
}
var HTTPAccessLogEntry_HTTPVersion_value = map[string]int32{
	"PROTOCOL_UNSPECIFIED": 0,
	"HTTP10":               1,
	"HTTP11":               2,
	"HTTP2":                3,
}

func (x HTTPAccessLogEntry_HTTPVersion) String() string {
	return proto.EnumName(HTTPAccessLogEntry_HTTPVersion_name, int32(x))
}
func (HTTPAccessLogEntry_HTTPVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

type ComparisonFilter_Op int32

const (
	// =
	ComparisonFilter_EQ ComparisonFilter_Op = 0
	// >=
	ComparisonFilter_GE ComparisonFilter_Op = 1
)

var ComparisonFilter_Op_name = map[int32]string{
	0: "EQ",
	1: "GE",
}
var ComparisonFilter_Op_value = map[string]int32{
	"EQ": 0,
	"GE": 1,
}

func (x ComparisonFilter_Op) String() string {
	return proto.EnumName(ComparisonFilter_Op_name, int32(x))
}
func (ComparisonFilter_Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

// Defines fields that are shared by all Envoy access logs.
// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type AccessLogCommon struct {
	// This field indicates the rate at which this log entry was sampled.
	// Valid range is (0.0, 1.0].
	SampleRate float64 `protobuf:"fixed64,1,opt,name=sample_rate,json=sampleRate" json:"sample_rate,omitempty"`
	// This field is the remote/origin address on which the request from the user was received.
	// Note: This may not be the physical peer. E.g, if the remote address is inferred from for
	//       example the x-forwarder-for header, proxy protocol, etc.
	DownstreamRemoteAddress *envoy_api_v2_core.Address `protobuf:"bytes,2,opt,name=downstream_remote_address,json=downstreamRemoteAddress" json:"downstream_remote_address,omitempty"`
	// This field is the local/destination address on which the request from the user was received.
	DownstreamLocalAddress *envoy_api_v2_core.Address `protobuf:"bytes,3,opt,name=downstream_local_address,json=downstreamLocalAddress" json:"downstream_local_address,omitempty"`
	// If the connection is secure, this field will contain TLS properties.
	TlsProperties *TLSProperties `protobuf:"bytes,4,opt,name=tls_properties,json=tlsProperties" json:"tls_properties,omitempty"`
	// The time that Envoy started servicing this request. This is effectively the time that the first
	// downstream byte is received.
	StartTime *google_protobuf3.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// Interval between the first downstream byte received and the last
	// downstream byte received (i.e. time it takes to receive a request).
	TimeToLastRxByte *google_protobuf2.Duration `protobuf:"bytes,6,opt,name=time_to_last_rx_byte,json=timeToLastRxByte" json:"time_to_last_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the first upstream byte sent. There may
	// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
	// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
	// not accounting for kernel socket buffer time, etc.
	TimeToFirstUpstreamTxByte *google_protobuf2.Duration `protobuf:"bytes,7,opt,name=time_to_first_upstream_tx_byte,json=timeToFirstUpstreamTxByte" json:"time_to_first_upstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the last upstream byte sent. There may
	// by considerable delta between *time_to_last_rx_byte* and this value due to filters.
	// Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
	// not accounting for kernel socket buffer time, etc.
	TimeToLastUpstreamTxByte *google_protobuf2.Duration `protobuf:"bytes,8,opt,name=time_to_last_upstream_tx_byte,json=timeToLastUpstreamTxByte" json:"time_to_last_upstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the first upstream
	// byte received (i.e. time it takes to start receiving a response).
	TimeToFirstUpstreamRxByte *google_protobuf2.Duration `protobuf:"bytes,9,opt,name=time_to_first_upstream_rx_byte,json=timeToFirstUpstreamRxByte" json:"time_to_first_upstream_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the last upstream
	// byte received (i.e. time it takes to receive a complete response).
	TimeToLastUpstreamRxByte *google_protobuf2.Duration `protobuf:"bytes,10,opt,name=time_to_last_upstream_rx_byte,json=timeToLastUpstreamRxByte" json:"time_to_last_upstream_rx_byte,omitempty"`
	// Interval between the first downstream byte received and the first downstream byte sent.
	// There may be a considerable delta between the *time_to_first_upstream_rx_byte* and this field
	// due to filters. Additionally, the same caveats apply as documented in
	// *time_to_last_downstream_tx_byte* about not accounting for kernel socket buffer time, etc.
	TimeToFirstDownstreamTxByte *google_protobuf2.Duration `protobuf:"bytes,11,opt,name=time_to_first_downstream_tx_byte,json=timeToFirstDownstreamTxByte" json:"time_to_first_downstream_tx_byte,omitempty"`
	// Interval between the first downstream byte received and the last downstream byte sent.
	// Depending on protocol, buffering, windowing, filters, etc. there may be a considerable delta
	// between *time_to_last_upstream_rx_byte* and this field. Note also that this is an approximate
	// time. In the current implementation it does not include kernel socket buffer time. In the
	// current implementation it also does not include send window buffering inside the HTTP/2 codec.
	// In the future it is likely that work will be done to make this duration more accurate.
	TimeToLastDownstreamTxByte *google_protobuf2.Duration `protobuf:"bytes,12,opt,name=time_to_last_downstream_tx_byte,json=timeToLastDownstreamTxByte" json:"time_to_last_downstream_tx_byte,omitempty"`
	// The upstream remote/destination address that handles this exchange. This does not include
	// retries.
	UpstreamRemoteAddress *envoy_api_v2_core.Address `protobuf:"bytes,13,opt,name=upstream_remote_address,json=upstreamRemoteAddress" json:"upstream_remote_address,omitempty"`
	// The upstream local/origin address that handles this exchange. This does not include retries.
	UpstreamLocalAddress *envoy_api_v2_core.Address `protobuf:"bytes,14,opt,name=upstream_local_address,json=upstreamLocalAddress" json:"upstream_local_address,omitempty"`
	// The upstream cluster that *upstream_remote_address* belongs to.
	UpstreamCluster string `protobuf:"bytes,15,opt,name=upstream_cluster,json=upstreamCluster" json:"upstream_cluster,omitempty"`
	// Flags indicating occurences during request/response processing.
	ResponseFlags *ResponseFlags `protobuf:"bytes,16,opt,name=response_flags,json=responseFlags" json:"response_flags,omitempty"`
	// All metadata encountered during request processing, including endpoint
	// selection.
	//
	// This can be used to associate IDs attached to the various configurations
	// used to process this request with the access log entry. For example, a
	// route created from a higher level forwarding rule with some ID can place
	// that ID in this field and cross reference later. It can also be used to
	// determine if a canary endpoint was used or not.
	Metadata *envoy_api_v2_core1.Metadata `protobuf:"bytes,17,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *AccessLogCommon) Reset()                    { *m = AccessLogCommon{} }
func (m *AccessLogCommon) String() string            { return proto.CompactTextString(m) }
func (*AccessLogCommon) ProtoMessage()               {}
func (*AccessLogCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AccessLogCommon) GetSampleRate() float64 {
	if m != nil {
		return m.SampleRate
	}
	return 0
}

func (m *AccessLogCommon) GetDownstreamRemoteAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.DownstreamRemoteAddress
	}
	return nil
}

func (m *AccessLogCommon) GetDownstreamLocalAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.DownstreamLocalAddress
	}
	return nil
}

func (m *AccessLogCommon) GetTlsProperties() *TLSProperties {
	if m != nil {
		return m.TlsProperties
	}
	return nil
}

func (m *AccessLogCommon) GetStartTime() *google_protobuf3.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToLastRxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToLastRxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToFirstUpstreamTxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToFirstUpstreamTxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToLastUpstreamTxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToLastUpstreamTxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToFirstUpstreamRxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToFirstUpstreamRxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToLastUpstreamRxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToLastUpstreamRxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToFirstDownstreamTxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToFirstDownstreamTxByte
	}
	return nil
}

func (m *AccessLogCommon) GetTimeToLastDownstreamTxByte() *google_protobuf2.Duration {
	if m != nil {
		return m.TimeToLastDownstreamTxByte
	}
	return nil
}

func (m *AccessLogCommon) GetUpstreamRemoteAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.UpstreamRemoteAddress
	}
	return nil
}

func (m *AccessLogCommon) GetUpstreamLocalAddress() *envoy_api_v2_core.Address {
	if m != nil {
		return m.UpstreamLocalAddress
	}
	return nil
}

func (m *AccessLogCommon) GetUpstreamCluster() string {
	if m != nil {
		return m.UpstreamCluster
	}
	return ""
}

func (m *AccessLogCommon) GetResponseFlags() *ResponseFlags {
	if m != nil {
		return m.ResponseFlags
	}
	return nil
}

func (m *AccessLogCommon) GetMetadata() *envoy_api_v2_core1.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
// Flags indicating occurences during request/response processing.
type ResponseFlags struct {
	// Indicates local server healthcheck failed.
	FailedLocalHealthcheck bool `protobuf:"varint,1,opt,name=failed_local_healthcheck,json=failedLocalHealthcheck" json:"failed_local_healthcheck,omitempty"`
	// Indicates there was no healthy upstream.
	NoHealthyUpstream bool `protobuf:"varint,2,opt,name=no_healthy_upstream,json=noHealthyUpstream" json:"no_healthy_upstream,omitempty"`
	// Indicates an there was an upstream request timeout.
	UpstreamRequestTimeout bool `protobuf:"varint,3,opt,name=upstream_request_timeout,json=upstreamRequestTimeout" json:"upstream_request_timeout,omitempty"`
	// Indicates local codec level reset was sent on the stream.
	LocalReset bool `protobuf:"varint,4,opt,name=local_reset,json=localReset" json:"local_reset,omitempty"`
	// Indicates remote codec level reset was received on the stream.
	UpstreamRemoteReset bool `protobuf:"varint,5,opt,name=upstream_remote_reset,json=upstreamRemoteReset" json:"upstream_remote_reset,omitempty"`
	// Indicates there was a local reset by a connection pool due to an initial connection failure.
	UpstreamConnectionFailure bool `protobuf:"varint,6,opt,name=upstream_connection_failure,json=upstreamConnectionFailure" json:"upstream_connection_failure,omitempty"`
	// Indicates the stream was reset locally due to connection termination.
	UpstreamConnectionTermination bool `protobuf:"varint,7,opt,name=upstream_connection_termination,json=upstreamConnectionTermination" json:"upstream_connection_termination,omitempty"`
	// Indicates the stream was reset because of a resource overflow.
	UpstreamOverflow bool `protobuf:"varint,8,opt,name=upstream_overflow,json=upstreamOverflow" json:"upstream_overflow,omitempty"`
	// Indicates no route was found for the request.
	NoRouteFound bool `protobuf:"varint,9,opt,name=no_route_found,json=noRouteFound" json:"no_route_found,omitempty"`
	// Indicates that the request was delayed before proxying.
	DelayInjected bool `protobuf:"varint,10,opt,name=delay_injected,json=delayInjected" json:"delay_injected,omitempty"`
	// Indicates that the request was aborted with an injected error code.
	FaultInjected bool `protobuf:"varint,11,opt,name=fault_injected,json=faultInjected" json:"fault_injected,omitempty"`
	// Indicates that the request was rate-limited locally.
	RateLimited bool `protobuf:"varint,12,opt,name=rate_limited,json=rateLimited" json:"rate_limited,omitempty"`
}

func (m *ResponseFlags) Reset()                    { *m = ResponseFlags{} }
func (m *ResponseFlags) String() string            { return proto.CompactTextString(m) }
func (*ResponseFlags) ProtoMessage()               {}
func (*ResponseFlags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseFlags) GetFailedLocalHealthcheck() bool {
	if m != nil {
		return m.FailedLocalHealthcheck
	}
	return false
}

func (m *ResponseFlags) GetNoHealthyUpstream() bool {
	if m != nil {
		return m.NoHealthyUpstream
	}
	return false
}

func (m *ResponseFlags) GetUpstreamRequestTimeout() bool {
	if m != nil {
		return m.UpstreamRequestTimeout
	}
	return false
}

func (m *ResponseFlags) GetLocalReset() bool {
	if m != nil {
		return m.LocalReset
	}
	return false
}

func (m *ResponseFlags) GetUpstreamRemoteReset() bool {
	if m != nil {
		return m.UpstreamRemoteReset
	}
	return false
}

func (m *ResponseFlags) GetUpstreamConnectionFailure() bool {
	if m != nil {
		return m.UpstreamConnectionFailure
	}
	return false
}

func (m *ResponseFlags) GetUpstreamConnectionTermination() bool {
	if m != nil {
		return m.UpstreamConnectionTermination
	}
	return false
}

func (m *ResponseFlags) GetUpstreamOverflow() bool {
	if m != nil {
		return m.UpstreamOverflow
	}
	return false
}

func (m *ResponseFlags) GetNoRouteFound() bool {
	if m != nil {
		return m.NoRouteFound
	}
	return false
}

func (m *ResponseFlags) GetDelayInjected() bool {
	if m != nil {
		return m.DelayInjected
	}
	return false
}

func (m *ResponseFlags) GetFaultInjected() bool {
	if m != nil {
		return m.FaultInjected
	}
	return false
}

func (m *ResponseFlags) GetRateLimited() bool {
	if m != nil {
		return m.RateLimited
	}
	return false
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
// Properties of a negotiated TLS connection.
type TLSProperties struct {
	// Version of TLS that was negotiated.
	TlsVersion TLSProperties_TLSVersion `protobuf:"varint,1,opt,name=tls_version,json=tlsVersion,enum=envoy.config.filter.accesslog.v2.TLSProperties_TLSVersion" json:"tls_version,omitempty"`
	// TLS cipher suite negotiated during handshake. The value is a
	// four-digit hex code defined by the IANA TLS Cipher Suite Registry
	// (e.g. ``009C`` for ``TLS_RSA_WITH_AES_128_GCM_SHA256``).
	//
	// Here it is expressed as an integer.
	TlsCipherSuite *google_protobuf.UInt32Value `protobuf:"bytes,2,opt,name=tls_cipher_suite,json=tlsCipherSuite" json:"tls_cipher_suite,omitempty"`
	// SNI hostname from handshake.
	TlsSniHostname string `protobuf:"bytes,3,opt,name=tls_sni_hostname,json=tlsSniHostname" json:"tls_sni_hostname,omitempty"`
}

func (m *TLSProperties) Reset()                    { *m = TLSProperties{} }
func (m *TLSProperties) String() string            { return proto.CompactTextString(m) }
func (*TLSProperties) ProtoMessage()               {}
func (*TLSProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TLSProperties) GetTlsVersion() TLSProperties_TLSVersion {
	if m != nil {
		return m.TlsVersion
	}
	return TLSProperties_VERSION_UNSPECIFIED
}

func (m *TLSProperties) GetTlsCipherSuite() *google_protobuf.UInt32Value {
	if m != nil {
		return m.TlsCipherSuite
	}
	return nil
}

func (m *TLSProperties) GetTlsSniHostname() string {
	if m != nil {
		return m.TlsSniHostname
	}
	return ""
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type TCPAccessLogEntry struct {
	// Common properties shared by all Envoy access logs.
	CommonProperties *AccessLogCommon `protobuf:"bytes,1,opt,name=common_properties,json=commonProperties" json:"common_properties,omitempty"`
}

func (m *TCPAccessLogEntry) Reset()                    { *m = TCPAccessLogEntry{} }
func (m *TCPAccessLogEntry) String() string            { return proto.CompactTextString(m) }
func (*TCPAccessLogEntry) ProtoMessage()               {}
func (*TCPAccessLogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TCPAccessLogEntry) GetCommonProperties() *AccessLogCommon {
	if m != nil {
		return m.CommonProperties
	}
	return nil
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type HTTPRequestProperties struct {
	// The request method (RFC 7231/2616).
	// [#comment:TODO(htuch): add (validate.rules).enum.defined_only = true once
	// https://github.com/lyft/protoc-gen-validate/issues/42 is resolved.]
	RequestMethod envoy_api_v2_core1.RequestMethod `protobuf:"varint,1,opt,name=request_method,json=requestMethod,enum=envoy.api.v2.core.RequestMethod" json:"request_method,omitempty"`
	// The scheme portion of the incoming request URI.
	Scheme string `protobuf:"bytes,2,opt,name=scheme" json:"scheme,omitempty"`
	// HTTP/2 ``:authority`` or HTTP/1.1 ``Host`` header value.
	Authority string `protobuf:"bytes,3,opt,name=authority" json:"authority,omitempty"`
	// The port of the incoming request URI
	// (unused currently, as port is composed onto authority).
	Port *google_protobuf.UInt32Value `protobuf:"bytes,4,opt,name=port" json:"port,omitempty"`
	// The path portion from the incoming request URI.
	Path string `protobuf:"bytes,5,opt,name=path" json:"path,omitempty"`
	// Value of the ``User-Agent`` request header.
	UserAgent string `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	// Value of the ``Referer`` request header.
	Referer string `protobuf:"bytes,7,opt,name=referer" json:"referer,omitempty"`
	// Value of the ``X-Forwarded-For`` request header.
	ForwardedFor string `protobuf:"bytes,8,opt,name=forwarded_for,json=forwardedFor" json:"forwarded_for,omitempty"`
	// Value of the ``X-Request-Id`` request header
	//
	// This header is used by Envoy to uniquely identify a request.
	// It will be generated for all external requests and internal requests that
	// do not already have a request ID.
	RequestId string `protobuf:"bytes,9,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// Value of the ``X-Envoy-Original-Path`` request header.
	OriginalPath string `protobuf:"bytes,10,opt,name=original_path,json=originalPath" json:"original_path,omitempty"`
	// Size of the HTTP request headers in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	RequestHeadersBytes uint64 `protobuf:"varint,11,opt,name=request_headers_bytes,json=requestHeadersBytes" json:"request_headers_bytes,omitempty"`
	// Size of the HTTP request body in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	RequestBodyBytes uint64 `protobuf:"varint,12,opt,name=request_body_bytes,json=requestBodyBytes" json:"request_body_bytes,omitempty"`
	// Map of additional headers that have been configured to be logged.
	RequestHeaders map[string]string `protobuf:"bytes,13,rep,name=request_headers,json=requestHeaders" json:"request_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPRequestProperties) Reset()                    { *m = HTTPRequestProperties{} }
func (m *HTTPRequestProperties) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequestProperties) ProtoMessage()               {}
func (*HTTPRequestProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HTTPRequestProperties) GetRequestMethod() envoy_api_v2_core1.RequestMethod {
	if m != nil {
		return m.RequestMethod
	}
	return envoy_api_v2_core1.RequestMethod_METHOD_UNSPECIFIED
}

func (m *HTTPRequestProperties) GetScheme() string {
	if m != nil {
		return m.Scheme
	}
	return ""
}

func (m *HTTPRequestProperties) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *HTTPRequestProperties) GetPort() *google_protobuf.UInt32Value {
	if m != nil {
		return m.Port
	}
	return nil
}

func (m *HTTPRequestProperties) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTTPRequestProperties) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *HTTPRequestProperties) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

func (m *HTTPRequestProperties) GetForwardedFor() string {
	if m != nil {
		return m.ForwardedFor
	}
	return ""
}

func (m *HTTPRequestProperties) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *HTTPRequestProperties) GetOriginalPath() string {
	if m != nil {
		return m.OriginalPath
	}
	return ""
}

func (m *HTTPRequestProperties) GetRequestHeadersBytes() uint64 {
	if m != nil {
		return m.RequestHeadersBytes
	}
	return 0
}

func (m *HTTPRequestProperties) GetRequestBodyBytes() uint64 {
	if m != nil {
		return m.RequestBodyBytes
	}
	return 0
}

func (m *HTTPRequestProperties) GetRequestHeaders() map[string]string {
	if m != nil {
		return m.RequestHeaders
	}
	return nil
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type HTTPResponseProperties struct {
	// The HTTP response code returned by Envoy.
	ResponseCode *google_protobuf.UInt32Value `protobuf:"bytes,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	// Size of the HTTP response headers in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	ResponseHeadersBytes uint64 `protobuf:"varint,2,opt,name=response_headers_bytes,json=responseHeadersBytes" json:"response_headers_bytes,omitempty"`
	// Size of the HTTP response body in bytes.
	//
	// This value is captured from the OSI layer 7 perspective, i.e. it does not
	// include overhead from framing or encoding at other networking layers.
	ResponseBodyBytes uint64 `protobuf:"varint,3,opt,name=response_body_bytes,json=responseBodyBytes" json:"response_body_bytes,omitempty"`
	// Map of additional headers configured to be logged.
	ResponseHeaders map[string]string `protobuf:"bytes,4,rep,name=response_headers,json=responseHeaders" json:"response_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HTTPResponseProperties) Reset()                    { *m = HTTPResponseProperties{} }
func (m *HTTPResponseProperties) String() string            { return proto.CompactTextString(m) }
func (*HTTPResponseProperties) ProtoMessage()               {}
func (*HTTPResponseProperties) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HTTPResponseProperties) GetResponseCode() *google_protobuf.UInt32Value {
	if m != nil {
		return m.ResponseCode
	}
	return nil
}

func (m *HTTPResponseProperties) GetResponseHeadersBytes() uint64 {
	if m != nil {
		return m.ResponseHeadersBytes
	}
	return 0
}

func (m *HTTPResponseProperties) GetResponseBodyBytes() uint64 {
	if m != nil {
		return m.ResponseBodyBytes
	}
	return 0
}

func (m *HTTPResponseProperties) GetResponseHeaders() map[string]string {
	if m != nil {
		return m.ResponseHeaders
	}
	return nil
}

// [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
type HTTPAccessLogEntry struct {
	// Common properties shared by all Envoy access logs.
	CommonProperties *AccessLogCommon               `protobuf:"bytes,1,opt,name=common_properties,json=commonProperties" json:"common_properties,omitempty"`
	ProtocolVersion  HTTPAccessLogEntry_HTTPVersion `protobuf:"varint,2,opt,name=protocol_version,json=protocolVersion,enum=envoy.config.filter.accesslog.v2.HTTPAccessLogEntry_HTTPVersion" json:"protocol_version,omitempty"`
	// Description of the incoming HTTP request.
	Request *HTTPRequestProperties `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	// Description of the outgoing HTTP response.
	Response *HTTPResponseProperties `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
}

func (m *HTTPAccessLogEntry) Reset()                    { *m = HTTPAccessLogEntry{} }
func (m *HTTPAccessLogEntry) String() string            { return proto.CompactTextString(m) }
func (*HTTPAccessLogEntry) ProtoMessage()               {}
func (*HTTPAccessLogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HTTPAccessLogEntry) GetCommonProperties() *AccessLogCommon {
	if m != nil {
		return m.CommonProperties
	}
	return nil
}

func (m *HTTPAccessLogEntry) GetProtocolVersion() HTTPAccessLogEntry_HTTPVersion {
	if m != nil {
		return m.ProtocolVersion
	}
	return HTTPAccessLogEntry_PROTOCOL_UNSPECIFIED
}

func (m *HTTPAccessLogEntry) GetRequest() *HTTPRequestProperties {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *HTTPAccessLogEntry) GetResponse() *HTTPResponseProperties {
	if m != nil {
		return m.Response
	}
	return nil
}

type AccessLog struct {
	// The name of the access log implementation to instantiate. The name must
	// match a statically registered access log. Current built-in loggers include:
	// 1) "envoy.file_access_log"
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Filter which is used to determine if the access log needs to be written.
	Filter *AccessLogFilter `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// Custom configuration that depends on the access log being instantiated. built-in configurations
	// include:
	// 1) "envoy.file_access_log": :ref:`FileAccessLog
	// <envoy_api_msg_config.filter.accesslog.v2.FileAccessLog>`
	Config *google_protobuf4.Struct `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *AccessLog) Reset()                    { *m = AccessLog{} }
func (m *AccessLog) String() string            { return proto.CompactTextString(m) }
func (*AccessLog) ProtoMessage()               {}
func (*AccessLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccessLog) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccessLog) GetFilter() *AccessLogFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *AccessLog) GetConfig() *google_protobuf4.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

type AccessLogFilter struct {
	// Types that are valid to be assigned to FilterSpecifier:
	//	*AccessLogFilter_StatusCodeFilter
	//	*AccessLogFilter_DurationFilter
	//	*AccessLogFilter_NotHealthCheckFilter
	//	*AccessLogFilter_TraceableFilter
	//	*AccessLogFilter_RuntimeFilter
	//	*AccessLogFilter_AndFilter
	//	*AccessLogFilter_OrFilter
	FilterSpecifier isAccessLogFilter_FilterSpecifier `protobuf_oneof:"filter_specifier"`
}

func (m *AccessLogFilter) Reset()                    { *m = AccessLogFilter{} }
func (m *AccessLogFilter) String() string            { return proto.CompactTextString(m) }
func (*AccessLogFilter) ProtoMessage()               {}
func (*AccessLogFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isAccessLogFilter_FilterSpecifier interface {
	isAccessLogFilter_FilterSpecifier()
}

type AccessLogFilter_StatusCodeFilter struct {
	StatusCodeFilter *StatusCodeFilter `protobuf:"bytes,1,opt,name=status_code_filter,json=statusCodeFilter,oneof"`
}
type AccessLogFilter_DurationFilter struct {
	DurationFilter *DurationFilter `protobuf:"bytes,2,opt,name=duration_filter,json=durationFilter,oneof"`
}
type AccessLogFilter_NotHealthCheckFilter struct {
	NotHealthCheckFilter *NotHealthCheckFilter `protobuf:"bytes,3,opt,name=not_health_check_filter,json=notHealthCheckFilter,oneof"`
}
type AccessLogFilter_TraceableFilter struct {
	TraceableFilter *TraceableFilter `protobuf:"bytes,4,opt,name=traceable_filter,json=traceableFilter,oneof"`
}
type AccessLogFilter_RuntimeFilter struct {
	RuntimeFilter *RuntimeFilter `protobuf:"bytes,5,opt,name=runtime_filter,json=runtimeFilter,oneof"`
}
type AccessLogFilter_AndFilter struct {
	AndFilter *AndFilter `protobuf:"bytes,6,opt,name=and_filter,json=andFilter,oneof"`
}
type AccessLogFilter_OrFilter struct {
	OrFilter *OrFilter `protobuf:"bytes,7,opt,name=or_filter,json=orFilter,oneof"`
}

func (*AccessLogFilter_StatusCodeFilter) isAccessLogFilter_FilterSpecifier()     {}
func (*AccessLogFilter_DurationFilter) isAccessLogFilter_FilterSpecifier()       {}
func (*AccessLogFilter_NotHealthCheckFilter) isAccessLogFilter_FilterSpecifier() {}
func (*AccessLogFilter_TraceableFilter) isAccessLogFilter_FilterSpecifier()      {}
func (*AccessLogFilter_RuntimeFilter) isAccessLogFilter_FilterSpecifier()        {}
func (*AccessLogFilter_AndFilter) isAccessLogFilter_FilterSpecifier()            {}
func (*AccessLogFilter_OrFilter) isAccessLogFilter_FilterSpecifier()             {}

func (m *AccessLogFilter) GetFilterSpecifier() isAccessLogFilter_FilterSpecifier {
	if m != nil {
		return m.FilterSpecifier
	}
	return nil
}

func (m *AccessLogFilter) GetStatusCodeFilter() *StatusCodeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_StatusCodeFilter); ok {
		return x.StatusCodeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetDurationFilter() *DurationFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_DurationFilter); ok {
		return x.DurationFilter
	}
	return nil
}

func (m *AccessLogFilter) GetNotHealthCheckFilter() *NotHealthCheckFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_NotHealthCheckFilter); ok {
		return x.NotHealthCheckFilter
	}
	return nil
}

func (m *AccessLogFilter) GetTraceableFilter() *TraceableFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_TraceableFilter); ok {
		return x.TraceableFilter
	}
	return nil
}

func (m *AccessLogFilter) GetRuntimeFilter() *RuntimeFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_RuntimeFilter); ok {
		return x.RuntimeFilter
	}
	return nil
}

func (m *AccessLogFilter) GetAndFilter() *AndFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_AndFilter); ok {
		return x.AndFilter
	}
	return nil
}

func (m *AccessLogFilter) GetOrFilter() *OrFilter {
	if x, ok := m.GetFilterSpecifier().(*AccessLogFilter_OrFilter); ok {
		return x.OrFilter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AccessLogFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AccessLogFilter_OneofMarshaler, _AccessLogFilter_OneofUnmarshaler, _AccessLogFilter_OneofSizer, []interface{}{
		(*AccessLogFilter_StatusCodeFilter)(nil),
		(*AccessLogFilter_DurationFilter)(nil),
		(*AccessLogFilter_NotHealthCheckFilter)(nil),
		(*AccessLogFilter_TraceableFilter)(nil),
		(*AccessLogFilter_RuntimeFilter)(nil),
		(*AccessLogFilter_AndFilter)(nil),
		(*AccessLogFilter_OrFilter)(nil),
	}
}

func _AccessLogFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StatusCodeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_DurationFilter:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DurationFilter); err != nil {
			return err
		}
	case *AccessLogFilter_NotHealthCheckFilter:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotHealthCheckFilter); err != nil {
			return err
		}
	case *AccessLogFilter_TraceableFilter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TraceableFilter); err != nil {
			return err
		}
	case *AccessLogFilter_RuntimeFilter:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RuntimeFilter); err != nil {
			return err
		}
	case *AccessLogFilter_AndFilter:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AndFilter); err != nil {
			return err
		}
	case *AccessLogFilter_OrFilter:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OrFilter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("AccessLogFilter.FilterSpecifier has unexpected type %T", x)
	}
	return nil
}

func _AccessLogFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AccessLogFilter)
	switch tag {
	case 1: // filter_specifier.status_code_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusCodeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_StatusCodeFilter{msg}
		return true, err
	case 2: // filter_specifier.duration_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DurationFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_DurationFilter{msg}
		return true, err
	case 3: // filter_specifier.not_health_check_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotHealthCheckFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_NotHealthCheckFilter{msg}
		return true, err
	case 4: // filter_specifier.traceable_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TraceableFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_TraceableFilter{msg}
		return true, err
	case 5: // filter_specifier.runtime_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RuntimeFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_RuntimeFilter{msg}
		return true, err
	case 6: // filter_specifier.and_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AndFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_AndFilter{msg}
		return true, err
	case 7: // filter_specifier.or_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OrFilter)
		err := b.DecodeMessage(msg)
		m.FilterSpecifier = &AccessLogFilter_OrFilter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _AccessLogFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AccessLogFilter)
	// filter_specifier
	switch x := m.FilterSpecifier.(type) {
	case *AccessLogFilter_StatusCodeFilter:
		s := proto.Size(x.StatusCodeFilter)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_DurationFilter:
		s := proto.Size(x.DurationFilter)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_NotHealthCheckFilter:
		s := proto.Size(x.NotHealthCheckFilter)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_TraceableFilter:
		s := proto.Size(x.TraceableFilter)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_RuntimeFilter:
		s := proto.Size(x.RuntimeFilter)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_AndFilter:
		s := proto.Size(x.AndFilter)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AccessLogFilter_OrFilter:
		s := proto.Size(x.OrFilter)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Filter on an integer comparison.
type ComparisonFilter struct {
	// Comparison operator.
	Op ComparisonFilter_Op `protobuf:"varint,1,opt,name=op,enum=envoy.config.filter.accesslog.v2.ComparisonFilter_Op" json:"op,omitempty"`
	// Value to compare against.
	Value *envoy_api_v2_core1.RuntimeUInt32 `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ComparisonFilter) Reset()                    { *m = ComparisonFilter{} }
func (m *ComparisonFilter) String() string            { return proto.CompactTextString(m) }
func (*ComparisonFilter) ProtoMessage()               {}
func (*ComparisonFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ComparisonFilter) GetOp() ComparisonFilter_Op {
	if m != nil {
		return m.Op
	}
	return ComparisonFilter_EQ
}

func (m *ComparisonFilter) GetValue() *envoy_api_v2_core1.RuntimeUInt32 {
	if m != nil {
		return m.Value
	}
	return nil
}

// Filters on HTTP response/status code.
type StatusCodeFilter struct {
	// Comparison.
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *StatusCodeFilter) Reset()                    { *m = StatusCodeFilter{} }
func (m *StatusCodeFilter) String() string            { return proto.CompactTextString(m) }
func (*StatusCodeFilter) ProtoMessage()               {}
func (*StatusCodeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *StatusCodeFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

// Filters on total request duration in milliseconds.
type DurationFilter struct {
	// Comparison.
	Comparison *ComparisonFilter `protobuf:"bytes,1,opt,name=comparison" json:"comparison,omitempty"`
}

func (m *DurationFilter) Reset()                    { *m = DurationFilter{} }
func (m *DurationFilter) String() string            { return proto.CompactTextString(m) }
func (*DurationFilter) ProtoMessage()               {}
func (*DurationFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DurationFilter) GetComparison() *ComparisonFilter {
	if m != nil {
		return m.Comparison
	}
	return nil
}

// Filters for requests that are not health check requests. A health check
// request is marked by the health check filter.
type NotHealthCheckFilter struct {
}

func (m *NotHealthCheckFilter) Reset()                    { *m = NotHealthCheckFilter{} }
func (m *NotHealthCheckFilter) String() string            { return proto.CompactTextString(m) }
func (*NotHealthCheckFilter) ProtoMessage()               {}
func (*NotHealthCheckFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// Filters for requests that are traceable. See the tracing overview for more
// information on how a request becomes traceable.
type TraceableFilter struct {
}

func (m *TraceableFilter) Reset()                    { *m = TraceableFilter{} }
func (m *TraceableFilter) String() string            { return proto.CompactTextString(m) }
func (*TraceableFilter) ProtoMessage()               {}
func (*TraceableFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// Filters for random sampling of requests. Sampling pivots on the header
// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` being present. If
// :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is present, the filter will
// consistently sample across multiple hosts based on the runtime key value and the value extracted
// from :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`. If it is missing, the
// filter will randomly sample based on the runtime key value.
type RuntimeFilter struct {
	// Runtime key to get the percentage of requests to be sampled. This runtime
	// control is specified in the range 0-100 and defaults to 0.
	RuntimeKey string `protobuf:"bytes,1,opt,name=runtime_key,json=runtimeKey" json:"runtime_key,omitempty"`
}

func (m *RuntimeFilter) Reset()                    { *m = RuntimeFilter{} }
func (m *RuntimeFilter) String() string            { return proto.CompactTextString(m) }
func (*RuntimeFilter) ProtoMessage()               {}
func (*RuntimeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *RuntimeFilter) GetRuntimeKey() string {
	if m != nil {
		return m.RuntimeKey
	}
	return ""
}

// Performs a logical “and” operation on the result of each filter in filters.
// Filters are evaluated sequentially and if one of them returns false, the
// filter returns false immediately.
type AndFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,1,rep,name=filters" json:"filters,omitempty"`
}

func (m *AndFilter) Reset()                    { *m = AndFilter{} }
func (m *AndFilter) String() string            { return proto.CompactTextString(m) }
func (*AndFilter) ProtoMessage()               {}
func (*AndFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AndFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Performs a logical “or” operation on the result of each individual filter.
// Filters are evaluated sequentially and if one of them returns true, the
// filter returns true immediately.
type OrFilter struct {
	Filters []*AccessLogFilter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *OrFilter) Reset()                    { *m = OrFilter{} }
func (m *OrFilter) String() string            { return proto.CompactTextString(m) }
func (*OrFilter) ProtoMessage()               {}
func (*OrFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OrFilter) GetFilters() []*AccessLogFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

// Custom configuration for an AccessLog that writes log entries directly to a file.
// Configures the built-in *envoy.file_access_log* AccessLog.
type FileAccessLog struct {
	// A path to a local file to which to write the access log entries.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// Access log format. Envoy supports :ref:`custom access log formats
	// <config_access_log_format>` as well as a :ref:`default format
	// <config_access_log_default_format>`.
	Format string `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
}

func (m *FileAccessLog) Reset()                    { *m = FileAccessLog{} }
func (m *FileAccessLog) String() string            { return proto.CompactTextString(m) }
func (*FileAccessLog) ProtoMessage()               {}
func (*FileAccessLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *FileAccessLog) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileAccessLog) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func init() {
	proto.RegisterType((*AccessLogCommon)(nil), "envoy.config.filter.accesslog.v2.AccessLogCommon")
	proto.RegisterType((*ResponseFlags)(nil), "envoy.config.filter.accesslog.v2.ResponseFlags")
	proto.RegisterType((*TLSProperties)(nil), "envoy.config.filter.accesslog.v2.TLSProperties")
	proto.RegisterType((*TCPAccessLogEntry)(nil), "envoy.config.filter.accesslog.v2.TCPAccessLogEntry")
	proto.RegisterType((*HTTPRequestProperties)(nil), "envoy.config.filter.accesslog.v2.HTTPRequestProperties")
	proto.RegisterType((*HTTPResponseProperties)(nil), "envoy.config.filter.accesslog.v2.HTTPResponseProperties")
	proto.RegisterType((*HTTPAccessLogEntry)(nil), "envoy.config.filter.accesslog.v2.HTTPAccessLogEntry")
	proto.RegisterType((*AccessLog)(nil), "envoy.config.filter.accesslog.v2.AccessLog")
	proto.RegisterType((*AccessLogFilter)(nil), "envoy.config.filter.accesslog.v2.AccessLogFilter")
	proto.RegisterType((*ComparisonFilter)(nil), "envoy.config.filter.accesslog.v2.ComparisonFilter")
	proto.RegisterType((*StatusCodeFilter)(nil), "envoy.config.filter.accesslog.v2.StatusCodeFilter")
	proto.RegisterType((*DurationFilter)(nil), "envoy.config.filter.accesslog.v2.DurationFilter")
	proto.RegisterType((*NotHealthCheckFilter)(nil), "envoy.config.filter.accesslog.v2.NotHealthCheckFilter")
	proto.RegisterType((*TraceableFilter)(nil), "envoy.config.filter.accesslog.v2.TraceableFilter")
	proto.RegisterType((*RuntimeFilter)(nil), "envoy.config.filter.accesslog.v2.RuntimeFilter")
	proto.RegisterType((*AndFilter)(nil), "envoy.config.filter.accesslog.v2.AndFilter")
	proto.RegisterType((*OrFilter)(nil), "envoy.config.filter.accesslog.v2.OrFilter")
	proto.RegisterType((*FileAccessLog)(nil), "envoy.config.filter.accesslog.v2.FileAccessLog")
	proto.RegisterEnum("envoy.config.filter.accesslog.v2.TLSProperties_TLSVersion", TLSProperties_TLSVersion_name, TLSProperties_TLSVersion_value)
	proto.RegisterEnum("envoy.config.filter.accesslog.v2.HTTPAccessLogEntry_HTTPVersion", HTTPAccessLogEntry_HTTPVersion_name, HTTPAccessLogEntry_HTTPVersion_value)
	proto.RegisterEnum("envoy.config.filter.accesslog.v2.ComparisonFilter_Op", ComparisonFilter_Op_name, ComparisonFilter_Op_value)
}

func init() { proto.RegisterFile("envoy/config/filter/accesslog/v2/accesslog.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0x8f, 0xfe, 0xd8, 0xd1, 0x3c, 0x59, 0xf6, 0xb8, 0xed, 0xd8, 0xb2, 0x93, 0xac, 0xbd, 0x02,
	0xaa, 0xc2, 0x2e, 0x25, 0x25, 0x0a, 0xec, 0xa6, 0x96, 0x2a, 0x16, 0xdb, 0xb1, 0x36, 0x66, 0x9d,
	0xd8, 0x69, 0x2b, 0x59, 0x8a, 0xad, 0xca, 0xd0, 0x9e, 0x69, 0xd9, 0x43, 0x46, 0xd3, 0x43, 0x4f,
	0xcb, 0x89, 0xae, 0x1c, 0x39, 0x51, 0x9c, 0xa0, 0xf8, 0x02, 0x5c, 0x29, 0x0e, 0x50, 0x7b, 0xca,
	0x87, 0xa0, 0xb8, 0x72, 0xce, 0x8d, 0x6f, 0x00, 0xd5, 0x7f, 0x66, 0x46, 0x23, 0x6b, 0x57, 0x8a,
	0x0b, 0xd6, 0x17, 0x77, 0xbf, 0x7e, 0xef, 0xf7, 0x5e, 0xbf, 0xbf, 0xad, 0x81, 0xbb, 0x34, 0xbc,
	0x60, 0xc3, 0x96, 0xcb, 0xc2, 0x9e, 0x7f, 0xd6, 0xea, 0xf9, 0x81, 0xa0, 0xbc, 0x45, 0x5c, 0x97,
	0xc6, 0x71, 0xc0, 0xce, 0x5a, 0x17, 0xed, 0x6c, 0xd3, 0x8c, 0x38, 0x13, 0x0c, 0x6d, 0x2b, 0x89,
	0xa6, 0x96, 0x68, 0x6a, 0x89, 0x66, 0xc6, 0x74, 0xd1, 0xde, 0xdc, 0xd2, 0x98, 0x24, 0xf2, 0xa5,
	0xbc, 0xcb, 0x38, 0x6d, 0x11, 0xcf, 0xe3, 0x34, 0x8e, 0x35, 0xc4, 0xe6, 0xad, 0xcb, 0x0c, 0xa7,
	0x24, 0xa6, 0xe6, 0xf4, 0xbd, 0x33, 0xc6, 0xce, 0x02, 0xda, 0x52, 0xbb, 0xd3, 0x41, 0xaf, 0xe5,
	0x0d, 0x38, 0x11, 0x3e, 0x0b, 0x13, 0xe9, 0xf1, 0xf3, 0x58, 0xf0, 0x81, 0x2b, 0xcc, 0xe9, 0xd6,
	0xf8, 0xa9, 0xf0, 0xfb, 0x34, 0x16, 0xa4, 0x1f, 0x7d, 0x1d, 0xfc, 0x2b, 0x4e, 0xa2, 0x88, 0xf2,
	0xc4, 0xb8, 0xf5, 0x0b, 0x12, 0xf8, 0x1e, 0x11, 0xb4, 0x95, 0x2c, 0xcc, 0xc1, 0xea, 0x19, 0x3b,
	0x63, 0x6a, 0xd9, 0x92, 0x2b, 0x4d, 0x6d, 0xfc, 0xb9, 0x0a, 0x4b, 0x3b, 0xea, 0xf6, 0x87, 0xec,
	0x6c, 0x8f, 0xf5, 0xfb, 0x2c, 0x44, 0x3b, 0x50, 0x8d, 0x49, 0x3f, 0x0a, 0xa8, 0xc3, 0x89, 0xa0,
	0xf5, 0xc2, 0x76, 0xe1, 0x4e, 0x61, 0x77, 0xfb, 0xab, 0xb7, 0x6f, 0x4a, 0x55, 0x64, 0xbd, 0x7f,
	0xcd, 0xfc, 0x99, 0xfd, 0x86, 0xde, 0xfd, 0xfb, 0x53, 0x0c, 0x5a, 0x08, 0x13, 0x41, 0xd1, 0x73,
	0xd8, 0xf0, 0xd8, 0xab, 0x30, 0x16, 0x9c, 0x92, 0xbe, 0xc3, 0x69, 0x9f, 0x09, 0xea, 0x18, 0x2f,
	0xd6, 0x8b, 0xdb, 0x85, 0x3b, 0xd5, 0xf6, 0x66, 0x53, 0x47, 0x82, 0x44, 0x7e, 0xf3, 0xa2, 0xdd,
	0x94, 0x6e, 0x6c, 0xee, 0x68, 0x0e, 0xbc, 0x9e, 0x09, 0x63, 0x25, 0x6b, 0x0e, 0x50, 0x17, 0xea,
	0x23, 0xb8, 0x01, 0x73, 0x49, 0x90, 0xc2, 0x96, 0xa6, 0xc2, 0xae, 0x65, 0xb2, 0x87, 0x52, 0x34,
	0x41, 0x7d, 0x0e, 0x8b, 0x22, 0x88, 0x9d, 0x88, 0xb3, 0x88, 0x72, 0xe1, 0xd3, 0xb8, 0x5e, 0x56,
	0x58, 0xad, 0xe6, 0xb4, 0x64, 0x69, 0x76, 0x0f, 0x4f, 0x8e, 0x53, 0x31, 0x5c, 0x13, 0x41, 0x9c,
	0x6d, 0xd1, 0xa7, 0x00, 0xb1, 0x20, 0x5c, 0x38, 0x32, 0x88, 0xf5, 0x39, 0x63, 0x9f, 0x0e, 0x60,
	0x33, 0x09, 0x60, 0xb3, 0x9b, 0x44, 0x78, 0xb7, 0xfc, 0xbb, 0x7f, 0x6d, 0x15, 0xb0, 0xa5, 0x64,
	0x24, 0x15, 0x1d, 0xc1, 0xaa, 0x14, 0x75, 0x04, 0x73, 0x02, 0x12, 0x0b, 0x87, 0xbf, 0x76, 0x4e,
	0x87, 0x82, 0xd6, 0xe7, 0x15, 0xd4, 0xc6, 0x25, 0xa8, 0x87, 0x26, 0xd5, 0x76, 0xcb, 0x7f, 0x90,
	0x48, 0xb6, 0x14, 0xee, 0xb2, 0x43, 0x12, 0x0b, 0xfc, 0x7a, 0x77, 0x28, 0x28, 0x3a, 0x85, 0xf7,
	0x12, 0xc0, 0x9e, 0xcf, 0x63, 0xe1, 0x0c, 0x22, 0xe3, 0x4b, 0x61, 0xa0, 0xaf, 0xcf, 0x06, 0xbd,
	0xa1, 0xa1, 0x3b, 0x12, 0xe4, 0x99, 0xc1, 0xe8, 0x6a, 0x1d, 0xbf, 0x84, 0xdb, 0x39, 0xa3, 0x2f,
	0xa9, 0xa8, 0xcc, 0xa6, 0xa2, 0x9e, 0x59, 0x3f, 0xa6, 0xe1, 0xeb, 0x6f, 0x91, 0x38, 0xc8, 0xba,
	0xfa, 0x2d, 0xf0, 0x94, 0x5b, 0x24, 0x2a, 0xe0, 0xca, 0xb7, 0x30, 0x1a, 0x7a, 0xb0, 0x9d, 0xbf,
	0xc5, 0x48, 0x66, 0x27, 0xae, 0xaa, 0xce, 0xa6, 0xe4, 0xe6, 0xc8, 0x3d, 0x1e, 0xa6, 0x28, 0xc6,
	0x5b, 0x1e, 0x6c, 0xe5, 0x6e, 0x32, 0x41, 0xcd, 0xc2, 0x6c, 0x6a, 0x36, 0xb3, 0xbb, 0x5c, 0xd2,
	0x82, 0x61, 0x3d, 0x73, 0x51, 0xbe, 0xde, 0x6b, 0x53, 0x0b, 0xf3, 0x46, 0x22, 0x9a, 0xaf, 0xf6,
	0x63, 0x58, 0x4b, 0x31, 0xf3, 0xb5, 0xbe, 0x38, 0x15, 0x72, 0x35, 0x91, 0xcc, 0x55, 0xfa, 0xf7,
	0xc1, 0x4e, 0x11, 0xdd, 0x60, 0x10, 0x0b, 0xca, 0xeb, 0x4b, 0xdb, 0x85, 0x3b, 0x16, 0x5e, 0x4a,
	0xe8, 0x7b, 0x9a, 0x2c, 0x9b, 0x02, 0xa7, 0x71, 0xc4, 0xc2, 0x98, 0x3a, 0xbd, 0x80, 0x9c, 0xc5,
	0x75, 0x7b, 0xd6, 0xa6, 0x80, 0x8d, 0x5c, 0x47, 0x8a, 0xe1, 0x1a, 0x1f, 0xdd, 0xa2, 0x8f, 0xa1,
	0xd2, 0xa7, 0x82, 0x78, 0x44, 0x90, 0xfa, 0xb2, 0x42, 0xbc, 0x39, 0xe1, 0x1a, 0x8f, 0x0d, 0x0b,
	0x4e, 0x99, 0x1b, 0xff, 0x28, 0x43, 0x2d, 0x87, 0x8c, 0x1e, 0x40, 0xbd, 0x47, 0xfc, 0x80, 0x7a,
	0xc6, 0x3b, 0xe7, 0x94, 0x04, 0xe2, 0xdc, 0x3d, 0xa7, 0xee, 0x4b, 0xd5, 0xb5, 0x2b, 0x78, 0x4d,
	0x9f, 0x2b, 0x1f, 0x3c, 0xca, 0x4e, 0x51, 0x13, 0x56, 0x42, 0x66, 0xf8, 0x87, 0x69, 0x6e, 0xab,
	0xce, 0x5c, 0xc1, 0xcb, 0x21, 0xd3, 0xbc, 0xc3, 0x24, 0x63, 0xa5, 0xa6, 0x91, 0xe8, 0xfe, 0x7a,
	0x40, 0x63, 0xdd, 0xd4, 0xd8, 0x40, 0xa8, 0xbe, 0x5b, 0xc1, 0x6b, 0x59, 0x08, 0xd5, 0x71, 0x57,
	0x9f, 0xa2, 0x2d, 0xa8, 0x6a, 0xe3, 0x38, 0x8d, 0xa9, 0x50, 0x8d, 0xb5, 0x82, 0x41, 0x91, 0xb0,
	0xa4, 0xa0, 0x36, 0xdc, 0x18, 0x4f, 0x1c, 0xcd, 0x3a, 0xa7, 0x58, 0x57, 0xf2, 0xa9, 0xa1, 0x65,
	0x7e, 0x02, 0x37, 0xb3, 0x30, 0xb2, 0x30, 0xa4, 0xae, 0xcc, 0x52, 0x47, 0x5e, 0x76, 0xc0, 0x75,
	0x7b, 0xac, 0xe0, 0x8d, 0x34, 0xa2, 0x29, 0x47, 0x47, 0x33, 0xa0, 0x0e, 0x6c, 0x4d, 0x92, 0x17,
	0x94, 0xf7, 0xfd, 0x50, 0x65, 0xbc, 0xea, 0x83, 0x15, 0x7c, 0xfb, 0x32, 0x46, 0x37, 0x63, 0x42,
	0x1f, 0xc2, 0x72, 0x8a, 0xc3, 0x2e, 0x28, 0xef, 0x05, 0xec, 0x95, 0x6a, 0x6f, 0x15, 0x9c, 0xe6,
	0xd9, 0x91, 0xa1, 0xa3, 0xef, 0xc2, 0x62, 0xc8, 0x1c, 0xce, 0x06, 0x82, 0x3a, 0x3d, 0x36, 0x08,
	0x3d, 0xd5, 0xa5, 0x2a, 0x78, 0x21, 0x64, 0x58, 0x12, 0x3b, 0x92, 0x86, 0xbe, 0x07, 0x8b, 0x1e,
	0x0d, 0xc8, 0xd0, 0xf1, 0xc3, 0x5f, 0x51, 0x57, 0x50, 0x4f, 0x35, 0x9a, 0x0a, 0xae, 0x29, 0xea,
	0x81, 0x21, 0x4a, 0xb6, 0x1e, 0x19, 0x04, 0x22, 0x63, 0xab, 0x6a, 0x36, 0x45, 0x4d, 0xd9, 0xde,
	0x87, 0x05, 0x39, 0xc3, 0x9d, 0xc0, 0xef, 0xfb, 0x92, 0x69, 0x41, 0x31, 0x55, 0x25, 0xed, 0x50,
	0x93, 0x1a, 0x7f, 0x2b, 0x42, 0x2d, 0x37, 0xc5, 0xd0, 0x97, 0x50, 0x95, 0xe3, 0xf0, 0x82, 0xf2,
	0x58, 0x7a, 0x42, 0x66, 0xd2, 0x62, 0xfb, 0x93, 0x77, 0x9c, 0x85, 0x72, 0xf7, 0x5c, 0x23, 0x60,
	0x10, 0x41, 0x6c, 0xd6, 0xa8, 0x03, 0xb6, 0x04, 0x77, 0xfd, 0xe8, 0x9c, 0x72, 0x27, 0x1e, 0xf8,
	0x82, 0x9a, 0x07, 0xc1, 0xad, 0x4b, 0xed, 0xe7, 0xd9, 0x41, 0x28, 0xee, 0xb7, 0x9f, 0x93, 0x60,
	0x40, 0xb1, 0x9c, 0xd0, 0x7b, 0x4a, 0xe8, 0x44, 0xca, 0xa0, 0x3b, 0x1a, 0x27, 0x0e, 0x7d, 0xe7,
	0x9c, 0xc5, 0x22, 0x24, 0x7d, 0xaa, 0x32, 0xd1, 0x52, 0x9c, 0x27, 0xa1, 0xff, 0xc8, 0x50, 0x1b,
	0x5f, 0x00, 0x64, 0xb6, 0xa0, 0x75, 0x58, 0x79, 0xbe, 0x8f, 0x4f, 0x0e, 0x8e, 0x9e, 0x38, 0xcf,
	0x9e, 0x9c, 0x1c, 0xef, 0xef, 0x1d, 0x74, 0x0e, 0xf6, 0x1f, 0xda, 0xd7, 0x90, 0x05, 0x73, 0xdd,
	0xc3, 0x93, 0x8b, 0x7b, 0x76, 0x01, 0x55, 0xe1, 0xba, 0x5a, 0x3a, 0xf7, 0xec, 0x62, 0xb6, 0x69,
	0xdb, 0xa5, 0x6c, 0x73, 0xdf, 0x2e, 0x37, 0x62, 0x58, 0xee, 0xee, 0x1d, 0xa7, 0xaf, 0xa7, 0xfd,
	0x50, 0xf0, 0x21, 0x7a, 0x01, 0xcb, 0xae, 0x7a, 0x46, 0x8d, 0x3e, 0x27, 0x0a, 0xea, 0x82, 0xf7,
	0xa6, 0xbb, 0x70, 0xec, 0x29, 0x86, 0x6d, 0x8d, 0x95, 0xb9, 0xb5, 0xf1, 0xc7, 0x39, 0xb8, 0xf1,
	0xa8, 0xdb, 0x3d, 0x36, 0x65, 0x36, 0x12, 0xb6, 0xcf, 0x64, 0xc3, 0xd2, 0xa5, 0xd9, 0xa7, 0xe2,
	0x9c, 0x79, 0x26, 0x72, 0xdb, 0x13, 0xda, 0x8b, 0x91, 0x7e, 0xac, 0xf8, 0x64, 0x87, 0x1a, 0xd9,
	0xa2, 0x35, 0x98, 0x8f, 0xdd, 0x73, 0xda, 0xd7, 0x81, 0xb1, 0xb0, 0xd9, 0xa1, 0x5b, 0x60, 0x91,
	0x81, 0x38, 0x67, 0xdc, 0x17, 0x43, 0xe3, 0xeb, 0x8c, 0x80, 0xee, 0x42, 0x39, 0x62, 0x5c, 0x98,
	0xa7, 0xd3, 0x37, 0x07, 0x53, 0x71, 0x22, 0x04, 0xe5, 0x88, 0x88, 0x73, 0x55, 0xe8, 0x16, 0x56,
	0x6b, 0x74, 0x1b, 0x60, 0x10, 0x53, 0xee, 0x90, 0x33, 0x1a, 0x0a, 0x55, 0xc8, 0x16, 0xb6, 0x24,
	0x65, 0x47, 0x12, 0x50, 0x1d, 0xae, 0x73, 0xda, 0xa3, 0x9c, 0x72, 0x55, 0xa0, 0x16, 0x4e, 0xb6,
	0xe8, 0x3b, 0x50, 0xeb, 0x31, 0xfe, 0x8a, 0x70, 0x8f, 0x7a, 0x4e, 0x8f, 0x71, 0x55, 0x86, 0x16,
	0x5e, 0x48, 0x89, 0x1d, 0xc6, 0x25, 0x7a, 0xe2, 0x22, 0x5f, 0x97, 0x9f, 0x85, 0x2d, 0x43, 0x39,
	0xf0, 0x24, 0x06, 0xe3, 0xfe, 0x99, 0x1f, 0x92, 0xc0, 0x51, 0x96, 0x81, 0xc6, 0x48, 0x88, 0xc7,
	0xd2, 0xc2, 0x36, 0xdc, 0x48, 0x30, 0xce, 0x29, 0xf1, 0x28, 0x8f, 0xd5, 0x0c, 0x8d, 0x55, 0x01,
	0x96, 0xf1, 0x8a, 0x39, 0x7c, 0xa4, 0xcf, 0xe4, 0x6c, 0x8c, 0xd1, 0x0f, 0x00, 0x25, 0x32, 0xa7,
	0xcc, 0x1b, 0x1a, 0x81, 0x05, 0x25, 0x60, 0x9b, 0x93, 0x5d, 0xe6, 0x0d, 0x35, 0xb7, 0x80, 0xa5,
	0x31, 0x0d, 0xf5, 0xda, 0x76, 0xe9, 0x4e, 0xb5, 0xfd, 0xf9, 0xf4, 0x04, 0x9a, 0x98, 0x1a, 0x49,
	0xb8, 0x8d, 0x4d, 0x2a, 0x51, 0xf1, 0x62, 0xde, 0xd0, 0xcd, 0x1d, 0x58, 0x99, 0xc0, 0x86, 0x6c,
	0x28, 0xbd, 0xa4, 0x43, 0x95, 0x4a, 0x16, 0x96, 0x4b, 0xb4, 0x0a, 0x73, 0x17, 0x32, 0x8a, 0x26,
	0x3b, 0xf4, 0xe6, 0x93, 0xe2, 0x83, 0x42, 0xe3, 0x3f, 0x45, 0x58, 0xd3, 0x06, 0xe8, 0x29, 0x35,
	0x92, 0x9c, 0x3b, 0x90, 0x8e, 0x41, 0xc7, 0x65, 0x1e, 0x35, 0x25, 0xf1, 0xcd, 0x69, 0xb2, 0x90,
	0x88, 0xec, 0x31, 0x8f, 0xa2, 0x1f, 0xc2, 0x5a, 0x0a, 0x91, 0xf7, 0x7c, 0x51, 0x39, 0x72, 0x35,
	0x39, 0xcd, 0xb9, 0xbe, 0x09, 0x2b, 0xa9, 0xd4, 0x88, 0xef, 0x4b, 0x4a, 0x64, 0x39, 0x39, 0xca,
	0x9c, 0xff, 0x1a, 0xec, 0x71, 0x2d, 0xf5, 0xb2, 0xf2, 0xfe, 0xe3, 0x59, 0xbd, 0x3f, 0x7e, 0xf9,
	0xf4, 0x3d, 0x90, 0xf3, 0xff, 0xd2, 0x98, 0xb9, 0x9b, 0xbb, 0xb0, 0x3a, 0x89, 0xf1, 0x9d, 0x22,
	0xf0, 0xcf, 0x12, 0x20, 0x69, 0xc4, 0xb7, 0xdb, 0x94, 0xd0, 0x4b, 0xb0, 0x55, 0x00, 0x5d, 0x16,
	0xa4, 0x63, 0xa3, 0xa8, 0x9a, 0xcf, 0x4f, 0x67, 0x73, 0x5a, 0xde, 0x5e, 0x45, 0x4a, 0x86, 0xc7,
	0x52, 0x82, 0x9c, 0x74, 0xf0, 0xa7, 0xb2, 0x07, 0xa8, 0x44, 0x35, 0x3f, 0xf9, 0x3e, 0xbe, 0x62,
	0x59, 0xe0, 0x04, 0x07, 0x75, 0xa1, 0x92, 0x44, 0xc3, 0xf4, 0xaf, 0x07, 0x57, 0x0d, 0x36, 0x4e,
	0x91, 0x1a, 0x3f, 0x83, 0xea, 0xc8, 0x45, 0x50, 0x1d, 0x56, 0x8f, 0xf1, 0x51, 0xf7, 0x68, 0xef,
	0xe8, 0x70, 0x6c, 0xf4, 0x00, 0xcc, 0x4b, 0xc6, 0x7b, 0x77, 0xed, 0x42, 0xba, 0x96, 0xa3, 0xc7,
	0x82, 0x39, 0xb9, 0x6e, 0xdb, 0xa5, 0xc6, 0x9f, 0x0a, 0x60, 0xa5, 0x4e, 0x92, 0x9d, 0x53, 0x0d,
	0x3c, 0x9d, 0x13, 0x6a, 0x8d, 0x0e, 0x60, 0x5e, 0x5b, 0x69, 0xc6, 0xe9, 0xbb, 0x04, 0xb6, 0xa3,
	0x0e, 0xb1, 0x01, 0x40, 0x2d, 0x98, 0xd7, 0x52, 0xc6, 0xc1, 0xeb, 0x97, 0xaa, 0xf4, 0x44, 0x7d,
	0xb3, 0xc0, 0x86, 0xad, 0xf1, 0x97, 0xb9, 0x91, 0xaf, 0x08, 0x1a, 0x0c, 0x9d, 0x02, 0x8a, 0x05,
	0x11, 0x83, 0x58, 0xd5, 0xbb, 0x63, 0x6c, 0xd3, 0x49, 0xd7, 0x9e, 0x6e, 0xdb, 0x89, 0x92, 0x95,
	0x85, 0xaf, 0xf1, 0x1e, 0x5d, 0xc3, 0x76, 0x3c, 0x46, 0x43, 0x5f, 0xc2, 0x52, 0xf2, 0x75, 0xc5,
	0xc9, 0x5d, 0xfe, 0xee, 0x74, 0x05, 0xc9, 0x6f, 0x9b, 0x14, 0x7e, 0xd1, 0xcb, 0x51, 0x10, 0x83,
	0xf5, 0x90, 0x09, 0xf3, 0x48, 0x76, 0xd4, 0xbb, 0x39, 0x51, 0xa2, 0xdd, 0xf2, 0xd1, 0x74, 0x25,
	0x4f, 0x98, 0xd0, 0x4f, 0xe9, 0x3d, 0x29, 0x9e, 0xaa, 0x5a, 0x0d, 0x27, 0xd0, 0xd1, 0x0b, 0xb0,
	0x05, 0x27, 0x2e, 0x25, 0xa7, 0x41, 0xea, 0xaf, 0xf2, 0xac, 0xb1, 0xec, 0x26, 0x92, 0xa9, 0x92,
	0x25, 0x91, 0x27, 0xa1, 0x9f, 0xc3, 0x22, 0x1f, 0x84, 0xea, 0xb7, 0xa0, 0x41, 0x9f, 0x9b, 0xf9,
	0x17, 0x8d, 0x96, 0x4b, 0xb1, 0x6b, 0x7c, 0x94, 0x80, 0x0e, 0x01, 0x48, 0xe8, 0x25, 0xa8, 0xfa,
	0xeb, 0xc4, 0x87, 0x33, 0xe4, 0x5f, 0xe8, 0xa5, 0x88, 0x16, 0x49, 0x36, 0xe8, 0x00, 0x2c, 0xc6,
	0x13, 0x30, 0xfd, 0x3d, 0xe2, 0x83, 0xe9, 0x60, 0x47, 0x3c, 0xc5, 0xaa, 0x30, 0xb3, 0xde, 0xdd,
	0x00, 0x5b, 0xf3, 0x3a, 0x71, 0x44, 0x5d, 0xbf, 0xe7, 0x53, 0x8e, 0xe6, 0xfe, 0xfe, 0xf6, 0x4d,
	0xa9, 0xd0, 0xf8, 0x6b, 0x01, 0xec, 0x3d, 0xd6, 0x8f, 0x08, 0xf7, 0xe3, 0x34, 0xe6, 0x4f, 0xa1,
	0xc8, 0x22, 0xf3, 0x6e, 0xfa, 0xd1, 0x74, 0x9d, 0xe3, 0xf2, 0xcd, 0xa3, 0x68, 0x17, 0xbe, 0x7a,
	0xfb, 0xa6, 0x34, 0xf7, 0x9b, 0x42, 0xd1, 0x2e, 0xe0, 0x22, 0x8b, 0xd0, 0x47, 0xa3, 0xcd, 0xba,
	0x3a, 0xf9, 0x35, 0xa6, 0x9d, 0xa9, 0x47, 0x9f, 0x69, 0xe7, 0x8d, 0x55, 0x28, 0x1e, 0x45, 0x68,
	0x1e, 0x8a, 0xfb, 0x4f, 0xed, 0x6b, 0xf2, 0xff, 0x67, 0xfb, 0x76, 0xa1, 0xc1, 0xc1, 0x1e, 0xaf,
	0x0c, 0xf4, 0x02, 0xc0, 0x4d, 0x0d, 0x99, 0xbd, 0xc2, 0xc6, 0x8d, 0x37, 0x96, 0xff, 0x56, 0x59,
	0x3e, 0x82, 0xd8, 0x88, 0x60, 0x31, 0x5f, 0x2c, 0xff, 0x77, 0x8d, 0x6b, 0xb0, 0x3a, 0xa9, 0x72,
	0x1a, 0xcb, 0xb0, 0x34, 0x96, 0xe7, 0x8d, 0x1f, 0x43, 0x2d, 0x97, 0x9c, 0xe8, 0x03, 0xa8, 0x26,
	0x59, 0x9e, 0x8e, 0xcd, 0x5d, 0x4b, 0x2a, 0x2a, 0xf3, 0xe2, 0x76, 0x01, 0x83, 0x39, 0xfd, 0x9c,
	0x0e, 0x1b, 0x1e, 0x58, 0x69, 0x0e, 0xa2, 0x2f, 0xe0, 0xba, 0x36, 0x5a, 0x8e, 0xc6, 0xd2, 0x95,
	0x3a, 0xa8, 0xb9, 0xd0, 0xef, 0x0b, 0xc5, 0x4a, 0x11, 0x27, 0x68, 0x0d, 0x17, 0x2a, 0x49, 0x72,
	0x8e, 0x2a, 0x29, 0xfe, 0x4f, 0x95, 0x74, 0xa0, 0xd6, 0xf1, 0x03, 0x9a, 0xcd, 0x88, 0xdb, 0xe6,
	0x75, 0x7d, 0xc9, 0x01, 0xfa, 0xa1, 0xbd, 0x06, 0xf3, 0x3d, 0xc6, 0xfb, 0x44, 0x24, 0x8f, 0x7c,
	0xbd, 0xdb, 0x2d, 0xff, 0xa2, 0x78, 0xd1, 0x3e, 0x9d, 0x57, 0x9d, 0xfe, 0xfe, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xcb, 0xd0, 0x81, 0x0d, 0x60, 0x17, 0x00, 0x00,
}
