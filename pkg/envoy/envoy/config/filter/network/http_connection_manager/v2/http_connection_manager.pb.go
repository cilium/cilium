// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v2 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2"
import core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import v21 "github.com/cilium/cilium/pkg/envoy/envoy/config/filter/accesslog/v2"
import _type "github.com/cilium/cilium/pkg/envoy/envoy/type"
import _ "github.com/gogo/protobuf/gogoproto"
import duration "github.com/golang/protobuf/ptypes/duration"
import _struct "github.com/golang/protobuf/ptypes/struct"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HttpConnectionManager_CodecType int32

const (
	// For every new connection, the connection manager will determine which
	// codec to use. This mode supports both ALPN for TLS listeners as well as
	// protocol inference for plaintext listeners. If ALPN data is available, it
	// is preferred, otherwise protocol inference is used. In almost all cases,
	// this is the right option to choose for this setting.
	HttpConnectionManager_AUTO HttpConnectionManager_CodecType = 0
	// The connection manager will assume that the client is speaking HTTP/1.1.
	HttpConnectionManager_HTTP1 HttpConnectionManager_CodecType = 1
	// The connection manager will assume that the client is speaking HTTP/2
	// (Envoy does not require HTTP/2 to take place over TLS or to use ALPN.
	// Prior knowledge is allowed).
	HttpConnectionManager_HTTP2 HttpConnectionManager_CodecType = 2
)

var HttpConnectionManager_CodecType_name = map[int32]string{
	0: "AUTO",
	1: "HTTP1",
	2: "HTTP2",
}
var HttpConnectionManager_CodecType_value = map[string]int32{
	"AUTO":  0,
	"HTTP1": 1,
	"HTTP2": 2,
}

func (x HttpConnectionManager_CodecType) String() string {
	return proto.EnumName(HttpConnectionManager_CodecType_name, int32(x))
}
func (HttpConnectionManager_CodecType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0, 0}
}

// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
// header.
type HttpConnectionManager_ForwardClientCertDetails int32

const (
	// Do not send the XFCC header to the next hop. This is the default value.
	HttpConnectionManager_SANITIZE HttpConnectionManager_ForwardClientCertDetails = 0
	// When the client connection is mTLS (Mutual TLS), forward the XFCC header
	// in the request.
	HttpConnectionManager_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 1
	// When the client connection is mTLS, append the client certificate
	// information to the request’s XFCC header and forward it.
	HttpConnectionManager_APPEND_FORWARD HttpConnectionManager_ForwardClientCertDetails = 2
	// When the client connection is mTLS, reset the XFCC header with the client
	// certificate information and send it to the next hop.
	HttpConnectionManager_SANITIZE_SET HttpConnectionManager_ForwardClientCertDetails = 3
	// Always forward the XFCC header in the request, regardless of whether the
	// client connection is mTLS.
	HttpConnectionManager_ALWAYS_FORWARD_ONLY HttpConnectionManager_ForwardClientCertDetails = 4
)

var HttpConnectionManager_ForwardClientCertDetails_name = map[int32]string{
	0: "SANITIZE",
	1: "FORWARD_ONLY",
	2: "APPEND_FORWARD",
	3: "SANITIZE_SET",
	4: "ALWAYS_FORWARD_ONLY",
}
var HttpConnectionManager_ForwardClientCertDetails_value = map[string]int32{
	"SANITIZE":            0,
	"FORWARD_ONLY":        1,
	"APPEND_FORWARD":      2,
	"SANITIZE_SET":        3,
	"ALWAYS_FORWARD_ONLY": 4,
}

func (x HttpConnectionManager_ForwardClientCertDetails) String() string {
	return proto.EnumName(HttpConnectionManager_ForwardClientCertDetails_name, int32(x))
}
func (HttpConnectionManager_ForwardClientCertDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0, 1}
}

type HttpConnectionManager_Tracing_OperationName int32

const (
	// The HTTP listener is used for ingress/incoming requests.
	HttpConnectionManager_Tracing_INGRESS HttpConnectionManager_Tracing_OperationName = 0
	// The HTTP listener is used for egress/outgoing requests.
	HttpConnectionManager_Tracing_EGRESS HttpConnectionManager_Tracing_OperationName = 1
)

var HttpConnectionManager_Tracing_OperationName_name = map[int32]string{
	0: "INGRESS",
	1: "EGRESS",
}
var HttpConnectionManager_Tracing_OperationName_value = map[string]int32{
	"INGRESS": 0,
	"EGRESS":  1,
}

func (x HttpConnectionManager_Tracing_OperationName) String() string {
	return proto.EnumName(HttpConnectionManager_Tracing_OperationName_name, int32(x))
}
func (HttpConnectionManager_Tracing_OperationName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0, 0, 0}
}

// [#comment:next free field: 23]
type HttpConnectionManager struct {
	// Supplies the type of codec that the connection manager should use.
	CodecType HttpConnectionManager_CodecType `protobuf:"varint,1,opt,name=codec_type,json=codecType,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_CodecType" json:"codec_type,omitempty"`
	// The human readable prefix to use when emitting statistics for the
	// connection manager. See the :ref:`statistics documentation <config_http_conn_man_stats>` for
	// more information.
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Types that are valid to be assigned to RouteSpecifier:
	//	*HttpConnectionManager_Rds
	//	*HttpConnectionManager_RouteConfig
	RouteSpecifier isHttpConnectionManager_RouteSpecifier `protobuf_oneof:"route_specifier"`
	// A list of individual HTTP filters that make up the filter chain for
	// requests made to the connection manager. Order matters as the filters are
	// processed sequentially as request events happen.
	HttpFilters []*HttpFilter `protobuf:"bytes,5,rep,name=http_filters,json=httpFilters,proto3" json:"http_filters,omitempty"`
	// Whether the connection manager manipulates the :ref:`config_http_conn_man_headers_user-agent`
	// and :ref:`config_http_conn_man_headers_downstream-service-cluster` headers. See the linked
	// documentation for more information. Defaults to false.
	AddUserAgent *wrappers.BoolValue `protobuf:"bytes,6,opt,name=add_user_agent,json=addUserAgent,proto3" json:"add_user_agent,omitempty"`
	// Presence of the object defines whether the connection manager
	// emits :ref:`tracing <arch_overview_tracing>` data to the :ref:`configured tracing provider
	// <envoy_api_msg_config.trace.v2.Tracing>`.
	Tracing *HttpConnectionManager_Tracing `protobuf:"bytes,7,opt,name=tracing,proto3" json:"tracing,omitempty"`
	// Additional HTTP/1 settings that are passed to the HTTP/1 codec.
	HttpProtocolOptions *core.Http1ProtocolOptions `protobuf:"bytes,8,opt,name=http_protocol_options,json=httpProtocolOptions,proto3" json:"http_protocol_options,omitempty"`
	// Additional HTTP/2 settings that are passed directly to the HTTP/2 codec.
	Http2ProtocolOptions *core.Http2ProtocolOptions `protobuf:"bytes,9,opt,name=http2_protocol_options,json=http2ProtocolOptions,proto3" json:"http2_protocol_options,omitempty"`
	// An optional override that the connection manager will write to the server
	// header in responses. If not set, the default is *envoy*.
	ServerName string `protobuf:"bytes,10,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	// The idle timeout for connections managed by the connection manager. The
	// idle timeout is defined as the period in which there are no active
	// requests. If not set, there is no idle timeout. When the idle timeout is
	// reached the connection will be closed. If the connection is an HTTP/2
	// connection a drain sequence will occur prior to closing the connection. See
	// :ref:`drain_timeout
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.drain_timeout>`.
	IdleTimeout *duration.Duration `protobuf:"bytes,11,opt,name=idle_timeout,json=idleTimeout,proto3" json:"idle_timeout,omitempty"`
	// The time that Envoy will wait between sending an HTTP/2 “shutdown
	// notification” (GOAWAY frame with max stream ID) and a final GOAWAY frame.
	// This is used so that Envoy provides a grace period for new streams that
	// race with the final GOAWAY frame. During this grace period, Envoy will
	// continue to accept new streams. After the grace period, a final GOAWAY
	// frame is sent and Envoy will start refusing new streams. Draining occurs
	// both when a connection hits the idle timeout or during general server
	// draining. The default grace period is 5000 milliseconds (5 seconds) if this
	// option is not specified.
	DrainTimeout *duration.Duration `protobuf:"bytes,12,opt,name=drain_timeout,json=drainTimeout,proto3" json:"drain_timeout,omitempty"`
	// Configuration for :ref:`HTTP access logs <arch_overview_access_logs>`
	// emitted by the connection manager.
	AccessLog []*v21.AccessLog `protobuf:"bytes,13,rep,name=access_log,json=accessLog,proto3" json:"access_log,omitempty"`
	// If set to true, the connection manager will use the real remote address
	// of the client connection when determining internal versus external origin and manipulating
	// various headers. If set to false or absent, the connection manager will use the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. See the documentation for
	// :ref:`config_http_conn_man_headers_x-forwarded-for`,
	// :ref:`config_http_conn_man_headers_x-envoy-internal`, and
	// :ref:`config_http_conn_man_headers_x-envoy-external-address` for more information.
	UseRemoteAddress *wrappers.BoolValue `protobuf:"bytes,14,opt,name=use_remote_address,json=useRemoteAddress,proto3" json:"use_remote_address,omitempty"`
	// The number of additional ingress proxy hops from the right side of the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header to trust when
	// determining the origin client's IP address. The default is zero if this option
	// is not specified. See the documentation for
	// :ref:`config_http_conn_man_headers_x-forwarded-for` for more information.
	XffNumTrustedHops uint32 `protobuf:"varint,19,opt,name=xff_num_trusted_hops,json=xffNumTrustedHops,proto3" json:"xff_num_trusted_hops,omitempty"`
	// If set, Envoy will not append the remote address to the
	// :ref:`config_http_conn_man_headers_x-forwarded-for` HTTP header. This may be used in
	// conjunction with HTTP filters that explicitly manipulate XFF after the HTTP connection manager
	// has mutated the request headers. While :ref:`use_remote_address
	// <config_http_conn_man_use_remote_address>` will also suppress XFF addition, it has consequences
	// for logging and other Envoy uses of the remote address, so *skip_xff_append* should be used
	// when only an elision of XFF addition is intended.
	SkipXffAppend bool `protobuf:"varint,21,opt,name=skip_xff_append,json=skipXffAppend,proto3" json:"skip_xff_append,omitempty"`
	// Via header value to append to request and response headers. If this is
	// empty, no via header will be appended.
	Via string `protobuf:"bytes,22,opt,name=via,proto3" json:"via,omitempty"`
	// Whether the connection manager will generate the :ref:`x-request-id
	// <config_http_conn_man_headers_x-request-id>` header if it does not exist. This defaults to
	// true. Generating a random UUID4 is expensive so in high throughput scenarios where this feature
	// is not desired it can be disabled.
	GenerateRequestId *wrappers.BoolValue `protobuf:"bytes,15,opt,name=generate_request_id,json=generateRequestId,proto3" json:"generate_request_id,omitempty"`
	// How to handle the :ref:`config_http_conn_man_headers_x-forwarded-client-cert` (XFCC) HTTP
	// header.
	ForwardClientCertDetails HttpConnectionManager_ForwardClientCertDetails `protobuf:"varint,16,opt,name=forward_client_cert_details,json=forwardClientCertDetails,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_ForwardClientCertDetails" json:"forward_client_cert_details,omitempty"`
	// This field is valid only when :ref:`forward_client_cert_details
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.forward_client_cert_details>`
	// is APPEND_FORWARD or SANITIZE_SET and the client connection is mTLS. It specifies the fields in
	// the client certificate to be forwarded. Note that in the
	// :ref:`config_http_conn_man_headers_x-forwarded-client-cert` header, *Hash* is always set, and
	// *By* is always set when the client certificate presents the URI type Subject Alternative Name
	// value.
	SetCurrentClientCertDetails *HttpConnectionManager_SetCurrentClientCertDetails `protobuf:"bytes,17,opt,name=set_current_client_cert_details,json=setCurrentClientCertDetails,proto3" json:"set_current_client_cert_details,omitempty"`
	// If proxy_100_continue is true, Envoy will proxy incoming "Expect:
	// 100-continue" headers upstream, and forward "100 Continue" responses
	// downstream. If this is false or not set, Envoy will instead strip the
	// "Expect: 100-continue" header, and send a "100 Continue" response itself.
	Proxy_100Continue bool `protobuf:"varint,18,opt,name=proxy_100_continue,json=proxy100Continue,proto3" json:"proxy_100_continue,omitempty"`
	// If
	// :ref:`use_remote_address
	// <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.use_remote_address>`
	// is true and represent_ipv4_remote_address_as_ipv4_mapped_ipv6 is true and the remote address is
	// an IPv4 address, the address will be mapped to IPv6 before it is appended to *x-forwarded-for*.
	// This is useful for testing compatibility of upstream services that parse the header value. For
	// example, 50.0.0.1 is represented as ::FFFF:50.0.0.1. See `IPv4-Mapped IPv6 Addresses
	// <https://tools.ietf.org/html/rfc4291#section-2.5.5.2>`_ for details. This will also affect the
	// :ref:`config_http_conn_man_headers_x-envoy-external-address` header. See
	// :ref:`http_connection_manager.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
	// <config_http_conn_man_runtime_represent_ipv4_remote_address_as_ipv4_mapped_ipv6>` for runtime
	// control.
	RepresentIpv4RemoteAddressAsIpv4MappedIpv6 bool     `protobuf:"varint,20,opt,name=represent_ipv4_remote_address_as_ipv4_mapped_ipv6,json=representIpv4RemoteAddressAsIpv4MappedIpv6,proto3" json:"represent_ipv4_remote_address_as_ipv4_mapped_ipv6,omitempty"`
	XXX_NoUnkeyedLiteral                       struct{} `json:"-"`
	XXX_unrecognized                           []byte   `json:"-"`
	XXX_sizecache                              int32    `json:"-"`
}

func (m *HttpConnectionManager) Reset()         { *m = HttpConnectionManager{} }
func (m *HttpConnectionManager) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager) ProtoMessage()    {}
func (*HttpConnectionManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0}
}
func (m *HttpConnectionManager) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager.Unmarshal(m, b)
}
func (m *HttpConnectionManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager.Marshal(b, m, deterministic)
}
func (dst *HttpConnectionManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager.Merge(dst, src)
}
func (m *HttpConnectionManager) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager.Size(m)
}
func (m *HttpConnectionManager) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager proto.InternalMessageInfo

type isHttpConnectionManager_RouteSpecifier interface {
	isHttpConnectionManager_RouteSpecifier()
}

type HttpConnectionManager_Rds struct {
	Rds *Rds `protobuf:"bytes,3,opt,name=rds,proto3,oneof"`
}
type HttpConnectionManager_RouteConfig struct {
	RouteConfig *v2.RouteConfiguration `protobuf:"bytes,4,opt,name=route_config,json=routeConfig,proto3,oneof"`
}

func (*HttpConnectionManager_Rds) isHttpConnectionManager_RouteSpecifier()         {}
func (*HttpConnectionManager_RouteConfig) isHttpConnectionManager_RouteSpecifier() {}

func (m *HttpConnectionManager) GetRouteSpecifier() isHttpConnectionManager_RouteSpecifier {
	if m != nil {
		return m.RouteSpecifier
	}
	return nil
}

func (m *HttpConnectionManager) GetCodecType() HttpConnectionManager_CodecType {
	if m != nil {
		return m.CodecType
	}
	return HttpConnectionManager_AUTO
}

func (m *HttpConnectionManager) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *HttpConnectionManager) GetRds() *Rds {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_Rds); ok {
		return x.Rds
	}
	return nil
}

func (m *HttpConnectionManager) GetRouteConfig() *v2.RouteConfiguration {
	if x, ok := m.GetRouteSpecifier().(*HttpConnectionManager_RouteConfig); ok {
		return x.RouteConfig
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpFilters() []*HttpFilter {
	if m != nil {
		return m.HttpFilters
	}
	return nil
}

func (m *HttpConnectionManager) GetAddUserAgent() *wrappers.BoolValue {
	if m != nil {
		return m.AddUserAgent
	}
	return nil
}

func (m *HttpConnectionManager) GetTracing() *HttpConnectionManager_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *HttpConnectionManager) GetHttpProtocolOptions() *core.Http1ProtocolOptions {
	if m != nil {
		return m.HttpProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetHttp2ProtocolOptions() *core.Http2ProtocolOptions {
	if m != nil {
		return m.Http2ProtocolOptions
	}
	return nil
}

func (m *HttpConnectionManager) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

func (m *HttpConnectionManager) GetIdleTimeout() *duration.Duration {
	if m != nil {
		return m.IdleTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetDrainTimeout() *duration.Duration {
	if m != nil {
		return m.DrainTimeout
	}
	return nil
}

func (m *HttpConnectionManager) GetAccessLog() []*v21.AccessLog {
	if m != nil {
		return m.AccessLog
	}
	return nil
}

func (m *HttpConnectionManager) GetUseRemoteAddress() *wrappers.BoolValue {
	if m != nil {
		return m.UseRemoteAddress
	}
	return nil
}

func (m *HttpConnectionManager) GetXffNumTrustedHops() uint32 {
	if m != nil {
		return m.XffNumTrustedHops
	}
	return 0
}

func (m *HttpConnectionManager) GetSkipXffAppend() bool {
	if m != nil {
		return m.SkipXffAppend
	}
	return false
}

func (m *HttpConnectionManager) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *HttpConnectionManager) GetGenerateRequestId() *wrappers.BoolValue {
	if m != nil {
		return m.GenerateRequestId
	}
	return nil
}

func (m *HttpConnectionManager) GetForwardClientCertDetails() HttpConnectionManager_ForwardClientCertDetails {
	if m != nil {
		return m.ForwardClientCertDetails
	}
	return HttpConnectionManager_SANITIZE
}

func (m *HttpConnectionManager) GetSetCurrentClientCertDetails() *HttpConnectionManager_SetCurrentClientCertDetails {
	if m != nil {
		return m.SetCurrentClientCertDetails
	}
	return nil
}

func (m *HttpConnectionManager) GetProxy_100Continue() bool {
	if m != nil {
		return m.Proxy_100Continue
	}
	return false
}

func (m *HttpConnectionManager) GetRepresentIpv4RemoteAddressAsIpv4MappedIpv6() bool {
	if m != nil {
		return m.RepresentIpv4RemoteAddressAsIpv4MappedIpv6
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpConnectionManager) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpConnectionManager_OneofMarshaler, _HttpConnectionManager_OneofUnmarshaler, _HttpConnectionManager_OneofSizer, []interface{}{
		(*HttpConnectionManager_Rds)(nil),
		(*HttpConnectionManager_RouteConfig)(nil),
	}
}

func _HttpConnectionManager_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rds); err != nil {
			return err
		}
	case *HttpConnectionManager_RouteConfig:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RouteConfig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpConnectionManager.RouteSpecifier has unexpected type %T", x)
	}
	return nil
}

func _HttpConnectionManager_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpConnectionManager)
	switch tag {
	case 3: // route_specifier.rds
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rds)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_Rds{msg}
		return true, err
	case 4: // route_specifier.route_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v2.RouteConfiguration)
		err := b.DecodeMessage(msg)
		m.RouteSpecifier = &HttpConnectionManager_RouteConfig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpConnectionManager_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpConnectionManager)
	// route_specifier
	switch x := m.RouteSpecifier.(type) {
	case *HttpConnectionManager_Rds:
		s := proto.Size(x.Rds)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpConnectionManager_RouteConfig:
		s := proto.Size(x.RouteConfig)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HttpConnectionManager_Tracing struct {
	// The span name will be derived from this field.
	OperationName HttpConnectionManager_Tracing_OperationName `protobuf:"varint,1,opt,name=operation_name,json=operationName,proto3,enum=envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_Tracing_OperationName" json:"operation_name,omitempty"`
	// A list of header names used to create tags for the active span. The header name is used to
	// populate the tag name, and the header value is used to populate the tag value. The tag is
	// created if the specified header name is present in the request's headers.
	RequestHeadersForTags []string `protobuf:"bytes,2,rep,name=request_headers_for_tags,json=requestHeadersForTags,proto3" json:"request_headers_for_tags,omitempty"`
	// [#not-implemented-hide:]
	// Target percentage of requests managed by this HTTP connection manager that will be force
	// traced if the :ref:`x-client-trace-id <config_http_conn_man_headers_x-client-trace-id>`
	// header is set. This field is a direct analog for the runtime variable
	// 'tracing.client_sampling' in the :ref:`HTTP Connection Manager
	// <config_http_conn_man_runtime>`.
	// Default: 100%
	ClientSampling *_type.Percent `protobuf:"bytes,3,opt,name=client_sampling,json=clientSampling,proto3" json:"client_sampling,omitempty"`
	// [#not-implemented-hide:]
	// Target percentage of requests managed by this HTTP connection manager that will be randomly
	// selected for trace generation, if not requested by the client or not forced. This field is
	// a direct analog for the runtime variable 'tracing.random_sampling' in the
	// :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
	// Default: 100%
	RandomSampling *_type.Percent `protobuf:"bytes,4,opt,name=random_sampling,json=randomSampling,proto3" json:"random_sampling,omitempty"`
	// [#not-implemented-hide:]
	// Target percentage of requests managed by this HTTP connection manager that will be traced
	// after all other sampling checks have been applied (client-directed, force tracing, random
	// sampling). This field functions as an upper limit on the total configured sampling rate. For
	// instance, setting client_sampling to 100% but overall_sampling to 1% will result in only 1%
	// of client requests with the appropriate headers to be force traced. This field is a direct
	// analog for the runtime variable 'tracing.global_enabled' in the
	// :ref:`HTTP Connection Manager <config_http_conn_man_runtime>`.
	// Default: 100%
	OverallSampling      *_type.Percent `protobuf:"bytes,5,opt,name=overall_sampling,json=overallSampling,proto3" json:"overall_sampling,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HttpConnectionManager_Tracing) Reset()         { *m = HttpConnectionManager_Tracing{} }
func (m *HttpConnectionManager_Tracing) String() string { return proto.CompactTextString(m) }
func (*HttpConnectionManager_Tracing) ProtoMessage()    {}
func (*HttpConnectionManager_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0, 0}
}
func (m *HttpConnectionManager_Tracing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Unmarshal(m, b)
}
func (m *HttpConnectionManager_Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Marshal(b, m, deterministic)
}
func (dst *HttpConnectionManager_Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_Tracing.Merge(dst, src)
}
func (m *HttpConnectionManager_Tracing) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_Tracing.Size(m)
}
func (m *HttpConnectionManager_Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_Tracing proto.InternalMessageInfo

func (m *HttpConnectionManager_Tracing) GetOperationName() HttpConnectionManager_Tracing_OperationName {
	if m != nil {
		return m.OperationName
	}
	return HttpConnectionManager_Tracing_INGRESS
}

func (m *HttpConnectionManager_Tracing) GetRequestHeadersForTags() []string {
	if m != nil {
		return m.RequestHeadersForTags
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetClientSampling() *_type.Percent {
	if m != nil {
		return m.ClientSampling
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetRandomSampling() *_type.Percent {
	if m != nil {
		return m.RandomSampling
	}
	return nil
}

func (m *HttpConnectionManager_Tracing) GetOverallSampling() *_type.Percent {
	if m != nil {
		return m.OverallSampling
	}
	return nil
}

type HttpConnectionManager_SetCurrentClientCertDetails struct {
	// Whether to forward the subject of the client cert. Defaults to false.
	Subject *wrappers.BoolValue `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	// Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
	// false. This field is deprecated, use URI field instead.
	San *wrappers.BoolValue `protobuf:"bytes,2,opt,name=san,proto3" json:"san,omitempty"` // Deprecated: Do not use.
	// Whether to forward the entire client cert in URL encoded PEM format. This will appear in the
	// XFCC header comma separated from other values with the value Cert="PEM".
	// Defaults to false.
	Cert bool `protobuf:"varint,3,opt,name=cert,proto3" json:"cert,omitempty"`
	// Whether to forward the DNS type Subject Alternative Names of the client cert.
	// Defaults to false.
	Dns bool `protobuf:"varint,4,opt,name=dns,proto3" json:"dns,omitempty"`
	// Whether to forward the URI type Subject Alternative Name of the client cert. Defaults to
	// false.
	Uri                  bool     `protobuf:"varint,5,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) Reset() {
	*m = HttpConnectionManager_SetCurrentClientCertDetails{}
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) String() string {
	return proto.CompactTextString(m)
}
func (*HttpConnectionManager_SetCurrentClientCertDetails) ProtoMessage() {}
func (*HttpConnectionManager_SetCurrentClientCertDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{0, 1}
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Unmarshal(m, b)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Marshal(b, m, deterministic)
}
func (dst *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Merge(dst, src)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_Size() int {
	return xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.Size(m)
}
func (m *HttpConnectionManager_SetCurrentClientCertDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails.DiscardUnknown(m)
}

var xxx_messageInfo_HttpConnectionManager_SetCurrentClientCertDetails proto.InternalMessageInfo

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSubject() *wrappers.BoolValue {
	if m != nil {
		return m.Subject
	}
	return nil
}

// Deprecated: Do not use.
func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetSan() *wrappers.BoolValue {
	if m != nil {
		return m.San
	}
	return nil
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetCert() bool {
	if m != nil {
		return m.Cert
	}
	return false
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetDns() bool {
	if m != nil {
		return m.Dns
	}
	return false
}

func (m *HttpConnectionManager_SetCurrentClientCertDetails) GetUri() bool {
	if m != nil {
		return m.Uri
	}
	return false
}

type Rds struct {
	// Configuration source specifier for RDS.
	ConfigSource *core.ConfigSource `protobuf:"bytes,1,opt,name=config_source,json=configSource,proto3" json:"config_source,omitempty"`
	// The name of the route configuration. This name will be passed to the RDS
	// API. This allows an Envoy configuration with multiple HTTP listeners (and
	// associated HTTP connection manager filters) to use different route
	// configurations.
	RouteConfigName      string   `protobuf:"bytes,2,opt,name=route_config_name,json=routeConfigName,proto3" json:"route_config_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rds) Reset()         { *m = Rds{} }
func (m *Rds) String() string { return proto.CompactTextString(m) }
func (*Rds) ProtoMessage()    {}
func (*Rds) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{1}
}
func (m *Rds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rds.Unmarshal(m, b)
}
func (m *Rds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rds.Marshal(b, m, deterministic)
}
func (dst *Rds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rds.Merge(dst, src)
}
func (m *Rds) XXX_Size() int {
	return xxx_messageInfo_Rds.Size(m)
}
func (m *Rds) XXX_DiscardUnknown() {
	xxx_messageInfo_Rds.DiscardUnknown(m)
}

var xxx_messageInfo_Rds proto.InternalMessageInfo

func (m *Rds) GetConfigSource() *core.ConfigSource {
	if m != nil {
		return m.ConfigSource
	}
	return nil
}

func (m *Rds) GetRouteConfigName() string {
	if m != nil {
		return m.RouteConfigName
	}
	return ""
}

type HttpFilter struct {
	// The name of the filter to instantiate. The name must match a supported
	// filter. The built-in filters are:
	//
	// [#comment:TODO(mattklein123): Auto generate the following list]
	// * :ref:`envoy.buffer <config_http_filters_buffer>`
	// * :ref:`envoy.cors <config_http_filters_cors>`
	// * :ref:`envoy.fault <config_http_filters_fault_injection>`
	// * :ref:`envoy.gzip <config_http_filters_gzip>`
	// * :ref:`envoy.http_dynamo_filter <config_http_filters_dynamo>`
	// * :ref:`envoy.grpc_http1_bridge <config_http_filters_grpc_bridge>`
	// * :ref:`envoy.grpc_json_transcoder <config_http_filters_grpc_json_transcoder>`
	// * :ref:`envoy.grpc_web <config_http_filters_grpc_web>`
	// * :ref:`envoy.health_check <config_http_filters_health_check>`
	// * :ref:`envoy.ip_tagging <config_http_filters_ip_tagging>`
	// * :ref:`envoy.lua <config_http_filters_lua>`
	// * :ref:`envoy.rate_limit <config_http_filters_rate_limit>`
	// * :ref:`envoy.router <config_http_filters_router>`
	// * :ref:`envoy.squash <config_http_filters_squash>`
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Filter specific configuration which depends on the filter being
	// instantiated. See the supported filters for further documentation.
	Config *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// [#not-implemented-hide:]
	// This is hidden as type has been deprecated and is no longer required.
	DeprecatedV1         *HttpFilter_DeprecatedV1 `protobuf:"bytes,3,opt,name=deprecated_v1,json=deprecatedV1,proto3" json:"deprecated_v1,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *HttpFilter) Reset()         { *m = HttpFilter{} }
func (m *HttpFilter) String() string { return proto.CompactTextString(m) }
func (*HttpFilter) ProtoMessage()    {}
func (*HttpFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{2}
}
func (m *HttpFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpFilter.Unmarshal(m, b)
}
func (m *HttpFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpFilter.Marshal(b, m, deterministic)
}
func (dst *HttpFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFilter.Merge(dst, src)
}
func (m *HttpFilter) XXX_Size() int {
	return xxx_messageInfo_HttpFilter.Size(m)
}
func (m *HttpFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFilter.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFilter proto.InternalMessageInfo

func (m *HttpFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HttpFilter) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// Deprecated: Do not use.
func (m *HttpFilter) GetDeprecatedV1() *HttpFilter_DeprecatedV1 {
	if m != nil {
		return m.DeprecatedV1
	}
	return nil
}

// [#not-implemented-hide:]
// This is hidden as type has been deprecated and is no longer required.
type HttpFilter_DeprecatedV1 struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpFilter_DeprecatedV1) Reset()         { *m = HttpFilter_DeprecatedV1{} }
func (m *HttpFilter_DeprecatedV1) String() string { return proto.CompactTextString(m) }
func (*HttpFilter_DeprecatedV1) ProtoMessage()    {}
func (*HttpFilter_DeprecatedV1) Descriptor() ([]byte, []int) {
	return fileDescriptor_http_connection_manager_9e73ff4987361af4, []int{2, 0}
}
func (m *HttpFilter_DeprecatedV1) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpFilter_DeprecatedV1.Unmarshal(m, b)
}
func (m *HttpFilter_DeprecatedV1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpFilter_DeprecatedV1.Marshal(b, m, deterministic)
}
func (dst *HttpFilter_DeprecatedV1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpFilter_DeprecatedV1.Merge(dst, src)
}
func (m *HttpFilter_DeprecatedV1) XXX_Size() int {
	return xxx_messageInfo_HttpFilter_DeprecatedV1.Size(m)
}
func (m *HttpFilter_DeprecatedV1) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpFilter_DeprecatedV1.DiscardUnknown(m)
}

var xxx_messageInfo_HttpFilter_DeprecatedV1 proto.InternalMessageInfo

func (m *HttpFilter_DeprecatedV1) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func init() {
	proto.RegisterType((*HttpConnectionManager)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager")
	proto.RegisterType((*HttpConnectionManager_Tracing)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing")
	proto.RegisterType((*HttpConnectionManager_SetCurrentClientCertDetails)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager.SetCurrentClientCertDetails")
	proto.RegisterType((*Rds)(nil), "envoy.config.filter.network.http_connection_manager.v2.Rds")
	proto.RegisterType((*HttpFilter)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpFilter")
	proto.RegisterType((*HttpFilter_DeprecatedV1)(nil), "envoy.config.filter.network.http_connection_manager.v2.HttpFilter.DeprecatedV1")
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_CodecType", HttpConnectionManager_CodecType_name, HttpConnectionManager_CodecType_value)
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_ForwardClientCertDetails", HttpConnectionManager_ForwardClientCertDetails_name, HttpConnectionManager_ForwardClientCertDetails_value)
	proto.RegisterEnum("envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager_Tracing_OperationName", HttpConnectionManager_Tracing_OperationName_name, HttpConnectionManager_Tracing_OperationName_value)
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/http_connection_manager/v2/http_connection_manager.proto", fileDescriptor_http_connection_manager_9e73ff4987361af4)
}

var fileDescriptor_http_connection_manager_9e73ff4987361af4 = []byte{
	// 1441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xda, 0xce, 0x1f, 0x3f, 0xdb, 0x89, 0x33, 0x49, 0xda, 0x25, 0x85, 0xc6, 0x8a, 0x04,
	0x44, 0x05, 0xad, 0x63, 0x53, 0xca, 0x01, 0x84, 0xb0, 0xf3, 0x87, 0xa4, 0x6a, 0x93, 0x68, 0xed,
	0xb6, 0xb4, 0x08, 0x8d, 0xa6, 0xbb, 0x63, 0x67, 0xa9, 0xbd, 0xb3, 0xcc, 0xcc, 0xba, 0xc9, 0x09,
	0xd1, 0x13, 0xe2, 0xc8, 0x01, 0x71, 0xe7, 0x03, 0x20, 0x6e, 0x08, 0x09, 0xa9, 0x37, 0xf8, 0x14,
	0x70, 0xee, 0x57, 0xe0, 0x84, 0x66, 0x66, 0xd7, 0x89, 0xf3, 0xaf, 0xa8, 0x2d, 0xb7, 0xb7, 0xef,
	0xfd, 0x7e, 0xef, 0xbd, 0x99, 0xf7, 0xe6, 0xed, 0x83, 0x36, 0x0d, 0x07, 0xec, 0xb0, 0xea, 0xb1,
	0xb0, 0x13, 0x74, 0xab, 0x9d, 0xa0, 0x27, 0x29, 0xaf, 0x86, 0x54, 0x3e, 0x66, 0xfc, 0x51, 0x75,
	0x5f, 0xca, 0x08, 0x7b, 0x2c, 0x0c, 0xa9, 0x27, 0x03, 0x16, 0xe2, 0x3e, 0x09, 0x49, 0x97, 0xf2,
	0xea, 0xa0, 0x7e, 0x9e, 0xc9, 0x89, 0x38, 0x93, 0x0c, 0xdd, 0xd0, 0x5e, 0x1d, 0xe3, 0xd5, 0x31,
	0x5e, 0x9d, 0xc4, 0xab, 0x73, 0x1e, 0x75, 0x50, 0x5f, 0x7c, 0xd3, 0x64, 0x43, 0xa2, 0x40, 0xc5,
	0xf0, 0x18, 0xa7, 0x49, 0x66, 0x58, 0xb0, 0x98, 0x7b, 0xd4, 0xb8, 0x5f, 0xac, 0x9c, 0x86, 0x69,
	0x83, 0xc7, 0x7a, 0x09, 0xe2, 0xd2, 0x08, 0x82, 0xfb, 0x22, 0xd1, 0xaf, 0x9e, 0x75, 0x5c, 0xe2,
	0x79, 0x54, 0x88, 0x1e, 0xeb, 0x2a, 0xec, 0xf0, 0x23, 0x61, 0xd8, 0x86, 0x21, 0x0f, 0x23, 0x5a,
	0x8d, 0x28, 0xf7, 0x68, 0x28, 0x13, 0xcb, 0xd5, 0x2e, 0x63, 0xdd, 0x5e, 0x12, 0xfa, 0x61, 0xdc,
	0xa9, 0xfa, 0x31, 0x27, 0xea, 0x44, 0x89, 0xfd, 0xf5, 0x93, 0x76, 0x21, 0x79, 0xec, 0x9d, 0xcb,
	0x7e, 0xcc, 0x49, 0x14, 0x51, 0x9e, 0x66, 0x7a, 0x79, 0x40, 0x7a, 0x81, 0x4f, 0x24, 0xad, 0xa6,
	0x42, 0x62, 0x98, 0xef, 0xb2, 0x2e, 0xd3, 0x62, 0x55, 0x49, 0x46, 0xbb, 0xfc, 0xcd, 0x02, 0x2c,
	0x6c, 0x49, 0x19, 0xad, 0x0d, 0xef, 0xf5, 0xb6, 0xb9, 0x56, 0xf4, 0xc4, 0x02, 0xf0, 0x98, 0x4f,
	0x3d, 0xac, 0xce, 0x60, 0x5b, 0x15, 0x6b, 0x65, 0xba, 0x7e, 0xcf, 0x79, 0xb1, 0x0a, 0x39, 0x67,
	0xc6, 0x70, 0xd6, 0x94, 0xff, 0xf6, 0x61, 0x44, 0x9b, 0xf0, 0xdb, 0xb3, 0xa7, 0xd9, 0xf1, 0x27,
	0x56, 0xa6, 0x6c, 0xb9, 0x79, 0x2f, 0x55, 0xa3, 0x6b, 0x50, 0x10, 0x92, 0x48, 0x1c, 0x71, 0xda,
	0x09, 0x0e, 0xec, 0x4c, 0xc5, 0x5a, 0xc9, 0x37, 0xf3, 0x0a, 0x9b, 0xe3, 0x99, 0x8a, 0xe5, 0x82,
	0xb2, 0xee, 0x69, 0x23, 0xda, 0x85, 0x2c, 0xf7, 0x85, 0x9d, 0xad, 0x58, 0x2b, 0x85, 0xfa, 0x87,
	0x2f, 0x9a, 0xa8, 0xeb, 0x8b, 0xad, 0x31, 0x57, 0x79, 0x42, 0x1b, 0x50, 0xe4, 0x2c, 0x96, 0x14,
	0x1b, 0x27, 0x76, 0x4e, 0x7b, 0xae, 0x24, 0x9e, 0x49, 0x14, 0x68, 0xbc, 0x42, 0xac, 0x69, 0x40,
	0x52, 0xc6, 0xad, 0x31, 0xb7, 0xc0, 0x8f, 0xb4, 0x88, 0x42, 0x51, 0xc7, 0x33, 0x39, 0x08, 0x7b,
	0xbc, 0x92, 0x5d, 0x29, 0xd4, 0x9b, 0x2f, 0x73, 0x93, 0x9b, 0x1a, 0xed, 0x16, 0xf6, 0x87, 0xb2,
	0x40, 0x9f, 0xc0, 0x34, 0xf1, 0x7d, 0x1c, 0x0b, 0xca, 0x31, 0xe9, 0xd2, 0x50, 0xda, 0x13, 0x3a,
	0xdf, 0x45, 0xc7, 0x74, 0x8c, 0x93, 0x76, 0x8c, 0xd3, 0x64, 0xac, 0x77, 0x97, 0xf4, 0x62, 0xea,
	0x16, 0x89, 0xef, 0xdf, 0x11, 0x94, 0x37, 0x14, 0x1e, 0x31, 0x98, 0x94, 0x9c, 0x78, 0x41, 0xd8,
	0xb5, 0x27, 0x35, 0xf5, 0xce, 0xab, 0xad, 0x76, 0xdb, 0x38, 0x77, 0xd3, 0x28, 0xe8, 0x73, 0x58,
	0xd0, 0x4e, 0xd2, 0x47, 0x88, 0x59, 0xa4, 0xf0, 0xc2, 0x9e, 0xd2, 0xe1, 0xdf, 0x1e, 0xbd, 0x69,
	0xf5, 0x5e, 0xb5, 0xe7, 0xda, 0x5e, 0x82, 0xdf, 0x35, 0x70, 0x77, 0x4e, 0x79, 0x39, 0xa1, 0x44,
	0x5f, 0xc0, 0x25, 0xa5, 0xae, 0x9f, 0xf6, 0x9e, 0xbf, 0xd0, 0x7b, 0xfd, 0xa4, 0xf7, 0xf9, 0xfd,
	0x33, 0xb4, 0x68, 0x09, 0x0a, 0x82, 0xf2, 0x01, 0xe5, 0x38, 0x24, 0x7d, 0x6a, 0x83, 0xea, 0x4c,
	0x17, 0x8c, 0x6a, 0x87, 0xf4, 0x29, 0x6a, 0x42, 0x31, 0xf0, 0x7b, 0x14, 0xcb, 0xa0, 0x4f, 0x59,
	0x2c, 0xed, 0x82, 0x8e, 0xfa, 0xda, 0xa9, 0x6a, 0xac, 0x27, 0x6d, 0xd3, 0xcc, 0xfd, 0xf8, 0xf7,
	0x92, 0xe5, 0x16, 0x14, 0xa9, 0x6d, 0x38, 0x68, 0x1d, 0x4a, 0x3e, 0x27, 0x41, 0x38, 0x74, 0x52,
	0xfc, 0x6f, 0x4e, 0x8a, 0x9a, 0x95, 0x7a, 0xb9, 0x09, 0x60, 0xa6, 0x13, 0xee, 0xb1, 0xae, 0x5d,
	0xd2, 0xed, 0xf7, 0xce, 0x99, 0xa5, 0x3d, 0x1a, 0x62, 0x83, 0xba, 0xd3, 0xd0, 0x1f, 0xb7, 0x58,
	0xd7, 0xcd, 0x93, 0x54, 0x44, 0x5b, 0x80, 0x62, 0x41, 0x31, 0xa7, 0x7d, 0x26, 0x29, 0x26, 0xbe,
	0xcf, 0xa9, 0x10, 0xf6, 0xf4, 0x73, 0x3b, 0xad, 0x1c, 0x0b, 0xea, 0x6a, 0x52, 0xc3, 0x70, 0x50,
	0x15, 0xe6, 0x0f, 0x3a, 0x1d, 0x1c, 0xc6, 0x7d, 0x2c, 0x79, 0x2c, 0x24, 0xf5, 0xf1, 0x3e, 0x8b,
	0x84, 0x3d, 0x57, 0xb1, 0x56, 0x4a, 0xee, 0xec, 0x41, 0xa7, 0xb3, 0x13, 0xf7, 0xdb, 0xc6, 0xb2,
	0xc5, 0x22, 0x81, 0xde, 0x82, 0x19, 0xf1, 0x28, 0x88, 0xb0, 0x62, 0xa9, 0x91, 0x17, 0xfa, 0xf6,
	0x42, 0xc5, 0x5a, 0x99, 0x72, 0x4b, 0x4a, 0xfd, 0x59, 0xa7, 0xd3, 0xd0, 0x4a, 0x54, 0x86, 0xec,
	0x20, 0x20, 0xf6, 0x25, 0x5d, 0x11, 0x25, 0xa2, 0x9b, 0x30, 0xd7, 0xa5, 0x21, 0xe5, 0x44, 0xaa,
	0xcc, 0xbf, 0x8a, 0xa9, 0x90, 0x38, 0xf0, 0xed, 0x99, 0xe7, 0x66, 0x3d, 0x9b, 0xd2, 0x5c, 0xc3,
	0xda, 0xf6, 0xd1, 0x2f, 0x16, 0x5c, 0xe9, 0x30, 0xfe, 0x98, 0x70, 0x1f, 0x7b, 0xbd, 0x80, 0x86,
	0x12, 0x7b, 0x94, 0x4b, 0xec, 0x53, 0x49, 0x82, 0x9e, 0xb0, 0xcb, 0x7a, 0x4e, 0x76, 0x5e, 0xed,
	0xcb, 0xd9, 0x34, 0x01, 0xd7, 0x74, 0xbc, 0x35, 0xca, 0xe5, 0xba, 0x89, 0x36, 0x32, 0x36, 0xed,
	0xce, 0x39, 0x28, 0xf4, 0xb3, 0x05, 0x4b, 0x82, 0x4a, 0xec, 0xc5, 0x9c, 0xeb, 0x84, 0xcf, 0xc8,
	0x7b, 0x56, 0x5f, 0x46, 0xf0, 0x6a, 0xf3, 0x6e, 0x51, 0xb9, 0x66, 0x62, 0x9e, 0x4a, 0xca, 0xbd,
	0x22, 0xce, 0x37, 0xa2, 0x77, 0x01, 0x45, 0x9c, 0x1d, 0x1c, 0xe2, 0xda, 0xea, 0xaa, 0x8a, 0x28,
	0x83, 0x30, 0xa6, 0x36, 0xd2, 0xe5, 0x2e, 0x6b, 0x4b, 0x6d, 0x75, 0x75, 0x2d, 0xd1, 0x23, 0x0a,
	0x35, 0x4e, 0x23, 0x4e, 0x85, 0x3a, 0x55, 0x10, 0x0d, 0xae, 0x9f, 0xe8, 0x4f, 0x4c, 0x84, 0x51,
	0xf7, 0x55, 0xdf, 0xf8, 0x4a, 0xbe, 0x61, 0xcf, 0x6b, 0x67, 0xd7, 0x86, 0xc4, 0xed, 0x68, 0x70,
	0x7d, 0xa4, 0x43, 0x1b, 0x42, 0xa9, 0x6e, 0x6b, 0xca, 0x76, 0x34, 0xb8, 0xb1, 0xf8, 0x47, 0x16,
	0x26, 0x93, 0x19, 0x86, 0x7e, 0xb0, 0x60, 0x9a, 0x45, 0xd4, 0xbc, 0x3a, 0x33, 0x02, 0xcc, 0x1f,
	0xd2, 0xfb, 0x5f, 0x66, 0xa6, 0xb3, 0x9b, 0xc6, 0x52, 0xb3, 0x65, 0xa4, 0xec, 0x25, 0x76, 0xdc,
	0x84, 0x3e, 0x00, 0x3b, 0x6d, 0xf1, 0x7d, 0x4a, 0x7c, 0xca, 0x05, 0xee, 0x30, 0x8e, 0x25, 0xe9,
	0x0a, 0x3b, 0x53, 0xc9, 0xae, 0xe4, 0xdd, 0x85, 0xc4, 0xbe, 0x65, 0xcc, 0x9b, 0x8c, 0xb7, 0x49,
	0x57, 0xa0, 0x8f, 0x60, 0x26, 0xe9, 0x0b, 0x41, 0xfa, 0x51, 0x4f, 0xfd, 0x05, 0xcc, 0xaf, 0x74,
	0x2e, 0x39, 0x91, 0x5a, 0x03, 0x9c, 0x3d, 0xb3, 0xca, 0xb8, 0xd3, 0x06, 0xdb, 0x4a, 0xa0, 0x8a,
	0xcd, 0x49, 0xe8, 0xb3, 0xfe, 0x11, 0x3b, 0x77, 0x01, 0xdb, 0x60, 0x87, 0xec, 0x8f, 0xa1, 0xcc,
	0x06, 0x94, 0x93, 0x5e, 0xef, 0x88, 0x3e, 0x7e, 0x3e, 0x7d, 0x26, 0x01, 0xa7, 0xfc, 0x65, 0x07,
	0x4a, 0x23, 0x17, 0x84, 0x0a, 0x30, 0xb9, 0xbd, 0xf3, 0xa9, 0xbb, 0xd1, 0x6a, 0x95, 0xc7, 0x10,
	0xc0, 0xc4, 0x86, 0x91, 0xad, 0xc5, 0xdc, 0xb7, 0x3f, 0x5d, 0x1d, 0x5b, 0xfc, 0xdd, 0x82, 0x2b,
	0x17, 0xf4, 0x26, 0xba, 0x0e, 0x93, 0x22, 0x7e, 0xf8, 0x25, 0xf5, 0xa4, 0xae, 0xea, 0xc5, 0x43,
	0x22, 0x85, 0xa2, 0x55, 0xc8, 0x0a, 0x12, 0xea, 0x25, 0xe5, 0x42, 0x46, 0x33, 0x63, 0x5b, 0xae,
	0x82, 0x22, 0x04, 0x39, 0xf5, 0x08, 0xf5, 0x45, 0x4f, 0xb9, 0x5a, 0x56, 0xe3, 0xcb, 0x0f, 0x85,
	0xbe, 0xbd, 0x29, 0x57, 0x89, 0x4a, 0x13, 0xf3, 0x40, 0x5f, 0xc8, 0x94, 0xab, 0xc4, 0xe5, 0x1a,
	0xe4, 0x87, 0xab, 0x13, 0x9a, 0x82, 0x5c, 0xe3, 0x4e, 0x7b, 0xb7, 0x3c, 0x86, 0xf2, 0x30, 0xbe,
	0xd5, 0x6e, 0xef, 0xd5, 0xca, 0x56, 0x2a, 0xd6, 0xcb, 0x19, 0x73, 0xe4, 0xe5, 0xaf, 0xc1, 0x3e,
	0x6f, 0x8a, 0xa0, 0x22, 0x4c, 0xb5, 0x1a, 0x3b, 0xdb, 0xed, 0xed, 0x07, 0x1b, 0xe5, 0x31, 0x54,
	0x86, 0xe2, 0xe6, 0xae, 0x7b, 0xaf, 0xe1, 0xae, 0xe3, 0xdd, 0x9d, 0x5b, 0xf7, 0xcb, 0x16, 0x42,
	0x30, 0xdd, 0xd8, 0xdb, 0xdb, 0xd8, 0x59, 0xc7, 0x89, 0xa1, 0x9c, 0x51, 0xa8, 0x94, 0x83, 0x5b,
	0x1b, 0xed, 0x72, 0x16, 0x5d, 0x86, 0xb9, 0xc6, 0xad, 0x7b, 0x8d, 0xfb, 0x2d, 0x3c, 0x42, 0xcf,
	0x99, 0x04, 0x9a, 0x36, 0xcc, 0x98, 0x6d, 0x4a, 0x44, 0xd4, 0x0b, 0x3a, 0x01, 0xe5, 0x68, 0xfc,
	0xd7, 0x67, 0x4f, 0xb3, 0xd6, 0xf2, 0xf7, 0x16, 0x64, 0x5d, 0x5f, 0xa0, 0x36, 0x94, 0x46, 0xb6,
	0xf6, 0xe4, 0xee, 0x97, 0xce, 0xf8, 0x51, 0x9b, 0xd5, 0xaa, 0xa5, 0x61, 0xcd, 0xe9, 0x3f, 0xff,
	0x5a, 0x1a, 0xd3, 0x2f, 0xe2, 0x3b, 0xfd, 0x22, 0x8a, 0xde, 0x31, 0x2b, 0x7a, 0x1f, 0x66, 0x8f,
	0x6f, 0x71, 0xe6, 0xad, 0x9e, 0x5a, 0x24, 0x67, 0x8e, 0x6d, 0x6c, 0xaa, 0x83, 0x96, 0xff, 0xb1,
	0x00, 0x8e, 0x56, 0x2d, 0xf4, 0x06, 0xe4, 0x86, 0x8f, 0x7c, 0x84, 0xa8, 0xd5, 0xa8, 0x0a, 0x13,
	0xc9, 0x92, 0x68, 0xaa, 0x7f, 0xf9, 0x54, 0xf5, 0x5b, 0x7a, 0x89, 0x77, 0x13, 0x18, 0x3a, 0x80,
	0x92, 0xaf, 0x26, 0x8f, 0x47, 0xd4, 0x8f, 0x6f, 0x50, 0x4b, 0xde, 0xda, 0xee, 0xcb, 0x6f, 0x85,
	0xce, 0xfa, 0xd0, 0xef, 0xdd, 0x9a, 0x6e, 0xb5, 0xa2, 0x7f, 0x4c, 0xb3, 0xb8, 0x0c, 0xc5, 0xe3,
	0x08, 0xd5, 0x83, 0xc3, 0x05, 0x3f, 0xef, 0x6a, 0xb9, 0x99, 0x7b, 0x90, 0x19, 0xd4, 0x1f, 0x4e,
	0xe8, 0xe4, 0xdf, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xc6, 0x1b, 0xc1, 0xec, 0x0d, 0x00,
	0x00,
}
