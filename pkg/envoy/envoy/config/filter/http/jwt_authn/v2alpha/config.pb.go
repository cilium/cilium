// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/jwt_authn/v2alpha/config.proto

/*
Package envoy_config_filter_http_jwt_authn_v2alpha is a generated protocol buffer package.

It is generated from these files:
	envoy/config/filter/http/jwt_authn/v2alpha/config.proto

It has these top-level messages:
	JwtProvider
	RemoteJwks
	JwtHeader
	ProviderWithAudiences
	JwtRequirement
	JwtRequirementOrList
	JwtRequirementAndList
	RequirementRule
	JwtAuthentication
*/
package envoy_config_filter_http_jwt_authn_v2alpha

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_core1 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import envoy_api_v2_route "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/route"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// This message specifies how a JSON Web Token (JWT) can be verified. JWT format is defined
// `here <https://tools.ietf.org/html/rfc7519>`_. Please see `OAuth2.0
//  <https://tools.ietf.org/html/rfc6749>`_ and `OIDC1.0  <http://openid.net/connect>`_ for
// the authentication flow.
//
// Example:
//
// .. code-block:: yaml
//
//     issuer: https://example.com
//     audiences:
//     - bookstore_android.apps.googleusercontent.com
//     - bookstore_web.apps.googleusercontent.com
//     remote_jwks:
//       http_uri:
//         uri: https://example.com/.well-known/jwks.json
//         cluster: example_jwks_cluster
//       cache_duration:
//         seconds: 300
//
// [#not-implemented-hide:]
type JwtProvider struct {
	// Identifies the principal that issued the JWT. See `here
	//  <https://tools.ietf.org/html/rfc7519#section-4.1.1>`_. Usually a URL or an email address.
	//
	// Example: https://securetoken.google.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	//
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	// The list of JWT `audiences <https://tools.ietf.org/html/rfc7519#section-4.1.3>`_. that are
	// allowed to access. A JWT containing any of these audiences will be accepted. If not specified,
	// will not check audiences in the token.
	//
	// Example:
	//
	// .. code-block:: yaml
	//
	//     audiences:
	//     - bookstore_android.apps.googleusercontent.com
	//     - bookstore_web.apps.googleusercontent.com
	//
	Audiences []string `protobuf:"bytes,2,rep,name=audiences" json:"audiences,omitempty"`
	// `JSON Web Key Set <https://tools.ietf.org/html/rfc7517#appendix-A>`_ is needed. to validate
	// signature of the JWT. This field specifies where to fetch JWKS.
	//
	// Types that are valid to be assigned to JwksSourceSpecifier:
	//	*JwtProvider_RemoteJwks
	//	*JwtProvider_LocalJwks
	JwksSourceSpecifier isJwtProvider_JwksSourceSpecifier `protobuf_oneof:"jwks_source_specifier"`
	// If false, the JWT is removed in the request after a success verification. If true, the JWT is
	// not removed in the request. Default value is false.
	Forward bool `protobuf:"varint,5,opt,name=forward" json:"forward,omitempty"`
	// Specify the HTTP headers to extract JWT token. For examples, following config:
	//
	// .. code-block:: yaml
	//
	//   from_headers:
	//   - name: x-goog-iap-jwt-assertion
	//
	// can be used to extract token from header::
	//
	//   x-goog-iap-jwt-assertion: <JWT>.
	//
	FromHeaders []*JwtHeader `protobuf:"bytes,6,rep,name=from_headers,json=fromHeaders" json:"from_headers,omitempty"`
	// JWT is sent in a query parameter. `jwt_params` represents the query parameter names.
	//
	// For example, if config is:
	//
	// .. code-block:: yaml
	//
	//   from_params:
	//   - jwt_token
	//
	// The JWT format in query parameter is::
	//
	//    /path?jwt_token=<JWT>
	//
	FromParams []string `protobuf:"bytes,7,rep,name=from_params,json=fromParams" json:"from_params,omitempty"`
	// This field specifies the header name to forward a successfully verified JWT payload to the
	// backend. The forwarded data is::
	//
	//    base64_encoded(jwt_payload_in_JSON)
	//
	// If it is not specified, the payload will not be forwarded.
	// Multiple JWTs in a request from different issuers will be supported. Multiple JWTs from the
	// same issuer will not be supported. Each issuer can config this `forward_payload_header`. If
	// multiple JWTs from different issuers want to forward their payloads, their
	// `forward_payload_header` should be different.
	ForwardPayloadHeader string `protobuf:"bytes,8,opt,name=forward_payload_header,json=forwardPayloadHeader" json:"forward_payload_header,omitempty"`
}

func (m *JwtProvider) Reset()                    { *m = JwtProvider{} }
func (m *JwtProvider) String() string            { return proto.CompactTextString(m) }
func (*JwtProvider) ProtoMessage()               {}
func (*JwtProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isJwtProvider_JwksSourceSpecifier interface {
	isJwtProvider_JwksSourceSpecifier()
}

type JwtProvider_RemoteJwks struct {
	RemoteJwks *RemoteJwks `protobuf:"bytes,3,opt,name=remote_jwks,json=remoteJwks,oneof"`
}
type JwtProvider_LocalJwks struct {
	LocalJwks *envoy_api_v2_core.DataSource `protobuf:"bytes,4,opt,name=local_jwks,json=localJwks,oneof"`
}

func (*JwtProvider_RemoteJwks) isJwtProvider_JwksSourceSpecifier() {}
func (*JwtProvider_LocalJwks) isJwtProvider_JwksSourceSpecifier()  {}

func (m *JwtProvider) GetJwksSourceSpecifier() isJwtProvider_JwksSourceSpecifier {
	if m != nil {
		return m.JwksSourceSpecifier
	}
	return nil
}

func (m *JwtProvider) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *JwtProvider) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

func (m *JwtProvider) GetRemoteJwks() *RemoteJwks {
	if x, ok := m.GetJwksSourceSpecifier().(*JwtProvider_RemoteJwks); ok {
		return x.RemoteJwks
	}
	return nil
}

func (m *JwtProvider) GetLocalJwks() *envoy_api_v2_core.DataSource {
	if x, ok := m.GetJwksSourceSpecifier().(*JwtProvider_LocalJwks); ok {
		return x.LocalJwks
	}
	return nil
}

func (m *JwtProvider) GetForward() bool {
	if m != nil {
		return m.Forward
	}
	return false
}

func (m *JwtProvider) GetFromHeaders() []*JwtHeader {
	if m != nil {
		return m.FromHeaders
	}
	return nil
}

func (m *JwtProvider) GetFromParams() []string {
	if m != nil {
		return m.FromParams
	}
	return nil
}

func (m *JwtProvider) GetForwardPayloadHeader() string {
	if m != nil {
		return m.ForwardPayloadHeader
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JwtProvider) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JwtProvider_OneofMarshaler, _JwtProvider_OneofUnmarshaler, _JwtProvider_OneofSizer, []interface{}{
		(*JwtProvider_RemoteJwks)(nil),
		(*JwtProvider_LocalJwks)(nil),
	}
}

func _JwtProvider_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JwtProvider)
	// jwks_source_specifier
	switch x := m.JwksSourceSpecifier.(type) {
	case *JwtProvider_RemoteJwks:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoteJwks); err != nil {
			return err
		}
	case *JwtProvider_LocalJwks:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LocalJwks); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JwtProvider.JwksSourceSpecifier has unexpected type %T", x)
	}
	return nil
}

func _JwtProvider_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JwtProvider)
	switch tag {
	case 3: // jwks_source_specifier.remote_jwks
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoteJwks)
		err := b.DecodeMessage(msg)
		m.JwksSourceSpecifier = &JwtProvider_RemoteJwks{msg}
		return true, err
	case 4: // jwks_source_specifier.local_jwks
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_api_v2_core.DataSource)
		err := b.DecodeMessage(msg)
		m.JwksSourceSpecifier = &JwtProvider_LocalJwks{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JwtProvider_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JwtProvider)
	// jwks_source_specifier
	switch x := m.JwksSourceSpecifier.(type) {
	case *JwtProvider_RemoteJwks:
		s := proto.Size(x.RemoteJwks)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JwtProvider_LocalJwks:
		s := proto.Size(x.LocalJwks)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// This message specifies how to fetch JWKS from remote and how to cache it.
type RemoteJwks struct {
	// The HTTP URI to fetch the JWKS. For example:
	//
	// .. code-block:: yaml
	//
	//    http_uri:
	//      uri: https://www.googleapis.com/oauth2/v1/certs
	//      cluster: jwt.www.googleapis.com|443
	//
	HttpUri *envoy_api_v2_core1.HttpUri `protobuf:"bytes,1,opt,name=http_uri,json=httpUri" json:"http_uri,omitempty"`
	// Duration after which the cached JWKS should be expired. If not specified, default cache
	// duration is 5 minutes.
	CacheDuration *google_protobuf3.Duration `protobuf:"bytes,2,opt,name=cache_duration,json=cacheDuration" json:"cache_duration,omitempty"`
}

func (m *RemoteJwks) Reset()                    { *m = RemoteJwks{} }
func (m *RemoteJwks) String() string            { return proto.CompactTextString(m) }
func (*RemoteJwks) ProtoMessage()               {}
func (*RemoteJwks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RemoteJwks) GetHttpUri() *envoy_api_v2_core1.HttpUri {
	if m != nil {
		return m.HttpUri
	}
	return nil
}

func (m *RemoteJwks) GetCacheDuration() *google_protobuf3.Duration {
	if m != nil {
		return m.CacheDuration
	}
	return nil
}

// This message specifies a header location to extract JWT token.
type JwtHeader struct {
	// The HTTP header name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The value prefix. The value format is "value_prefix<token>"
	// For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
	// end.
	ValuePrefix string `protobuf:"bytes,2,opt,name=value_prefix,json=valuePrefix" json:"value_prefix,omitempty"`
}

func (m *JwtHeader) Reset()                    { *m = JwtHeader{} }
func (m *JwtHeader) String() string            { return proto.CompactTextString(m) }
func (*JwtHeader) ProtoMessage()               {}
func (*JwtHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JwtHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JwtHeader) GetValuePrefix() string {
	if m != nil {
		return m.ValuePrefix
	}
	return ""
}

// Specify a required provider with audiences.
type ProviderWithAudiences struct {
	// Specify a required provider name.
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName" json:"provider_name,omitempty"`
	// This field overrides the one specified in the JwtProvider.
	Audiences []string `protobuf:"bytes,2,rep,name=audiences" json:"audiences,omitempty"`
}

func (m *ProviderWithAudiences) Reset()                    { *m = ProviderWithAudiences{} }
func (m *ProviderWithAudiences) String() string            { return proto.CompactTextString(m) }
func (*ProviderWithAudiences) ProtoMessage()               {}
func (*ProviderWithAudiences) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ProviderWithAudiences) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *ProviderWithAudiences) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

// This message specifies a Jwt requirement. An empty message means JWT verification is not
// required. Here are some config examples:
//
// .. code-block:: yaml
//
//  # Example 1: not required with an empty message
//
//  # Example 2: require A
//  provider_name: "provider-A"
//
//  # Example 3: require A or B
//  requires_any:
//    requirements:
//      - provider_name: "provider-A"
//      - provider_name: "provider-B"
//
//  # Example 4: require A and B
//  requires_all:
//    requirements:
//      - provider_name: "provider-A"
//      - provider_name: "provider-B"
//
//  # Example 5: require A and (B or C)
//  requires_all:
//    requirements:
//      - provider_name: "provider-A"
//      - requires_any:
//        requirements:
//          - provider_name: "provider-B"
//          - provider_name: "provider-C"
//
//  # Example 6: require A or (B and C)
//  requires_any:
//    requirements:
//      - provider_name: "provider-A"
//      - requires_all:
//        requirements:
//          - provider_name: "provider-B"
//          - provider_name: "provider-C"
//
type JwtRequirement struct {
	// Types that are valid to be assigned to RequiresType:
	//	*JwtRequirement_ProviderName
	//	*JwtRequirement_ProviderAndAudiences
	//	*JwtRequirement_RequiresAny
	//	*JwtRequirement_RequiresAll
	//	*JwtRequirement_AllowMissingOrFailed
	RequiresType isJwtRequirement_RequiresType `protobuf_oneof:"requires_type"`
}

func (m *JwtRequirement) Reset()                    { *m = JwtRequirement{} }
func (m *JwtRequirement) String() string            { return proto.CompactTextString(m) }
func (*JwtRequirement) ProtoMessage()               {}
func (*JwtRequirement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isJwtRequirement_RequiresType interface {
	isJwtRequirement_RequiresType()
}

type JwtRequirement_ProviderName struct {
	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,oneof"`
}
type JwtRequirement_ProviderAndAudiences struct {
	ProviderAndAudiences *ProviderWithAudiences `protobuf:"bytes,2,opt,name=provider_and_audiences,json=providerAndAudiences,oneof"`
}
type JwtRequirement_RequiresAny struct {
	RequiresAny *JwtRequirementOrList `protobuf:"bytes,3,opt,name=requires_any,json=requiresAny,oneof"`
}
type JwtRequirement_RequiresAll struct {
	RequiresAll *JwtRequirementAndList `protobuf:"bytes,4,opt,name=requires_all,json=requiresAll,oneof"`
}
type JwtRequirement_AllowMissingOrFailed struct {
	AllowMissingOrFailed *google_protobuf1.BoolValue `protobuf:"bytes,5,opt,name=allow_missing_or_failed,json=allowMissingOrFailed,oneof"`
}

func (*JwtRequirement_ProviderName) isJwtRequirement_RequiresType()         {}
func (*JwtRequirement_ProviderAndAudiences) isJwtRequirement_RequiresType() {}
func (*JwtRequirement_RequiresAny) isJwtRequirement_RequiresType()          {}
func (*JwtRequirement_RequiresAll) isJwtRequirement_RequiresType()          {}
func (*JwtRequirement_AllowMissingOrFailed) isJwtRequirement_RequiresType() {}

func (m *JwtRequirement) GetRequiresType() isJwtRequirement_RequiresType {
	if m != nil {
		return m.RequiresType
	}
	return nil
}

func (m *JwtRequirement) GetProviderName() string {
	if x, ok := m.GetRequiresType().(*JwtRequirement_ProviderName); ok {
		return x.ProviderName
	}
	return ""
}

func (m *JwtRequirement) GetProviderAndAudiences() *ProviderWithAudiences {
	if x, ok := m.GetRequiresType().(*JwtRequirement_ProviderAndAudiences); ok {
		return x.ProviderAndAudiences
	}
	return nil
}

func (m *JwtRequirement) GetRequiresAny() *JwtRequirementOrList {
	if x, ok := m.GetRequiresType().(*JwtRequirement_RequiresAny); ok {
		return x.RequiresAny
	}
	return nil
}

func (m *JwtRequirement) GetRequiresAll() *JwtRequirementAndList {
	if x, ok := m.GetRequiresType().(*JwtRequirement_RequiresAll); ok {
		return x.RequiresAll
	}
	return nil
}

func (m *JwtRequirement) GetAllowMissingOrFailed() *google_protobuf1.BoolValue {
	if x, ok := m.GetRequiresType().(*JwtRequirement_AllowMissingOrFailed); ok {
		return x.AllowMissingOrFailed
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*JwtRequirement) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _JwtRequirement_OneofMarshaler, _JwtRequirement_OneofUnmarshaler, _JwtRequirement_OneofSizer, []interface{}{
		(*JwtRequirement_ProviderName)(nil),
		(*JwtRequirement_ProviderAndAudiences)(nil),
		(*JwtRequirement_RequiresAny)(nil),
		(*JwtRequirement_RequiresAll)(nil),
		(*JwtRequirement_AllowMissingOrFailed)(nil),
	}
}

func _JwtRequirement_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*JwtRequirement)
	// requires_type
	switch x := m.RequiresType.(type) {
	case *JwtRequirement_ProviderName:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ProviderName)
	case *JwtRequirement_ProviderAndAudiences:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProviderAndAudiences); err != nil {
			return err
		}
	case *JwtRequirement_RequiresAny:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequiresAny); err != nil {
			return err
		}
	case *JwtRequirement_RequiresAll:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequiresAll); err != nil {
			return err
		}
	case *JwtRequirement_AllowMissingOrFailed:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AllowMissingOrFailed); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("JwtRequirement.RequiresType has unexpected type %T", x)
	}
	return nil
}

func _JwtRequirement_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*JwtRequirement)
	switch tag {
	case 1: // requires_type.provider_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.RequiresType = &JwtRequirement_ProviderName{x}
		return true, err
	case 2: // requires_type.provider_and_audiences
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProviderWithAudiences)
		err := b.DecodeMessage(msg)
		m.RequiresType = &JwtRequirement_ProviderAndAudiences{msg}
		return true, err
	case 3: // requires_type.requires_any
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JwtRequirementOrList)
		err := b.DecodeMessage(msg)
		m.RequiresType = &JwtRequirement_RequiresAny{msg}
		return true, err
	case 4: // requires_type.requires_all
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(JwtRequirementAndList)
		err := b.DecodeMessage(msg)
		m.RequiresType = &JwtRequirement_RequiresAll{msg}
		return true, err
	case 5: // requires_type.allow_missing_or_failed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf1.BoolValue)
		err := b.DecodeMessage(msg)
		m.RequiresType = &JwtRequirement_AllowMissingOrFailed{msg}
		return true, err
	default:
		return false, nil
	}
}

func _JwtRequirement_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*JwtRequirement)
	// requires_type
	switch x := m.RequiresType.(type) {
	case *JwtRequirement_ProviderName:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProviderName)))
		n += len(x.ProviderName)
	case *JwtRequirement_ProviderAndAudiences:
		s := proto.Size(x.ProviderAndAudiences)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JwtRequirement_RequiresAny:
		s := proto.Size(x.RequiresAny)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JwtRequirement_RequiresAll:
		s := proto.Size(x.RequiresAll)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *JwtRequirement_AllowMissingOrFailed:
		s := proto.Size(x.AllowMissingOrFailed)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// This message specifies a list of RequiredProvider.
// Their results are OR-ed; if any one of them passes, the result is passed
type JwtRequirementOrList struct {
	// Specify a list of JwtRequirement.
	Requirements []*JwtRequirement `protobuf:"bytes,1,rep,name=requirements" json:"requirements,omitempty"`
}

func (m *JwtRequirementOrList) Reset()                    { *m = JwtRequirementOrList{} }
func (m *JwtRequirementOrList) String() string            { return proto.CompactTextString(m) }
func (*JwtRequirementOrList) ProtoMessage()               {}
func (*JwtRequirementOrList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JwtRequirementOrList) GetRequirements() []*JwtRequirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// This message specifies a list of RequiredProvider.
// Their results are AND-ed; all of them must pass, if one of them fails or missing, it fails.
type JwtRequirementAndList struct {
	// Specify a list of JwtRequirement.
	Requirements []*JwtRequirement `protobuf:"bytes,1,rep,name=requirements" json:"requirements,omitempty"`
}

func (m *JwtRequirementAndList) Reset()                    { *m = JwtRequirementAndList{} }
func (m *JwtRequirementAndList) String() string            { return proto.CompactTextString(m) }
func (*JwtRequirementAndList) ProtoMessage()               {}
func (*JwtRequirementAndList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *JwtRequirementAndList) GetRequirements() []*JwtRequirement {
	if m != nil {
		return m.Requirements
	}
	return nil
}

// This message specifies a Jwt requirement for a specific Route condition.
// Example 1:
//
// .. code-block:: yaml
//
//    - match:
//         prefix: "/healthz"
//
// In above example, "requires" field is empty for /healthz prefix match,
// it means that requests matching the path prefix don't require JWT authentication.
//
// Example 2:
//
// .. code-block:: yaml
//
//    - match:
//         prefix: "/"
//      requires: { provider_name: "provider-A" }
//
// In above example, all requests matched the path prefix require jwt authentication
// from "provider-A".
type RequirementRule struct {
	// The route matching parameter. Only when the match is satisfied, the "requires" field will
	// apply.
	//
	// For example: following match will match all requests.
	//
	// .. code-block:: yaml
	//
	//    match:
	//       prefix: "/"
	//
	Match *envoy_api_v2_route.RouteMatch `protobuf:"bytes,1,opt,name=match" json:"match,omitempty"`
	// Specify a Jwt Requirement. Please detail comment in message JwtRequirement.
	Requires *JwtRequirement `protobuf:"bytes,2,opt,name=requires" json:"requires,omitempty"`
}

func (m *RequirementRule) Reset()                    { *m = RequirementRule{} }
func (m *RequirementRule) String() string            { return proto.CompactTextString(m) }
func (*RequirementRule) ProtoMessage()               {}
func (*RequirementRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RequirementRule) GetMatch() *envoy_api_v2_route.RouteMatch {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *RequirementRule) GetRequires() *JwtRequirement {
	if m != nil {
		return m.Requires
	}
	return nil
}

// This is the Envoy HTTP filter config for JWT authentication.
//
// For example:
//
// .. code-block:: yaml
//
//   providers:
//      provider1:
//        issuer: issuer1
//        audiences:
//        - audience1
//        - audience2
//        remote_jwks:
//          http_uri:
//            uri: https://example.com/.well-known/jwks.json
//            cluster: example_jwks_cluster
//      provider2:
//        issuer: issuer2
//        local_jwks:
//          inline_string: jwks_string
//
//   rules:
//      # Not jwt verification is required for /health path
//      - match:
//          prefix: "/health"
//
//      # Jwt verification for provider1 is required for path prefixed with "prefix"
//      - match:
//          prefix: "/prefix"
//        requires:
//          provider_name: "provider1"
//
//      # Jwt verification for either provider1 or provider2 is required for all other requests.
//      - match:
//          prefix: "/"
//        requires:
//          requires_any:
//            requirements:
//              - provider_name: "provider1"
//              - provider_name: "provider2"
//
// // [#not-implemented-hide:]
type JwtAuthentication struct {
	// Map of provider names to JwtProviders.
	//
	// .. code-block:: yaml
	//
	//   providers:
	//     provider1:
	//        issuer: issuer1
	//        audiences:
	//        - audience1
	//        - audience2
	//        remote_jwks:
	//          http_uri:
	//            uri: https://example.com/.well-known/jwks.json
	//            cluster: example_jwks_cluster
	//      provider2:
	//        issuer: provider2
	//        local_jwks:
	//          inline_string: jwks_string
	//
	Providers map[string]*JwtProvider `protobuf:"bytes,1,rep,name=providers" json:"providers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Specifies requirements based on the route matches. The first matched requirement will be
	// applied. If there are overlapped match conditions, please put the most specific match first.
	//
	// Examples
	//
	// .. code-block:: yaml
	//
	// rules:
	//   - match: { prefix: "/healthz" }
	//   - match: { prefix: "/baz" }
	//     requires:
	//       provider_name: "provider1"
	//   - match: { prefix: "/foo" }
	//     requires:
	//       requires_any:
	//         requirements:
	//           - provider_name: "provider1"
	//           - provider_name: "provider2"
	//   - match: { prefix: "/bar" }
	//     requires:
	//       requires_all:
	//         requirements:
	//           - provider_name: "provider1"
	//           - provider_name: "provider2"
	//
	Rules []*RequirementRule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *JwtAuthentication) Reset()                    { *m = JwtAuthentication{} }
func (m *JwtAuthentication) String() string            { return proto.CompactTextString(m) }
func (*JwtAuthentication) ProtoMessage()               {}
func (*JwtAuthentication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *JwtAuthentication) GetProviders() map[string]*JwtProvider {
	if m != nil {
		return m.Providers
	}
	return nil
}

func (m *JwtAuthentication) GetRules() []*RequirementRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*JwtProvider)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtProvider")
	proto.RegisterType((*RemoteJwks)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.RemoteJwks")
	proto.RegisterType((*JwtHeader)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtHeader")
	proto.RegisterType((*ProviderWithAudiences)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.ProviderWithAudiences")
	proto.RegisterType((*JwtRequirement)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirement")
	proto.RegisterType((*JwtRequirementOrList)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementOrList")
	proto.RegisterType((*JwtRequirementAndList)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtRequirementAndList")
	proto.RegisterType((*RequirementRule)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.RequirementRule")
	proto.RegisterType((*JwtAuthentication)(nil), "envoy.config.filter.http.jwt_authn.v2alpha.JwtAuthentication")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/jwt_authn/v2alpha/config.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x75, 0x62, 0x3f, 0x27, 0x69, 0x19, 0x25, 0xed, 0x12, 0xb5, 0xc1, 0x35, 0x42,
	0xb2, 0x38, 0xec, 0x4a, 0x86, 0x52, 0x54, 0x24, 0x14, 0x5b, 0x05, 0x59, 0x56, 0x43, 0xc3, 0x54,
	0x94, 0x3f, 0x97, 0xd5, 0x64, 0x77, 0x1c, 0x4f, 0xb2, 0xde, 0x59, 0x66, 0x66, 0xbd, 0xf8, 0x0a,
	0xe2, 0xc2, 0x91, 0xaf, 0xc1, 0x17, 0x40, 0x9c, 0x7a, 0xe5, 0xce, 0x77, 0x40, 0xfd, 0x16, 0x68,
	0x67, 0x66, 0xed, 0xb8, 0x31, 0x08, 0x17, 0x89, 0x8b, 0x35, 0xf3, 0xde, 0xfc, 0x7e, 0x6f, 0xde,
	0xcf, 0xbf, 0x79, 0x0b, 0x0f, 0x69, 0x32, 0xe3, 0x73, 0x3f, 0xe4, 0xc9, 0x98, 0x9d, 0xfb, 0x63,
	0x16, 0x2b, 0x2a, 0xfc, 0x89, 0x52, 0xa9, 0x7f, 0x91, 0xab, 0x80, 0x64, 0x6a, 0x92, 0xf8, 0xb3,
	0x1e, 0x89, 0xd3, 0x09, 0xb1, 0x87, 0xbc, 0x54, 0x70, 0xc5, 0xd1, 0xbb, 0x1a, 0xe8, 0xd9, 0x98,
	0x01, 0x7a, 0x05, 0xd0, 0x5b, 0x00, 0x3d, 0x0b, 0x3c, 0xbc, 0x6b, 0x8a, 0x90, 0x94, 0xf9, 0xb3,
	0x9e, 0x1f, 0x72, 0x41, 0xfd, 0x33, 0x22, 0xa9, 0x61, 0x3a, 0x6c, 0x5f, 0xcf, 0x16, 0x3c, 0x41,
	0x26, 0x98, 0x3d, 0x71, 0xb4, 0x72, 0x42, 0xf0, 0x4c, 0x51, 0xf3, 0x5b, 0xe6, 0xcf, 0x39, 0x3f,
	0x8f, 0xa9, 0xaf, 0x77, 0x67, 0xd9, 0xd8, 0x8f, 0x32, 0x41, 0x14, 0xe3, 0xc9, 0xdf, 0xe5, 0x73,
	0x41, 0xd2, 0x94, 0x0a, 0x69, 0xf3, 0x77, 0x66, 0x24, 0x66, 0x11, 0x51, 0xd4, 0x2f, 0x17, 0x26,
	0xd1, 0xf9, 0xa3, 0x06, 0xad, 0x51, 0xae, 0x4e, 0x05, 0x9f, 0xb1, 0x88, 0x0a, 0x74, 0x1f, 0xb6,
	0x98, 0x94, 0x19, 0x15, 0xae, 0xd3, 0x76, 0xba, 0xcd, 0x41, 0xf3, 0xb7, 0x97, 0x2f, 0x6a, 0x37,
	0x44, 0xb5, 0xed, 0x60, 0x9b, 0x40, 0x77, 0xa1, 0x49, 0xb2, 0x88, 0xd1, 0x24, 0xa4, 0xd2, 0xad,
	0xb6, 0x6b, 0xdd, 0x26, 0x5e, 0x06, 0xd0, 0xd7, 0xd0, 0x12, 0x74, 0xca, 0x15, 0x0d, 0x2e, 0xf2,
	0x4b, 0xe9, 0xd6, 0xda, 0x4e, 0xb7, 0xd5, 0xfb, 0xc0, 0xfb, 0xf7, 0x5a, 0x7a, 0x58, 0xc3, 0x47,
	0xf9, 0xa5, 0x1c, 0x56, 0x30, 0x88, 0xc5, 0x0e, 0x7d, 0x0c, 0x10, 0xf3, 0x90, 0xc4, 0x86, 0xf9,
	0x86, 0x66, 0xbe, 0x67, 0x99, 0x49, 0xca, 0xbc, 0x59, 0xcf, 0x2b, 0xb4, 0xf5, 0x1e, 0x13, 0x45,
	0x9e, 0xf1, 0x4c, 0x84, 0x74, 0x58, 0xc1, 0x4d, 0x0d, 0xd1, 0x78, 0x17, 0xb6, 0xc7, 0x5c, 0xe4,
	0x44, 0x44, 0x6e, 0xbd, 0xed, 0x74, 0x1b, 0xb8, 0xdc, 0xa2, 0xaf, 0x60, 0x67, 0x2c, 0xf8, 0x34,
	0x98, 0x50, 0x12, 0x51, 0x21, 0xdd, 0xad, 0x76, 0xad, 0xdb, 0xea, 0x3d, 0xd8, 0xe4, 0xd6, 0xa3,
	0x5c, 0x0d, 0x35, 0x1a, 0xb7, 0x0a, 0x2a, 0xb3, 0x96, 0xe8, 0x2d, 0xd0, 0xdb, 0x20, 0x25, 0x82,
	0x4c, 0xa5, 0xbb, 0xad, 0xe5, 0x82, 0x22, 0x74, 0xaa, 0x23, 0xe8, 0x7d, 0xb8, 0x6d, 0x6f, 0x11,
	0xa4, 0x64, 0x1e, 0x73, 0x12, 0xd9, 0x5b, 0xb8, 0x8d, 0xe2, 0x0f, 0xc0, 0xfb, 0x36, 0x7b, 0x6a,
	0x92, 0x86, 0x77, 0x70, 0x04, 0x07, 0x85, 0x08, 0x81, 0xd4, 0x6d, 0x06, 0x32, 0xa5, 0x21, 0x1b,
	0x33, 0x2a, 0x50, 0xfd, 0xd7, 0x97, 0x2f, 0x6a, 0x4e, 0xe7, 0x47, 0x07, 0x60, 0xa9, 0x23, 0x7a,
	0x00, 0x8d, 0xd2, 0x70, 0xfa, 0x7f, 0x6d, 0xf5, 0x0e, 0xd7, 0xe8, 0x36, 0x54, 0x2a, 0xfd, 0x42,
	0x30, 0xbc, 0x3d, 0x31, 0x0b, 0x74, 0x0c, 0x7b, 0x21, 0x09, 0x27, 0x34, 0x28, 0xdd, 0xe6, 0x56,
	0x35, 0xf8, 0x4d, 0xcf, 0xd8, 0xcd, 0x2b, 0xed, 0xe6, 0x3d, 0xb6, 0x07, 0xf0, 0xae, 0x06, 0x94,
	0xdb, 0xce, 0x09, 0x34, 0x17, 0xc2, 0xa0, 0x7b, 0x70, 0x23, 0x21, 0x53, 0x7a, 0xdd, 0x59, 0x3a,
	0x8c, 0xee, 0xc3, 0xce, 0x8c, 0xc4, 0x19, 0x0d, 0x52, 0x41, 0xc7, 0xec, 0x3b, 0x5d, 0xab, 0x89,
	0x5b, 0x3a, 0x76, 0xaa, 0x43, 0x9d, 0x6f, 0xe0, 0xa0, 0x74, 0xea, 0x97, 0x4c, 0x4d, 0xfa, 0x0b,
	0xd7, 0xbd, 0x0d, 0xbb, 0xa9, 0x4d, 0x04, 0xcb, 0x1a, 0x78, 0xa7, 0x0c, 0x7e, 0x56, 0x14, 0xf8,
	0x47, 0xe3, 0x76, 0xfe, 0xac, 0xc1, 0xde, 0x28, 0x57, 0x98, 0x7e, 0x9b, 0x31, 0x41, 0xa7, 0x34,
	0x51, 0xe8, 0x9d, 0xb5, 0xac, 0xc3, 0xca, 0x2b, 0xbc, 0x73, 0xb8, 0xbd, 0x38, 0x46, 0x92, 0x28,
	0xb8, 0x5a, 0xa4, 0x90, 0xab, 0xbf, 0x89, 0x8f, 0xd6, 0xf6, 0x37, 0xac, 0xe0, 0xfd, 0xb2, 0x44,
	0x3f, 0x89, 0x96, 0x7d, 0x53, 0xd8, 0x11, 0xe6, 0xc2, 0x32, 0x20, 0xc9, 0xdc, 0x3e, 0xb7, 0xe3,
	0x0d, 0x8d, 0x7b, 0xa5, 0xe7, 0xa7, 0xe2, 0x09, 0x93, 0x6a, 0x58, 0xc1, 0xad, 0x92, 0xb7, 0x9f,
	0xcc, 0xd1, 0xf8, 0x6a, 0x99, 0x38, 0xb6, 0x6f, 0xaf, 0xff, 0xfa, 0x65, 0xfa, 0x49, 0x74, 0xad,
	0x4e, 0x1c, 0xa3, 0x67, 0x70, 0x87, 0xc4, 0x31, 0xcf, 0x83, 0x29, 0x93, 0x92, 0x25, 0xe7, 0x01,
	0x17, 0xc1, 0x98, 0xb0, 0x98, 0x9a, 0x17, 0x5b, 0xd8, 0xf6, 0x55, 0xe7, 0x0d, 0x38, 0x8f, 0x9f,
	0x17, 0x16, 0x29, 0x34, 0xd2, 0xe0, 0x13, 0x83, 0x7d, 0x2a, 0x3e, 0xd5, 0xc8, 0xc1, 0x4d, 0xd8,
	0x5d, 0x5c, 0x5e, 0xcd, 0x53, 0xda, 0xf9, 0xde, 0x81, 0xfd, 0x75, 0x5d, 0xa3, 0x8b, 0x45, 0x9b,
	0x45, 0x50, 0xba, 0x8e, 0x1e, 0x03, 0x8f, 0x5e, 0xbf, 0xcd, 0x01, 0x14, 0x26, 0xaf, 0xff, 0xec,
	0x54, 0x1b, 0x55, 0xbc, 0xc2, 0xdd, 0xf9, 0xc1, 0x81, 0x83, 0xb5, 0x9a, 0xfc, 0xaf, 0xb7, 0xf8,
	0xc5, 0x81, 0x9b, 0x57, 0x4e, 0xe2, 0x2c, 0xa6, 0xe8, 0x18, 0xea, 0x53, 0xa2, 0xc2, 0x89, 0x9d,
	0x14, 0x47, 0xab, 0x93, 0xc2, 0x7c, 0x95, 0x70, 0xf1, 0x7b, 0x52, 0x9c, 0xb2, 0xe4, 0x3f, 0x39,
	0xd5, 0x5b, 0x0e, 0x36, 0x40, 0xf4, 0x1c, 0x1a, 0xa5, 0xe2, 0xf6, 0x09, 0xfc, 0x87, 0xdb, 0xe3,
	0x05, 0x57, 0xe7, 0xf7, 0x2a, 0xbc, 0x31, 0xca, 0x55, 0x3f, 0x53, 0x13, 0x9a, 0x28, 0x16, 0xea,
	0x19, 0x83, 0x2e, 0xa0, 0x59, 0xbe, 0x8d, 0x52, 0xac, 0x27, 0x1b, 0x96, 0x5b, 0x65, 0x5c, 0xbc,
	0x41, 0xf9, 0x49, 0xa2, 0xc4, 0x1c, 0x2f, 0xe9, 0xd1, 0xe7, 0x50, 0x17, 0x59, 0x6c, 0xc7, 0x47,
	0xab, 0xf7, 0xd1, 0x66, 0xdf, 0xb5, 0x15, 0x9d, 0xb1, 0x61, 0x3a, 0xcc, 0x60, 0x6f, 0xb5, 0x1e,
	0xba, 0x05, 0xb5, 0x4b, 0x3a, 0xb7, 0x23, 0xac, 0x58, 0xa2, 0x13, 0xa8, 0xeb, 0x31, 0x68, 0xd5,
	0x7c, 0xb8, 0x61, 0x7b, 0x25, 0x3f, 0x36, 0x2c, 0x8f, 0xaa, 0x1f, 0x3a, 0x67, 0x5b, 0xfa, 0x05,
	0xbd, 0xf7, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x34, 0xf6, 0x58, 0x1f, 0x09, 0x00, 0x00,
}
