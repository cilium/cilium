// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/http/squash/v2/squash.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import duration "github.com/golang/protobuf/ptypes/duration"
import _struct "github.com/golang/protobuf/ptypes/struct"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// [#proto-status: experimental]
type Squash struct {
	// The name of the cluster that hosts the Squash server.
	Cluster string `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// When the filter requests the Squash server to create a DebugAttachment, it will use this
	// structure as template for the body of the request. It can contain reference to environment
	// variables in the form of '{{ ENV_VAR_NAME }}'. These can be used to provide the Squash server
	// with more information to find the process to attach the debugger to. For example, in a
	// Istio/k8s environment, this will contain information on the pod:
	//
	// .. code-block:: json
	//
	//  {
	//    "spec": {
	//      "attachment": {
	//        "pod": "{{ POD_NAME }}",
	//        "namespace": "{{ POD_NAMESPACE }}"
	//      },
	//      "match_request": true
	//    }
	//  }
	//
	// (where POD_NAME, POD_NAMESPACE are configured in the pod via the Downward API)
	AttachmentTemplate *_struct.Struct `protobuf:"bytes,2,opt,name=attachment_template,json=attachmentTemplate,proto3" json:"attachment_template,omitempty"`
	// The timeout for individual requests sent to the Squash cluster. Defaults to 1 second.
	RequestTimeout *duration.Duration `protobuf:"bytes,3,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`
	// The total timeout Squash will delay a request and wait for it to be attached. Defaults to 60
	// seconds.
	AttachmentTimeout *duration.Duration `protobuf:"bytes,4,opt,name=attachment_timeout,json=attachmentTimeout,proto3" json:"attachment_timeout,omitempty"`
	// Amount of time to poll for the status of the attachment object in the Squash server
	// (to check if has been attached). Defaults to 1 second.
	AttachmentPollPeriod *duration.Duration `protobuf:"bytes,5,opt,name=attachment_poll_period,json=attachmentPollPeriod,proto3" json:"attachment_poll_period,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Squash) Reset()         { *m = Squash{} }
func (m *Squash) String() string { return proto.CompactTextString(m) }
func (*Squash) ProtoMessage()    {}
func (*Squash) Descriptor() ([]byte, []int) {
	return fileDescriptor_squash_d05f57b83943934b, []int{0}
}
func (m *Squash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Squash.Unmarshal(m, b)
}
func (m *Squash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Squash.Marshal(b, m, deterministic)
}
func (dst *Squash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Squash.Merge(dst, src)
}
func (m *Squash) XXX_Size() int {
	return xxx_messageInfo_Squash.Size(m)
}
func (m *Squash) XXX_DiscardUnknown() {
	xxx_messageInfo_Squash.DiscardUnknown(m)
}

var xxx_messageInfo_Squash proto.InternalMessageInfo

func (m *Squash) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Squash) GetAttachmentTemplate() *_struct.Struct {
	if m != nil {
		return m.AttachmentTemplate
	}
	return nil
}

func (m *Squash) GetRequestTimeout() *duration.Duration {
	if m != nil {
		return m.RequestTimeout
	}
	return nil
}

func (m *Squash) GetAttachmentTimeout() *duration.Duration {
	if m != nil {
		return m.AttachmentTimeout
	}
	return nil
}

func (m *Squash) GetAttachmentPollPeriod() *duration.Duration {
	if m != nil {
		return m.AttachmentPollPeriod
	}
	return nil
}

func init() {
	proto.RegisterType((*Squash)(nil), "envoy.config.filter.http.squash.v2.Squash")
}

func init() {
	proto.RegisterFile("envoy/config/filter/http/squash/v2/squash.proto", fileDescriptor_squash_d05f57b83943934b)
}

var fileDescriptor_squash_d05f57b83943934b = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4e, 0xc2, 0x30,
	0x1c, 0xc6, 0xb3, 0x31, 0x31, 0xd4, 0x44, 0x63, 0x25, 0x32, 0x89, 0x51, 0x82, 0x17, 0x4e, 0x6d,
	0x32, 0xdf, 0x80, 0x78, 0xe0, 0x64, 0x08, 0xe0, 0xc5, 0x0b, 0x29, 0xa3, 0x8c, 0x25, 0x65, 0xff,
	0xd1, 0xfd, 0xbb, 0xc4, 0x37, 0xf1, 0x59, 0x3c, 0xf9, 0x26, 0x5e, 0xf5, 0x2d, 0x0c, 0x5d, 0x09,
	0x8b, 0x5e, 0xb8, 0x7d, 0xe9, 0xd7, 0xdf, 0xaf, 0x5f, 0x4a, 0xb8, 0xcc, 0x4a, 0x78, 0xe3, 0x31,
	0x64, 0xab, 0x34, 0xe1, 0xab, 0x54, 0xa1, 0xd4, 0x7c, 0x8d, 0x98, 0xf3, 0x62, 0x6b, 0x44, 0xb1,
	0xe6, 0x65, 0xe4, 0x12, 0xcb, 0x35, 0x20, 0xd0, 0xbe, 0x05, 0x58, 0x05, 0xb0, 0x0a, 0x60, 0x3b,
	0x80, 0xb9, 0x6b, 0x65, 0xd4, 0xbd, 0x4b, 0x00, 0x12, 0x25, 0xb9, 0x25, 0x16, 0x66, 0xc5, 0x97,
	0x46, 0x0b, 0x4c, 0x21, 0xab, 0x1c, 0xdd, 0xdb, 0xbf, 0x7d, 0x81, 0xda, 0xc4, 0xe8, 0xda, 0x4e,
	0x29, 0x54, 0xba, 0x14, 0x28, 0xf9, 0x3e, 0xb8, 0xa2, 0x9d, 0x40, 0x02, 0x36, 0xf2, 0x5d, 0xaa,
	0x4e, 0xfb, 0xdf, 0x3e, 0x69, 0x4e, 0xed, 0xd3, 0xf4, 0x81, 0x9c, 0xc6, 0xca, 0x14, 0x28, 0x75,
	0xe8, 0xf5, 0xbc, 0x41, 0x6b, 0xd8, 0xfa, 0xf8, 0xf9, 0x6c, 0x04, 0xda, 0xef, 0x79, 0x93, 0x7d,
	0x43, 0x47, 0xe4, 0x4a, 0x20, 0x8a, 0x78, 0xbd, 0x91, 0x19, 0xce, 0x51, 0x6e, 0x72, 0x25, 0x50,
	0x86, 0x7e, 0xcf, 0x1b, 0x9c, 0x45, 0x1d, 0x56, 0x4d, 0x63, 0xfb, 0x69, 0x6c, 0x6a, 0xa7, 0x4d,
	0xe8, 0x81, 0x99, 0x39, 0x84, 0x8e, 0xc8, 0x85, 0x96, 0x5b, 0x23, 0x0b, 0x9c, 0x63, 0xba, 0x91,
	0x60, 0x30, 0x6c, 0x58, 0xcb, 0xcd, 0x3f, 0xcb, 0x93, 0xfb, 0x80, 0x61, 0xf0, 0xfe, 0x75, 0xef,
	0x4d, 0xce, 0x1d, 0x37, 0xab, 0x30, 0xfa, 0x4c, 0x68, 0x7d, 0x93, 0x93, 0x05, 0xc7, 0xc9, 0x2e,
	0x6b, 0xd3, 0x9c, 0xef, 0x85, 0x5c, 0xd7, 0x7c, 0x39, 0x28, 0x35, 0xcf, 0xa5, 0x4e, 0x61, 0x19,
	0x9e, 0x1c, 0xe7, 0x6c, 0x1f, 0xf0, 0x31, 0x28, 0x35, 0xb6, 0xf0, 0x30, 0x78, 0xf5, 0xcb, 0x68,
	0xd1, 0xb4, 0xd0, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x96, 0xfa, 0xb9, 0x3b, 0x02,
	0x00, 0x00,
}
