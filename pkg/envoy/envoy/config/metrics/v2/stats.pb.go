// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/metrics/v2/stats.proto

package v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import envoy_api_v2_core2 "github.com/cilium/cilium/pkg/envoy/envoy/api/v2/core"
import google_protobuf "github.com/golang/protobuf/ptypes/struct"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Configuration for pluggable stats sinks.
type StatsSink struct {
	// The name of the stats sink to instantiate. The name must match a supported
	// stats sink. The built-in stats sinks are:
	//
	// * :ref:`envoy.statsd <envoy_api_msg_config.metrics.v2.StatsdSink>`
	// * :ref:`envoy.dog_statsd <envoy_api_msg_config.metrics.v2.DogStatsdSink>`
	// * :ref:`envoy.metrics_service <envoy_api_msg_config.metrics.v2.MetricsServiceConfig>`
	//
	// Sinks optionally support tagged/multiple dimensional metrics.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Stats sink specific configuration which depends on the sink being
	// instantiated. See :ref:`StatsdSink <envoy_api_msg_config.metrics.v2.StatsdSink>` for an
	// example.
	Config *google_protobuf.Struct `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
}

func (m *StatsSink) Reset()                    { *m = StatsSink{} }
func (m *StatsSink) String() string            { return proto.CompactTextString(m) }
func (*StatsSink) ProtoMessage()               {}
func (*StatsSink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *StatsSink) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StatsSink) GetConfig() *google_protobuf.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// Statistics configuration such as tagging.
type StatsConfig struct {
	// Each stat name is iteratively processed through these tag specifiers.
	// When a tag is matched, the first capture group is removed from the name so
	// later :ref:`TagSpecifiers <envoy_api_msg_config.metrics.v2.TagSpecifier>` cannot match that
	// same portion of the match.
	StatsTags []*TagSpecifier `protobuf:"bytes,1,rep,name=stats_tags,json=statsTags" json:"stats_tags,omitempty"`
	// Use all default tag regexes specified in Envoy. These can be combined with
	// custom tags specified in :ref:`stats_tags
	// <envoy_api_field_config.metrics.v2.StatsConfig.stats_tags>`. They will be processed before
	// the custom tags.
	//
	// .. note::
	//
	//   If any default tags are specified twice, the config will be considered
	//   invalid.
	//
	// See `well_known_names.h
	// <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
	// for a list of the default tags in Envoy.
	//
	// If not provided, the value is assumed to be true.
	UseAllDefaultTags *google_protobuf1.BoolValue `protobuf:"bytes,2,opt,name=use_all_default_tags,json=useAllDefaultTags" json:"use_all_default_tags,omitempty"`
}

func (m *StatsConfig) Reset()                    { *m = StatsConfig{} }
func (m *StatsConfig) String() string            { return proto.CompactTextString(m) }
func (*StatsConfig) ProtoMessage()               {}
func (*StatsConfig) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *StatsConfig) GetStatsTags() []*TagSpecifier {
	if m != nil {
		return m.StatsTags
	}
	return nil
}

func (m *StatsConfig) GetUseAllDefaultTags() *google_protobuf1.BoolValue {
	if m != nil {
		return m.UseAllDefaultTags
	}
	return nil
}

// Designates a tag name and value pair. The value may be either a fixed value
// or a regex providing the value via capture groups. The specified tag will be
// unconditionally set if a fixed value, otherwise it will only be set if one
// or more capture groups in the regex match.
type TagSpecifier struct {
	// Attaches an identifier to the tag values to identify the tag being in the
	// sink. Envoy has a set of default names and regexes to extract dynamic
	// portions of existing stats, which can be found in `well_known_names.h
	// <https://github.com/envoyproxy/envoy/blob/master/source/common/config/well_known_names.h>`_
	// in the Envoy repository. If a :ref:`tag_name
	// <envoy_api_field_config.metrics.v2.TagSpecifier.tag_name>` is provided in the config and
	// neither :ref:`regex <envoy_api_field_config.metrics.v2.TagSpecifier.regex>` or
	// :ref:`fixed_value <envoy_api_field_config.metrics.v2.TagSpecifier.fixed_value>` were specified,
	// Envoy will attempt to find that name in its set of defaults and use the accompanying regex.
	//
	// .. note::
	//
	//   It is invalid to specify the same tag name twice in a config.
	TagName string `protobuf:"bytes,1,opt,name=tag_name,json=tagName" json:"tag_name,omitempty"`
	// Types that are valid to be assigned to TagValue:
	//	*TagSpecifier_Regex
	//	*TagSpecifier_FixedValue
	TagValue isTagSpecifier_TagValue `protobuf_oneof:"tag_value"`
}

func (m *TagSpecifier) Reset()                    { *m = TagSpecifier{} }
func (m *TagSpecifier) String() string            { return proto.CompactTextString(m) }
func (*TagSpecifier) ProtoMessage()               {}
func (*TagSpecifier) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type isTagSpecifier_TagValue interface {
	isTagSpecifier_TagValue()
}

type TagSpecifier_Regex struct {
	Regex string `protobuf:"bytes,2,opt,name=regex,oneof"`
}
type TagSpecifier_FixedValue struct {
	FixedValue string `protobuf:"bytes,3,opt,name=fixed_value,json=fixedValue,oneof"`
}

func (*TagSpecifier_Regex) isTagSpecifier_TagValue()      {}
func (*TagSpecifier_FixedValue) isTagSpecifier_TagValue() {}

func (m *TagSpecifier) GetTagValue() isTagSpecifier_TagValue {
	if m != nil {
		return m.TagValue
	}
	return nil
}

func (m *TagSpecifier) GetTagName() string {
	if m != nil {
		return m.TagName
	}
	return ""
}

func (m *TagSpecifier) GetRegex() string {
	if x, ok := m.GetTagValue().(*TagSpecifier_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *TagSpecifier) GetFixedValue() string {
	if x, ok := m.GetTagValue().(*TagSpecifier_FixedValue); ok {
		return x.FixedValue
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TagSpecifier) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TagSpecifier_OneofMarshaler, _TagSpecifier_OneofUnmarshaler, _TagSpecifier_OneofSizer, []interface{}{
		(*TagSpecifier_Regex)(nil),
		(*TagSpecifier_FixedValue)(nil),
	}
}

func _TagSpecifier_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TagSpecifier)
	// tag_value
	switch x := m.TagValue.(type) {
	case *TagSpecifier_Regex:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case *TagSpecifier_FixedValue:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.FixedValue)
	case nil:
	default:
		return fmt.Errorf("TagSpecifier.TagValue has unexpected type %T", x)
	}
	return nil
}

func _TagSpecifier_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TagSpecifier)
	switch tag {
	case 2: // tag_value.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TagValue = &TagSpecifier_Regex{x}
		return true, err
	case 3: // tag_value.fixed_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.TagValue = &TagSpecifier_FixedValue{x}
		return true, err
	default:
		return false, nil
	}
}

func _TagSpecifier_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TagSpecifier)
	// tag_value
	switch x := m.TagValue.(type) {
	case *TagSpecifier_Regex:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case *TagSpecifier_FixedValue:
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.FixedValue)))
		n += len(x.FixedValue)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Stats configuration proto schema for built-in *envoy.statsd* sink. This sink does not support
// tagged metrics.
type StatsdSink struct {
	// Types that are valid to be assigned to StatsdSpecifier:
	//	*StatsdSink_Address
	//	*StatsdSink_TcpClusterName
	StatsdSpecifier isStatsdSink_StatsdSpecifier `protobuf_oneof:"statsd_specifier"`
}

func (m *StatsdSink) Reset()                    { *m = StatsdSink{} }
func (m *StatsdSink) String() string            { return proto.CompactTextString(m) }
func (*StatsdSink) ProtoMessage()               {}
func (*StatsdSink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type isStatsdSink_StatsdSpecifier interface {
	isStatsdSink_StatsdSpecifier()
}

type StatsdSink_Address struct {
	Address *envoy_api_v2_core2.Address `protobuf:"bytes,1,opt,name=address,oneof"`
}
type StatsdSink_TcpClusterName struct {
	TcpClusterName string `protobuf:"bytes,2,opt,name=tcp_cluster_name,json=tcpClusterName,oneof"`
}

func (*StatsdSink_Address) isStatsdSink_StatsdSpecifier()        {}
func (*StatsdSink_TcpClusterName) isStatsdSink_StatsdSpecifier() {}

func (m *StatsdSink) GetStatsdSpecifier() isStatsdSink_StatsdSpecifier {
	if m != nil {
		return m.StatsdSpecifier
	}
	return nil
}

func (m *StatsdSink) GetAddress() *envoy_api_v2_core2.Address {
	if x, ok := m.GetStatsdSpecifier().(*StatsdSink_Address); ok {
		return x.Address
	}
	return nil
}

func (m *StatsdSink) GetTcpClusterName() string {
	if x, ok := m.GetStatsdSpecifier().(*StatsdSink_TcpClusterName); ok {
		return x.TcpClusterName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StatsdSink) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StatsdSink_OneofMarshaler, _StatsdSink_OneofUnmarshaler, _StatsdSink_OneofSizer, []interface{}{
		(*StatsdSink_Address)(nil),
		(*StatsdSink_TcpClusterName)(nil),
	}
}

func _StatsdSink_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StatsdSink)
	// statsd_specifier
	switch x := m.StatsdSpecifier.(type) {
	case *StatsdSink_Address:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case *StatsdSink_TcpClusterName:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TcpClusterName)
	case nil:
	default:
		return fmt.Errorf("StatsdSink.StatsdSpecifier has unexpected type %T", x)
	}
	return nil
}

func _StatsdSink_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StatsdSink)
	switch tag {
	case 1: // statsd_specifier.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_api_v2_core2.Address)
		err := b.DecodeMessage(msg)
		m.StatsdSpecifier = &StatsdSink_Address{msg}
		return true, err
	case 2: // statsd_specifier.tcp_cluster_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.StatsdSpecifier = &StatsdSink_TcpClusterName{x}
		return true, err
	default:
		return false, nil
	}
}

func _StatsdSink_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StatsdSink)
	// statsd_specifier
	switch x := m.StatsdSpecifier.(type) {
	case *StatsdSink_Address:
		s := proto.Size(x.Address)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StatsdSink_TcpClusterName:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.TcpClusterName)))
		n += len(x.TcpClusterName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Stats configuration proto schema for built-in *envoy.dog_statsd* sink.
// The sink emits stats with `DogStatsD <https://docs.datadoghq.com/guides/dogstatsd/>`_
// compatible tags. Tags are configurable via :ref:`StatsConfig
// <envoy_api_msg_config.metrics.v2.StatsConfig>`.
// [#comment:next free field: 3]
type DogStatsdSink struct {
	// Types that are valid to be assigned to DogStatsdSpecifier:
	//	*DogStatsdSink_Address
	DogStatsdSpecifier isDogStatsdSink_DogStatsdSpecifier `protobuf_oneof:"dog_statsd_specifier"`
}

func (m *DogStatsdSink) Reset()                    { *m = DogStatsdSink{} }
func (m *DogStatsdSink) String() string            { return proto.CompactTextString(m) }
func (*DogStatsdSink) ProtoMessage()               {}
func (*DogStatsdSink) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type isDogStatsdSink_DogStatsdSpecifier interface {
	isDogStatsdSink_DogStatsdSpecifier()
}

type DogStatsdSink_Address struct {
	Address *envoy_api_v2_core2.Address `protobuf:"bytes,1,opt,name=address,oneof"`
}

func (*DogStatsdSink_Address) isDogStatsdSink_DogStatsdSpecifier() {}

func (m *DogStatsdSink) GetDogStatsdSpecifier() isDogStatsdSink_DogStatsdSpecifier {
	if m != nil {
		return m.DogStatsdSpecifier
	}
	return nil
}

func (m *DogStatsdSink) GetAddress() *envoy_api_v2_core2.Address {
	if x, ok := m.GetDogStatsdSpecifier().(*DogStatsdSink_Address); ok {
		return x.Address
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DogStatsdSink) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DogStatsdSink_OneofMarshaler, _DogStatsdSink_OneofUnmarshaler, _DogStatsdSink_OneofSizer, []interface{}{
		(*DogStatsdSink_Address)(nil),
	}
}

func _DogStatsdSink_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DogStatsdSink)
	// dog_statsd_specifier
	switch x := m.DogStatsdSpecifier.(type) {
	case *DogStatsdSink_Address:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Address); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DogStatsdSink.DogStatsdSpecifier has unexpected type %T", x)
	}
	return nil
}

func _DogStatsdSink_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DogStatsdSink)
	switch tag {
	case 1: // dog_statsd_specifier.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(envoy_api_v2_core2.Address)
		err := b.DecodeMessage(msg)
		m.DogStatsdSpecifier = &DogStatsdSink_Address{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DogStatsdSink_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DogStatsdSink)
	// dog_statsd_specifier
	switch x := m.DogStatsdSpecifier.(type) {
	case *DogStatsdSink_Address:
		s := proto.Size(x.Address)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*StatsSink)(nil), "envoy.config.metrics.v2.StatsSink")
	proto.RegisterType((*StatsConfig)(nil), "envoy.config.metrics.v2.StatsConfig")
	proto.RegisterType((*TagSpecifier)(nil), "envoy.config.metrics.v2.TagSpecifier")
	proto.RegisterType((*StatsdSink)(nil), "envoy.config.metrics.v2.StatsdSink")
	proto.RegisterType((*DogStatsdSink)(nil), "envoy.config.metrics.v2.DogStatsdSink")
}

func init() { proto.RegisterFile("envoy/config/metrics/v2/stats.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x6e, 0xd4, 0x30,
	0x18, 0x6c, 0x76, 0xb7, 0x3f, 0xfb, 0x05, 0xd0, 0x12, 0x55, 0xec, 0x76, 0xc5, 0xcf, 0x12, 0x84,
	0xb4, 0xe2, 0xe0, 0x48, 0x41, 0xe2, 0xde, 0x74, 0x0f, 0x15, 0x48, 0x08, 0x65, 0x2b, 0x0e, 0x5c,
	0x22, 0x37, 0xf9, 0x62, 0x59, 0xb8, 0xeb, 0x60, 0x3b, 0xa1, 0x3c, 0x03, 0x2f, 0xc1, 0x63, 0x70,
	0xe4, 0x75, 0x78, 0x0b, 0x64, 0x3b, 0x41, 0x15, 0xa8, 0xa7, 0xde, 0xec, 0xcc, 0xcc, 0x37, 0xf3,
	0x8d, 0x03, 0x2f, 0x70, 0xd7, 0xc9, 0x6f, 0x49, 0x29, 0x77, 0x35, 0x67, 0xc9, 0x15, 0x1a, 0xc5,
	0x4b, 0x9d, 0x74, 0x69, 0xa2, 0x0d, 0x35, 0x9a, 0x34, 0x4a, 0x1a, 0x19, 0xcd, 0x1d, 0x89, 0x78,
	0x12, 0xe9, 0x49, 0xa4, 0x4b, 0x97, 0xcf, 0xbc, 0x9a, 0x36, 0xdc, 0x4a, 0x4a, 0xa9, 0x30, 0xa1,
	0x55, 0xa5, 0x50, 0xf7, 0xca, 0xe5, 0x63, 0x26, 0x25, 0x13, 0x98, 0xb8, 0xdb, 0x65, 0x5b, 0x27,
	0xda, 0xa8, 0xb6, 0x34, 0x3d, 0xfa, 0xf4, 0x5f, 0xf4, 0xab, 0xa2, 0x4d, 0x83, 0x6a, 0x50, 0xcf,
	0x3b, 0x2a, 0x78, 0x45, 0x0d, 0x26, 0xc3, 0xc1, 0x03, 0xf1, 0x07, 0x98, 0x6e, 0x6d, 0xbe, 0x2d,
	0xdf, 0x7d, 0x8e, 0x22, 0x98, 0xec, 0xe8, 0x15, 0x2e, 0x82, 0x55, 0xb0, 0x9e, 0xe6, 0xee, 0x1c,
	0x25, 0x70, 0xe0, 0xd3, 0x2e, 0x46, 0xab, 0x60, 0x1d, 0xa6, 0x73, 0xe2, 0xad, 0xc8, 0x60, 0x45,
	0xb6, 0x2e, 0x48, 0xde, 0xd3, 0xe2, 0x1f, 0x01, 0x84, 0x6e, 0xe4, 0x99, 0xbb, 0x47, 0x1b, 0x00,
	0xd7, 0x40, 0x61, 0x28, 0xd3, 0x8b, 0x60, 0x35, 0x5e, 0x87, 0xe9, 0x4b, 0x72, 0x4b, 0x0f, 0xe4,
	0x82, 0xb2, 0x6d, 0x83, 0x25, 0xaf, 0x39, 0xaa, 0x7c, 0xea, 0x84, 0x17, 0x94, 0xe9, 0xe8, 0x1d,
	0x1c, 0xb7, 0x1a, 0x0b, 0x2a, 0x44, 0x51, 0x61, 0x4d, 0x5b, 0x61, 0xfc, 0x3c, 0x1f, 0x6a, 0xf9,
	0x5f, 0xa8, 0x4c, 0x4a, 0xf1, 0x91, 0x8a, 0x16, 0xf3, 0x87, 0xad, 0xc6, 0x53, 0x21, 0x36, 0x5e,
	0x65, 0x87, 0xc5, 0x5f, 0xe0, 0xde, 0x4d, 0x9f, 0xe8, 0x04, 0x8e, 0x0c, 0x65, 0xc5, 0x8d, 0xdd,
	0x0f, 0x0d, 0x65, 0xef, 0xed, 0xfa, 0x8f, 0x60, 0x5f, 0x21, 0xc3, 0x6b, 0x67, 0x34, 0x3d, 0xdf,
	0xcb, 0xfd, 0x35, 0x7a, 0x0e, 0x61, 0xcd, 0xaf, 0xb1, 0x2a, 0x3a, 0x6b, 0xb2, 0x18, 0xf7, 0x28,
	0xb8, 0x8f, 0xce, 0x38, 0x0b, 0x61, 0x6a, 0xa7, 0x3a, 0x42, 0xfc, 0x3d, 0x00, 0x70, 0xad, 0x54,
	0xae, 0xe9, 0x37, 0x70, 0xd8, 0x3f, 0xaf, 0x33, 0xb4, 0x1b, 0xf8, 0x46, 0x68, 0xc3, 0x6d, 0x0d,
	0xf6, 0x07, 0x20, 0xa7, 0x9e, 0x71, 0xbe, 0x97, 0x0f, 0xe4, 0xe8, 0x15, 0xcc, 0x4c, 0xd9, 0x14,
	0xa5, 0x68, 0xb5, 0x41, 0xe5, 0x13, 0x0f, 0xc9, 0x1e, 0x98, 0xb2, 0x39, 0xf3, 0x80, 0x8d, 0x9e,
	0x9d, 0xc0, 0xcc, 0xf5, 0x57, 0x15, 0xfa, 0xef, 0xa6, 0xfb, 0x3f, 0x7f, 0xff, 0x1a, 0x07, 0xb1,
	0x80, 0xfb, 0x1b, 0xc9, 0xee, 0x9e, 0x27, 0x7b, 0x02, 0xc7, 0x95, 0x64, 0xc5, 0x2d, 0x3e, 0x6f,
	0x27, 0x47, 0xa3, 0xd9, 0x38, 0x9b, 0x7c, 0x1a, 0x75, 0xe9, 0xe5, 0x81, 0x7b, 0x9b, 0xd7, 0x7f,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x28, 0xa7, 0x89, 0x28, 0x03, 0x00, 0x00,
}
