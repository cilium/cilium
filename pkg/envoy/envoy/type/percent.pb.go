// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/type/percent.proto

/*
Package envoy_type is a generated protocol buffer package.

It is generated from these files:
	envoy/type/percent.proto
	envoy/type/range.proto

It has these top-level messages:
	Percent
	FractionalPercent
	Int64Range
*/
package envoy_type

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Fraction percentages support several fixed denominator values.
type FractionalPercent_DenominatorType int32

const (
	// 100.
	//
	// **Example**: 1/100 = 1%.
	FractionalPercent_HUNDRED FractionalPercent_DenominatorType = 0
	// 10,000.
	//
	// **Example**: 1/10000 = 0.01%.
	FractionalPercent_TEN_THOUSAND FractionalPercent_DenominatorType = 1
	// 1,000,000.
	//
	// **Example**: 1/1000000 = 0.0001%.
	FractionalPercent_MILLION FractionalPercent_DenominatorType = 2
)

var FractionalPercent_DenominatorType_name = map[int32]string{
	0: "HUNDRED",
	1: "TEN_THOUSAND",
	2: "MILLION",
}
var FractionalPercent_DenominatorType_value = map[string]int32{
	"HUNDRED":      0,
	"TEN_THOUSAND": 1,
	"MILLION":      2,
}

func (x FractionalPercent_DenominatorType) String() string {
	return proto.EnumName(FractionalPercent_DenominatorType_name, int32(x))
}
func (FractionalPercent_DenominatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0}
}

// Identifies a percentage, in the range [0.0, 100.0].
type Percent struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *Percent) Reset()                    { *m = Percent{} }
func (m *Percent) String() string            { return proto.CompactTextString(m) }
func (*Percent) ProtoMessage()               {}
func (*Percent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Percent) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// A fractional percentage is used in cases in which for performance reasons performing floating
// point to integer conversions during randomness calculations is undesirable. The message includes
// both a numerator and denominator that together determine the final fractional value.
//
// * **Example**: 1/100 = 1%.
// * **Example**: 3/10000 = 0.03%.
type FractionalPercent struct {
	// Specifies the numerator. Defaults to 0.
	Numerator uint32 `protobuf:"varint,1,opt,name=numerator" json:"numerator,omitempty"`
	// Specifies the denominator. If the denominator specified is less than the numerator, the final
	// fractional percentage is capped at 1 (100%).
	Denominator FractionalPercent_DenominatorType `protobuf:"varint,2,opt,name=denominator,enum=envoy.type.FractionalPercent_DenominatorType" json:"denominator,omitempty"`
}

func (m *FractionalPercent) Reset()                    { *m = FractionalPercent{} }
func (m *FractionalPercent) String() string            { return proto.CompactTextString(m) }
func (*FractionalPercent) ProtoMessage()               {}
func (*FractionalPercent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FractionalPercent) GetNumerator() uint32 {
	if m != nil {
		return m.Numerator
	}
	return 0
}

func (m *FractionalPercent) GetDenominator() FractionalPercent_DenominatorType {
	if m != nil {
		return m.Denominator
	}
	return FractionalPercent_HUNDRED
}

func init() {
	proto.RegisterType((*Percent)(nil), "envoy.type.Percent")
	proto.RegisterType((*FractionalPercent)(nil), "envoy.type.FractionalPercent")
	proto.RegisterEnum("envoy.type.FractionalPercent_DenominatorType", FractionalPercent_DenominatorType_name, FractionalPercent_DenominatorType_value)
}

func init() { proto.RegisterFile("envoy/type/percent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xcd, 0x2b, 0xcb,
	0xaf, 0xd4, 0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0x2f, 0x48, 0x2d, 0x4a, 0x4e, 0xcd, 0x2b, 0xd1, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0xcb, 0xe8, 0x81, 0x64, 0xa4, 0xe4, 0xd2, 0xf3, 0xf3,
	0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x32, 0x49, 0xa5, 0x69, 0xfa, 0xe5, 0x45, 0x89, 0x05, 0x05, 0xa9,
	0x45, 0xc5, 0x10, 0xb5, 0x52, 0xe2, 0x65, 0x89, 0x39, 0x99, 0x29, 0x89, 0x25, 0xa9, 0xfa, 0x30,
	0x06, 0x54, 0x42, 0x24, 0x3d, 0x3f, 0x3d, 0x1f, 0xcc, 0xd4, 0x07, 0xb1, 0x20, 0xa2, 0x4a, 0x56,
	0x5c, 0xec, 0x01, 0x10, 0xbb, 0x84, 0xf4, 0xb9, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x18, 0x9d, 0x24, 0x77, 0xbd, 0x3c, 0xc0, 0x2c, 0x22, 0x24, 0x24, 0xc9, 0x00,
	0x06, 0x91, 0x0e, 0x9a, 0x0c, 0x50, 0x10, 0x04, 0x51, 0xa7, 0x74, 0x96, 0x91, 0x4b, 0xd0, 0xad,
	0x28, 0x31, 0xb9, 0x24, 0x33, 0x3f, 0x2f, 0x31, 0x07, 0x66, 0x8c, 0x0c, 0x17, 0x67, 0x5e, 0x69,
	0x6e, 0x6a, 0x51, 0x62, 0x49, 0x7e, 0x11, 0xd8, 0x28, 0xde, 0x20, 0x84, 0x80, 0x50, 0x34, 0x17,
	0x77, 0x4a, 0x6a, 0x5e, 0x7e, 0x6e, 0x66, 0x1e, 0x58, 0x9e, 0x49, 0x81, 0x51, 0x83, 0xcf, 0x48,
	0x57, 0x0f, 0xe1, 0x41, 0x3d, 0x0c, 0x13, 0xf5, 0x5c, 0x10, 0x1a, 0x42, 0x2a, 0x0b, 0x52, 0x9d,
	0xb8, 0x40, 0x2e, 0x63, 0x6d, 0x62, 0x64, 0x12, 0x60, 0x0c, 0x42, 0x36, 0x4d, 0xc9, 0x96, 0x8b,
	0x1f, 0x4d, 0xad, 0x10, 0x37, 0x17, 0xbb, 0x47, 0xa8, 0x9f, 0x4b, 0x90, 0xab, 0x8b, 0x00, 0x83,
	0x90, 0x00, 0x17, 0x4f, 0x88, 0xab, 0x5f, 0x7c, 0x88, 0x87, 0x7f, 0x68, 0xb0, 0xa3, 0x9f, 0x8b,
	0x00, 0x23, 0x48, 0xda, 0xd7, 0xd3, 0xc7, 0xc7, 0xd3, 0xdf, 0x4f, 0x80, 0xc9, 0x89, 0x65, 0xc5,
	0x23, 0x39, 0xc6, 0x24, 0x36, 0x70, 0xc0, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0x87,
	0xf6, 0x61, 0x8f, 0x01, 0x00, 0x00,
}
