// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/type/matcher/metadata.proto

/*
Package matcher is a generated protocol buffer package.

It is generated from these files:
	envoy/type/matcher/metadata.proto
	envoy/type/matcher/number.proto
	envoy/type/matcher/string.proto

It has these top-level messages:
	MetadataMatcher
	DoubleMatcher
	StringMatcher
*/
package matcher

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lyft/protoc-gen-validate/validate"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MetadataMatcher provides a general interface to check if a given value is matched in
// :ref:`Metadata <envoy_api_msg_core.Metadata>`. It uses `filter` and `path` to retrieve the value
// from the Metadata and then check if it's matched to the specified value.
//
// For example, for the following Metadata:
//
// .. code-block:: yaml
//
//    filter_metadata:
//      envoy.filters.http.rbac:
//        fields:
//          a:
//            struct_value:
//              fields:
//                b:
//                  struct_value:
//                    fields:
//                      c:
//                        string_value: pro
//                t:
//                  list_value:
//                    values:
//                      - string_value: m
//                      - string_value: n
//
// The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
// from the Metadata which is matched to the specified prefix match.
//
// .. code-block:: yaml
//
//    filter: envoy.filters.http.rbac
//    path:
//    - key: a
//    - key: b
//    - key: c
//    value:
//      string_match:
//        prefix: pr
//
// The following MetadataMatcher is not matched as the path [a, t] is pointing to a list value in
// the Metadata which is not supported for now.
//
// .. code-block:: yaml
//
//    filter: envoy.filters.http.rbac
//    path:
//    - key: a
//    - key: t
//    value:
//      string_match:
//        exact: m
//
// An example use of MetadataMatcher is specifying additional metadata in envoy.filters.http.rbac to
// enforce access control based on dynamic metadata in a request. See :ref:`Permission
// <envoy_api_msg_config.rbac.v2alpha.Permission>` and :ref:`Principal
// <envoy_api_msg_config.rbac.v2alpha.Principal>`.
type MetadataMatcher struct {
	// The filter name to retrieve the Struct from the Metadata.
	Filter string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// The path to retrieve the Value from the Struct.
	Path []*MetadataMatcher_PathSegment `protobuf:"bytes,2,rep,name=path" json:"path,omitempty"`
	// The MetadataMatcher is matched if the value retrieved by path is matched to this value.
	Value *MetadataMatcher_Value `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *MetadataMatcher) Reset()                    { *m = MetadataMatcher{} }
func (m *MetadataMatcher) String() string            { return proto.CompactTextString(m) }
func (*MetadataMatcher) ProtoMessage()               {}
func (*MetadataMatcher) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MetadataMatcher) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *MetadataMatcher) GetPath() []*MetadataMatcher_PathSegment {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *MetadataMatcher) GetValue() *MetadataMatcher_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

// Specifies the segment in a path to retrieve value from Metadata.
// Note: Currently it's not supported to retrieve a value from a list in Metadata. This means it
// will always be not matched if the associated value of the key is a list.
type MetadataMatcher_PathSegment struct {
	// Types that are valid to be assigned to Segment:
	//	*MetadataMatcher_PathSegment_Key
	Segment isMetadataMatcher_PathSegment_Segment `protobuf_oneof:"segment"`
}

func (m *MetadataMatcher_PathSegment) Reset()                    { *m = MetadataMatcher_PathSegment{} }
func (m *MetadataMatcher_PathSegment) String() string            { return proto.CompactTextString(m) }
func (*MetadataMatcher_PathSegment) ProtoMessage()               {}
func (*MetadataMatcher_PathSegment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type isMetadataMatcher_PathSegment_Segment interface {
	isMetadataMatcher_PathSegment_Segment()
}

type MetadataMatcher_PathSegment_Key struct {
	Key string `protobuf:"bytes,1,opt,name=key,oneof"`
}

func (*MetadataMatcher_PathSegment_Key) isMetadataMatcher_PathSegment_Segment() {}

func (m *MetadataMatcher_PathSegment) GetSegment() isMetadataMatcher_PathSegment_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

func (m *MetadataMatcher_PathSegment) GetKey() string {
	if x, ok := m.GetSegment().(*MetadataMatcher_PathSegment_Key); ok {
		return x.Key
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MetadataMatcher_PathSegment) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MetadataMatcher_PathSegment_OneofMarshaler, _MetadataMatcher_PathSegment_OneofUnmarshaler, _MetadataMatcher_PathSegment_OneofSizer, []interface{}{
		(*MetadataMatcher_PathSegment_Key)(nil),
	}
}

func _MetadataMatcher_PathSegment_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MetadataMatcher_PathSegment)
	// segment
	switch x := m.Segment.(type) {
	case *MetadataMatcher_PathSegment_Key:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Key)
	case nil:
	default:
		return fmt.Errorf("MetadataMatcher_PathSegment.Segment has unexpected type %T", x)
	}
	return nil
}

func _MetadataMatcher_PathSegment_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MetadataMatcher_PathSegment)
	switch tag {
	case 1: // segment.key
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Segment = &MetadataMatcher_PathSegment_Key{x}
		return true, err
	default:
		return false, nil
	}
}

func _MetadataMatcher_PathSegment_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MetadataMatcher_PathSegment)
	// segment
	switch x := m.Segment.(type) {
	case *MetadataMatcher_PathSegment_Key:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Key)))
		n += len(x.Key)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Specifies the value to match. Only primitive value are supported. For non-primitive values, the
// result is always not matched.
type MetadataMatcher_Value struct {
	// Specifies how to match a value.
	//
	// Types that are valid to be assigned to MatchPattern:
	//	*MetadataMatcher_Value_NullMatch_
	//	*MetadataMatcher_Value_DoubleMatch
	//	*MetadataMatcher_Value_StringMatch
	//	*MetadataMatcher_Value_BoolMatch
	//	*MetadataMatcher_Value_PresentMatch
	MatchPattern isMetadataMatcher_Value_MatchPattern `protobuf_oneof:"match_pattern"`
}

func (m *MetadataMatcher_Value) Reset()                    { *m = MetadataMatcher_Value{} }
func (m *MetadataMatcher_Value) String() string            { return proto.CompactTextString(m) }
func (*MetadataMatcher_Value) ProtoMessage()               {}
func (*MetadataMatcher_Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type isMetadataMatcher_Value_MatchPattern interface {
	isMetadataMatcher_Value_MatchPattern()
}

type MetadataMatcher_Value_NullMatch_ struct {
	NullMatch *MetadataMatcher_Value_NullMatch `protobuf:"bytes,1,opt,name=null_match,json=nullMatch,oneof"`
}
type MetadataMatcher_Value_DoubleMatch struct {
	DoubleMatch *DoubleMatcher `protobuf:"bytes,2,opt,name=double_match,json=doubleMatch,oneof"`
}
type MetadataMatcher_Value_StringMatch struct {
	StringMatch *StringMatcher `protobuf:"bytes,3,opt,name=string_match,json=stringMatch,oneof"`
}
type MetadataMatcher_Value_BoolMatch struct {
	BoolMatch bool `protobuf:"varint,4,opt,name=bool_match,json=boolMatch,oneof"`
}
type MetadataMatcher_Value_PresentMatch struct {
	PresentMatch bool `protobuf:"varint,5,opt,name=present_match,json=presentMatch,oneof"`
}

func (*MetadataMatcher_Value_NullMatch_) isMetadataMatcher_Value_MatchPattern()   {}
func (*MetadataMatcher_Value_DoubleMatch) isMetadataMatcher_Value_MatchPattern()  {}
func (*MetadataMatcher_Value_StringMatch) isMetadataMatcher_Value_MatchPattern()  {}
func (*MetadataMatcher_Value_BoolMatch) isMetadataMatcher_Value_MatchPattern()    {}
func (*MetadataMatcher_Value_PresentMatch) isMetadataMatcher_Value_MatchPattern() {}

func (m *MetadataMatcher_Value) GetMatchPattern() isMetadataMatcher_Value_MatchPattern {
	if m != nil {
		return m.MatchPattern
	}
	return nil
}

func (m *MetadataMatcher_Value) GetNullMatch() *MetadataMatcher_Value_NullMatch {
	if x, ok := m.GetMatchPattern().(*MetadataMatcher_Value_NullMatch_); ok {
		return x.NullMatch
	}
	return nil
}

func (m *MetadataMatcher_Value) GetDoubleMatch() *DoubleMatcher {
	if x, ok := m.GetMatchPattern().(*MetadataMatcher_Value_DoubleMatch); ok {
		return x.DoubleMatch
	}
	return nil
}

func (m *MetadataMatcher_Value) GetStringMatch() *StringMatcher {
	if x, ok := m.GetMatchPattern().(*MetadataMatcher_Value_StringMatch); ok {
		return x.StringMatch
	}
	return nil
}

func (m *MetadataMatcher_Value) GetBoolMatch() bool {
	if x, ok := m.GetMatchPattern().(*MetadataMatcher_Value_BoolMatch); ok {
		return x.BoolMatch
	}
	return false
}

func (m *MetadataMatcher_Value) GetPresentMatch() bool {
	if x, ok := m.GetMatchPattern().(*MetadataMatcher_Value_PresentMatch); ok {
		return x.PresentMatch
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MetadataMatcher_Value) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MetadataMatcher_Value_OneofMarshaler, _MetadataMatcher_Value_OneofUnmarshaler, _MetadataMatcher_Value_OneofSizer, []interface{}{
		(*MetadataMatcher_Value_NullMatch_)(nil),
		(*MetadataMatcher_Value_DoubleMatch)(nil),
		(*MetadataMatcher_Value_StringMatch)(nil),
		(*MetadataMatcher_Value_BoolMatch)(nil),
		(*MetadataMatcher_Value_PresentMatch)(nil),
	}
}

func _MetadataMatcher_Value_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MetadataMatcher_Value)
	// match_pattern
	switch x := m.MatchPattern.(type) {
	case *MetadataMatcher_Value_NullMatch_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NullMatch); err != nil {
			return err
		}
	case *MetadataMatcher_Value_DoubleMatch:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoubleMatch); err != nil {
			return err
		}
	case *MetadataMatcher_Value_StringMatch:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StringMatch); err != nil {
			return err
		}
	case *MetadataMatcher_Value_BoolMatch:
		t := uint64(0)
		if x.BoolMatch {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case *MetadataMatcher_Value_PresentMatch:
		t := uint64(0)
		if x.PresentMatch {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("MetadataMatcher_Value.MatchPattern has unexpected type %T", x)
	}
	return nil
}

func _MetadataMatcher_Value_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MetadataMatcher_Value)
	switch tag {
	case 1: // match_pattern.null_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MetadataMatcher_Value_NullMatch)
		err := b.DecodeMessage(msg)
		m.MatchPattern = &MetadataMatcher_Value_NullMatch_{msg}
		return true, err
	case 2: // match_pattern.double_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleMatcher)
		err := b.DecodeMessage(msg)
		m.MatchPattern = &MetadataMatcher_Value_DoubleMatch{msg}
		return true, err
	case 3: // match_pattern.string_match
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StringMatcher)
		err := b.DecodeMessage(msg)
		m.MatchPattern = &MetadataMatcher_Value_StringMatch{msg}
		return true, err
	case 4: // match_pattern.bool_match
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.MatchPattern = &MetadataMatcher_Value_BoolMatch{x != 0}
		return true, err
	case 5: // match_pattern.present_match
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.MatchPattern = &MetadataMatcher_Value_PresentMatch{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _MetadataMatcher_Value_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MetadataMatcher_Value)
	// match_pattern
	switch x := m.MatchPattern.(type) {
	case *MetadataMatcher_Value_NullMatch_:
		s := proto.Size(x.NullMatch)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MetadataMatcher_Value_DoubleMatch:
		s := proto.Size(x.DoubleMatch)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MetadataMatcher_Value_StringMatch:
		s := proto.Size(x.StringMatch)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MetadataMatcher_Value_BoolMatch:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case *MetadataMatcher_Value_PresentMatch:
		n += proto.SizeVarint(5<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// NullMatch is an empty message to specify a null value.
type MetadataMatcher_Value_NullMatch struct {
}

func (m *MetadataMatcher_Value_NullMatch) Reset()         { *m = MetadataMatcher_Value_NullMatch{} }
func (m *MetadataMatcher_Value_NullMatch) String() string { return proto.CompactTextString(m) }
func (*MetadataMatcher_Value_NullMatch) ProtoMessage()    {}
func (*MetadataMatcher_Value_NullMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

func init() {
	proto.RegisterType((*MetadataMatcher)(nil), "envoy.type.matcher.MetadataMatcher")
	proto.RegisterType((*MetadataMatcher_PathSegment)(nil), "envoy.type.matcher.MetadataMatcher.PathSegment")
	proto.RegisterType((*MetadataMatcher_Value)(nil), "envoy.type.matcher.MetadataMatcher.Value")
	proto.RegisterType((*MetadataMatcher_Value_NullMatch)(nil), "envoy.type.matcher.MetadataMatcher.Value.NullMatch")
}

func init() { proto.RegisterFile("envoy/type/matcher/metadata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0xea, 0xd3, 0x40,
	0x18, 0x86, 0x3b, 0xf9, 0xf3, 0x6b, 0xf3, 0xa5, 0xc5, 0x32, 0x0b, 0x2d, 0x01, 0x69, 0x2a, 0x08,
	0x71, 0x93, 0x40, 0xbb, 0x77, 0x11, 0x44, 0x0a, 0x52, 0x95, 0x54, 0x5c, 0xb8, 0x29, 0x13, 0x33,
	0xb6, 0xc5, 0xc9, 0x24, 0x4c, 0x26, 0x85, 0x5e, 0xc1, 0xa5, 0xa7, 0x11, 0x57, 0x3d, 0x87, 0x37,
	0xe8, 0xca, 0x2b, 0x48, 0x26, 0x53, 0x5b, 0x6c, 0x85, 0xee, 0x92, 0x77, 0x9e, 0xef, 0xc9, 0xfb,
	0x85, 0x81, 0x09, 0xe5, 0xbb, 0x62, 0x1f, 0xc9, 0x7d, 0x49, 0xa3, 0x9c, 0xc8, 0xcf, 0x1b, 0x2a,
	0xa2, 0x9c, 0x4a, 0x92, 0x11, 0x49, 0xc2, 0x52, 0x14, 0xb2, 0xc0, 0x58, 0x21, 0x61, 0x83, 0x84,
	0x1a, 0xf1, 0xc6, 0x37, 0xc6, 0x2a, 0x29, 0xb6, 0x7c, 0xdd, 0x0e, 0xdd, 0x04, 0x78, 0x9d, 0xa7,
	0x54, 0x68, 0xe0, 0xc9, 0x8e, 0xb0, 0x6d, 0x46, 0x24, 0x8d, 0x4e, 0x0f, 0xed, 0xc1, 0xb3, 0xdf,
	0x16, 0x3c, 0x5a, 0xe8, 0x06, 0x8b, 0x76, 0x12, 0x4f, 0xe0, 0xe1, 0xcb, 0x96, 0x49, 0x2a, 0x46,
	0xc8, 0x47, 0x81, 0x13, 0x3b, 0x3f, 0x8f, 0x07, 0xd3, 0x12, 0x86, 0x8f, 0x12, 0x7d, 0x80, 0xdf,
	0x81, 0x55, 0x12, 0xb9, 0x19, 0x19, 0xbe, 0x19, 0xb8, 0xd3, 0x28, 0xbc, 0x2e, 0x1d, 0xfe, 0x63,
	0x0d, 0xdf, 0x13, 0xb9, 0x59, 0xd2, 0x75, 0x4e, 0xb9, 0x8c, 0xa1, 0x31, 0xda, 0xdf, 0x91, 0xd1,
	0x43, 0x89, 0x12, 0xe1, 0x37, 0x60, 0xef, 0x08, 0xab, 0xe9, 0xc8, 0xf4, 0x51, 0xe0, 0x4e, 0x5f,
	0xdc, 0x63, 0xfc, 0xd8, 0x0c, 0x68, 0xd7, 0x37, 0x64, 0x0c, 0x51, 0xd2, 0x3a, 0xbc, 0x97, 0xe0,
	0x5e, 0x7c, 0x0d, 0x3f, 0x05, 0xf3, 0x2b, 0xdd, 0x5f, 0x2d, 0x33, 0xef, 0x24, 0x4d, 0x1e, 0x0f,
	0xa1, 0x5b, 0x69, 0xd2, 0xfe, 0x71, 0x3c, 0x98, 0xc8, 0xfb, 0x65, 0x80, 0xad, 0xe4, 0xf8, 0x03,
	0x00, 0xaf, 0x19, 0x5b, 0xa9, 0x0a, 0xca, 0xe0, 0x4e, 0x67, 0x77, 0x77, 0x0b, 0xdf, 0xd6, 0x8c,
	0xa9, 0x64, 0xde, 0x49, 0x1c, 0x7e, 0x7a, 0xc1, 0xaf, 0xa1, 0x9f, 0x15, 0x75, 0xca, 0xa8, 0xf6,
	0x1a, 0xca, 0x3b, 0xb9, 0xe5, 0x7d, 0xa5, 0x38, 0x6d, 0x9d, 0x77, 0x12, 0x37, 0x3b, 0x07, 0x8d,
	0xa7, 0xbd, 0x06, 0xda, 0x63, 0xfe, 0xdf, 0xb3, 0x54, 0xdc, 0x85, 0xa7, 0x3a, 0x07, 0x78, 0x0c,
	0x90, 0x16, 0xc5, 0x69, 0x4b, 0xcb, 0x47, 0x41, 0xaf, 0x29, 0xdc, 0x64, 0x2d, 0xf0, 0x1c, 0x06,
	0xa5, 0xa0, 0x15, 0xe5, 0x52, 0x33, 0xb6, 0x66, 0xfa, 0x3a, 0x56, 0x98, 0xe7, 0x82, 0xf3, 0x77,
	0xe3, 0xf8, 0x31, 0x0c, 0x14, 0xbb, 0x2a, 0x89, 0x94, 0x54, 0x70, 0xfd, 0x73, 0x63, 0xe7, 0x53,
	0x57, 0x97, 0x4a, 0x1f, 0xd4, 0x1d, 0x9c, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x35, 0xba, 0x05,
	0x4b, 0x17, 0x03, 0x00, 0x00,
}
