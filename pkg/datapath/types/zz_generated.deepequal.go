//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package types

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *LoaderContext) DeepEqual(other *LoaderContext) bool {
	if other == nil {
		return false
	}

	if ((in.NodeIPv4 != nil) && (other.NodeIPv4 != nil)) || ((in.NodeIPv4 == nil) != (other.NodeIPv4 == nil)) {
		in, other := &in.NodeIPv4, &other.NodeIPv4
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.NodeIPv6 != nil) && (other.NodeIPv6 != nil)) || ((in.NodeIPv6 == nil) != (other.NodeIPv6 == nil)) {
		in, other := &in.NodeIPv6, &other.NodeIPv6
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.InternalIPv4 != nil) && (other.InternalIPv4 != nil)) || ((in.InternalIPv4 == nil) != (other.InternalIPv4 == nil)) {
		in, other := &in.InternalIPv4, &other.InternalIPv4
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.InternalIPv6 != nil) && (other.InternalIPv6 != nil)) || ((in.InternalIPv6 == nil) != (other.InternalIPv6 == nil)) {
		in, other := &in.InternalIPv6, &other.InternalIPv6
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if (in.RangeIPv4 == nil) != (other.RangeIPv4 == nil) {
		return false
	} else if in.RangeIPv4 != nil {
		if !in.RangeIPv4.DeepEqual(other.RangeIPv4) {
			return false
		}
	}

	if ((in.LoopbackIPv4 != nil) && (other.LoopbackIPv4 != nil)) || ((in.LoopbackIPv4 == nil) != (other.LoopbackIPv4 == nil)) {
		in, other := &in.LoopbackIPv4, &other.LoopbackIPv4
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.Devices != nil) && (other.Devices != nil)) || ((in.Devices == nil) != (other.Devices == nil)) {
		in, other := &in.Devices, &other.Devices
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual((*other)[i]) {
					return false
				}
			}
		}
	}

	if ((in.DeviceNames != nil) && (other.DeviceNames != nil)) || ((in.DeviceNames == nil) != (other.DeviceNames == nil)) {
		in, other := &in.DeviceNames, &other.DeviceNames
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.NodeAddrs != nil) && (other.NodeAddrs != nil)) || ((in.NodeAddrs == nil) != (other.NodeAddrs == nil)) {
		in, other := &in.NodeAddrs, &other.NodeAddrs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	return true
}
