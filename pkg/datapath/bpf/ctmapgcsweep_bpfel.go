// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type CTMapGCSweepCtEntry struct {
	_            structs.HostLayout
	Reserved0    uint64
	BackendId    uint64
	Packets      uint64
	Bytes        uint64
	Lifetime     uint32
	_            [2]byte /* unsupported bitfield */
	RevNatIndex  uint16
	Reserved4    uint16
	TxFlagsSeen  uint8
	RxFlagsSeen  uint8
	SrcSecId     uint32
	LastTxReport uint32
	LastRxReport uint32
}

type CTMapGCSweepIpv4CtTuple struct {
	_       structs.HostLayout
	Daddr   uint32
	Saddr   uint32
	Dport   uint16
	Sport   uint16
	Nexthdr uint8
	Flags   uint8
}

type CTMapGCSweepIpv4FragId struct {
	_     structs.HostLayout
	Daddr uint32
	Saddr uint32
	Id    uint16
	Proto uint8
	Pad   uint8
}

type CTMapGCSweepIpv4FragL4ports struct {
	_     structs.HostLayout
	Sport uint16
	Dport uint16
}

type CTMapGCSweepIpv4RevnatEntry struct {
	_           structs.HostLayout
	Address     uint32
	Port        uint16
	RevNatIndex uint16
}

type CTMapGCSweepIpv4RevnatTuple struct {
	_       structs.HostLayout
	Cookie  uint64
	Address uint32
	Port    uint16
	Pad     uint16
}

type CTMapGCSweepIpv6CtTuple struct {
	_     structs.HostLayout
	Daddr struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Saddr struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Dport   uint16
	Sport   uint16
	Nexthdr uint8
	Flags   uint8
}

type CTMapGCSweepIpv6FragId struct {
	_     structs.HostLayout
	Id    uint32
	Proto uint8
	Pad   [3]uint8
	Saddr struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Daddr struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
}

type CTMapGCSweepIpv6FragL4ports struct {
	_     structs.HostLayout
	Sport uint16
	Dport uint16
}

type CTMapGCSweepIpv6RevnatEntry struct {
	_       structs.HostLayout
	Address struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Port        uint16
	RevNatIndex uint16
}

type CTMapGCSweepIpv6RevnatTuple struct {
	_       structs.HostLayout
	Cookie  uint64
	Address struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Port uint16
	Pad  uint16
	_    [4]byte
}

type CTMapGCSweepMetricsKey struct {
	_        structs.HostLayout
	Reason   uint8
	_        [1]byte /* unsupported bitfield */
	Line     uint16
	File     uint8
	Reserved [3]uint8
}

type CTMapGCSweepMetricsValue struct {
	_     structs.HostLayout
	Count uint64
	Bytes uint64
}

type CTMapGCSweepV4addr struct {
	_    structs.HostLayout
	Be32 uint32
}

type CTMapGCSweepV6addr struct {
	_    structs.HostLayout
	Addr [16]uint8
}

// LoadCTMapGCSweep returns the embedded CollectionSpec for CTMapGCSweep.
func LoadCTMapGCSweep() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CTMapGCSweepBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load CTMapGCSweep: %w", err)
	}

	return spec, err
}

// LoadCTMapGCSweepObjects loads CTMapGCSweep and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*CTMapGCSweepObjects
//	*CTMapGCSweepPrograms
//	*CTMapGCSweepMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadCTMapGCSweepObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadCTMapGCSweep()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// CTMapGCSweepSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CTMapGCSweepSpecs struct {
	CTMapGCSweepProgramSpecs
	CTMapGCSweepMapSpecs
	CTMapGCSweepVariableSpecs
}

// CTMapGCSweepProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CTMapGCSweepProgramSpecs struct {
	IterateCt *ebpf.ProgramSpec `ebpf:"iterate_ct"`
}

// CTMapGCSweepMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CTMapGCSweepMapSpecs struct {
	CiliumCt4Global         *ebpf.MapSpec `ebpf:"cilium_ct4_global"`
	CiliumCt6Global         *ebpf.MapSpec `ebpf:"cilium_ct6_global"`
	CiliumCtAny4Global      *ebpf.MapSpec `ebpf:"cilium_ct_any4_global"`
	CiliumCtAny6Global      *ebpf.MapSpec `ebpf:"cilium_ct_any6_global"`
	CiliumIpv4FragDatagrams *ebpf.MapSpec `ebpf:"cilium_ipv4_frag_datagrams"`
	CiliumIpv6FragDatagrams *ebpf.MapSpec `ebpf:"cilium_ipv6_frag_datagrams"`
	CiliumLb4ReverseSk      *ebpf.MapSpec `ebpf:"cilium_lb4_reverse_sk"`
	CiliumLb6ReverseSk      *ebpf.MapSpec `ebpf:"cilium_lb6_reverse_sk"`
	CiliumMetrics           *ebpf.MapSpec `ebpf:"cilium_metrics"`
	CiliumPerClusterCtAny4  *ebpf.MapSpec `ebpf:"cilium_per_cluster_ct_any4"`
	CiliumPerClusterCtAny6  *ebpf.MapSpec `ebpf:"cilium_per_cluster_ct_any6"`
	CiliumPerClusterCtTcp4  *ebpf.MapSpec `ebpf:"cilium_per_cluster_ct_tcp4"`
	CiliumPerClusterCtTcp6  *ebpf.MapSpec `ebpf:"cilium_per_cluster_ct_tcp6"`
	CiliumSignals           *ebpf.MapSpec `ebpf:"cilium_signals"`
}

// CTMapGCSweepVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type CTMapGCSweepVariableSpecs struct {
	ConfigDirectRoutingDevIfindex    *ebpf.VariableSpec `ebpf:"__config_direct_routing_dev_ifindex"`
	ConfigEnableExtendedIpProtocols  *ebpf.VariableSpec `ebpf:"__config_enable_extended_ip_protocols"`
	ConfigRouterIpv6                 *ebpf.VariableSpec `ebpf:"__config_router_ipv6"`
	ConfigServiceLoopbackIpv4        *ebpf.VariableSpec `ebpf:"__config_service_loopback_ipv4"`
	ConfigServiceLoopbackIpv6        *ebpf.VariableSpec `ebpf:"__config_service_loopback_ipv6"`
	ConfigSupportsFibLookupSkipNeigh *ebpf.VariableSpec `ebpf:"__config_supports_fib_lookup_skip_neigh"`
	ConfigTracePayloadLen            *ebpf.VariableSpec `ebpf:"__config_trace_payload_len"`
	ConfigTracePayloadLenOverlay     *ebpf.VariableSpec `ebpf:"__config_trace_payload_len_overlay"`
}

// CTMapGCSweepObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadCTMapGCSweepObjects or ebpf.CollectionSpec.LoadAndAssign.
type CTMapGCSweepObjects struct {
	CTMapGCSweepPrograms
	CTMapGCSweepMaps
	CTMapGCSweepVariables
}

func (o *CTMapGCSweepObjects) Close() error {
	return _CTMapGCSweepClose(
		&o.CTMapGCSweepPrograms,
		&o.CTMapGCSweepMaps,
	)
}

// CTMapGCSweepMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadCTMapGCSweepObjects or ebpf.CollectionSpec.LoadAndAssign.
type CTMapGCSweepMaps struct {
	CiliumCt4Global         *ebpf.Map `ebpf:"cilium_ct4_global"`
	CiliumCt6Global         *ebpf.Map `ebpf:"cilium_ct6_global"`
	CiliumCtAny4Global      *ebpf.Map `ebpf:"cilium_ct_any4_global"`
	CiliumCtAny6Global      *ebpf.Map `ebpf:"cilium_ct_any6_global"`
	CiliumIpv4FragDatagrams *ebpf.Map `ebpf:"cilium_ipv4_frag_datagrams"`
	CiliumIpv6FragDatagrams *ebpf.Map `ebpf:"cilium_ipv6_frag_datagrams"`
	CiliumLb4ReverseSk      *ebpf.Map `ebpf:"cilium_lb4_reverse_sk"`
	CiliumLb6ReverseSk      *ebpf.Map `ebpf:"cilium_lb6_reverse_sk"`
	CiliumMetrics           *ebpf.Map `ebpf:"cilium_metrics"`
	CiliumPerClusterCtAny4  *ebpf.Map `ebpf:"cilium_per_cluster_ct_any4"`
	CiliumPerClusterCtAny6  *ebpf.Map `ebpf:"cilium_per_cluster_ct_any6"`
	CiliumPerClusterCtTcp4  *ebpf.Map `ebpf:"cilium_per_cluster_ct_tcp4"`
	CiliumPerClusterCtTcp6  *ebpf.Map `ebpf:"cilium_per_cluster_ct_tcp6"`
	CiliumSignals           *ebpf.Map `ebpf:"cilium_signals"`
}

func (m *CTMapGCSweepMaps) Close() error {
	return _CTMapGCSweepClose(
		m.CiliumCt4Global,
		m.CiliumCt6Global,
		m.CiliumCtAny4Global,
		m.CiliumCtAny6Global,
		m.CiliumIpv4FragDatagrams,
		m.CiliumIpv6FragDatagrams,
		m.CiliumLb4ReverseSk,
		m.CiliumLb6ReverseSk,
		m.CiliumMetrics,
		m.CiliumPerClusterCtAny4,
		m.CiliumPerClusterCtAny6,
		m.CiliumPerClusterCtTcp4,
		m.CiliumPerClusterCtTcp6,
		m.CiliumSignals,
	)
}

// CTMapGCSweepVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadCTMapGCSweepObjects or ebpf.CollectionSpec.LoadAndAssign.
type CTMapGCSweepVariables struct {
	ConfigDirectRoutingDevIfindex    *ebpf.Variable `ebpf:"__config_direct_routing_dev_ifindex"`
	ConfigEnableExtendedIpProtocols  *ebpf.Variable `ebpf:"__config_enable_extended_ip_protocols"`
	ConfigRouterIpv6                 *ebpf.Variable `ebpf:"__config_router_ipv6"`
	ConfigServiceLoopbackIpv4        *ebpf.Variable `ebpf:"__config_service_loopback_ipv4"`
	ConfigServiceLoopbackIpv6        *ebpf.Variable `ebpf:"__config_service_loopback_ipv6"`
	ConfigSupportsFibLookupSkipNeigh *ebpf.Variable `ebpf:"__config_supports_fib_lookup_skip_neigh"`
	ConfigTracePayloadLen            *ebpf.Variable `ebpf:"__config_trace_payload_len"`
	ConfigTracePayloadLenOverlay     *ebpf.Variable `ebpf:"__config_trace_payload_len_overlay"`
}

// CTMapGCSweepPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadCTMapGCSweepObjects or ebpf.CollectionSpec.LoadAndAssign.
type CTMapGCSweepPrograms struct {
	IterateCt *ebpf.Program `ebpf:"iterate_ct"`
}

func (p *CTMapGCSweepPrograms) Close() error {
	return _CTMapGCSweepClose(
		p.IterateCt,
	)
}

func _CTMapGCSweepClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed ctmapgcsweep_bpfel.o
var _CTMapGCSweepBytes []byte
