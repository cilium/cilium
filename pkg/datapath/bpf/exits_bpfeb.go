// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadExits returns the embedded CollectionSpec for Exits.
func LoadExits() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExitsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Exits: %w", err)
	}

	return spec, err
}

// LoadExitsObjects loads Exits and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ExitsObjects
//	*ExitsPrograms
//	*ExitsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadExitsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadExits()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ExitsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExitsSpecs struct {
	ExitsProgramSpecs
	ExitsMapSpecs
	ExitsVariableSpecs
}

// ExitsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExitsProgramSpecs struct {
	CilExit *ebpf.ProgramSpec `ebpf:"cil_exit"`
}

// ExitsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExitsMapSpecs struct {
	CiliumReturn *ebpf.MapSpec `ebpf:"cilium_return"`
}

// ExitsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ExitsVariableSpecs struct {
}

// ExitsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExitsObjects struct {
	ExitsPrograms
	ExitsMaps
	ExitsVariables
}

func (o *ExitsObjects) Close() error {
	return _ExitsClose(
		&o.ExitsPrograms,
		&o.ExitsMaps,
	)
}

// ExitsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExitsMaps struct {
	CiliumReturn *ebpf.Map `ebpf:"cilium_return"`
}

func (m *ExitsMaps) Close() error {
	return _ExitsClose(
		m.CiliumReturn,
	)
}

// ExitsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExitsVariables struct {
}

// ExitsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type ExitsPrograms struct {
	CilExit *ebpf.Program `ebpf:"cil_exit"`
}

func (p *ExitsPrograms) Close() error {
	return _ExitsClose(
		p.CilExit,
	)
}

func _ExitsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed exits_bpfeb.o
var _ExitsBytes []byte
