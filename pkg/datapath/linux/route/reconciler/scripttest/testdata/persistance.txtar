netns/create otherns

link/add veth0 veth --peername eth0 --peerns otherns
link/add veth1 veth --peername eth1 --peerns otherns

addr/add 192.168.1.1/24 veth0
addr/add 192.168.1.0/24 --netns otherns eth0
addr/add 192.168.2.1/24 veth1
addr/add 192.168.2.0/24 --netns otherns eth1

link/set lo up
link/set veth0 up
link/set eth0 --netns otherns up
link/set veth1 up
link/set eth1 --netns otherns up

hive start
db/initialized

# Create a owner and two routes
add-owner owner1
add-route owner1 route1.yaml
add-route owner1 route2.yaml

# Make sure the routes are installed before we re-create the hive
route/list --table=2000
* cmp stdout routes-before.txt

# Stop and re-create the hive to simulate a restart
hive stop
hive/recreate

# Add initializer for the owner before starting the hive
add-initializer owner1

# Start the hive so the device table is populated
hive start

# Re-create the owner, but only one route
add-owner owner1
add-route owner1 route1.yaml

# Mark initializer as finished so pruning can proceed
finish-initializer owner1

# We should have route 1 but not route 2
route/list --table=2000
* cmp stdout routes-after.txt

# Stop hive properly
hive/stop

-- route1.yaml --
table: 2000
prefix: "10.2.3.4/32"
adminDistance: 100
device: veth0

-- route2.yaml --
table: 2000
prefix: "10.2.3.5/32"
adminDistance: 100
device: veth0

-- routes-before.txt --
10.2.3.4/32 dev veth0 scope universe table 2000
10.2.3.5/32 dev veth0 scope universe table 2000
-- routes-after.txt --
10.2.3.4/32 dev veth0 scope universe table 2000
