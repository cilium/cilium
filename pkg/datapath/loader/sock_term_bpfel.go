// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package loader

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type sock_termIpv4RevnatEntry struct {
	_           structs.HostLayout
	Address     uint32
	Port        uint16
	RevNatIndex uint16
}

type sock_termIpv4RevnatTuple struct {
	_       structs.HostLayout
	Cookie  uint64
	Address uint32
	Port    uint16
	Pad     uint16
}

type sock_termIpv6RevnatEntry struct {
	_       structs.HostLayout
	Address struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Port        uint16
	RevNatIndex uint16
}

type sock_termIpv6RevnatTuple struct {
	_       structs.HostLayout
	Cookie  uint64
	Address struct {
		_    structs.HostLayout
		Addr [16]uint8
	}
	Port uint16
	Pad  uint16
	_    [4]byte
}

type sock_termSockTermFilter struct {
	_       structs.HostLayout
	Address struct {
		_     structs.HostLayout
		Addr6 struct {
			_    structs.HostLayout
			Addr [16]uint8
		}
	}
	Port          uint16
	AddressFamily uint8
	_             [1]byte
}

// loadSock_term returns the embedded CollectionSpec for sock_term.
func loadSock_term() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Sock_termBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load sock_term: %w", err)
	}

	return spec, err
}

// loadSock_termObjects loads sock_term and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*sock_termObjects
//	*sock_termPrograms
//	*sock_termMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSock_termObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSock_term()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// sock_termSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sock_termSpecs struct {
	sock_termProgramSpecs
	sock_termMapSpecs
	sock_termVariableSpecs
}

// sock_termProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sock_termProgramSpecs struct {
	CilSockTcpDestroyV4 *ebpf.ProgramSpec `ebpf:"cil_sock_tcp_destroy_v4"`
	CilSockTcpDestroyV6 *ebpf.ProgramSpec `ebpf:"cil_sock_tcp_destroy_v6"`
	CilSockUdpDestroyV4 *ebpf.ProgramSpec `ebpf:"cil_sock_udp_destroy_v4"`
	CilSockUdpDestroyV6 *ebpf.ProgramSpec `ebpf:"cil_sock_udp_destroy_v6"`
}

// sock_termMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sock_termMapSpecs struct {
	CiliumLb4ReverseSk *ebpf.MapSpec `ebpf:"cilium_lb4_reverse_sk"`
	CiliumLb6ReverseSk *ebpf.MapSpec `ebpf:"cilium_lb6_reverse_sk"`
}

// sock_termVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type sock_termVariableSpecs struct {
	CiliumSockTermFilter *ebpf.VariableSpec `ebpf:"cilium_sock_term_filter"`
}

// sock_termObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSock_termObjects or ebpf.CollectionSpec.LoadAndAssign.
type sock_termObjects struct {
	sock_termPrograms
	sock_termMaps
	sock_termVariables
}

func (o *sock_termObjects) Close() error {
	return _Sock_termClose(
		&o.sock_termPrograms,
		&o.sock_termMaps,
	)
}

// sock_termMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSock_termObjects or ebpf.CollectionSpec.LoadAndAssign.
type sock_termMaps struct {
	CiliumLb4ReverseSk *ebpf.Map `ebpf:"cilium_lb4_reverse_sk"`
	CiliumLb6ReverseSk *ebpf.Map `ebpf:"cilium_lb6_reverse_sk"`
}

func (m *sock_termMaps) Close() error {
	return _Sock_termClose(
		m.CiliumLb4ReverseSk,
		m.CiliumLb6ReverseSk,
	)
}

// sock_termVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSock_termObjects or ebpf.CollectionSpec.LoadAndAssign.
type sock_termVariables struct {
	CiliumSockTermFilter *ebpf.Variable `ebpf:"cilium_sock_term_filter"`
}

// sock_termPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSock_termObjects or ebpf.CollectionSpec.LoadAndAssign.
type sock_termPrograms struct {
	CilSockTcpDestroyV4 *ebpf.Program `ebpf:"cil_sock_tcp_destroy_v4"`
	CilSockTcpDestroyV6 *ebpf.Program `ebpf:"cil_sock_tcp_destroy_v6"`
	CilSockUdpDestroyV4 *ebpf.Program `ebpf:"cil_sock_udp_destroy_v4"`
	CilSockUdpDestroyV6 *ebpf.Program `ebpf:"cil_sock_udp_destroy_v6"`
}

func (p *sock_termPrograms) Close() error {
	return _Sock_termClose(
		p.CilSockTcpDestroyV4,
		p.CilSockTcpDestroyV6,
		p.CilSockUdpDestroyV4,
		p.CilSockUdpDestroyV6,
	)
}

func _Sock_termClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed sock_term_bpfel.o
var _Sock_termBytes []byte
