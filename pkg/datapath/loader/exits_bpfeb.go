// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package loader

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadExits returns the embedded CollectionSpec for exits.
func loadExits() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExitsBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load exits: %w", err)
	}

	return spec, err
}

// loadExitsObjects loads exits and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*exitsObjects
//	*exitsPrograms
//	*exitsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExitsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExits()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// exitsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitsSpecs struct {
	exitsProgramSpecs
	exitsMapSpecs
	exitsVariableSpecs
}

// exitsProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitsProgramSpecs struct {
	CilExit *ebpf.ProgramSpec `ebpf:"cil_exit"`
}

// exitsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitsMapSpecs struct {
	CiliumReturn *ebpf.MapSpec `ebpf:"cilium_return"`
}

// exitsVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type exitsVariableSpecs struct {
}

// exitsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitsObjects struct {
	exitsPrograms
	exitsMaps
	exitsVariables
}

func (o *exitsObjects) Close() error {
	return _ExitsClose(
		&o.exitsPrograms,
		&o.exitsMaps,
	)
}

// exitsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitsMaps struct {
	CiliumReturn *ebpf.Map `ebpf:"cilium_return"`
}

func (m *exitsMaps) Close() error {
	return _ExitsClose(
		m.CiliumReturn,
	)
}

// exitsVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitsVariables struct {
}

// exitsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExitsObjects or ebpf.CollectionSpec.LoadAndAssign.
type exitsPrograms struct {
	CilExit *ebpf.Program `ebpf:"cil_exit"`
}

func (p *exitsPrograms) Close() error {
	return _ExitsClose(
		p.CilExit,
	)
}

func _ExitsClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed exits_bpfeb.o
var _ExitsBytes []byte
