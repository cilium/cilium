//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by deepequal-gen. DO NOT EDIT.

package types

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ENI) DeepEqual(other *ENI) bool {
	if other == nil {
		return false
	}

	if in.NetworkInterfaceID != other.NetworkInterfaceID {
		return false
	}
	if in.ProjectName != other.ProjectName {
		return false
	}
	if in.Type != other.Type {
		return false
	}
	if in.MACAddress != other.MACAddress {
		return false
	}
	if in.PrimaryIPAddress != other.PrimaryIPAddress {
		return false
	}
	if ((in.PrivateIPSets != nil) && (other.PrivateIPSets != nil)) || ((in.PrivateIPSets == nil) != (other.PrivateIPSets == nil)) {
		in, other := &in.PrivateIPSets, &other.PrivateIPSets
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if !inElement.DeepEqual(&(*other)[i]) {
					return false
				}
			}
		}
	}

	if !in.VPC.DeepEqual(&other.VPC) {
		return false
	}

	if in.ZoneID != other.ZoneID {
		return false
	}
	if in.Subnet != other.Subnet {
		return false
	}

	if in.DeviceID != other.DeviceID {
		return false
	}
	if ((in.SecurityGroupIds != nil) && (other.SecurityGroupIds != nil)) || ((in.SecurityGroupIds == nil) != (other.SecurityGroupIds == nil)) {
		in, other := &in.SecurityGroupIds, &other.SecurityGroupIds
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.Tags != nil) && (other.Tags != nil)) || ((in.Tags == nil) != (other.Tags == nil)) {
		in, other := &in.Tags, &other.Tags
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *ENIStatus) DeepEqual(other *ENIStatus) bool {
	if other == nil {
		return false
	}

	if ((in.ENIs != nil) && (other.ENIs != nil)) || ((in.ENIs == nil) != (other.ENIs == nil)) {
		in, other := &in.ENIs, &other.ENIs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if !inValue.DeepEqual(&otherValue) {
						return false
					}
				}
			}
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *PrivateIPSet) DeepEqual(other *PrivateIPSet) bool {
	if other == nil {
		return false
	}

	if in.PrivateIpAddress != other.PrivateIpAddress {
		return false
	}
	if in.Primary != other.Primary {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Spec) DeepEqual(other *Spec) bool {
	if other == nil {
		return false
	}

	if in.InstanceType != other.InstanceType {
		return false
	}
	if in.AvailabilityZone != other.AvailabilityZone {
		return false
	}
	if in.ProjectName != other.ProjectName {
		return false
	}
	if in.VPCID != other.VPCID {
		return false
	}
	if in.CIDRBlock != other.CIDRBlock {
		return false
	}
	if ((in.SubnetIDs != nil) && (other.SubnetIDs != nil)) || ((in.SubnetIDs == nil) != (other.SubnetIDs == nil)) {
		in, other := &in.SubnetIDs, &other.SubnetIDs
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.SubnetTags != nil) && (other.SubnetTags != nil)) || ((in.SubnetTags == nil) != (other.SubnetTags == nil)) {
		in, other := &in.SubnetTags, &other.SubnetTags
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	if ((in.ENITags != nil) && (other.ENITags != nil)) || ((in.ENITags == nil) != (other.ENITags == nil)) {
		in, other := &in.ENITags, &other.ENITags
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	if ((in.SecurityGroups != nil) && (other.SecurityGroups != nil)) || ((in.SecurityGroups == nil) != (other.SecurityGroups == nil)) {
		in, other := &in.SecurityGroups, &other.SecurityGroups
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	if ((in.SecurityGroupTags != nil) && (other.SecurityGroupTags != nil)) || ((in.SecurityGroupTags == nil) != (other.SecurityGroupTags == nil)) {
		in, other := &in.SecurityGroupTags, &other.SecurityGroupTags
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for key, inValue := range *in {
				if otherValue, present := (*other)[key]; !present {
					return false
				} else {
					if inValue != otherValue {
						return false
					}
				}
			}
		}
	}

	if (in.UsePrimaryAddress == nil) != (other.UsePrimaryAddress == nil) {
		return false
	} else if in.UsePrimaryAddress != nil {
		if *in.UsePrimaryAddress != *other.UsePrimaryAddress {
			return false
		}
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *Subnet) DeepEqual(other *Subnet) bool {
	if other == nil {
		return false
	}

	if in.SubnetID != other.SubnetID {
		return false
	}
	if in.CIDRBlock != other.CIDRBlock {
		return false
	}
	if in.IPv6CIDRBlock != other.IPv6CIDRBlock {
		return false
	}

	return true
}

// DeepEqual is an autogenerated deepequal function, deeply comparing the
// receiver with other. in must be non-nil.
func (in *VPC) DeepEqual(other *VPC) bool {
	if other == nil {
		return false
	}

	if in.VPCID != other.VPCID {
		return false
	}
	if in.CIDRBlock != other.CIDRBlock {
		return false
	}
	if in.IPv6CIDRBlock != other.IPv6CIDRBlock {
		return false
	}
	if ((in.SecondaryCIDRBlocks != nil) && (other.SecondaryCIDRBlocks != nil)) || ((in.SecondaryCIDRBlocks == nil) != (other.SecondaryCIDRBlocks == nil)) {
		in, other := &in.SecondaryCIDRBlocks, &other.SecondaryCIDRBlocks
		if other == nil {
			return false
		}

		if len(*in) != len(*other) {
			return false
		} else {
			for i, inElement := range *in {
				if inElement != (*other)[i] {
					return false
				}
			}
		}
	}

	return true
}
