// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumL2AnnouncementPolicySpecApplyConfiguration represents a declarative configuration of the CiliumL2AnnouncementPolicySpec type for use
// with apply.
type CiliumL2AnnouncementPolicySpecApplyConfiguration struct {
	NodeSelector    *v1.LabelSelector `json:"nodeSelector,omitempty"`
	ServiceSelector *v1.LabelSelector `json:"serviceSelector,omitempty"`
	LoadBalancerIPs *bool             `json:"loadBalancerIPs,omitempty"`
	ExternalIPs     *bool             `json:"externalIPs,omitempty"`
	Interfaces      []string          `json:"interfaces,omitempty"`
}

// CiliumL2AnnouncementPolicySpecApplyConfiguration constructs a declarative configuration of the CiliumL2AnnouncementPolicySpec type for use with
// apply.
func CiliumL2AnnouncementPolicySpec() *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	return &CiliumL2AnnouncementPolicySpecApplyConfiguration{}
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *CiliumL2AnnouncementPolicySpecApplyConfiguration) WithNodeSelector(value v1.LabelSelector) *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// WithServiceSelector sets the ServiceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceSelector field is set to the value of the last call.
func (b *CiliumL2AnnouncementPolicySpecApplyConfiguration) WithServiceSelector(value v1.LabelSelector) *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	b.ServiceSelector = &value
	return b
}

// WithLoadBalancerIPs sets the LoadBalancerIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadBalancerIPs field is set to the value of the last call.
func (b *CiliumL2AnnouncementPolicySpecApplyConfiguration) WithLoadBalancerIPs(value bool) *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	b.LoadBalancerIPs = &value
	return b
}

// WithExternalIPs sets the ExternalIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalIPs field is set to the value of the last call.
func (b *CiliumL2AnnouncementPolicySpecApplyConfiguration) WithExternalIPs(value bool) *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	b.ExternalIPs = &value
	return b
}

// WithInterfaces adds the given value to the Interfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Interfaces field.
func (b *CiliumL2AnnouncementPolicySpecApplyConfiguration) WithInterfaces(values ...string) *CiliumL2AnnouncementPolicySpecApplyConfiguration {
	for i := range values {
		b.Interfaces = append(b.Interfaces, values[i])
	}
	return b
}
