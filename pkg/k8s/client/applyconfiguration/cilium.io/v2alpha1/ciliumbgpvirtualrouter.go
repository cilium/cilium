// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	ciliumiov2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumBGPVirtualRouterApplyConfiguration represents a declarative configuration of the CiliumBGPVirtualRouter type for use
// with apply.
type CiliumBGPVirtualRouterApplyConfiguration struct {
	LocalASN              *int64                                   `json:"localASN,omitempty"`
	ExportPodCIDR         *bool                                    `json:"exportPodCIDR,omitempty"`
	PodIPPoolSelector     *v1.LabelSelector                        `json:"podIPPoolSelector,omitempty"`
	ServiceSelector       *v1.LabelSelector                        `json:"serviceSelector,omitempty"`
	ServiceAdvertisements []ciliumiov2alpha1.BGPServiceAddressType `json:"serviceAdvertisements,omitempty"`
	Neighbors             []CiliumBGPNeighborApplyConfiguration    `json:"neighbors,omitempty"`
}

// CiliumBGPVirtualRouterApplyConfiguration constructs a declarative configuration of the CiliumBGPVirtualRouter type for use with
// apply.
func CiliumBGPVirtualRouter() *CiliumBGPVirtualRouterApplyConfiguration {
	return &CiliumBGPVirtualRouterApplyConfiguration{}
}

// WithLocalASN sets the LocalASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalASN field is set to the value of the last call.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithLocalASN(value int64) *CiliumBGPVirtualRouterApplyConfiguration {
	b.LocalASN = &value
	return b
}

// WithExportPodCIDR sets the ExportPodCIDR field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExportPodCIDR field is set to the value of the last call.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithExportPodCIDR(value bool) *CiliumBGPVirtualRouterApplyConfiguration {
	b.ExportPodCIDR = &value
	return b
}

// WithPodIPPoolSelector sets the PodIPPoolSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodIPPoolSelector field is set to the value of the last call.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithPodIPPoolSelector(value v1.LabelSelector) *CiliumBGPVirtualRouterApplyConfiguration {
	b.PodIPPoolSelector = &value
	return b
}

// WithServiceSelector sets the ServiceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceSelector field is set to the value of the last call.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithServiceSelector(value v1.LabelSelector) *CiliumBGPVirtualRouterApplyConfiguration {
	b.ServiceSelector = &value
	return b
}

// WithServiceAdvertisements adds the given value to the ServiceAdvertisements field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ServiceAdvertisements field.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithServiceAdvertisements(values ...ciliumiov2alpha1.BGPServiceAddressType) *CiliumBGPVirtualRouterApplyConfiguration {
	for i := range values {
		b.ServiceAdvertisements = append(b.ServiceAdvertisements, values[i])
	}
	return b
}

// WithNeighbors adds the given value to the Neighbors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Neighbors field.
func (b *CiliumBGPVirtualRouterApplyConfiguration) WithNeighbors(values ...*CiliumBGPNeighborApplyConfiguration) *CiliumBGPVirtualRouterApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNeighbors")
		}
		b.Neighbors = append(b.Neighbors, *values[i])
	}
	return b
}
