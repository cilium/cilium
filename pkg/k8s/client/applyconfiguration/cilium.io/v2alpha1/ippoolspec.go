// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// IPPoolSpecApplyConfiguration represents a declarative configuration of the IPPoolSpec type for use
// with apply.
type IPPoolSpecApplyConfiguration struct {
	IPv4              *IPv4PoolSpecApplyConfiguration `json:"ipv4,omitempty"`
	IPv6              *IPv6PoolSpecApplyConfiguration `json:"ipv6,omitempty"`
	PodSelector       *v1.LabelSelector               `json:"podSelector,omitempty"`
	NamespaceSelector *v1.LabelSelector               `json:"namespaceSelector,omitempty"`
}

// IPPoolSpecApplyConfiguration constructs a declarative configuration of the IPPoolSpec type for use with
// apply.
func IPPoolSpec() *IPPoolSpecApplyConfiguration {
	return &IPPoolSpecApplyConfiguration{}
}

// WithIPv4 sets the IPv4 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPv4 field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithIPv4(value *IPv4PoolSpecApplyConfiguration) *IPPoolSpecApplyConfiguration {
	b.IPv4 = value
	return b
}

// WithIPv6 sets the IPv6 field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPv6 field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithIPv6(value *IPv6PoolSpecApplyConfiguration) *IPPoolSpecApplyConfiguration {
	b.IPv6 = value
	return b
}

// WithPodSelector sets the PodSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSelector field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithPodSelector(value v1.LabelSelector) *IPPoolSpecApplyConfiguration {
	b.PodSelector = &value
	return b
}

// WithNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespaceSelector field is set to the value of the last call.
func (b *IPPoolSpecApplyConfiguration) WithNamespaceSelector(value v1.LabelSelector) *IPPoolSpecApplyConfiguration {
	b.NamespaceSelector = &value
	return b
}
