// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	ciliumiov2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/api/core/v1"
)

// ServiceConfigApplyConfiguration represents a declarative configuration of the ServiceConfig type for use
// with apply.
type ServiceConfigApplyConfiguration struct {
	Type                           *v1.ServiceType                                      `json:"type,omitempty"`
	ExternalTrafficPolicy          *v1.ServiceExternalTrafficPolicy                     `json:"externalTrafficPolicy,omitempty"`
	LoadBalancerClass              *string                                              `json:"loadBalancerClass,omitempty"`
	IPFamilies                     []v1.IPFamily                                        `json:"ipFamilies,omitempty"`
	IPFamilyPolicy                 *v1.IPFamilyPolicy                                   `json:"ipFamilyPolicy,omitempty"`
	AllocateLoadBalancerNodePorts  *bool                                                `json:"allocateLoadBalancerNodePorts,omitempty"`
	LoadBalancerSourceRanges       []string                                             `json:"loadBalancerSourceRanges,omitempty"`
	LoadBalancerSourceRangesPolicy *ciliumiov2alpha1.LoadBalancerSourceRangesPolicyType `json:"loadBalancerSourceRangesPolicy,omitempty"`
	TrafficDistribution            *string                                              `json:"trafficDistribution,omitempty"`
}

// ServiceConfigApplyConfiguration constructs a declarative configuration of the ServiceConfig type for use with
// apply.
func ServiceConfig() *ServiceConfigApplyConfiguration {
	return &ServiceConfigApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithType(value v1.ServiceType) *ServiceConfigApplyConfiguration {
	b.Type = &value
	return b
}

// WithExternalTrafficPolicy sets the ExternalTrafficPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalTrafficPolicy field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithExternalTrafficPolicy(value v1.ServiceExternalTrafficPolicy) *ServiceConfigApplyConfiguration {
	b.ExternalTrafficPolicy = &value
	return b
}

// WithLoadBalancerClass sets the LoadBalancerClass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadBalancerClass field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithLoadBalancerClass(value string) *ServiceConfigApplyConfiguration {
	b.LoadBalancerClass = &value
	return b
}

// WithIPFamilies adds the given value to the IPFamilies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPFamilies field.
func (b *ServiceConfigApplyConfiguration) WithIPFamilies(values ...v1.IPFamily) *ServiceConfigApplyConfiguration {
	for i := range values {
		b.IPFamilies = append(b.IPFamilies, values[i])
	}
	return b
}

// WithIPFamilyPolicy sets the IPFamilyPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamilyPolicy field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithIPFamilyPolicy(value v1.IPFamilyPolicy) *ServiceConfigApplyConfiguration {
	b.IPFamilyPolicy = &value
	return b
}

// WithAllocateLoadBalancerNodePorts sets the AllocateLoadBalancerNodePorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllocateLoadBalancerNodePorts field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithAllocateLoadBalancerNodePorts(value bool) *ServiceConfigApplyConfiguration {
	b.AllocateLoadBalancerNodePorts = &value
	return b
}

// WithLoadBalancerSourceRanges adds the given value to the LoadBalancerSourceRanges field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LoadBalancerSourceRanges field.
func (b *ServiceConfigApplyConfiguration) WithLoadBalancerSourceRanges(values ...string) *ServiceConfigApplyConfiguration {
	for i := range values {
		b.LoadBalancerSourceRanges = append(b.LoadBalancerSourceRanges, values[i])
	}
	return b
}

// WithLoadBalancerSourceRangesPolicy sets the LoadBalancerSourceRangesPolicy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoadBalancerSourceRangesPolicy field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithLoadBalancerSourceRangesPolicy(value ciliumiov2alpha1.LoadBalancerSourceRangesPolicyType) *ServiceConfigApplyConfiguration {
	b.LoadBalancerSourceRangesPolicy = &value
	return b
}

// WithTrafficDistribution sets the TrafficDistribution field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrafficDistribution field is set to the value of the last call.
func (b *ServiceConfigApplyConfiguration) WithTrafficDistribution(value string) *ServiceConfigApplyConfiguration {
	b.TrafficDistribution = &value
	return b
}
