// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CiliumBGPNodeStatusApplyConfiguration represents a declarative configuration of the CiliumBGPNodeStatus type for use
// with apply.
type CiliumBGPNodeStatusApplyConfiguration struct {
	BGPInstances []CiliumBGPNodeInstanceStatusApplyConfiguration `json:"bgpInstances,omitempty"`
	Conditions   []v1.ConditionApplyConfiguration                `json:"conditions,omitempty"`
}

// CiliumBGPNodeStatusApplyConfiguration constructs a declarative configuration of the CiliumBGPNodeStatus type for use with
// apply.
func CiliumBGPNodeStatus() *CiliumBGPNodeStatusApplyConfiguration {
	return &CiliumBGPNodeStatusApplyConfiguration{}
}

// WithBGPInstances adds the given value to the BGPInstances field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BGPInstances field.
func (b *CiliumBGPNodeStatusApplyConfiguration) WithBGPInstances(values ...*CiliumBGPNodeInstanceStatusApplyConfiguration) *CiliumBGPNodeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBGPInstances")
		}
		b.BGPInstances = append(b.BGPInstances, *values[i])
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CiliumBGPNodeStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *CiliumBGPNodeStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
