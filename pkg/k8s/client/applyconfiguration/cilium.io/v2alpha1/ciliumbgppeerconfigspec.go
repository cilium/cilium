// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

// CiliumBGPPeerConfigSpecApplyConfiguration represents a declarative configuration of the CiliumBGPPeerConfigSpec type for use
// with apply.
type CiliumBGPPeerConfigSpecApplyConfiguration struct {
	Transport       *CiliumBGPTransportApplyConfiguration               `json:"transport,omitempty"`
	Timers          *CiliumBGPTimersApplyConfiguration                  `json:"timers,omitempty"`
	AuthSecretRef   *string                                             `json:"authSecretRef,omitempty"`
	GracefulRestart *CiliumBGPNeighborGracefulRestartApplyConfiguration `json:"gracefulRestart,omitempty"`
	EBGPMultihop    *int32                                              `json:"ebgpMultihop,omitempty"`
	Families        []CiliumBGPFamilyWithAdvertsApplyConfiguration      `json:"families,omitempty"`
}

// CiliumBGPPeerConfigSpecApplyConfiguration constructs a declarative configuration of the CiliumBGPPeerConfigSpec type for use with
// apply.
func CiliumBGPPeerConfigSpec() *CiliumBGPPeerConfigSpecApplyConfiguration {
	return &CiliumBGPPeerConfigSpecApplyConfiguration{}
}

// WithTransport sets the Transport field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Transport field is set to the value of the last call.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithTransport(value *CiliumBGPTransportApplyConfiguration) *CiliumBGPPeerConfigSpecApplyConfiguration {
	b.Transport = value
	return b
}

// WithTimers sets the Timers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timers field is set to the value of the last call.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithTimers(value *CiliumBGPTimersApplyConfiguration) *CiliumBGPPeerConfigSpecApplyConfiguration {
	b.Timers = value
	return b
}

// WithAuthSecretRef sets the AuthSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthSecretRef field is set to the value of the last call.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithAuthSecretRef(value string) *CiliumBGPPeerConfigSpecApplyConfiguration {
	b.AuthSecretRef = &value
	return b
}

// WithGracefulRestart sets the GracefulRestart field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GracefulRestart field is set to the value of the last call.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithGracefulRestart(value *CiliumBGPNeighborGracefulRestartApplyConfiguration) *CiliumBGPPeerConfigSpecApplyConfiguration {
	b.GracefulRestart = value
	return b
}

// WithEBGPMultihop sets the EBGPMultihop field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EBGPMultihop field is set to the value of the last call.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithEBGPMultihop(value int32) *CiliumBGPPeerConfigSpecApplyConfiguration {
	b.EBGPMultihop = &value
	return b
}

// WithFamilies adds the given value to the Families field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Families field.
func (b *CiliumBGPPeerConfigSpecApplyConfiguration) WithFamilies(values ...*CiliumBGPFamilyWithAdvertsApplyConfiguration) *CiliumBGPPeerConfigSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFamilies")
		}
		b.Families = append(b.Families, *values[i])
	}
	return b
}
