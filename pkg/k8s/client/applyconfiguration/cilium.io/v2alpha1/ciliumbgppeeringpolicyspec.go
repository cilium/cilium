// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumBGPPeeringPolicySpecApplyConfiguration represents a declarative configuration of the CiliumBGPPeeringPolicySpec type for use
// with apply.
type CiliumBGPPeeringPolicySpecApplyConfiguration struct {
	NodeSelector   *v1.LabelSelector                          `json:"nodeSelector,omitempty"`
	VirtualRouters []CiliumBGPVirtualRouterApplyConfiguration `json:"virtualRouters,omitempty"`
}

// CiliumBGPPeeringPolicySpecApplyConfiguration constructs a declarative configuration of the CiliumBGPPeeringPolicySpec type for use with
// apply.
func CiliumBGPPeeringPolicySpec() *CiliumBGPPeeringPolicySpecApplyConfiguration {
	return &CiliumBGPPeeringPolicySpecApplyConfiguration{}
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *CiliumBGPPeeringPolicySpecApplyConfiguration) WithNodeSelector(value v1.LabelSelector) *CiliumBGPPeeringPolicySpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// WithVirtualRouters adds the given value to the VirtualRouters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VirtualRouters field.
func (b *CiliumBGPPeeringPolicySpecApplyConfiguration) WithVirtualRouters(values ...*CiliumBGPVirtualRouterApplyConfiguration) *CiliumBGPPeeringPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithVirtualRouters")
		}
		b.VirtualRouters = append(b.VirtualRouters, *values[i])
	}
	return b
}
