// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	ciliumiov2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
)

// IPv6PoolSpecApplyConfiguration represents a declarative configuration of the IPv6PoolSpec type for use
// with apply.
type IPv6PoolSpecApplyConfiguration struct {
	CIDRs    []ciliumiov2alpha1.PoolCIDR `json:"cidrs,omitempty"`
	MaskSize *byte                       `json:"maskSize,omitempty"`
}

// IPv6PoolSpecApplyConfiguration constructs a declarative configuration of the IPv6PoolSpec type for use with
// apply.
func IPv6PoolSpec() *IPv6PoolSpecApplyConfiguration {
	return &IPv6PoolSpecApplyConfiguration{}
}

// WithCIDRs adds the given value to the CIDRs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CIDRs field.
func (b *IPv6PoolSpecApplyConfiguration) WithCIDRs(values ...ciliumiov2alpha1.PoolCIDR) *IPv6PoolSpecApplyConfiguration {
	for i := range values {
		b.CIDRs = append(b.CIDRs, values[i])
	}
	return b
}

// WithMaskSize sets the MaskSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaskSize field is set to the value of the last call.
func (b *IPv6PoolSpecApplyConfiguration) WithMaskSize(value byte) *IPv6PoolSpecApplyConfiguration {
	b.MaskSize = &value
	return b
}
