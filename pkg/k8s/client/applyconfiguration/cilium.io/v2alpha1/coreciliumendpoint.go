// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

import (
	models "github.com/cilium/cilium/api/v1/models"
	v2 "github.com/cilium/cilium/pkg/k8s/client/applyconfiguration/cilium.io/v2"
)

// CoreCiliumEndpointApplyConfiguration represents a declarative configuration of the CoreCiliumEndpoint type for use
// with apply.
type CoreCiliumEndpointApplyConfiguration struct {
	Name           *string                                  `json:"name,omitempty"`
	IdentityID     *int64                                   `json:"id,omitempty"`
	Networking     *v2.EndpointNetworkingApplyConfiguration `json:"networking,omitempty"`
	Encryption     *v2.EncryptionSpecApplyConfiguration     `json:"encryption,omitempty"`
	NamedPorts     *models.NamedPorts                       `json:"named-ports,omitempty"`
	ServiceAccount *string                                  `json:"service-account,omitempty"`
}

// CoreCiliumEndpointApplyConfiguration constructs a declarative configuration of the CoreCiliumEndpoint type for use with
// apply.
func CoreCiliumEndpoint() *CoreCiliumEndpointApplyConfiguration {
	return &CoreCiliumEndpointApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithName(value string) *CoreCiliumEndpointApplyConfiguration {
	b.Name = &value
	return b
}

// WithIdentityID sets the IdentityID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IdentityID field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithIdentityID(value int64) *CoreCiliumEndpointApplyConfiguration {
	b.IdentityID = &value
	return b
}

// WithNetworking sets the Networking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Networking field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithNetworking(value *v2.EndpointNetworkingApplyConfiguration) *CoreCiliumEndpointApplyConfiguration {
	b.Networking = value
	return b
}

// WithEncryption sets the Encryption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encryption field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithEncryption(value *v2.EncryptionSpecApplyConfiguration) *CoreCiliumEndpointApplyConfiguration {
	b.Encryption = value
	return b
}

// WithNamedPorts sets the NamedPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamedPorts field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithNamedPorts(value models.NamedPorts) *CoreCiliumEndpointApplyConfiguration {
	b.NamedPorts = &value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *CoreCiliumEndpointApplyConfiguration) WithServiceAccount(value string) *CoreCiliumEndpointApplyConfiguration {
	b.ServiceAccount = &value
	return b
}
