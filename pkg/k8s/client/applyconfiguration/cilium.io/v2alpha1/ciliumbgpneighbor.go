// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2alpha1

// CiliumBGPNeighborApplyConfiguration represents a declarative configuration of the CiliumBGPNeighbor type for use
// with apply.
type CiliumBGPNeighborApplyConfiguration struct {
	PeerAddress              *string                                             `json:"peerAddress,omitempty"`
	PeerPort                 *int32                                              `json:"peerPort,omitempty"`
	PeerASN                  *int64                                              `json:"peerASN,omitempty"`
	AuthSecretRef            *string                                             `json:"authSecretRef,omitempty"`
	EBGPMultihopTTL          *int32                                              `json:"eBGPMultihopTTL,omitempty"`
	ConnectRetryTimeSeconds  *int32                                              `json:"connectRetryTimeSeconds,omitempty"`
	HoldTimeSeconds          *int32                                              `json:"holdTimeSeconds,omitempty"`
	KeepAliveTimeSeconds     *int32                                              `json:"keepAliveTimeSeconds,omitempty"`
	GracefulRestart          *CiliumBGPNeighborGracefulRestartApplyConfiguration `json:"gracefulRestart,omitempty"`
	Families                 []CiliumBGPFamilyApplyConfiguration                 `json:"families,omitempty"`
	AdvertisedPathAttributes []CiliumBGPPathAttributesApplyConfiguration         `json:"advertisedPathAttributes,omitempty"`
}

// CiliumBGPNeighborApplyConfiguration constructs a declarative configuration of the CiliumBGPNeighbor type for use with
// apply.
func CiliumBGPNeighbor() *CiliumBGPNeighborApplyConfiguration {
	return &CiliumBGPNeighborApplyConfiguration{}
}

// WithPeerAddress sets the PeerAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PeerAddress field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithPeerAddress(value string) *CiliumBGPNeighborApplyConfiguration {
	b.PeerAddress = &value
	return b
}

// WithPeerPort sets the PeerPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PeerPort field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithPeerPort(value int32) *CiliumBGPNeighborApplyConfiguration {
	b.PeerPort = &value
	return b
}

// WithPeerASN sets the PeerASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PeerASN field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithPeerASN(value int64) *CiliumBGPNeighborApplyConfiguration {
	b.PeerASN = &value
	return b
}

// WithAuthSecretRef sets the AuthSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthSecretRef field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithAuthSecretRef(value string) *CiliumBGPNeighborApplyConfiguration {
	b.AuthSecretRef = &value
	return b
}

// WithEBGPMultihopTTL sets the EBGPMultihopTTL field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EBGPMultihopTTL field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithEBGPMultihopTTL(value int32) *CiliumBGPNeighborApplyConfiguration {
	b.EBGPMultihopTTL = &value
	return b
}

// WithConnectRetryTimeSeconds sets the ConnectRetryTimeSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConnectRetryTimeSeconds field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithConnectRetryTimeSeconds(value int32) *CiliumBGPNeighborApplyConfiguration {
	b.ConnectRetryTimeSeconds = &value
	return b
}

// WithHoldTimeSeconds sets the HoldTimeSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HoldTimeSeconds field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithHoldTimeSeconds(value int32) *CiliumBGPNeighborApplyConfiguration {
	b.HoldTimeSeconds = &value
	return b
}

// WithKeepAliveTimeSeconds sets the KeepAliveTimeSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KeepAliveTimeSeconds field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithKeepAliveTimeSeconds(value int32) *CiliumBGPNeighborApplyConfiguration {
	b.KeepAliveTimeSeconds = &value
	return b
}

// WithGracefulRestart sets the GracefulRestart field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GracefulRestart field is set to the value of the last call.
func (b *CiliumBGPNeighborApplyConfiguration) WithGracefulRestart(value *CiliumBGPNeighborGracefulRestartApplyConfiguration) *CiliumBGPNeighborApplyConfiguration {
	b.GracefulRestart = value
	return b
}

// WithFamilies adds the given value to the Families field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Families field.
func (b *CiliumBGPNeighborApplyConfiguration) WithFamilies(values ...*CiliumBGPFamilyApplyConfiguration) *CiliumBGPNeighborApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFamilies")
		}
		b.Families = append(b.Families, *values[i])
	}
	return b
}

// WithAdvertisedPathAttributes adds the given value to the AdvertisedPathAttributes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdvertisedPathAttributes field.
func (b *CiliumBGPNeighborApplyConfiguration) WithAdvertisedPathAttributes(values ...*CiliumBGPPathAttributesApplyConfiguration) *CiliumBGPNeighborApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAdvertisedPathAttributes")
		}
		b.AdvertisedPathAttributes = append(b.AdvertisedPathAttributes, *values[i])
	}
	return b
}
