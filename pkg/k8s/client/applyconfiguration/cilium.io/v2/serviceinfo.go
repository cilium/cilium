// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// ServiceInfoApplyConfiguration represents a declarative configuration of the ServiceInfo type for use
// with apply.
type ServiceInfoApplyConfiguration struct {
	Name      *string                      `json:"serviceName,omitempty"`
	Namespace *string                      `json:"namespace,omitempty"`
	ToPorts   []PortInfoApplyConfiguration `json:"toPorts,omitempty"`
}

// ServiceInfoApplyConfiguration constructs a declarative configuration of the ServiceInfo type for use with
// apply.
func ServiceInfo() *ServiceInfoApplyConfiguration {
	return &ServiceInfoApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServiceInfoApplyConfiguration) WithName(value string) *ServiceInfoApplyConfiguration {
	b.Name = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ServiceInfoApplyConfiguration) WithNamespace(value string) *ServiceInfoApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithToPorts adds the given value to the ToPorts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ToPorts field.
func (b *ServiceInfoApplyConfiguration) WithToPorts(values ...*PortInfoApplyConfiguration) *ServiceInfoApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithToPorts")
		}
		b.ToPorts = append(b.ToPorts, *values[i])
	}
	return b
}
