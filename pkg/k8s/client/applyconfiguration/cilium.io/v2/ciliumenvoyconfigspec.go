// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumEnvoyConfigSpecApplyConfiguration represents a declarative configuration of the CiliumEnvoyConfigSpec type for use
// with apply.
type CiliumEnvoyConfigSpecApplyConfiguration struct {
	Services        []*ciliumiov2.ServiceListener `json:"services,omitempty"`
	BackendServices []*ciliumiov2.Service         `json:"backendServices,omitempty"`
	Resources       []ciliumiov2.XDSResource      `json:"resources,omitempty"`
	NodeSelector    *v1.LabelSelector             `json:"nodeSelector,omitempty"`
}

// CiliumEnvoyConfigSpecApplyConfiguration constructs a declarative configuration of the CiliumEnvoyConfigSpec type for use with
// apply.
func CiliumEnvoyConfigSpec() *CiliumEnvoyConfigSpecApplyConfiguration {
	return &CiliumEnvoyConfigSpecApplyConfiguration{}
}

// WithServices adds the given value to the Services field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Services field.
func (b *CiliumEnvoyConfigSpecApplyConfiguration) WithServices(values ...**ciliumiov2.ServiceListener) *CiliumEnvoyConfigSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithServices")
		}
		b.Services = append(b.Services, *values[i])
	}
	return b
}

// WithBackendServices adds the given value to the BackendServices field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the BackendServices field.
func (b *CiliumEnvoyConfigSpecApplyConfiguration) WithBackendServices(values ...**ciliumiov2.Service) *CiliumEnvoyConfigSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBackendServices")
		}
		b.BackendServices = append(b.BackendServices, *values[i])
	}
	return b
}

// WithResources adds the given value to the Resources field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Resources field.
func (b *CiliumEnvoyConfigSpecApplyConfiguration) WithResources(values ...ciliumiov2.XDSResource) *CiliumEnvoyConfigSpecApplyConfiguration {
	for i := range values {
		b.Resources = append(b.Resources, values[i])
	}
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *CiliumEnvoyConfigSpecApplyConfiguration) WithNodeSelector(value v1.LabelSelector) *CiliumEnvoyConfigSpecApplyConfiguration {
	b.NodeSelector = &value
	return b
}
