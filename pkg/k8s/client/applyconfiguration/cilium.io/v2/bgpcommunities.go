// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
)

// BGPCommunitiesApplyConfiguration represents a declarative configuration of the BGPCommunities type for use
// with apply.
type BGPCommunitiesApplyConfiguration struct {
	Standard  []ciliumiov2.BGPStandardCommunity  `json:"standard,omitempty"`
	WellKnown []ciliumiov2.BGPWellKnownCommunity `json:"wellKnown,omitempty"`
	Large     []ciliumiov2.BGPLargeCommunity     `json:"large,omitempty"`
}

// BGPCommunitiesApplyConfiguration constructs a declarative configuration of the BGPCommunities type for use with
// apply.
func BGPCommunities() *BGPCommunitiesApplyConfiguration {
	return &BGPCommunitiesApplyConfiguration{}
}

// WithStandard adds the given value to the Standard field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Standard field.
func (b *BGPCommunitiesApplyConfiguration) WithStandard(values ...ciliumiov2.BGPStandardCommunity) *BGPCommunitiesApplyConfiguration {
	for i := range values {
		b.Standard = append(b.Standard, values[i])
	}
	return b
}

// WithWellKnown adds the given value to the WellKnown field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the WellKnown field.
func (b *BGPCommunitiesApplyConfiguration) WithWellKnown(values ...ciliumiov2.BGPWellKnownCommunity) *BGPCommunitiesApplyConfiguration {
	for i := range values {
		b.WellKnown = append(b.WellKnown, values[i])
	}
	return b
}

// WithLarge adds the given value to the Large field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Large field.
func (b *BGPCommunitiesApplyConfiguration) WithLarge(values ...ciliumiov2.BGPLargeCommunity) *BGPCommunitiesApplyConfiguration {
	for i := range values {
		b.Large = append(b.Large, values[i])
	}
	return b
}
