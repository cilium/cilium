// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// EgressRuleApplyConfiguration represents a declarative configuration of the EgressRule type for use
// with apply.
type EgressRuleApplyConfiguration struct {
	NamespaceSelector *v1.LabelSelector `json:"namespaceSelector,omitempty"`
	PodSelector       *v1.LabelSelector `json:"podSelector,omitempty"`
	NodeSelector      *v1.LabelSelector `json:"nodeSelector,omitempty"`
}

// EgressRuleApplyConfiguration constructs a declarative configuration of the EgressRule type for use with
// apply.
func EgressRule() *EgressRuleApplyConfiguration {
	return &EgressRuleApplyConfiguration{}
}

// WithNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespaceSelector field is set to the value of the last call.
func (b *EgressRuleApplyConfiguration) WithNamespaceSelector(value v1.LabelSelector) *EgressRuleApplyConfiguration {
	b.NamespaceSelector = &value
	return b
}

// WithPodSelector sets the PodSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodSelector field is set to the value of the last call.
func (b *EgressRuleApplyConfiguration) WithPodSelector(value v1.LabelSelector) *EgressRuleApplyConfiguration {
	b.PodSelector = &value
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *EgressRuleApplyConfiguration) WithNodeSelector(value v1.LabelSelector) *EgressRuleApplyConfiguration {
	b.NodeSelector = &value
	return b
}
