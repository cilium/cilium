// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	metav1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// NetworkPolicyConditionApplyConfiguration represents a declarative configuration of the NetworkPolicyCondition type for use
// with apply.
type NetworkPolicyConditionApplyConfiguration struct {
	Type               *ciliumiov2.PolicyConditionType `json:"type,omitempty"`
	Status             *v1.ConditionStatus             `json:"status,omitempty"`
	LastTransitionTime *metav1.Time                    `json:"lastTransitionTime,omitempty"`
	Reason             *string                         `json:"reason,omitempty"`
	Message            *string                         `json:"message,omitempty"`
}

// NetworkPolicyConditionApplyConfiguration constructs a declarative configuration of the NetworkPolicyCondition type for use with
// apply.
func NetworkPolicyCondition() *NetworkPolicyConditionApplyConfiguration {
	return &NetworkPolicyConditionApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *NetworkPolicyConditionApplyConfiguration) WithType(value ciliumiov2.PolicyConditionType) *NetworkPolicyConditionApplyConfiguration {
	b.Type = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *NetworkPolicyConditionApplyConfiguration) WithStatus(value v1.ConditionStatus) *NetworkPolicyConditionApplyConfiguration {
	b.Status = &value
	return b
}

// WithLastTransitionTime sets the LastTransitionTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastTransitionTime field is set to the value of the last call.
func (b *NetworkPolicyConditionApplyConfiguration) WithLastTransitionTime(value metav1.Time) *NetworkPolicyConditionApplyConfiguration {
	b.LastTransitionTime = &value
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *NetworkPolicyConditionApplyConfiguration) WithReason(value string) *NetworkPolicyConditionApplyConfiguration {
	b.Reason = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *NetworkPolicyConditionApplyConfiguration) WithMessage(value string) *NetworkPolicyConditionApplyConfiguration {
	b.Message = &value
	return b
}
