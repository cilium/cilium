// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	enitypes "github.com/cilium/cilium/pkg/alibabacloud/eni/types"
	types "github.com/cilium/cilium/pkg/aws/eni/types"
	azuretypes "github.com/cilium/cilium/pkg/azure/types"
	ipamtypes "github.com/cilium/cilium/pkg/ipam/types"
)

// NodeSpecApplyConfiguration represents a declarative configuration of the NodeSpec type for use
// with apply.
type NodeSpecApplyConfiguration struct {
	InstanceID        *string                                 `json:"instance-id,omitempty"`
	BootID            *string                                 `json:"bootid,omitempty"`
	Addresses         []NodeAddressApplyConfiguration         `json:"addresses,omitempty"`
	HealthAddressing  *HealthAddressingSpecApplyConfiguration `json:"health,omitempty"`
	IngressAddressing *AddressPairApplyConfiguration          `json:"ingress,omitempty"`
	Encryption        *EncryptionSpecApplyConfiguration       `json:"encryption,omitempty"`
	ENI               *types.ENISpec                          `json:"eni,omitempty"`
	Azure             *azuretypes.AzureSpec                   `json:"azure,omitempty"`
	AlibabaCloud      *enitypes.Spec                          `json:"alibaba-cloud,omitempty"`
	IPAM              *ipamtypes.IPAMSpec                     `json:"ipam,omitempty"`
	NodeIdentity      *uint64                                 `json:"nodeidentity,omitempty"`
}

// NodeSpecApplyConfiguration constructs a declarative configuration of the NodeSpec type for use with
// apply.
func NodeSpec() *NodeSpecApplyConfiguration {
	return &NodeSpecApplyConfiguration{}
}

// WithInstanceID sets the InstanceID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstanceID field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithInstanceID(value string) *NodeSpecApplyConfiguration {
	b.InstanceID = &value
	return b
}

// WithBootID sets the BootID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BootID field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithBootID(value string) *NodeSpecApplyConfiguration {
	b.BootID = &value
	return b
}

// WithAddresses adds the given value to the Addresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Addresses field.
func (b *NodeSpecApplyConfiguration) WithAddresses(values ...*NodeAddressApplyConfiguration) *NodeSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAddresses")
		}
		b.Addresses = append(b.Addresses, *values[i])
	}
	return b
}

// WithHealthAddressing sets the HealthAddressing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthAddressing field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithHealthAddressing(value *HealthAddressingSpecApplyConfiguration) *NodeSpecApplyConfiguration {
	b.HealthAddressing = value
	return b
}

// WithIngressAddressing sets the IngressAddressing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IngressAddressing field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithIngressAddressing(value *AddressPairApplyConfiguration) *NodeSpecApplyConfiguration {
	b.IngressAddressing = value
	return b
}

// WithEncryption sets the Encryption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encryption field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithEncryption(value *EncryptionSpecApplyConfiguration) *NodeSpecApplyConfiguration {
	b.Encryption = value
	return b
}

// WithENI sets the ENI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ENI field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithENI(value types.ENISpec) *NodeSpecApplyConfiguration {
	b.ENI = &value
	return b
}

// WithAzure sets the Azure field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Azure field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithAzure(value azuretypes.AzureSpec) *NodeSpecApplyConfiguration {
	b.Azure = &value
	return b
}

// WithAlibabaCloud sets the AlibabaCloud field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AlibabaCloud field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithAlibabaCloud(value enitypes.Spec) *NodeSpecApplyConfiguration {
	b.AlibabaCloud = &value
	return b
}

// WithIPAM sets the IPAM field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAM field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithIPAM(value ipamtypes.IPAMSpec) *NodeSpecApplyConfiguration {
	b.IPAM = &value
	return b
}

// WithNodeIdentity sets the NodeIdentity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeIdentity field is set to the value of the last call.
func (b *NodeSpecApplyConfiguration) WithNodeIdentity(value uint64) *NodeSpecApplyConfiguration {
	b.NodeIdentity = &value
	return b
}
