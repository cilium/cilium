// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// ControllerStatusStatusApplyConfiguration represents a declarative configuration of the ControllerStatusStatus type for use
// with apply.
type ControllerStatusStatusApplyConfiguration struct {
	ConsecutiveFailureCount *int64  `json:"consecutive-failure-count,omitempty"`
	FailureCount            *int64  `json:"failure-count,omitempty"`
	LastFailureMsg          *string `json:"last-failure-msg,omitempty"`
	LastFailureTimestamp    *string `json:"last-failure-timestamp,omitempty"`
	LastSuccessTimestamp    *string `json:"last-success-timestamp,omitempty"`
	SuccessCount            *int64  `json:"success-count,omitempty"`
}

// ControllerStatusStatusApplyConfiguration constructs a declarative configuration of the ControllerStatusStatus type for use with
// apply.
func ControllerStatusStatus() *ControllerStatusStatusApplyConfiguration {
	return &ControllerStatusStatusApplyConfiguration{}
}

// WithConsecutiveFailureCount sets the ConsecutiveFailureCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConsecutiveFailureCount field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithConsecutiveFailureCount(value int64) *ControllerStatusStatusApplyConfiguration {
	b.ConsecutiveFailureCount = &value
	return b
}

// WithFailureCount sets the FailureCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailureCount field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithFailureCount(value int64) *ControllerStatusStatusApplyConfiguration {
	b.FailureCount = &value
	return b
}

// WithLastFailureMsg sets the LastFailureMsg field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastFailureMsg field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithLastFailureMsg(value string) *ControllerStatusStatusApplyConfiguration {
	b.LastFailureMsg = &value
	return b
}

// WithLastFailureTimestamp sets the LastFailureTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastFailureTimestamp field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithLastFailureTimestamp(value string) *ControllerStatusStatusApplyConfiguration {
	b.LastFailureTimestamp = &value
	return b
}

// WithLastSuccessTimestamp sets the LastSuccessTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastSuccessTimestamp field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithLastSuccessTimestamp(value string) *ControllerStatusStatusApplyConfiguration {
	b.LastSuccessTimestamp = &value
	return b
}

// WithSuccessCount sets the SuccessCount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SuccessCount field is set to the value of the last call.
func (b *ControllerStatusStatusApplyConfiguration) WithSuccessCount(value int64) *ControllerStatusStatusApplyConfiguration {
	b.SuccessCount = &value
	return b
}
