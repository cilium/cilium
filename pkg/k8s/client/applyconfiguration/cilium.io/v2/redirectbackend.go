// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// RedirectBackendApplyConfiguration represents a declarative configuration of the RedirectBackend type for use
// with apply.
type RedirectBackendApplyConfiguration struct {
	LocalEndpointSelector *v1.LabelSelector            `json:"localEndpointSelector,omitempty"`
	ToPorts               []PortInfoApplyConfiguration `json:"toPorts,omitempty"`
}

// RedirectBackendApplyConfiguration constructs a declarative configuration of the RedirectBackend type for use with
// apply.
func RedirectBackend() *RedirectBackendApplyConfiguration {
	return &RedirectBackendApplyConfiguration{}
}

// WithLocalEndpointSelector sets the LocalEndpointSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LocalEndpointSelector field is set to the value of the last call.
func (b *RedirectBackendApplyConfiguration) WithLocalEndpointSelector(value v1.LabelSelector) *RedirectBackendApplyConfiguration {
	b.LocalEndpointSelector = &value
	return b
}

// WithToPorts adds the given value to the ToPorts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ToPorts field.
func (b *RedirectBackendApplyConfiguration) WithToPorts(values ...*PortInfoApplyConfiguration) *RedirectBackendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithToPorts")
		}
		b.ToPorts = append(b.ToPorts, *values[i])
	}
	return b
}
