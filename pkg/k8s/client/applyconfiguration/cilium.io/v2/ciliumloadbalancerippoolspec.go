// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumLoadBalancerIPPoolSpecApplyConfiguration represents a declarative configuration of the CiliumLoadBalancerIPPoolSpec type for use
// with apply.
type CiliumLoadBalancerIPPoolSpecApplyConfiguration struct {
	ServiceSelector   *v1.LabelSelector                                   `json:"serviceSelector,omitempty"`
	AllowFirstLastIPs *ciliumiov2.AllowFirstLastIPType                    `json:"allowFirstLastIPs,omitempty"`
	Blocks            []CiliumLoadBalancerIPPoolIPBlockApplyConfiguration `json:"blocks,omitempty"`
	Disabled          *bool                                               `json:"disabled,omitempty"`
}

// CiliumLoadBalancerIPPoolSpecApplyConfiguration constructs a declarative configuration of the CiliumLoadBalancerIPPoolSpec type for use with
// apply.
func CiliumLoadBalancerIPPoolSpec() *CiliumLoadBalancerIPPoolSpecApplyConfiguration {
	return &CiliumLoadBalancerIPPoolSpecApplyConfiguration{}
}

// WithServiceSelector sets the ServiceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceSelector field is set to the value of the last call.
func (b *CiliumLoadBalancerIPPoolSpecApplyConfiguration) WithServiceSelector(value v1.LabelSelector) *CiliumLoadBalancerIPPoolSpecApplyConfiguration {
	b.ServiceSelector = &value
	return b
}

// WithAllowFirstLastIPs sets the AllowFirstLastIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowFirstLastIPs field is set to the value of the last call.
func (b *CiliumLoadBalancerIPPoolSpecApplyConfiguration) WithAllowFirstLastIPs(value ciliumiov2.AllowFirstLastIPType) *CiliumLoadBalancerIPPoolSpecApplyConfiguration {
	b.AllowFirstLastIPs = &value
	return b
}

// WithBlocks adds the given value to the Blocks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Blocks field.
func (b *CiliumLoadBalancerIPPoolSpecApplyConfiguration) WithBlocks(values ...*CiliumLoadBalancerIPPoolIPBlockApplyConfiguration) *CiliumLoadBalancerIPPoolSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBlocks")
		}
		b.Blocks = append(b.Blocks, *values[i])
	}
	return b
}

// WithDisabled sets the Disabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disabled field is set to the value of the last call.
func (b *CiliumLoadBalancerIPPoolSpecApplyConfiguration) WithDisabled(value bool) *CiliumLoadBalancerIPPoolSpecApplyConfiguration {
	b.Disabled = &value
	return b
}
