// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// ServiceListenerApplyConfiguration represents a declarative configuration of the ServiceListener type for use
// with apply.
type ServiceListenerApplyConfiguration struct {
	Name      *string  `json:"name,omitempty"`
	Namespace *string  `json:"namespace,omitempty"`
	Ports     []uint16 `json:"ports,omitempty"`
	Listener  *string  `json:"listener,omitempty"`
}

// ServiceListenerApplyConfiguration constructs a declarative configuration of the ServiceListener type for use with
// apply.
func ServiceListener() *ServiceListenerApplyConfiguration {
	return &ServiceListenerApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ServiceListenerApplyConfiguration) WithName(value string) *ServiceListenerApplyConfiguration {
	b.Name = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ServiceListenerApplyConfiguration) WithNamespace(value string) *ServiceListenerApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *ServiceListenerApplyConfiguration) WithPorts(values ...uint16) *ServiceListenerApplyConfiguration {
	for i := range values {
		b.Ports = append(b.Ports, values[i])
	}
	return b
}

// WithListener sets the Listener field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Listener field is set to the value of the last call.
func (b *ServiceListenerApplyConfiguration) WithListener(value string) *ServiceListenerApplyConfiguration {
	b.Listener = &value
	return b
}
