// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	models "github.com/cilium/cilium/api/v1/models"
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
)

// EndpointStatusApplyConfiguration represents a declarative configuration of the EndpointStatus type for use
// with apply.
type EndpointStatusApplyConfiguration struct {
	ID                  *int64                                `json:"id,omitempty"`
	Controllers         *ciliumiov2.ControllerList            `json:"controllers,omitempty"`
	ExternalIdentifiers *models.EndpointIdentifiers           `json:"external-identifiers,omitempty"`
	Health              *models.EndpointHealth                `json:"health,omitempty"`
	Identity            *EndpointIdentityApplyConfiguration   `json:"identity,omitempty"`
	Log                 []models.EndpointStatusChange         `json:"log,omitempty"`
	Networking          *EndpointNetworkingApplyConfiguration `json:"networking,omitempty"`
	Encryption          *EncryptionSpecApplyConfiguration     `json:"encryption,omitempty"`
	Policy              *EndpointPolicyApplyConfiguration     `json:"policy,omitempty"`
	State               *string                               `json:"state,omitempty"`
	NamedPorts          *models.NamedPorts                    `json:"named-ports,omitempty"`
	ServiceAccount      *string                               `json:"service-account,omitempty"`
}

// EndpointStatusApplyConfiguration constructs a declarative configuration of the EndpointStatus type for use with
// apply.
func EndpointStatus() *EndpointStatusApplyConfiguration {
	return &EndpointStatusApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithID(value int64) *EndpointStatusApplyConfiguration {
	b.ID = &value
	return b
}

// WithControllers sets the Controllers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Controllers field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithControllers(value ciliumiov2.ControllerList) *EndpointStatusApplyConfiguration {
	b.Controllers = &value
	return b
}

// WithExternalIdentifiers sets the ExternalIdentifiers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalIdentifiers field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithExternalIdentifiers(value models.EndpointIdentifiers) *EndpointStatusApplyConfiguration {
	b.ExternalIdentifiers = &value
	return b
}

// WithHealth sets the Health field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Health field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithHealth(value models.EndpointHealth) *EndpointStatusApplyConfiguration {
	b.Health = &value
	return b
}

// WithIdentity sets the Identity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Identity field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithIdentity(value *EndpointIdentityApplyConfiguration) *EndpointStatusApplyConfiguration {
	b.Identity = value
	return b
}

// WithLog adds the given value to the Log field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Log field.
func (b *EndpointStatusApplyConfiguration) WithLog(values ...models.EndpointStatusChange) *EndpointStatusApplyConfiguration {
	for i := range values {
		b.Log = append(b.Log, values[i])
	}
	return b
}

// WithNetworking sets the Networking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Networking field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithNetworking(value *EndpointNetworkingApplyConfiguration) *EndpointStatusApplyConfiguration {
	b.Networking = value
	return b
}

// WithEncryption sets the Encryption field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Encryption field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithEncryption(value *EncryptionSpecApplyConfiguration) *EndpointStatusApplyConfiguration {
	b.Encryption = value
	return b
}

// WithPolicy sets the Policy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policy field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithPolicy(value *EndpointPolicyApplyConfiguration) *EndpointStatusApplyConfiguration {
	b.Policy = value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithState(value string) *EndpointStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithNamedPorts sets the NamedPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamedPorts field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithNamedPorts(value models.NamedPorts) *EndpointStatusApplyConfiguration {
	b.NamedPorts = &value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *EndpointStatusApplyConfiguration) WithServiceAccount(value string) *EndpointStatusApplyConfiguration {
	b.ServiceAccount = &value
	return b
}
