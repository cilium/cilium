// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// FrontendApplyConfiguration represents a declarative configuration of the Frontend type for use
// with apply.
type FrontendApplyConfiguration struct {
	IP      *string                      `json:"ip,omitempty"`
	ToPorts []PortInfoApplyConfiguration `json:"toPorts,omitempty"`
}

// FrontendApplyConfiguration constructs a declarative configuration of the Frontend type for use with
// apply.
func Frontend() *FrontendApplyConfiguration {
	return &FrontendApplyConfiguration{}
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *FrontendApplyConfiguration) WithIP(value string) *FrontendApplyConfiguration {
	b.IP = &value
	return b
}

// WithToPorts adds the given value to the ToPorts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ToPorts field.
func (b *FrontendApplyConfiguration) WithToPorts(values ...*PortInfoApplyConfiguration) *FrontendApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithToPorts")
		}
		b.ToPorts = append(b.ToPorts, *values[i])
	}
	return b
}
