// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	ciliumiov2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
)

// CiliumEgressGatewayPolicySpecApplyConfiguration represents a declarative configuration of the CiliumEgressGatewayPolicySpec type for use
// with apply.
type CiliumEgressGatewayPolicySpecApplyConfiguration struct {
	Selectors        []EgressRuleApplyConfiguration    `json:"selectors,omitempty"`
	DestinationCIDRs []ciliumiov2.CIDR                 `json:"destinationCIDRs,omitempty"`
	ExcludedCIDRs    []ciliumiov2.CIDR                 `json:"excludedCIDRs,omitempty"`
	EgressGateway    *EgressGatewayApplyConfiguration  `json:"egressGateway,omitempty"`
	EgressGateways   []EgressGatewayApplyConfiguration `json:"egressGateways,omitempty"`
}

// CiliumEgressGatewayPolicySpecApplyConfiguration constructs a declarative configuration of the CiliumEgressGatewayPolicySpec type for use with
// apply.
func CiliumEgressGatewayPolicySpec() *CiliumEgressGatewayPolicySpecApplyConfiguration {
	return &CiliumEgressGatewayPolicySpecApplyConfiguration{}
}

// WithSelectors adds the given value to the Selectors field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Selectors field.
func (b *CiliumEgressGatewayPolicySpecApplyConfiguration) WithSelectors(values ...*EgressRuleApplyConfiguration) *CiliumEgressGatewayPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSelectors")
		}
		b.Selectors = append(b.Selectors, *values[i])
	}
	return b
}

// WithDestinationCIDRs adds the given value to the DestinationCIDRs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DestinationCIDRs field.
func (b *CiliumEgressGatewayPolicySpecApplyConfiguration) WithDestinationCIDRs(values ...ciliumiov2.CIDR) *CiliumEgressGatewayPolicySpecApplyConfiguration {
	for i := range values {
		b.DestinationCIDRs = append(b.DestinationCIDRs, values[i])
	}
	return b
}

// WithExcludedCIDRs adds the given value to the ExcludedCIDRs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ExcludedCIDRs field.
func (b *CiliumEgressGatewayPolicySpecApplyConfiguration) WithExcludedCIDRs(values ...ciliumiov2.CIDR) *CiliumEgressGatewayPolicySpecApplyConfiguration {
	for i := range values {
		b.ExcludedCIDRs = append(b.ExcludedCIDRs, values[i])
	}
	return b
}

// WithEgressGateway sets the EgressGateway field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EgressGateway field is set to the value of the last call.
func (b *CiliumEgressGatewayPolicySpecApplyConfiguration) WithEgressGateway(value *EgressGatewayApplyConfiguration) *CiliumEgressGatewayPolicySpecApplyConfiguration {
	b.EgressGateway = value
	return b
}

// WithEgressGateways adds the given value to the EgressGateways field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EgressGateways field.
func (b *CiliumEgressGatewayPolicySpecApplyConfiguration) WithEgressGateways(values ...*EgressGatewayApplyConfiguration) *CiliumEgressGatewayPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEgressGateways")
		}
		b.EgressGateways = append(b.EgressGateways, *values[i])
	}
	return b
}
