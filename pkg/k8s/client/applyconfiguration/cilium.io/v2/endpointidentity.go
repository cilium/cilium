// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// EndpointIdentityApplyConfiguration represents a declarative configuration of the EndpointIdentity type for use
// with apply.
type EndpointIdentityApplyConfiguration struct {
	ID     *int64   `json:"id,omitempty"`
	Labels []string `json:"labels,omitempty"`
}

// EndpointIdentityApplyConfiguration constructs a declarative configuration of the EndpointIdentity type for use with
// apply.
func EndpointIdentity() *EndpointIdentityApplyConfiguration {
	return &EndpointIdentityApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *EndpointIdentityApplyConfiguration) WithID(value int64) *EndpointIdentityApplyConfiguration {
	b.ID = &value
	return b
}

// WithLabels adds the given value to the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Labels field.
func (b *EndpointIdentityApplyConfiguration) WithLabels(values ...string) *EndpointIdentityApplyConfiguration {
	for i := range values {
		b.Labels = append(b.Labels, values[i])
	}
	return b
}
