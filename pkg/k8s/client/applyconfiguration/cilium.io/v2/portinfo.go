// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	api "github.com/cilium/cilium/pkg/policy/api"
)

// PortInfoApplyConfiguration represents a declarative configuration of the PortInfo type for use
// with apply.
type PortInfoApplyConfiguration struct {
	Port     *string      `json:"port,omitempty"`
	Protocol *api.L4Proto `json:"protocol,omitempty"`
	Name     *string      `json:"name,omitempty"`
}

// PortInfoApplyConfiguration constructs a declarative configuration of the PortInfo type for use with
// apply.
func PortInfo() *PortInfoApplyConfiguration {
	return &PortInfoApplyConfiguration{}
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *PortInfoApplyConfiguration) WithPort(value string) *PortInfoApplyConfiguration {
	b.Port = &value
	return b
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *PortInfoApplyConfiguration) WithProtocol(value api.L4Proto) *PortInfoApplyConfiguration {
	b.Protocol = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *PortInfoApplyConfiguration) WithName(value string) *PortInfoApplyConfiguration {
	b.Name = &value
	return b
}
