// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CiliumNodeConfigSpecApplyConfiguration represents a declarative configuration of the CiliumNodeConfigSpec type for use
// with apply.
type CiliumNodeConfigSpecApplyConfiguration struct {
	Defaults     map[string]string                   `json:"defaults,omitempty"`
	NodeSelector *v1.LabelSelectorApplyConfiguration `json:"nodeSelector,omitempty"`
}

// CiliumNodeConfigSpecApplyConfiguration constructs a declarative configuration of the CiliumNodeConfigSpec type for use with
// apply.
func CiliumNodeConfigSpec() *CiliumNodeConfigSpecApplyConfiguration {
	return &CiliumNodeConfigSpecApplyConfiguration{}
}

// WithDefaults puts the entries into the Defaults field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Defaults field,
// overwriting an existing map entries in Defaults field with the same key.
func (b *CiliumNodeConfigSpecApplyConfiguration) WithDefaults(entries map[string]string) *CiliumNodeConfigSpecApplyConfiguration {
	if b.Defaults == nil && len(entries) > 0 {
		b.Defaults = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Defaults[k] = v
	}
	return b
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *CiliumNodeConfigSpecApplyConfiguration) WithNodeSelector(value *v1.LabelSelectorApplyConfiguration) *CiliumNodeConfigSpecApplyConfiguration {
	b.NodeSelector = value
	return b
}
