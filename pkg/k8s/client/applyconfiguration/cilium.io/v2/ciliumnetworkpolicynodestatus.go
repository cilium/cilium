// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// CiliumNetworkPolicyNodeStatusApplyConfiguration represents a declarative configuration of the CiliumNetworkPolicyNodeStatus type for use
// with apply.
type CiliumNetworkPolicyNodeStatusApplyConfiguration struct {
	OK          *bool             `json:"ok,omitempty"`
	Error       *string           `json:"error,omitempty"`
	LastUpdated *v1.Time          `json:"lastUpdated,omitempty"`
	Revision    *uint64           `json:"localPolicyRevision,omitempty"`
	Enforcing   *bool             `json:"enforcing,omitempty"`
	Annotations map[string]string `json:"annotations,omitempty"`
}

// CiliumNetworkPolicyNodeStatusApplyConfiguration constructs a declarative configuration of the CiliumNetworkPolicyNodeStatus type for use with
// apply.
func CiliumNetworkPolicyNodeStatus() *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	return &CiliumNetworkPolicyNodeStatusApplyConfiguration{}
}

// WithOK sets the OK field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OK field is set to the value of the last call.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithOK(value bool) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	b.OK = &value
	return b
}

// WithError sets the Error field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Error field is set to the value of the last call.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithError(value string) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	b.Error = &value
	return b
}

// WithLastUpdated sets the LastUpdated field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastUpdated field is set to the value of the last call.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithLastUpdated(value v1.Time) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	b.LastUpdated = &value
	return b
}

// WithRevision sets the Revision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Revision field is set to the value of the last call.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithRevision(value uint64) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	b.Revision = &value
	return b
}

// WithEnforcing sets the Enforcing field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enforcing field is set to the value of the last call.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithEnforcing(value bool) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	b.Enforcing = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *CiliumNetworkPolicyNodeStatusApplyConfiguration) WithAnnotations(entries map[string]string) *CiliumNetworkPolicyNodeStatusApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}
