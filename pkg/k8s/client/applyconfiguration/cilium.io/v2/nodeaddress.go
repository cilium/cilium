// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	addressing "github.com/cilium/cilium/pkg/node/addressing"
)

// NodeAddressApplyConfiguration represents a declarative configuration of the NodeAddress type for use
// with apply.
type NodeAddressApplyConfiguration struct {
	Type *addressing.AddressType `json:"type,omitempty"`
	IP   *string                 `json:"ip,omitempty"`
}

// NodeAddressApplyConfiguration constructs a declarative configuration of the NodeAddress type for use with
// apply.
func NodeAddress() *NodeAddressApplyConfiguration {
	return &NodeAddressApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *NodeAddressApplyConfiguration) WithType(value addressing.AddressType) *NodeAddressApplyConfiguration {
	b.Type = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *NodeAddressApplyConfiguration) WithIP(value string) *NodeAddressApplyConfiguration {
	b.IP = &value
	return b
}
