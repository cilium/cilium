// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	models "github.com/cilium/cilium/api/v1/models"
)

// ControllerStatusApplyConfiguration represents a declarative configuration of the ControllerStatus type for use
// with apply.
type ControllerStatusApplyConfiguration struct {
	Name          *string                                   `json:"name,omitempty"`
	Configuration *models.ControllerStatusConfiguration     `json:"configuration,omitempty"`
	Status        *ControllerStatusStatusApplyConfiguration `json:"status,omitempty"`
	UUID          *string                                   `json:"uuid,omitempty"`
}

// ControllerStatusApplyConfiguration constructs a declarative configuration of the ControllerStatus type for use with
// apply.
func ControllerStatus() *ControllerStatusApplyConfiguration {
	return &ControllerStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ControllerStatusApplyConfiguration) WithName(value string) *ControllerStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithConfiguration sets the Configuration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configuration field is set to the value of the last call.
func (b *ControllerStatusApplyConfiguration) WithConfiguration(value models.ControllerStatusConfiguration) *ControllerStatusApplyConfiguration {
	b.Configuration = &value
	return b
}

// WithStatus sets the Status field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Status field is set to the value of the last call.
func (b *ControllerStatusApplyConfiguration) WithStatus(value *ControllerStatusStatusApplyConfiguration) *ControllerStatusApplyConfiguration {
	b.Status = value
	return b
}

// WithUUID sets the UUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UUID field is set to the value of the last call.
func (b *ControllerStatusApplyConfiguration) WithUUID(value string) *ControllerStatusApplyConfiguration {
	b.UUID = &value
	return b
}
