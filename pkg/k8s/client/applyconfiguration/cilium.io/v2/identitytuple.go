// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// IdentityTupleApplyConfiguration represents a declarative configuration of the IdentityTuple type for use
// with apply.
type IdentityTupleApplyConfiguration struct {
	Identity       *uint64           `json:"identity,omitempty"`
	IdentityLabels map[string]string `json:"identity-labels,omitempty"`
	DestPort       *uint16           `json:"dest-port,omitempty"`
	Protocol       *byte             `json:"protocol,omitempty"`
}

// IdentityTupleApplyConfiguration constructs a declarative configuration of the IdentityTuple type for use with
// apply.
func IdentityTuple() *IdentityTupleApplyConfiguration {
	return &IdentityTupleApplyConfiguration{}
}

// WithIdentity sets the Identity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Identity field is set to the value of the last call.
func (b *IdentityTupleApplyConfiguration) WithIdentity(value uint64) *IdentityTupleApplyConfiguration {
	b.Identity = &value
	return b
}

// WithIdentityLabels puts the entries into the IdentityLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the IdentityLabels field,
// overwriting an existing map entries in IdentityLabels field with the same key.
func (b *IdentityTupleApplyConfiguration) WithIdentityLabels(entries map[string]string) *IdentityTupleApplyConfiguration {
	if b.IdentityLabels == nil && len(entries) > 0 {
		b.IdentityLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.IdentityLabels[k] = v
	}
	return b
}

// WithDestPort sets the DestPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DestPort field is set to the value of the last call.
func (b *IdentityTupleApplyConfiguration) WithDestPort(value uint16) *IdentityTupleApplyConfiguration {
	b.DestPort = &value
	return b
}

// WithProtocol sets the Protocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Protocol field is set to the value of the last call.
func (b *IdentityTupleApplyConfiguration) WithProtocol(value byte) *IdentityTupleApplyConfiguration {
	b.Protocol = &value
	return b
}
