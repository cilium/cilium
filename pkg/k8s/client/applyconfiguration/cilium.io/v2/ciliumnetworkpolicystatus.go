// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

// CiliumNetworkPolicyStatusApplyConfiguration represents a declarative configuration of the CiliumNetworkPolicyStatus type for use
// with apply.
type CiliumNetworkPolicyStatusApplyConfiguration struct {
	DerivativePolicies map[string]CiliumNetworkPolicyNodeStatusApplyConfiguration `json:"derivativePolicies,omitempty"`
	Conditions         []NetworkPolicyConditionApplyConfiguration                 `json:"conditions,omitempty"`
}

// CiliumNetworkPolicyStatusApplyConfiguration constructs a declarative configuration of the CiliumNetworkPolicyStatus type for use with
// apply.
func CiliumNetworkPolicyStatus() *CiliumNetworkPolicyStatusApplyConfiguration {
	return &CiliumNetworkPolicyStatusApplyConfiguration{}
}

// WithDerivativePolicies puts the entries into the DerivativePolicies field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the DerivativePolicies field,
// overwriting an existing map entries in DerivativePolicies field with the same key.
func (b *CiliumNetworkPolicyStatusApplyConfiguration) WithDerivativePolicies(entries map[string]CiliumNetworkPolicyNodeStatusApplyConfiguration) *CiliumNetworkPolicyStatusApplyConfiguration {
	if b.DerivativePolicies == nil && len(entries) > 0 {
		b.DerivativePolicies = make(map[string]CiliumNetworkPolicyNodeStatusApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.DerivativePolicies[k] = v
	}
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CiliumNetworkPolicyStatusApplyConfiguration) WithConditions(values ...*NetworkPolicyConditionApplyConfiguration) *CiliumNetworkPolicyStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
