// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v2

import (
	v1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/apis/meta/v1"
)

// EgressGatewayApplyConfiguration represents a declarative configuration of the EgressGateway type for use
// with apply.
type EgressGatewayApplyConfiguration struct {
	NodeSelector *v1.LabelSelector `json:"nodeSelector,omitempty"`
	Interface    *string           `json:"interface,omitempty"`
	EgressIP     *string           `json:"egressIP,omitempty"`
}

// EgressGatewayApplyConfiguration constructs a declarative configuration of the EgressGateway type for use with
// apply.
func EgressGateway() *EgressGatewayApplyConfiguration {
	return &EgressGatewayApplyConfiguration{}
}

// WithNodeSelector sets the NodeSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NodeSelector field is set to the value of the last call.
func (b *EgressGatewayApplyConfiguration) WithNodeSelector(value v1.LabelSelector) *EgressGatewayApplyConfiguration {
	b.NodeSelector = &value
	return b
}

// WithInterface sets the Interface field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interface field is set to the value of the last call.
func (b *EgressGatewayApplyConfiguration) WithInterface(value string) *EgressGatewayApplyConfiguration {
	b.Interface = &value
	return b
}

// WithEgressIP sets the EgressIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EgressIP field is set to the value of the last call.
func (b *EgressGatewayApplyConfiguration) WithEgressIP(value string) *EgressGatewayApplyConfiguration {
	b.EgressIP = &value
	return b
}
