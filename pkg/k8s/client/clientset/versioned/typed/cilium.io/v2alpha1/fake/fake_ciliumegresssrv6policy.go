// SPDX-License-Identifier: Apache-2.0
// Copyright 2017-2021 Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v2alpha1 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCiliumEgressSRv6Policies implements CiliumEgressSRv6PolicyInterface
type FakeCiliumEgressSRv6Policies struct {
	Fake *FakeCiliumV2alpha1
}

var ciliumegresssrv6policiesResource = schema.GroupVersionResource{Group: "cilium.io", Version: "v2alpha1", Resource: "ciliumegresssrv6policies"}

var ciliumegresssrv6policiesKind = schema.GroupVersionKind{Group: "cilium.io", Version: "v2alpha1", Kind: "CiliumEgressSRv6Policy"}

// Get takes name of the ciliumEgressSRv6Policy, and returns the corresponding ciliumEgressSRv6Policy object, and an error if there is any.
func (c *FakeCiliumEgressSRv6Policies) Get(ctx context.Context, name string, options v1.GetOptions) (result *v2alpha1.CiliumEgressSRv6Policy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(ciliumegresssrv6policiesResource, name), &v2alpha1.CiliumEgressSRv6Policy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumEgressSRv6Policy), err
}

// List takes label and field selectors, and returns the list of CiliumEgressSRv6Policies that match those selectors.
func (c *FakeCiliumEgressSRv6Policies) List(ctx context.Context, opts v1.ListOptions) (result *v2alpha1.CiliumEgressSRv6PolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(ciliumegresssrv6policiesResource, ciliumegresssrv6policiesKind, opts), &v2alpha1.CiliumEgressSRv6PolicyList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2alpha1.CiliumEgressSRv6PolicyList{ListMeta: obj.(*v2alpha1.CiliumEgressSRv6PolicyList).ListMeta}
	for _, item := range obj.(*v2alpha1.CiliumEgressSRv6PolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ciliumEgressSRv6Policies.
func (c *FakeCiliumEgressSRv6Policies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(ciliumegresssrv6policiesResource, opts))
}

// Create takes the representation of a ciliumEgressSRv6Policy and creates it.  Returns the server's representation of the ciliumEgressSRv6Policy, and an error, if there is any.
func (c *FakeCiliumEgressSRv6Policies) Create(ctx context.Context, ciliumEgressSRv6Policy *v2alpha1.CiliumEgressSRv6Policy, opts v1.CreateOptions) (result *v2alpha1.CiliumEgressSRv6Policy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(ciliumegresssrv6policiesResource, ciliumEgressSRv6Policy), &v2alpha1.CiliumEgressSRv6Policy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumEgressSRv6Policy), err
}

// Update takes the representation of a ciliumEgressSRv6Policy and updates it. Returns the server's representation of the ciliumEgressSRv6Policy, and an error, if there is any.
func (c *FakeCiliumEgressSRv6Policies) Update(ctx context.Context, ciliumEgressSRv6Policy *v2alpha1.CiliumEgressSRv6Policy, opts v1.UpdateOptions) (result *v2alpha1.CiliumEgressSRv6Policy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(ciliumegresssrv6policiesResource, ciliumEgressSRv6Policy), &v2alpha1.CiliumEgressSRv6Policy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumEgressSRv6Policy), err
}

// Delete takes name of the ciliumEgressSRv6Policy and deletes it. Returns an error if one occurs.
func (c *FakeCiliumEgressSRv6Policies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(ciliumegresssrv6policiesResource, name), &v2alpha1.CiliumEgressSRv6Policy{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCiliumEgressSRv6Policies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(ciliumegresssrv6policiesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v2alpha1.CiliumEgressSRv6PolicyList{})
	return err
}

// Patch applies the patch and returns the patched ciliumEgressSRv6Policy.
func (c *FakeCiliumEgressSRv6Policies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v2alpha1.CiliumEgressSRv6Policy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(ciliumegresssrv6policiesResource, name, pt, data, subresources...), &v2alpha1.CiliumEgressSRv6Policy{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.CiliumEgressSRv6Policy), err
}
