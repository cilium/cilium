// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/api/discovery/v1beta1"
	discoveryv1beta1 "github.com/cilium/cilium/pkg/k8s/slim/k8s/client/clientset/versioned/typed/discovery/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeEndpointSlices implements EndpointSliceInterface
type fakeEndpointSlices struct {
	*gentype.FakeClientWithList[*v1beta1.EndpointSlice, *v1beta1.EndpointSliceList]
	Fake *FakeDiscoveryV1beta1
}

func newFakeEndpointSlices(fake *FakeDiscoveryV1beta1, namespace string) discoveryv1beta1.EndpointSliceInterface {
	return &fakeEndpointSlices{
		gentype.NewFakeClientWithList[*v1beta1.EndpointSlice, *v1beta1.EndpointSliceList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("endpointslices"),
			v1beta1.SchemeGroupVersion.WithKind("EndpointSlice"),
			func() *v1beta1.EndpointSlice { return &v1beta1.EndpointSlice{} },
			func() *v1beta1.EndpointSliceList { return &v1beta1.EndpointSliceList{} },
			func(dst, src *v1beta1.EndpointSliceList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.EndpointSliceList) []*v1beta1.EndpointSlice {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.EndpointSliceList, items []*v1beta1.EndpointSlice) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
