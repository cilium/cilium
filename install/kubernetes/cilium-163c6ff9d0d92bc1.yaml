---
# Source: cilium/templates/cilium-agent-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium
  namespace: cilium
---
# Source: cilium/templates/cilium-operator-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium-operator
  namespace: cilium
---
# Source: cilium/templates/hubble-server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: cilium
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQUtzMTk2RjNYYU1vbzk3MXFPRlZrc0V3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TURFd01Ea3lNakF5TVRsYQpGdzB5TXpFd01Ea3lNakF5TVRsYU1Db3hLREFtQmdOVkJBTU1IeW91WkdWbVlYVnNkQzVvZFdKaWJHVXRaM0p3Cll5NWphV3hwZFcwdWFXOHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDeWNsU04KZmtZZHo5WjVGTmRDVFZ4QUVrRUdhNlpxNXFES3NnZXk2WllldkRiNHczNlBUTGN6c0t2aXRsMGhGMmlDN2lCNQo1MGtQMEVvZ05ZdFZsRzJ2QkN0ZGs3a3drMWIvK0t1MEx1RWd6VXhmbzV2VnpENFNvRnNUc0JNMnJlc3I2eWJ2CjVreXh5cENxOFozUzd6ZDVVVHM2YVhGTlpDUEhhUGFPczg5Z00vSXJnemViN01QR2g2VXVEK3Vjd0VzR0lyKzkKak5jNDMyaFVCVWdXUnVoa0NxdkZ0SEgwaHlzMk5pRHllWDBFVE1mZUU5MHFNR2pZd0thZlk1S29HbWlkVjRTLwovNWR3QzJIYVRWUmVxd1ZnbGp2bHZrZlptRTg0WHBGVUszdUxZTkFPOXNMNHFqYTIvL2Y5NXhENWFtcHJ1VnVPCjN1SXJBaEUvbGNmM2FnTFRBZ01CQUFHamF6QnBNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVUKQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFxQmdOVkhSRUVJekFoZ2g4cQpMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQjU0QTIxZXp1KzRIalErWU9VZUlzTlFYeFFSTnp1L0ZJQU1GN29tWFBKdmpVSUF0S1l2R1Y2ZS9SVzNudVAKTzhudG5RcUxxV2tiNnlQUGNiWkVvNHRvTDRvYmJJK2NnWmt6VGRGeWhTUHB5Z3FuMTZmYlFaemsyTnVGKzBxUgpwcE0xdVhJeStuUnNFNjgyRmhpME1MZXlZT3lrS1dwYURyL2FnZ3dDSE51LzZ2ZVpGMldBdlZKZThzeXhCczU0CkZ4MGIyQkYyLzNQUEtQelZEU3huUEdzU3ZmQWRmU3prUjd4bmxmZUh0d3Y1UXFpYjhWeXlkcWJpNnRmOHR4c3QKYWRuUlp0Vm81NTM1eUp2Q1dJbXpEVFNWMzRGU1RCK1QxRHlSZjFCcE1mK2NXSHl1VEt4UVBUMzlIMk1ENzZUYgpDWjk0RVdrcUU3VHJQQ0xWZUp4YitmbTQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc25KVWpYNUdIYy9XZVJUWFFrMWNRQkpCQm11bWF1YWd5cklIc3VtV0hydzIrTU4rCmoweTNNN0NyNHJaZElSZG9ndTRnZWVkSkQ5QktJRFdMVlpSdHJ3UXJYWk81TUpOVy8vaXJ0QzdoSU0xTVg2T2IKMWN3K0VxQmJFN0FUTnEzcksrc203K1pNc2NxUXF2R2QwdTgzZVZFN09tbHhUV1FqeDJqMmpyUFBZRFB5SzRNMwptK3pEeG9lbExnL3JuTUJMQmlLL3ZZelhPTjlvVkFWSUZrYm9aQXFyeGJSeDlJY3JOallnOG5sOUJFekgzaFBkCktqQm8yTUNtbjJPU3FCcG9uVmVFdi8rWGNBdGgyazFVWHFzRllKWTc1YjVIMlpoUE9GNlJWQ3Q3aTJEUUR2YkMKK0tvMnR2LzMvZWNRK1dwcWE3bGJqdDdpS3dJUlA1WEg5Mm9DMHdJREFRQUJBb0lCQURqZk5WRnZHRHV5SE1HMApRYkt3NHlETWNJcnlUalN0MGpzbnFFcCtKY2tmNVVrOVRSMndyb2E3M054QmtNYldKZ25zaU04eFJsalM0bjBICmM2UFB6WEZGRytrVUJxYVRudHV2emxGN3kyWmY1K0puUzJoRlV0Y3U0amdSR3Q2SGFYY3kxOU1IakJQeDRrK0kKOStyZE1NbnFlTHp5RkJrOVBDWDJydlhtR3NhbTMxNlMyQnhNTmMzVlRubXhDK2Z0bmNSejZMMUF1akdPSlN1MwpIeFo1MERmcCtFNTE1SUpkbDFmN1BRM1BvMm1BcVRNQXpwc205UkJkNkM2WGJsQ2JDV280SHRVSnR0VVhHZ01zClpZU2pJUlMybUUraTlVQjB6eUFQMXVZUGVhOUpVQW5iZ0N6ZEprQzlMbzFxbHQrU0lTMUkwc014QlhreWFtaUgKelN0TjUza0NnWUVBMUEvd2pzQkZCYjZxK0IwUG9GcEQxdVVzVU0wWUZrdi9mL3FPQjg1bDFwRGdZbTI0dFZ4KwppOHVhRnVmMndqSUgwYnhEcHNsMnRqOGw1VTJqVnYzRDdyS2hNT3BYZk0wc2gwZ3U3Yzd1K3NNQ2QzY25UMUV3CkNtUTZtTlZPdE4zTkRxQkJXY0ErVDB1VitXcWRJK3lteXF1TnpzOEZxUGh3Q2VZYTVhb1NxcjBDZ1lFQTEydGYKTXVBOE55WHdIR2RneUJFMWV2cXdsT1U4V0JTUnJaNU9mUmNBY3lnUUtsUmp5Q2twS3NiNnBXcEpRYk9kZXlTWQpjQzM5TnpYcFBSUWhYY3lRMFF0dUtUZVJDZjZQeVV4UU9nN1doL09pTVYxQmZ2R3FMVUxhYnI4dDl6MnRENmFnCnk1a29VaE9OL096M29mMVNMbjhHOXJzRnExbnFOL0pwdy9RekJNOENnWUE1a2hvOHB2WVdHUzFSTHBLUGRmSDAKNVVLaXJRdGRBa1RhK2FxVmMvTXh6U01kbGF3UGtJektadnZ1UEF0QnJWTnlIU3BBblhFZENRZkF1Tk1mU3NWbQppQmc2cjJRUS9hS1pGMyttRUFmUkRDQWZUcm5kVHEwOEpQbkRoQ1ZaOU4wMm0wc2lrbzVYK0swK2lUTWdEWjg2ClpsaVpUSnE4eExXbCtsSlRCMWtLQVFLQmdRQ1dtbkJ4NXlieC8wb0E4WjFPQWduN3NtdmxqT1pGUmd3YTc0UTgKRytxcWw2WEZrajQ0WDk1eUU2NkVHdXlnVEd5YS9SaTl4TWswNGpId0M3VFFHUVpkdjdvQ2d1Q1p0aWpjT01nVgo3dTI1R25HWVJYUld4YW1OL3lFckwrbDQ0dHV0QjNkL0g5SjZuMFV6UUpCWDVmeWdtUnBMUUxGVC9JYXRHb01yCkJmenRMUUtCZ0hQRktWT2pidjUzVytRbEh5VkxUaHl0cFpaZURRcnZPdlNpOHZGaldpY0dHUHdRQ3dIZnduZGMKL3diSkl0Y0JBMVdTdTR0UTY2Q1BycnowcWZ5TFVpRTBNcnFydEVkempmWlRBK2lNRG5YUitacE03ZjV1WUpVbQpHY1ZoOTVvbUpPbk1YaDJvNUh1S0tzb1hqWHpNMGFENmpjTVVNRWdvSmdTeWZ5RkxndTR3Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: cilium
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in a kvstore, etcd or consul, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "2s"
  identity-gc-interval: "2s"
  cilium-endpoint-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  enable-bpf-tproxy: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: 5s

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # This may lead to policy drops or a change in loadbalancing decisions for a
  # connection for some time. Endpoints may need to be recreated to restore
  # connectivity.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "true"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: vxlan

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default

  ipam: "kubernetes"
  tunnel: "disabled"
  enable-endpoint-routes: "true"
  enable-local-node-route: "false"

  # wait-bpf-mount makes init container wait until bpf filesystem is mounted
  wait-bpf-mount: "false"

  masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-iptables-rules: "true"

  auto-direct-node-routes: "false"
  enable-bandwidth-manager: "true"
  native-routing-cidr: 10.0.0.0/8
  # List of devices used to attach bpf_host.o (implements BPF NodePort,
  # host-firewall and BPF masquerading)
  devices: ""
  kube-proxy-replacement:  "probe"
  node-port-mode: "snat"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-session-affinity: "true"
  pprof: "true"
  log-system-load: "true"
  k8s-require-ipv4-pod-cidr: "true"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path:  "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "kubernetes"
  disable-cnp-status-updates: "false"
---
# Source: cilium/templates/hubble-ca-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ca-cert
  namespace: cilium
data:
  ca.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDCTCCAfGgAwIBAgIRAO3SB8wT+XM1ysWf9/QBmUAwDQYJKoZIhvcNAQELBQAw
    HjEcMBoGA1UEAxMTaHViYmxlLWNhLmNpbGl1bS5pbzAeFw0yMDEwMDkyMjAyMTla
    Fw0yMzEwMDkyMjAyMTlaMB4xHDAaBgNVBAMTE2h1YmJsZS1jYS5jaWxpdW0uaW8w
    ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCzUYKkqUrubcDPPybkdM/p
    T5vZQI5raDVcK0BJtnhh6iq62IoYPLw4Z5UZdg2T6YIkXTSt3mZ8DkiDa7CVEhz3
    Yp7UurefqdcIVWojOMIrqitpp1r1TFxKg82fNl0BS7uBdVrOi8Ouf5BLGIfDHSOr
    t1ZTSVyL1/3LGcM8DS10VQ4YeJUZq2AFxJecQ3UxAK4Z+11iiiLtK+1C7sU8JUFQ
    v4VDrCPfa8EcmOeaH4z6+ecKmALcPyvh2Hi7IBPnKaNNvUFop3znbTxNKsjhDqrK
    qG+jfEqj8NS7pgypShWVWFyXePSh1tG6b/bNmkG46zJsdmnirRMs8euuu9YI/Dnp
    AgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI
    KwYBBQUHAwIwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAnObC
    /am4rXABvNZ79V6yj/iZBlubVqI2OQLhrDiwsgo/a0te1XuNLt6V4xDJdy9bmuSA
    OhH8TYCr2sB7y79xH5m/5EhUM6s12Nv7U0XW5gUOKjNSevUJsGDxwVRm2Jhplv0Z
    vA+pR3hPlHZvwn+4CZGl3ro28xs//DyVkKfKH8HC5rqtLo+3lvjpdxXwIy0Ewscv
    cIk551zHz9aRdLkQWWjLUU7WYWxPnLR6prRpQBPa7doH57lBcq6aBC01ELwDNYXb
    0jOHiPKF/6q+ZYqnsofNN+9+yi+6/YsTBO9KOyJhcRWvNguEwiDV+3tnUD79F5HN
    DcL+IsS6h6IGNCD+Tw==
    -----END CERTIFICATE-----
---
# Source: cilium/templates/cilium-agent-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  # Deprecated for removal in v1.10
  - create
  - list
  - watch
  - update

  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  - ciliumclusterwidelocalredirectpolicies
  - ciliumclusterwidelocalredirectpolicies/status
  - ciliumclusterwidelocalredirectpolicies/finalizers
  verbs:
  - '*'
---
# Source: cilium/templates/cilium-operator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/status
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  - ciliumclusterwidelocalredirectpolicies
  - ciliumclusterwidelocalredirectpolicies/status
  - ciliumclusterwidelocalredirectpolicies/finalizers
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - update
  - watch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between mulitple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
# The support for leases was introduced in coordination.k8s.io/v1 during Kubernetes 1.14 release.
# In Cilium we currently don't support HA mode for K8s version < 1.14. This condition make sure
# that we only authorize access to leases resources in supported K8s versions.
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/cilium-agent-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: cilium
---
# Source: cilium/templates/cilium-operator-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: cilium
---
# Source: cilium/templates/cilium-agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium
  name: cilium
  namespace: cilium
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: cilium
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - cilium
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 10
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_FLANNEL_MASTER_DEVICE
          valueFrom:
            configMapKeyRef:
              key: flannel-master-device
              name: cilium-config
              optional: true
        - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
          valueFrom:
            configMapKeyRef:
              key: flannel-uninstall-on-exit
              name: cilium-config
              optional: true
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        image: 147.75.55.179:33999/cilium/cilium:2a16ac7e7e6bc3372b712633ecd3e3ef6502a7ad
        imagePullPolicy: Always
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              - "--enable-debug=true"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        name: cilium-agent
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
          # Needed to be able to load kernel modules
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
      hostNetwork: true
      initContainers:
      - name: wait-for-node-init
        command: ['sh', '-c', 'until stat /tmp/cilium-bootstrap-time > /dev/null 2>&1; do echo "Waiting on node-init to run..."; sleep 1; done']
        image: 147.75.55.179:33999/cilium/cilium:2a16ac7e7e6bc3372b712633ecd3e3ef6502a7ad
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /tmp/cilium-bootstrap-time
          name: cilium-bootstrap-file
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: CILIUM_WAIT_BPF_MOUNT
          valueFrom:
            configMapKeyRef:
              key: wait-bpf-mount
              name: cilium-config
              optional: true
        image: 147.75.55.179:33999/cilium/cilium:2a16ac7e7e6bc3372b712633ecd3e3ef6502a7ad
        imagePullPolicy: Always
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
          mountPropagation: HostToContainer
        - mountPath: /var/run/cilium
          name: cilium-run
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      # To install cilium cni plugin in the host
      - hostPath:
          path:  /home/kubernetes/bin
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      - hostPath:
          path: /tmp/cilium-bootstrap-time
          type: FileOrCreate
        name: cilium-bootstrap-file
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
      - name: hubble-tls
        projected:
          sources:
          - secret:
              name: hubble-server-certs
              items:
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
          - configMap:
              name: hubble-ca-cert
              items:
                - key: ca.crt
                  path: client-ca.crt
---
# Source: cilium/templates/cilium-nodeinit-daemonset.yaml
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: cilium-node-init
  namespace: cilium
  labels:
    app: cilium-node-init
spec:
  selector:
    matchLabels:
      app: cilium-node-init
  template:
    metadata:
      annotations:
      labels:
        app: cilium-node-init
    spec:
      tolerations:
      - operator: Exists
      hostPID: true
      hostNetwork: true
      priorityClassName: system-node-critical
      containers:
        - name: node-init
          image: docker.io/cilium/startup-script:af2a99046eca96c0138551393b21a5c044c7fe79
          imagePullPolicy: Always
          securityContext:
            privileged: true
          env:
          - name: CHECKPOINT_PATH
            value: /tmp/node-init.cilium.io
          # STARTUP_SCRIPT is the script run on node bootstrap. Node
          # bootstrapping can be customized in this script.
          - name: STARTUP_SCRIPT
            value: |
              #!/bin/bash

              set -o errexit
              set -o pipefail
              set -o nounset

              mount | grep "/sys/fs/bpf type bpf" || {
                # Mount the filesystem until next reboot
                echo "Mounting BPF filesystem..."
                mount bpffs /sys/fs/bpf -t bpf

                # Configure systemd to mount after next boot
                echo "Installing BPF filesystem mount"
                cat >/tmp/sys-fs-bpf.mount <<EOF
              [Unit]
              Description=Mount BPF filesystem (Cilium)
              Documentation=http://docs.cilium.io/
              DefaultDependencies=no
              Before=local-fs.target umount.target
              After=swap.target

              [Mount]
              What=bpffs
              Where=/sys/fs/bpf
              Type=bpf
              Options=rw,nosuid,nodev,noexec,relatime,mode=700

              [Install]
              WantedBy=multi-user.target
              EOF

                if [ -d "/etc/systemd/system/" ]; then
                  mv /tmp/sys-fs-bpf.mount /etc/systemd/system/
                  echo "Installed sys-fs-bpf.mount to /etc/systemd/system/"
                elif [ -d "/lib/systemd/system/" ]; then
                  mv /tmp/sys-fs-bpf.mount /lib/systemd/system/
                  echo "Installed sys-fs-bpf.mount to /lib/systemd/system/"
                fi

                # Ensure that filesystem gets mounted on next reboot
                systemctl enable sys-fs-bpf.mount
                systemctl start sys-fs-bpf.mount
              }

              echo "Link information:"
              ip link

              echo "Routing table:"
              ip route

              echo "Addressing:"
              ip -4 a
              ip -6 a
              if ip link show cbr0; then
                echo "Detected cbr0 bridge. Deleting interface..."
                ip link del cbr0
              fi
              # GKE: Alter the kubelet configuration to run in CNI mode
              echo "Changing kubelet configuration to --network-plugin=cni --cni-bin-dir=/home/kubernetes/bin"
              mkdir -p /home/kubernetes/bin
              sed -i "s:--network-plugin=kubenet:--network-plugin=cni\ --cni-bin-dir=/home/kubernetes/bin:g" /etc/default/kubelet
              echo "Restarting kubelet..."
              systemctl restart kubelet
              # If Cilium is configured to manage masquerading of traffic leaving the node,
              # we need to disable the IP-MASQ chain because even if ip-masq-agent
              # is not installed, the node init script installs some default rules into
              # the IP-MASQ chain.
              # If we remove the jump to that ip-masq chain, then we ensure the ip masquerade
              # configuration is solely managed by Cilium.
              # Also, if Cilium is installed, it may be expected that it would be solely responsible
              # for the networking configuration on that node. So provide the same functionality
              # as the --disable-snat-flag for existing GKE clusters.
              iptables -w -t nat -D POSTROUTING -m comment --comment "ip-masq: ensure nat POSTROUTING directs all non-LOCAL destination traffic to our custom IP-MASQ chain" -m addrtype ! --dst-type LOCAL -j IP-MASQ || true
              date > /tmp/cilium-bootstrap-time
              echo "Restarting kubenet managed pods"
              if [ ! -f /etc/crictl.yaml ] || grep -q 'docker' /etc/crictl.yaml; then
                # Works for COS, ubuntu
                # Note the first line is the containerID with a trailing \r
                for f in `find /var/lib/cni/networks/ -type f ! -name lock ! -name last_reserved_ip.0`; do docker rm -f "$(sed 's/\r//;1q' $f)" || true; done
              elif [ -n "$(docker ps --format '{{.Image}}' | grep ^[0-9]*\.dkr\.ecr\.[a-z]*-[a-z]*-[0-9]*\.amazonaws\.com/amazon-k8s-cni)" ]; then
                timeout=1
                for i in $(seq 1 7); do
                  echo "Checking introspection API"
                  curl localhost:61679 && retry=false || retry=true
                  if [ $retry == false ]; then break ; fi
                  sleep "$timeout"
                  timeout=$(($timeout * 2))
                done

                for pod in $(curl "localhost:61679/v1/pods" 2> /dev/null | jq -r '. | keys[]'); do
                  container_id=$(echo "$pod" | awk -F_ ' { print $3 } ' | cut -c1-12)
                  echo "Restarting ${container_id}"
                  docker kill "${container_id}" || true
                done
              else
                # COS-beta (with containerd)
                for f in `find /var/lib/cni/networks/ -type f ! -name lock ! -name last_reserved_ip.0`; do crictl stopp $(cat $f) || true; done
              fi
              echo "Node initialization complete"
---
# Source: cilium/templates/cilium-operator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: cilium
spec:
  # We support HA mode only for Kubernetes version > 1.14
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: "kubernetes.io/hostname"
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        image: 147.75.55.179:33999/cilium/operator-generic:2a16ac7e7e6bc3372b712633ecd3e3ef6502a7ad
        imagePullPolicy: Always
        name: cilium-operator
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      tolerations:
      - operator: Exists
      volumes:
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
