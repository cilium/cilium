apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium
{{- if .Values.keepDeprecatedLabels }}
    kubernetes.io/cluster-service: "true"
{{- end }}
  name: cilium
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      k8s-app: cilium
{{- if .Values.keepDeprecatedLabels }}
      kubernetes.io/cluster-service: "true"
{{- end }}
  template:
    metadata:
      annotations:
{{- if and .Values.global.prometheus.enabled (not .Values.global.prometheus.serviceMonitor.enabled) }}
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        prometheus.io/scrape: "true"
{{- end }}
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
{{- with .Values.podsAnnotations }}{{- toYaml . | nindent 8 }}{{- end }}
      labels:
        k8s-app: cilium
{{- if .Values.keepDeprecatedLabels }}
        kubernetes.io/cluster-service: "true"
{{- end }}
    spec:
{{- if .Values.global.affinity }}
      affinity:
{{ toYaml .Values.global.affinity | indent 8 }}
{{- end }}
      containers:
{{- if .Values.sleepAfterInit }}
      - command: [ "/bin/bash", "-c", "--" ]
        args: [ "while true; do sleep 30; done;" ]
        livenessProbe:
          exec:
            command:
            - "true"
        readinessProbe:
          exec:
            command:
            - "true"
{{- else }}
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        livenessProbe:
{{- if .Values.keepDeprecatedProbes }}
          exec:
            command:
            - cilium
            - status
            - --brief
{{- else }}
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: {{ .Values.global.agent.healthPort }}
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
{{- end }}
          failureThreshold: 10
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
{{- if .Values.keepDeprecatedProbes }}
          exec:
            command:
            - cilium
            - status
            - --brief
{{- else }}
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: {{ .Values.global.agent.healthPort }}
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
{{- end }}
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
{{- end }}
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
{{- if .Values.global.ci.kubeCacheMutationDetector }}
        - name: KUBE_CACHE_MUTATION_DETECTOR
          value: "true"
{{- end }}
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_FLANNEL_MASTER_DEVICE
          valueFrom:
            configMapKeyRef:
              key: flannel-master-device
              name: cilium-config
              optional: true
        - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
          valueFrom:
            configMapKeyRef:
              key: flannel-uninstall-on-exit
              name: cilium-config
              optional: true
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
{{- if .Values.global.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.global.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.global.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.global.k8sServicePort | quote }}
{{- end }}
{{- if contains "/" .Values.image }}
        image: "{{ .Values.image }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
{{- if .Values.global.cni.install }}
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              -{{- if .Values.global.debug.enabled }} "--enable-debug=true"{{- else }} "--enable-debug=false"{{- end }}
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
{{- end }}
{{- if .Values.resources }}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
{{- end }}
        name: cilium-agent
{{- if or .Values.global.prometheus.enabled .Values.global.hubble.metrics.enabled }}
        ports:
{{- if .Values.global.prometheus.enabled }}
        - containerPort: {{ .Values.global.prometheus.port }}
          hostPort: {{ .Values.global.prometheus.port }}
          name: prometheus
          protocol: TCP
        - containerPort: {{ .Values.global.proxy.prometheus.port }}
          hostPort: {{ .Values.global.proxy.prometheus.port }}
          name: envoy-metrics
          protocol: TCP
{{- end }}
{{- if .Values.global.hubble.metrics.enabled }}
        - containerPort: {{ .Values.global.hubble.metrics.port }}
          hostPort: {{ .Values.global.hubble.metrics.port }}
          name: hubble-metrics
          protocol: TCP
{{- end }}
{{- end }}
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        - mountPath: /sys/fs/bpf
          name: bpf-maps
{{- end }}
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: {{ .Values.global.cni.hostConfDirMountPath }}
          name: etc-cni-netd
{{- if .Values.global.etcd.enabled }}
        - mountPath: /var/lib/etcd-config
          name: etcd-config-path
          readOnly: true
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
        - mountPath: /var/lib/etcd-secrets
          name: etcd-secrets
          readOnly: true
{{- end }}
{{- end }}
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
{{- if and .Values.global.ipMasqAgent .Values.global.ipMasqAgent.enabled }}
        - mountPath: /etc/config
          name: ip-masq-agent
          readOnly: true
{{- end }}
{{- if .Values.global.cni.configMap }}
        - mountPath: {{ .Values.global.cni.confFileMountPath }}
          name: cni-configuration
          readOnly: true
{{- end }}
          # Needed to be able to load kernel modules
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
{{- if .Values.global.encryption.enabled }}
        - mountPath: {{ .Values.global.encryption.mountPath }}
          name: cilium-ipsec-secrets
{{- end }}
{{- if .Values.global.kubeConfigPath }}
        - mountPath: {{ .Values.global.kubeConfigPath }}
          name: kube-config
          readOnly: true
{{- end}}
{{- if and (.Values.global.hubble.enabled) (.Values.global.hubble.listenAddress) (.Values.global.hubble.tls.enabled) }}
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
{{- end}}
{{- if .Values.monitor.enabled }}
      - name: cilium-monitor
        command: ["cilium"]
        args:
        - monitor
{{- range $type := .Values.monitor.eventTypes }}
        - --type={{ $type }}
{{- end }}
{{- if contains "/" .Values.image }}
        image: "{{ .Values.image }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        volumeMounts:
        - mountPath: /var/run/cilium
          name: cilium-run
{{- if .Values.monitor.resources }}
        resources:
          {{- toYaml .Values.monitor.resources | trim | nindent 10 }}
{{- end }}
{{- end }}
{{- if .Values.global.etcd.managed }}
      # In managed etcd mode, Cilium must be able to resolve the DNS name of
      # the etcd service
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      hostNetwork: true
      initContainers:
{{- if and .Values.global.nodeinit.enabled (not (eq .Values.global.nodeinit.bootstrapFile "")) }}
      - name: wait-for-node-init
        command: ['sh', '-c', 'until stat {{ .Values.global.nodeinit.bootstrapFile }} > /dev/null 2>&1; do echo "Waiting on node-init to run..."; sleep 1; done']
{{- if contains "/" .Values.image }}
        image: "{{ .Values.image }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        volumeMounts:
        - mountPath: {{ .Values.global.nodeinit.bootstrapFile }}
          name: cilium-bootstrap-file
{{- end }}
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: CILIUM_WAIT_BPF_MOUNT
          valueFrom:
            configMapKeyRef:
              key: wait-bpf-mount
              name: cilium-config
              optional: true
{{- if .Values.global.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.global.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.global.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.global.k8sServicePort | quote }}
{{- end }}
{{- if contains "/" .Values.image }}
        image: "{{ .Values.image }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        - mountPath: /sys/fs/bpf
          name: bpf-maps
{{- /* Required for wait-bpf-mount to work */}}
          mountPropagation: HostToContainer
{{- end }}
        - mountPath: /var/run/cilium
          name: cilium-run
{{- if .Values.initResources }}
        resources:
          {{- toYaml .Values.initResources | trim | nindent 10 }}
{{- end }}
      restartPolicy: Always
{{- if or (and (eq .Release.Namespace "kube-system") (gt .Capabilities.KubeVersion.Minor "10")) (ge .Capabilities.KubeVersion.Minor "17") (gt .Capabilities.KubeVersion.Major "1")}}
      priorityClassName: system-node-critical
{{- end }}
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: {{ .Values.global.daemon.runPath }}
          type: DirectoryOrCreate
        name: cilium-run
{{- /* CRI-O already mounts the BPF filesystem */ -}}
{{- if not (eq .Values.global.containerRuntime.integration "crio") }}
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
{{- end }}
      # To install cilium cni plugin in the host
      - hostPath:
          path:  {{ .Values.global.cni.binPath }}
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: {{ .Values.global.cni.confPath }}
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
{{- if .Values.global.kubeConfigPath }}
      - hostPath:
          path: {{ .Values.global.kubeConfigPath }}
          type: FileOrCreate
        name: kube-config
{{- end }}
{{- if and .Values.global.nodeinit.enabled (not (eq .Values.global.nodeinit.bootstrapFile "")) }}
      - hostPath:
          path: {{ .Values.global.nodeinit.bootstrapFile }}
          type: FileOrCreate
        name: cilium-bootstrap-file
{{- end }}
{{- if .Values.global.etcd.enabled }}
        # To read the etcd config stored in config maps
      - configMap:
          defaultMode: 420
          items:
          - key: etcd-config
            path: etcd.config
          name: cilium-config
        name: etcd-config-path
        # To read the k8s etcd secrets in case the user might want to use TLS
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
      - name: etcd-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-etcd-secrets
{{- end }}
{{- end }}
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
{{- if and .Values.global.ipMasqAgent .Values.global.ipMasqAgent.enabled }}
      - configMap:
          name: ip-masq-agent
          optional: true
          items:
          - key: config
            path: ip-masq-agent
        name: ip-masq-agent
{{- end }}
{{- if .Values.global.encryption.enabled }}
      - name: cilium-ipsec-secrets
        secret:
          secretName: {{ .Values.global.encryption.secretName }}
{{- end }}
{{- if .Values.global.cni.configMap }}
      - name: cni-configuration
        configMap:
          name: {{ .Values.global.cni.configMap }}
{{- end }}
{{- if and (.Values.global.hubble.enabled) (.Values.global.hubble.listenAddress) (.Values.global.hubble.tls.enabled) }}
      - name: hubble-tls
        projected:
          sources:
          - secret:
              name: hubble-server-certs
              items:
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
          - configMap:
              name: hubble-ca-cert
              items:
                - key: tls.crt
                  path: client-ca.crt
{{- end}}
  updateStrategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
    type: RollingUpdate
