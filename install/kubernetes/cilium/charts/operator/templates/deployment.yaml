apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
{{- if and .Values.global.prometheus.enabled (not .Values.global.prometheus.serviceMonitor.enabled) }}
        prometheus.io/port: {{ .Values.global.operatorPrometheus.port | quote }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: cilium-aws
              optional: true
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: cilium-aws
              optional: true
        - name: AWS_DEFAULT_REGION
          valueFrom:
            secretKeyRef:
              key: AWS_DEFAULT_REGION
              name: cilium-aws
              optional: true
{{- if .Values.global.k8sServiceHost }}
        - name: KUBERNETES_SERVICE_HOST
          value: {{ .Values.global.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.global.k8sServicePort }}
        - name: KUBERNETES_SERVICE_PORT
          value: {{ .Values.global.k8sServicePort | quote }}
{{- end }}
{{- if contains "/" .Values.image }}
        image: "{{ .Values.image }}"
{{- else }}
        image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        name: cilium-operator
{{- if .Values.global.prometheus.enabled }}
        ports:
        - containerPort: {{ .Values.global.operatorPrometheus.port }}
          hostPort: {{ .Values.global.operatorPrometheus.port }}
          name: prometheus
          protocol: TCP
{{- end }}
        livenessProbe:
          httpGet:
{{- if .Values.global.ipv4.enabled }}
            host: '127.0.0.1'
{{- else }}
            host: '[::1]'
{{- end }}
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
{{- if .Values.global.etcd.enabled }}
        - mountPath: /var/lib/etcd-config
          name: etcd-config-path
          readOnly: true
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
        - mountPath: /var/lib/etcd-secrets
          name: etcd-secrets
          readOnly: true
{{- end }}
{{- end }}
{{- if .Values.global.kubeConfigPath }}
        - mountPath: {{ .Values.global.kubeConfigPath }}
          name: kube-config
          readOnly: true
{{- end}}
        resources:
          {{- toYaml .Values.resources | trim | nindent 10 }}
      hostNetwork: true
{{- if .Values.global.etcd.managed }}
      # In managed etcd mode, Cilium must be able to resolve the DNS name of
      # the etcd service
      dnsPolicy: ClusterFirstWithHostNet
{{- end }}
      restartPolicy: Always
{{- if and (eq .Release.Namespace "kube-system") (or (gt .Capabilities.KubeVersion.Minor "10") (gt .Capabilities.KubeVersion.Major "1"))}}
      priorityClassName: system-cluster-critical
{{- end }}
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      volumes:
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
{{- if .Values.global.etcd.enabled }}
      # To read the etcd config stored in config maps
      - configMap:
          defaultMode: 420
          items:
          - key: etcd-config
            path: etcd.config
          name: cilium-config
        name: etcd-config-path
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
        # To read the k8s etcd secrets in case the user might want to use TLS
      - name: etcd-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-etcd-secrets
{{- end }}
{{- end }}
{{- if .Values.global.kubeConfigPath }}
      - hostPath:
          path: {{ .Values.global.kubeConfigPath }}
          type: FileOrCreate
        name: kube-config
{{- end }}
