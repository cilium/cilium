kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: cilium-node-init
  namespace: {{ .Release.Namespace }}
  labels:
    app: cilium-node-init
spec:
  selector:
    matchLabels:
      app: cilium-node-init
  template:
    metadata:
      labels:
        app: cilium-node-init
    spec:
      tolerations:
      - operator: Exists
      hostPID: true
      hostNetwork: true
      containers:
        - name: node-init
          image: gcr.io/google-containers/startup-script:v1
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
{{- if .Values.revertReconfigureKubelet }}
          lifecycle:
            preStop:
              exec:
                command:
                  - "nsenter"
                  - "-t"
                  - "1"
                  - "-m"
                  - "--"
                  - "/bin/sh"
                  - "-c"
                  - |
                    #!/bin/bash

                    set -o errexit
                    set -o pipefail
                    set -o nounset

                    if stat /tmp/node-deinit.cilium.io > /dev/null 2>&1; then
                      exit 0
                    fi

                    echo "Waiting on pods to stop..."
                    if grep -q 'docker' /etc/crictl.yaml; then
                      # Works for COS, ubuntu
                      while docker ps | grep -v "node-init" | grep -q "POD_cilium"; do sleep 1; done
                    else
                      # COS-beta (with containerd)
                      while crictl ps | grep -v "node-init" | grep -q "POD_cilium"; do sleep 1; done
                    fi

                    systemctl disable sys-fs-bpf.mount || true
                    systemctl stop sys-fs-bpf.mount || true

                    if ip link show cilium_host; then
                      echo "Deleting cilium_host interface..."
                      ip link del cilium_host
                    fi

{{- if not (eq .Values.global.nodeinit.bootstrapFile "") }}
                    rm -f {{ .Values.global.nodeinit.bootstrapFile }}
{{- end }}

                    rm -f /tmp/node-init.cilium.io
                    touch /tmp/node-deinit.cilium.io

{{- if .Values.reconfigureKubelet }}
                    echo "Changing kubelet configuration to --network-plugin=kubenet"
                    sed -i "s:--network-plugin=cni\ --cni-bin-dir={{ .Values.global.cni.binPath }}:--network-plugin=kubenet:g" /etc/default/kubelet
                    echo "Restarting kubelet..."
                    systemctl restart kubelet
{{- end }}

                    echo "Node de-initialization complete"
{{- end }}
          env:
          - name: CHECKPOINT_PATH
            value: /tmp/node-init.cilium.io
          # STARTUP_SCRIPT is the script run on node bootstrap. Node
          # bootstrapping can be customized in this script.
          - name: STARTUP_SCRIPT
            value: |
              #!/bin/bash

              set -o errexit
              set -o pipefail
              set -o nounset

              mount | grep "/sys/fs/bpf type bpf" || {
                # Mount the filesystem until next reboot
                echo "Mounting BPF filesystem..."
                mount bpffs /sys/fs/bpf -t bpf

                # Configure systemd to mount after next boot
                echo "Installing BPF filesystem mount"
                cat >/tmp/sys-fs-bpf.mount <<EOF
              [Unit]
              Description=Mount BPF filesystem (Cilium)
              Documentation=http://docs.cilium.io/
              DefaultDependencies=no
              Before=local-fs.target umount.target
              After=swap.target

              [Mount]
              What=bpffs
              Where=/sys/fs/bpf
              Type=bpf

              [Install]
              WantedBy=multi-user.target
              EOF

                if [ -d "/etc/systemd/system/" ]; then
                  mv /tmp/sys-fs-bpf.mount /etc/systemd/system/
                  echo "Installed sys-fs-bpf.mount to /etc/systemd/system/"
                elif [ -d "/lib/systemd/system/" ]; then
                  mv /tmp/sys-fs-bpf.mount /lib/systemd/system/
                  echo "Installed sys-fs-bpf.mount to /lib/systemd/system/"
                fi

                # Ensure that filesystem gets mounted on next reboot
                systemctl enable sys-fs-bpf.mount
                systemctl start sys-fs-bpf.mount
              }

              echo "Link information:"
              ip link

              echo "Routing table:"
              ip route

              echo "Addressing:"
              ip -4 a
              ip -6 a

{{- if .Values.azure }}
              # Azure specific: Transparent bridge mode is required in order
              # for proxy-redirection to work
              until [ -f /var/run/azure-vnet.json ]; do
                echo waiting for azure-vnet to be created
                sleep 1s
              done
              if [ -f /var/run/azure-vnet.json ]; then
                sed -i 's/"Mode": "bridge",/"Mode": "transparent",/g' /var/run/azure-vnet.json
              fi
{{- end }}

{{- if .Values.removeCbrBridge }}
              if ip link show cbr0; then
                echo "Detected cbr0 bridge. Deleting interface..."
                ip link del cbr0
              fi
{{- end }}

{{- if .Values.reconfigureKubelet }}
              # GKE: Alter the kubelet configuration to run in CNI mode
              echo "Changing kubelet configuration to --network-plugin=cni --cni-bin-dir={{ .Values.global.cni.binPath }}"
              mkdir -p {{ .Values.global.cni.binPath }}
              sed -i "s:--network-plugin=kubenet:--network-plugin=cni\ --cni-bin-dir={{ .Values.global.cni.binPath }}:g" /etc/default/kubelet
              echo "Restarting kubelet..."
              systemctl restart kubelet
{{- end }}

{{- if not (eq .Values.global.nodeinit.bootstrapFile "") }}
              date > {{ .Values.global.nodeinit.bootstrapFile }}
{{- end }}

{{- if .Values.restartPods }}
              echo "Restarting kubenet managed pods"
              if grep -q 'docker' /etc/crictl.yaml; then
                # Works for COS, ubuntu
                for f in `find /var/lib/cni/networks/ -type f ! -name lock ! -name last_reserved_ip.0`; do docker rm -f $(cat $f) || true; done
              elif [ -n "$(docker ps --format '{{ "{{" }}.Image{{ "}}" }}' | grep ^[0-9]*\.dkr\.ecr\.[a-z]*-[a-z]*-[0-9]*\.amazonaws\.com/amazon-k8s-cni)" ]; then
                timeout=1
                for i in $(seq 1 7); do
                  echo "Checking introspection API"
                  curl localhost:61679 && retry=false || retry=true
                  if [ $retry == false ]; then break ; fi
                  sleep "$timeout"
                  timeout=$(($timeout * 2))
                done

                for pod in $(curl "localhost:61679/v1/pods" 2> /dev/null | jq -r '. | keys[]'); do
                  container_id=$(echo "$pod" | awk -F_ ' { print $3 } ' | cut -c1-12)
                  echo "Restarting ${container_id}"
                  docker kill "${container_id}" || true
                done
              else
                # COS-beta (with containerd)
                for f in `find /var/lib/cni/networks/ -type f ! -name lock ! -name last_reserved_ip.0`; do crictl stopp $(cat $f) || true; done
              fi
{{- end }}

{{- if .Values.revertReconfigureKubelet }}
              rm -f /tmp/node-deinit.cilium.io
{{- end }}
              echo "Node initialization complete"
