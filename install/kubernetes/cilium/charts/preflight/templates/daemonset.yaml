apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium-pre-flight-check
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      k8s-app: cilium-pre-flight-check
      kubernetes.io/cluster-service: "true"
  template:
    metadata:
      labels:
        k8s-app: cilium-pre-flight-check
        kubernetes.io/cluster-service: "true"
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "k8s-app"
                operator: In
                values:
                - cilium
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: clean-cilium-state
{{- if contains "/" .Values.image }}
          image: "{{ .Values.image }}"
{{- else }}
          image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          command: ["/bin/echo"]
          args:
          - "hello"
      containers:
{{- if contains "/" .Values.image }}
        - image: "{{ .Values.image }}"
{{- else }}
        - image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          name: cilium-pre-flight-check
          command: ["/bin/sh"]
          args:
          - -c
          - "touch /tmp/ready; sleep 1h"
          livenessProbe:
            exec:
              command:
              - cat
              - /tmp/ready
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - cat
              - /tmp/ready
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
          - mountPath: /var/run/cilium
            name: cilium-run
{{- if .Values.global.etcd.enabled }}
          - mountPath: /var/lib/etcd-config
            name: etcd-config-path
            readOnly: true
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
          - mountPath: /var/lib/etcd-secrets
            name: etcd-secrets
            readOnly: true
{{- end }}
{{- end }}

{{- if ne .Values.tofqdnsPreCache "" }}
{{- if contains "/" .Values.image }}
        - image: "{{ .Values.image }}"
{{- else }}
        - image: "{{ .Values.global.registry }}/{{ .Values.image }}:{{ .Values.global.tag }}"
{{- end }}
          imagePullPolicy: {{ .Values.global.pullPolicy }}
          name: cilium-pre-flight-fqdn-precache
          command: ["/bin/sh"]
          args:
          - -c
          - "cilium preflight fqdn-poller --tofqdns-pre-cache {{ .Values.tofqdnsPreCache }} && touch /tmp/ready-tofqdns-precache"
          livenessProbe:
            exec:
              command:
              - cat
              - /tmp/read-tofqdns-precachey
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
              - cat
              - /tmp/read-tofqdns-precachey
            initialDelaySeconds: 5
            periodSeconds: 5
          env:
{{- if .Values.global.k8sServiceHost }}
          - name: KUBERNETES_SERVICE_HOST
            value: {{ .Values.global.k8sServiceHost | quote }}
{{- end }}
{{- if .Values.global.k8sServicePort }}
          - name: KUBERNETES_SERVICE_PORT
            value: {{ .Values.global.k8sServicePort | quote }}
{{- end }}
          volumeMounts:
          - mountPath: /var/run/cilium
            name: cilium-run
{{- if .Values.global.etcd.enabled }}
          - mountPath: /var/lib/etcd-config
            name: etcd-config-path
            readOnly: true
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
          - mountPath: /var/lib/etcd-secrets
            name: etcd-secrets
            readOnly: true
{{- end }}
{{- end }}
{{- end }}
      hostNetwork: true
      # This is here to seamlessly allow migrate-identity to work with
      # etcd-operator setups. The assumption is that other cases would also
      # work since the cluster DNS would forward the request on.
      # This differs from the cilium-agent daemonset, where this is only
      # enabled when global.etcd.managed=true
      dnsPolicy: ClusterFirstWithHostNet
      restartPolicy: Always
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node.cloudprovider.kubernetes.io/uninitialized
          value: "true"
        - key: CriticalAddonsOnly
          operator: "Exists"
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
{{- if .Values.global.etcd.enabled }}
        # To read the etcd config stored in config maps
      - configMap:
          defaultMode: 420
          items:
          - key: etcd-config
            path: etcd.config
          name: cilium-config
        name: etcd-config-path
        # To read the k8s etcd secrets in case the user might want to use TLS
{{- if or .Values.global.etcd.ssl .Values.global.etcd.managed }}
      - name: etcd-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-etcd-secrets
{{- end }}
{{- end }}

