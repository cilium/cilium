name: Smoke test

on:
  pull_request: {}
  push:
    branches:
      - master
env:
  KIND_VERSION: v0.8.1
  KIND_CONFIG: .github/kind-config.yaml
  CONFORMANCE_TEMPLATE: examples/kubernetes/connectivity-check/connectivity-check.yaml

jobs:
  preflight-clusterrole:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check pre-flight clusterrole
        run: |
          cd install/kubernetes/cilium/charts
          echo "Checking for differences between preflight and agent clusterrole"
          diff \
             -I '^[ ]\{2\}name: cilium.*' \
             -I '^Keep file in synced with.*' \
             agent/templates/clusterrole.yaml \
             preflight/templates/clusterrole.yaml

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Run helm lint
        run: |
          make -C install/kubernetes lint

  quick-install:
    strategy:
      matrix:
        target:
          - name: quick-install
            template: install/kubernetes/quick-install.yaml
          - name: experimental-install
            template: install/kubernetes/experimental-install.yaml
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Check ${{ matrix.target.template }}
        run: |
          make -C install/kubernetes ${{ matrix.target.name }}
          git diff --exit-code

      - name: Create kind cluster
        uses: helm/kind-action@v1.0.0-rc.1
        with:
          version: ${{ env.KIND_VERSION }}
          config: ${{ env.KIND_CONFIG }}

      - name: Run ${{ matrix.target.name }}
        run: |
          kubectl apply -f ${{ matrix.target.template }}
          kubectl wait -n kube-system --for=condition=Ready --all pod --timeout=5m
          # To make sure that cilium CRD is available (default timeout is 5m)
          # https://github.com/cilium/cilium/blob/master/operator/crd.go#L34
          kubectl wait --for condition=Established crd/ciliumnetworkpolicies.cilium.io --timeout=5m

      - name: Run conformance test (e.g. connectivity check)
        run: |
          kubectl apply -f ${{ env.CONFORMANCE_TEMPLATE }}
          kubectl wait --for=condition=Available --all deployment --timeout=5m

      - name: Dump cilium related logs and events
        if: ${{ failure() }}
        env:
          LOG_TIME: 30m
        run: |
          kubectl -n kube-system describe daemonsets.apps cilium
          kubectl -n kube-system logs daemonset/cilium --all-containers --since=$LOG_TIME

      - name: Dump connectivity related logs and events
        if: ${{ failure() }}
        env:
          LOG_TIME: 30m
        run: |
          kubectl describe service echo-a
          kubectl logs service/echo-a --all-containers --since=$LOG_TIME
          kubectl describe service echo-b
          kubectl logs service/echo-b --all-containers --since=$LOG_TIME
          kubectl describe service echo-b-headless
          kubectl logs service/echo-b-headless --all-containers --since=$LOG_TIME
          kubectl describe service echo-b-host-headless
          kubectl logs service/echo-b-host-headless --all-containers --since=$LOG_TIME

      - name: Dump hubble related logs and events
        if: ${{ failure() &&  matrix.target.name == 'experimental-install' }}
        env:
          LOG_TIME: 30m
        run: |
          kubectl -n kube-system describe service hubble-metrics
          kubectl -n kube-system logs service/hubble-metrics --all-containers --since=$LOG_TIME
          kubectl -n kube-system describe service hubble-relay
          kubectl -n kube-system logs service/hubble-relay --all-containers --since=$LOG_TIME
          kubectl -n kube-system describe service hubble-ui
          kubectl -n kube-system logs service/hubble-ui --all-containers --since=$LOG_TIME

  conformance-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build docker images
        run: |
          make docker-image-no-clean
          make docker-operator-generic-image

      - name: Create kind cluster
        uses: helm/kind-action@v1.0.0-rc.1
        with:
          version: ${{ env.KIND_VERSION }}
          config: ${{ env.KIND_CONFIG }}

      - name: Load local images into kind cluster
        run: |
          kind load docker-image --name chart-testing cilium/cilium:latest
          kind load docker-image --name chart-testing cilium/operator-generic:latest

      - name: Install cilium chart
        run: |
          helm install cilium ./install/kubernetes/cilium \
             --wait \
             --namespace kube-system \
             --set global.nodeinit.enabled=true \
             --set global.kubeProxyReplacement=partial \
             --set global.hostServices.enabled=false \
             --set global.externalIPs.enabled=true \
             --set global.nodePort.enabled=true \
             --set global.hostPort.enabled=true \
             --set config.ipam=kubernetes \
             --set global.pullPolicy=Never

          kubectl wait -n kube-system --for=condition=Ready --all pod --timeout=5m
          # To make sure that cilium CRD is available (default timeout is 5m)
          # https://github.com/cilium/cilium/blob/master/operator/crd.go#L34
          kubectl wait --for condition=Established crd/ciliumnetworkpolicies.cilium.io --timeout=5m

      - name: Run conformance test (e.g. connectivity check)
        run: |
          kubectl apply -f ${{ env.CONFORMANCE_TEMPLATE }}
          kubectl wait --for=condition=Available --all deployment --timeout=5m

      - name: Dump cilium related logs and events
        if: ${{ failure() }}
        env:
          LOG_TIME: 30m
        run: |
          kubectl -n kube-system describe daemonsets.apps cilium
          kubectl -n kube-system logs daemonset/cilium --all-containers --since=$LOG_TIME

      - name: Dump connectivity related logs and events
        if: ${{ failure() }}
        env:
          LOG_TIME: 30m
        run: |
          kubectl describe service echo-a
          kubectl logs service/echo-a --all-containers --since=$LOG_TIME
          kubectl describe service echo-b
          kubectl logs service/echo-b --all-containers --since=$LOG_TIME
          kubectl describe service echo-b-headless
          kubectl logs service/echo-b-headless --all-containers --since=$LOG_TIME
          kubectl describe service echo-b-host-headless
          kubectl logs service/echo-b-host-headless --all-containers --since=$LOG_TIME
