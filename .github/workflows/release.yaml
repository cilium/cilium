name: Release Tool

on:
  workflow_dispatch:
    inputs:
      step:
        description: 'Which step do you want to (re-)run?'
        required: true
        type: choice
        options:
          - 2-prepare-release
          - 4-post-release
          - 5-publish-helm
      version:
        description: 'Which version are you releasing? (e.g. vX.Y.Z[-(pre|rc).W])'
        required: true
        type: string
        default: vX.Y.Z

  workflow_call:
    inputs:
      step:
        description: 'Which step do you want to (re-)run?'
        required: true
        type: string
      version:
        description: 'Which version are you releasing? (e.g. vX.Y.Z[-(pre|rc).W])'
        required: true
        type: string

permissions:
  # To be able to access the repository with `actions/checkout`
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.version }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    environment: release-tool
    timeout-minutes: 40
    runs-on: ubuntu-24.04
    steps:
      - name: Install Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.25.0

      - name: Install helm
        if: ${{ github.event.inputs.step == '5-publish-helm' }}
        shell: bash
        run: |
          # We don't want renovate to update this version, because we want to
          # use a specific version of helm for the release tool to avoid
          # breaking the release process.
          HELM_VERSION=v3.18.5
          wget "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz"
          tar -xf "helm-${HELM_VERSION}-linux-amd64.tar.gz"
          sudo mv ./linux-amd64/helm /usr/local/bin

      - name: Get token
        id: get_token
        uses: cilium/actions-app-token@61a6271ce92ba02f49bf81c755685d59fb25a59a # v0.21.1
        with:
          APP_PEM: ${{ secrets.CILIUM_RELEASE_BOT_PEM }}
          APP_ID: ${{ secrets.CILIUM_RELEASE_BOT_APP_ID }}

      - name: Authenticate with GH CLI
        run: |
          gh auth login --with-token <<< "${{ steps.get_token.outputs.app_token }}"

      - name: Checkout release tool
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          repository: cilium/release
          path: "./release"

      - name: Move release source code to upper directory
        run: mv release ../

      - name: Checkout helm chart
        if: ${{ github.event.inputs.step == '5-publish-helm' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          repository: cilium/charts
          path: "./cilium-charts"

      - name: Set up charts repository git configuration
        if: ${{ github.event.inputs.step == '5-publish-helm' }}
        shell: bash
        run: |
          mv cilium-charts ../charts
          cd ../charts
          git config user.name "Cilium Release Bot"
          git config user.email "noreply@cilium.io"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.app_token }}@github.com/cilium/charts.git
          git remote set-head origin --auto

      - name: Checkout cilium source code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Build release tool
        shell: bash
        run: |
          cd ../release
          make

      - name: Set-up git
        run: |
          git config user.name "Cilium Release Bot"
          git config user.email "noreply@cilium.io"
          git remote set-url origin https://x-access-token:${{ steps.get_token.outputs.app_token }}@github.com/${{ github.repository }}.git

      - name: Run release tool
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.get_token.outputs.app_token }}"
          ORG: "${{ github.repository_owner }}"
        run: |
          cd ../release
          ./release start \
            --force \
            --release-tool-dir "$(pwd)" \
            --charts-repo-dir "$(pwd)/../charts" \
            --repo-dir "$(pwd)/../cilium" \
            --repo ${{ github.repository }} \
            --target-version ${{ github.event.inputs.version }} \
            --steps ${{ github.event.inputs.step }} \
            --exclude-labels "cilium-cli-exclusive"

      - name: Wait for helm chart PR checks and merge
        if: ${{ github.event.inputs.step == '5-publish-helm' }}
        shell: bash
        env:
          GITHUB_TOKEN: "${{ steps.get_token.outputs.app_token }}"
          VERSION: ${{ github.event.inputs.version }}
        run: |
          echo "🔄 Waiting for helm chart PR checks and merging for version $VERSION"

          # Find the PR for this release
          BRANCH="pr/prepare-$VERSION"
          echo "Looking for PR from branch: $BRANCH"

          # Wait for PR to exist (in case it was just created)
          MAX_WAIT=300  # 5 minutes
          WAIT_TIME=0
          PR_NUMBER=""

          while [ $WAIT_TIME -lt $MAX_WAIT ]; do
            PR_NUMBER=$(gh pr list --repo cilium/charts --head "$BRANCH" --state open --json number --jq '.[0].number // empty')
            if [ -n "$PR_NUMBER" ]; then
              echo "Found PR #$PR_NUMBER"
              break
            fi
            echo "Waiting for PR to be created..."
            sleep 10
            WAIT_TIME=$((WAIT_TIME + 10))
          done

          if [ -z "$PR_NUMBER" ]; then
            echo "❌ No PR found for branch $BRANCH after waiting $MAX_WAIT seconds"
            echo "Available PRs:"
            gh pr list --repo cilium/charts --state open || echo "Failed to list PRs"
            exit 1
          fi

          # Wait for checks to complete
          echo "⏳ Waiting for PR checks to complete..."
          sleep 30  # Initial wait to allow checks to start
          if ! gh pr checks $PR_NUMBER --repo cilium/charts --fail-fast --required --watch; then
            echo "❌ PR #$PR_NUMBER has failed checks"
            echo "📋 Failed workflow details:"
            gh pr checks $PR_NUMBER --repo cilium/charts --json name,state,link | jq -r '.[] | select(.state == "FAILURE") | "  - \(.name): \(.state) (\(.link // "No URL"))"'
            exit 1
          fi

          echo "✅ All required checks passed for PR #$PR_NUMBER"

          # Merge the PR
          echo "Merging PR #$PR_NUMBER..."
          if gh pr merge $PR_NUMBER --repo cilium/charts --rebase --delete-branch; then
            echo "✅ Successfully merged PR #$PR_NUMBER"
          else
            echo "❌ Failed to merge PR #$PR_NUMBER"
            exit 1
          fi
