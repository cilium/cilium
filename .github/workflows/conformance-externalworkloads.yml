name: External workloads (ci-external-workloads)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  issue_comment:
    types:
      - created
  # Run every 6 hours
  schedule:
    - cron:  '0 4/6 * * *'
  ### FOR TESTING PURPOSES
  # pull_request:
  #  types:
  #    - "labeled"
  ###

concurrency:
  # In case of PR comment, we can't simply append the comment to the group name
  # as that is too long and results in an error. Instead we check if it's a
  # trigger phrase and append a simple 'trigger-phrase'.
  group: |
    "${{ github.workflow }} ${{ github.event.issue.pull_request.url || 'scheduled' }}
     ${{ (startsWith(github.event.comment.body, 'ci-external-workloads') ||
          startsWith(github.event.comment.body, 'test-me-please')) && 'trigger-phrase' }}"
  cancel-in-progress: true

env:
  clusterName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-vm
  zone: us-west2-a
  vmName: ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.run_id }}-vm
  vmStartupScript: |
    #!/bin/bash

    apt-get update
    apt-get install -y --no-install-recommends \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release

    HOSTNAME=$(curl --silent http://metadata.google.internal/computeMetadata/v1/instance/attributes/hostname -H "Metadata-Flavor: Google")
    echo "Setting hostname $HOSTNAME"
    hostname $HOSTNAME

    echo "Installing docker"
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo \
      "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    apt-get install -y --no-install-recommends \
      docker-ce \
      docker-ce-cli \
      containerd.io

    echo "Adding user $USER to group docker"
    usermod -aG docker $USER
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  check_changes:
    name: Deduce required tests from code changes
    if: |
      (github.event.issue.pull_request && (
        startsWith(github.event.comment.body, 'ci-external-workloads') ||
        (startsWith(github.event.comment.body, 'test-me-please'))
      )) ||
      (github.event_name == 'schedule' && github.repository == 'cilium/cilium') ||
      github.event.label.name == 'ci-run/external-workloads'
    runs-on: ubuntu-latest
    outputs:
      tested: ${{ steps.tested-tree.outputs.src }}
    steps:
      - name: Retrieve pull request's base and head
        if: ${{ github.event.issue.pull_request }}
        id: pr
        run: |
          curl ${{ github.event.issue.pull_request.url }} > pr.json
          echo "::set-output name=base::$(jq -r '.base.sha' pr.json)"
          echo "::set-output name=head::$(jq -r '.head.sha' pr.json)"
      # Because we run on issue comments, we need to checkout the code for
      # paths-filter to work.
      - name: Checkout code
        if: ${{ github.event.issue.pull_request }}
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
        with:
          persist-credentials: false
      - name: Check code changes
        if: ${{ github.event.issue.pull_request }}
        uses: dorny/paths-filter@78ab00f87740f82aec8ed8826eb4c3c851044126
        id: tested-tree
        with:
          base: ${{ steps.pr.outputs.base }}
          ref: ${{ steps.pr.outputs.head }}
          filters: |
            src:
              - '!(test|Documentation)/**'

  # When the test-me-please trigger is used, this job is skipped if the only
  # modified files were under test/ or Documentation/.
  installation-and-connectivity:
    needs: check_changes
    if: |
      (github.event.issue.pull_request && (
        startsWith(github.event.comment.body, 'ci-external-workloads') ||
        (startsWith(github.event.comment.body, 'test-me-please'))
      )) ||
      (github.event_name == 'schedule' && github.repository == 'cilium/cilium') ||
      github.event.label.name == 'ci-run/external-workloads'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Set up job variables
        id: vars
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            PR_API_JSON=$(curl \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              ${{ github.event.issue.pull_request.url || github.event.pull_request.url }})
            SHA=$(echo "$PR_API_JSON" | jq -r ".head.sha")
            OWNER=$(echo "$PR_API_JSON" | jq -r ".number")
          else
            SHA=${{ github.sha }}
            OWNER=${{ github.sha }}
          fi

          CILIUM_INSTALL_DEFAULTS="--cluster-name=${{ env.clusterName }} \
            --agent-image=quay.io/${{ github.repository_owner }}/cilium-ci \
            --operator-image=quay.io/${{ github.repository_owner }}/operator-generic-ci \
            --version=${SHA} \
            --wait=false \
            --config monitor-aggregation=none \
            --restart-unmanaged-pods=false \
            --config tunnel=vxlan"
          echo ::set-output name=cilium_install_defaults::${CILIUM_INSTALL_DEFAULTS}
          echo ::set-output name=sha::${SHA}
          echo ::set-output name=owner::${OWNER}

      - name: Set commit status to pending
        uses: Sibz/github-status-action@67af1f4042a5a790681aad83c44008ca6cfab83d
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.vars.outputs.sha }}
          context: ${{ github.workflow }}
          description: Connectivity test in progress...
          state: pending
          target_url: ${{ env.check_url }}

      - name: Install Cilium CLI
        run: |
          curl -LO https://github.com/cilium/cilium-cli/releases/download/v0.8.1/cilium-linux-amd64.tar.gz
          sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/bin
          rm cilium-linux-amd64.tar.gz

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@daadedc81d5f9d3c06d2c92f49202a3cc2b919ba
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_PR_SA_KEY }}
          export_default_credentials: true

      - name: Display gcloud CLI info
        run: |
          gcloud info

      - name: Create GKE cluster
        run: |
          gcloud container clusters create ${{ env.clusterName }} \
            --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
            --zone ${{ env.zone }} \
            --image-type COS_CONTAINERD \
            --num-nodes 2 \
            --machine-type e2-custom-2-4096 \
            --disk-type pd-standard \
            --disk-size 10GB \
            --preemptible

      - name: Get cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.clusterName }} --zone ${{ env.zone }}

      - name: Create GCP VM
        run: |
          gcloud compute instances create ${{ env.vmName }} \
            --labels "usage=${{ github.repository_owner }}-${{ github.event.repository.name }},owner=${{ steps.vars.outputs.owner }}" \
            --zone ${{ env.zone }} \
            --machine-type e2-custom-2-4096 \
            --disk-type pd-standard \
            --disk-size 10GB \
            --preemptible \
            --image-project ubuntu-os-cloud \
            --image-family ubuntu-2010 \
            --metadata hostname=${{ env.vmName }} \
            --metadata startup-script=${{ env.vmStartupScript }}

      - name: Wait for images to be available
        timeout-minutes: 10
        shell: bash
        run: |
          until curl --silent -f -lSL "https://quay.io/api/v1/repository/${{ github.repository_owner }}/cilium-ci/tag/${{ steps.vars.outputs.sha }}/images" &> /dev/null; do sleep 45s; done
          until curl --silent -f -lSL "https://quay.io/api/v1/repository/${{ github.repository_owner }}/operator-generic-ci/tag/${{ steps.vars.outputs.sha }}/images" &> /dev/null; do sleep 45s; done

      - name: Install Cilium in cluster
        run: |
          cilium install ${{ steps.vars.outputs.cilium_install_defaults }}

      - name: Wait for Cilium status to be ready
        run: |
          cilium status --wait

      - name: Enable cluster mesh
        run: |
          cilium clustermesh enable --apiserver-image=quay.io/${{ github.repository_owner }}/clustermesh-apiserver-ci --apiserver-version=${{ steps.vars.outputs.sha }}

      - name: Wait for cluster mesh status to be ready
        run: |
          cilium clustermesh status --wait

      - name: Add VM to cluster mesh
        run: |
          cilium clustermesh vm create ${{ env.vmName }} -n default --ipv4-alloc-cidr 10.192.1.0/30
          cilium clustermesh vm status

      - name: Install Cilium on VM
        run: |
          cilium clustermesh vm install install-external-workload.sh
          gcloud compute scp install-external-workload.sh ${{ env.vmName }}:~/ --zone ${{ env.zone }}
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "~/install-external-workload.sh"
          sleep 5s
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "cilium status"

      - name: Verify cluster DNS on VM
        run: |
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "nslookup -norecurse clustermesh-apiserver.kube-system.svc.cluster.local"

      - name: Ping clustermesh-apiserver from VM
        run: |
          gcloud compute ssh ${{ env.vmName }} --zone ${{ env.zone }} \
            --command "ping -c 3 \$(cilium service list get -o jsonpath='{[?(@.spec.flags.name==\"clustermesh-apiserver\")].spec.backend-addresses[0].ip}')"

      - name: Run connectivity test
        run: |
          cilium connectivity test

      - name: Post-test information gathering
        if: ${{ failure() }}
        run: |
          cilium status
          cilium clustermesh status
          cilium clustermesh vm status
          kubectl get pods --all-namespaces -o wide
          kubectl get cew --all-namespaces -o wide
          kubectl get cep --all-namespaces -o wide
          curl -sLO https://github.com/cilium/cilium-sysdump/releases/latest/download/cilium-sysdump.zip
          python cilium-sysdump.zip --output cilium-sysdump-out
        shell: bash {0}

      - name: Clean up GKE cluster and VM
        if: ${{ always() }}
        run: |
          gcloud container clusters delete ${{ env.clusterName }} --zone ${{ env.zone }} --quiet --async
          gcloud compute instances delete ${{ env.vmName }} --zone ${{ env.zone }} --quiet
        shell: bash {0}

      - name: Upload artifacts
        if: ${{ failure() }}
        uses: actions/upload-artifact@ee69f02b3dfdecd58bb31b4d133da38ba6fe3700
        with:
          name: cilium-sysdump-out.zip
          path: cilium-sysdump-out.zip
          retention-days: 5

      - name: Set commit status to success
        if: ${{ success() }}
        uses: Sibz/github-status-action@67af1f4042a5a790681aad83c44008ca6cfab83d
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.vars.outputs.sha }}
          context: ${{ github.workflow }}
          description: Connectivity test successful
          state: success
          target_url: ${{ env.check_url }}

      - name: Set commit status to failure
        if: ${{ failure() }}
        uses: Sibz/github-status-action@67af1f4042a5a790681aad83c44008ca6cfab83d
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.vars.outputs.sha }}
          context: ${{ github.workflow }}
          description: Connectivity test failed
          state: failure
          target_url: ${{ env.check_url }}

      - name: Set commit status to cancelled
        if: ${{ cancelled() }}
        uses: Sibz/github-status-action@67af1f4042a5a790681aad83c44008ca6cfab83d
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ steps.vars.outputs.sha }}
          context: ${{ github.workflow }}
          description: Connectivity test cancelled
          state: pending
          target_url: ${{ env.check_url }}

      - name: Send slack notification
        if: ${{ (cancelled() || failure()) && (github.event_name == 'schedule' || github.event_name == 'push') }}
        uses: 8398a7/action-slack@dcc8c8e9dd8802e21a712dc0c003db97b42efe43
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
