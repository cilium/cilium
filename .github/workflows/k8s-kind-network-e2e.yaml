name: K8s Network E2E tests and kube-apiserver HA

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request: {}
  push:
    branches:
      - main
      - ft/main/**

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

env:
  cluster_name: cilium-testing

jobs:
  check_changes:
    name: Deduce required tests from code changes
    runs-on: ubuntu-24.04
    outputs:
      tested: ${{ steps.tested-tree.outputs.src }}
    steps:
      - name: Checkout code
        if: ${{ !github.event.pull_request }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Check code changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: tested-tree
        with:
          # For `push` events, compare against the `ref` base branch
          # For `pull_request` events, this is ignored and will compare against the pull request base branch
          base: ${{ github.ref }}
          filters: |
            src:
              - '!(test|Documentation)/**'

  kubernetes-e2e:
    name: K8s Network E2E tests
    needs: check_changes
    if: ${{ needs.check_changes.outputs.tested == 'true' }}
    runs-on: ${{ vars.GH_RUNNER_EXTRA_POWER_UBUNTU_LATEST || 'ubuntu-24.04' }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        # TODO add "ipv6", "ipv6" fails to install cilium
        ipFamily: ["dual"]
    env:
      IP_FAMILY: ${{ matrix.ipFamily }}
      job_name: "Installation and Conformance Test"

    steps:
      - name: Collect Workflow Telemetry
        uses: catchpoint/workflow-telemetry-action@94c3c3d9567a0205de6da68a76c428ce4e769af1 # v2.0.0
        with:
          comment_on_pr: false

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Enable ipv4 and ipv6 forwarding
        run: |
          sudo sysctl -w net.ipv6.conf.all.forwarding=1
          sudo sysctl -w net.ipv4.ip_forward=1

      - name: Set up environment (download Kubernetes dependencies)
        run: |
          TMP_DIR=$(mktemp -d)
          # Test binaries
          curl -L https://dl.k8s.io/${{ env.KIND_K8S_VERSION }}/kubernetes-test-linux-amd64.tar.gz -o ${TMP_DIR}/kubernetes-test-linux-amd64.tar.gz
          tar -xvzf ${TMP_DIR}/kubernetes-test-linux-amd64.tar.gz \
            --directory ${TMP_DIR} \
            --strip-components=3 kubernetes/test/bin/ginkgo kubernetes/test/bin/e2e.test
          # kubectl
          curl -L https://dl.k8s.io/${{ env.KIND_K8S_VERSION }}/bin/linux/amd64/kubectl -o ${TMP_DIR}/kubectl
          # kind
          curl -Lo ${TMP_DIR}/kind https://kind.sigs.k8s.io/dl/${{ env.KIND_VERSION }}/kind-linux-amd64
          # Install
          sudo cp ${TMP_DIR}/ginkgo /usr/local/bin/ginkgo
          sudo cp ${TMP_DIR}/e2e.test /usr/local/bin/e2e.test
          sudo cp ${TMP_DIR}/kubectl /usr/local/bin/kubectl
          sudo cp ${TMP_DIR}/kind /usr/local/bin/kind
          sudo chmod +x /usr/local/bin/ginkgo /usr/local/bin/e2e.test /usr/local/bin/kubectl /usr/local/bin/kind
          sudo rm -rf ${TMP_DIR}

      - name: Create multi node cluster
        run: |
          cat <<EOF | /usr/local/bin/kind create cluster \
            --name ${{ env.cluster_name}}           \
            --image ${{ env.KIND_K8S_IMAGE }}  \
            -v7 --retain --config=-
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          networking:
            ipFamily: ${IP_FAMILY}
            kubeProxyMode: "none"
            disableDefaultCNI: true
          nodes:
          - role: control-plane
          - role: control-plane
          - role: worker
          - role: worker
          EOF

      - name: Workaround CoreDNS for IPv6 airgapped
        if: ${{ matrix.ipFamily == 'ipv6' }}
        run: |
          # Patch CoreDNS to work in Github CI
          # 1. Github CI doesnÂ´t offer IPv6 connectivity, so CoreDNS should be configured
          # to work in an offline environment:
          # https://github.com/coredns/coredns/issues/2494#issuecomment-457215452
          # 2. Github CI adds following domains to resolv.conf search field:
          # .net.
          # CoreDNS should handle those domains and answer with NXDOMAIN instead of SERVFAIL
          # otherwise pods stops trying to resolve the domain.
          # Get the current config
          original_coredns=$(/usr/local/bin/kubectl get -oyaml -n=kube-system configmap/coredns)
          echo "Original CoreDNS config:"
          echo "${original_coredns}"
          # Patch it
          fixed_coredns=$(
            printf '%s' "${original_coredns}" | sed \
              -e 's/^.*kubernetes cluster\.local/& net/' \
              -e '/^.*upstream$/d' \
              -e '/^.*fallthrough.*$/d' \
              -e '/^.*forward . \/etc\/resolv.conf$/d' \
              -e '/^.*loop$/d' \
          )
          echo "Patched CoreDNS config:"
          echo "${fixed_coredns}"
          printf '%s' "${fixed_coredns}" | /usr/local/bin/kubectl apply -f -

      - name: Get Cilium's default values
        id: default_vars
        uses: ./.github/actions/helm-default
        with:
          image-tag: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up job variables
        id: vars
        run: |
          # Note: On Kind, we install Cilium with HostPort (portmap CNI chaining) enabled,
          # to ensure coverage of that feature in cilium connectivity test
          CILIUM_INSTALL_DEFAULTS="${{ steps.default_vars.outputs.cilium_install_defaults }} \
            --helm-set=cni.chainingMode=portmap \
            --helm-set-string=kubeProxyReplacement=true"
          if [ "${IP_FAMILY}" == "dual" ]; then
            CILIUM_INSTALL_DEFAULTS="${CILIUM_INSTALL_DEFAULTS} --helm-set=ipv6.enabled=true"
          fi
          echo cilium_install_defaults=${CILIUM_INSTALL_DEFAULTS} >> $GITHUB_OUTPUT
          echo sha=${{ steps.default_vars.outputs.sha }} >> $GITHUB_OUTPUT

      - name: Install Cilium CLI
        uses: cilium/cilium-cli@6e65fa094c051aee03959dc9a75e66213e9050c7 # v0.18.4
        with:
          skip-build: ${{ env.CILIUM_CLI_SKIP_BUILD }}
          image-repo: ${{ env.CILIUM_CLI_IMAGE_REPO }}
          image-tag: ${{ steps.vars.outputs.sha }}
          repository: ${{ env.CILIUM_CLI_RELEASE_REPO }}
          release-version: ${{ env.CILIUM_CLI_VERSION }}

      - name: Wait for images to be available
        timeout-minutes: 30
        shell: bash
        run: |
          for image in cilium-ci operator-generic-ci hubble-relay-ci ; do
            until docker manifest inspect quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/$image:${{ steps.vars.outputs.sha }} &> /dev/null; do sleep 45s; done
          done

      - name: Install Cilium
        id: install-cilium
        run: |
          getKubeApiServerAddress() {
            nodev4=$(kubectl get node $1 -o json | jq -r '.status.addresses[] | select(.type=="InternalIP") | .address' | head -n 1)
            echo $nodev4
          }
          node1=$(getKubeApiServerAddress ${{ env.cluster_name }}-control-plane)
          node2=$(getKubeApiServerAddress ${{ env.cluster_name }}-control-plane2)

          cilium install --wait ${{ steps.vars.outputs.cilium_install_defaults }} \
          --helm-set kubeProxyReplacement=true \
          --helm-set k8s.apiServerURLs="https://$node1:6443 https://$node2:6443"

      - name: Create LB IPAM pool
        run: |
          # Needed so that Cilium can allocate LoadBalancer service IPs
          # needed for the tests
          kubectl apply -f - <<EOF
          apiVersion: "cilium.io/v2"
          kind: CiliumLoadBalancerIPPool
          metadata:
            name: "test-lb-pool"
          spec:
            blocks:
            - cidr: "10.0.10.0/24"
          EOF

      - name: Run Kubernetes sig-network test
        run: |
          # output_dir
          mkdir -p _artifacts

          # get kubeconfig to pass to the e2e binary
          kind get kubeconfig --name ${{ env.cluster_name }} > _artifacts/kubeconfig.conf

          # Kubernetes e2e tests use ginkgo and tags to select the tests that should run based on two regex, focus and skip:
          # Focus tests:
          # \[sig-network\]: sig-network tests are defined by sig-network to guarantee a consistent behavior on all the the k8s network implementations
          # Skipped tests:
          # Disruptive|Serial : require to run in serial and perform disruptive operations on clusters (reboots, ...)
          # Federation|PerformanceDNS : unrelated sig-network tests
          # Alpha|Beta|Experimental : skip features that are not GA
          # KubeProxy|kube-proxy : kube-proxy specifics
          # LoadBalancer|GCE|ExternalIP : require a cloud provider, some of them are GCE specifics
          # Netpol|NetworkPolicy : network policies, demand significant resources and use to be slow, better to run in a different job
          # rejected : Kubernetes expect Services without endpoints associated to REJECT the connection to notify the client, Cilium silently drops the packet
          # externalTrafficPolicy : Cilium fails externalTrafficPolicy=local test, see https://github.com/cilium/cilium/issues/37613
          # DualStack : tests that are dual stack specific
          # IPv6 : tests that are IPv6 specific

          SKIP_FLAG="Alpha|Beta|Experimental|Federation|PerformanceDNS|Disruptive|Serial|KubeProxy|kube-proxy|ExternalIP|LoadBalancer|GCE|Netpol|NetworkPolicy|rejected|externalTrafficPolicy"
          if [ "${IP_FAMILY}" != "dual" ]; then
            SKIP_FLAG="${SKIP_FLAG}|DualStack"
          fi
          if [ "${IP_FAMILY}" == "ipv4" ]; then
            SKIP_FLAG="${SKIP_FLAG}|IPv6"
          fi

          # Run tests
          export KUBERNETES_CONFORMANCE_TEST='y'
          export E2E_REPORT_DIR=${PWD}/_artifacts
          /usr/local/bin/ginkgo --nodes=25                \
            --focus="\[sig-network\]"     \
            --skip="${SKIP_FLAG}"   \
            /usr/local/bin/e2e.test                       \
            --                                            \
            --kubeconfig=${PWD}/_artifacts/kubeconfig.conf     \
            --provider=local                              \
            --dump-logs-on-failure=true                   \
            --report-dir=${E2E_REPORT_DIR}                \
            --disable-log-dump=true

      # Sequentially kill kube-apiserver pods to verify cilium agent pods fail over to an active instance.
      - name: Test kube-apiserver high availability
        run: |
          PORT=6443
          NAMESPACE="kube-system"
          # Get kube-apiserver pods.
          declare -A pods
          entries=$(kubectl -n "$NAMESPACE" get pods -l component=kube-apiserver -o json | jq -r '.items[] | "\(.metadata.name) \(.status.podIP)"')
          while read -r pod ip; do
            pods["$pod"]="$ip"
            done <<< "$entries"
          for pod in "${!pods[@]}"; do
            echo "$pod => ${pods[$pod]}"
          done
          # Sequentially delete kube-apiserver pods by connecting via an active kube-apiserver instance.
          for pod in "${!pods[@]}"; do
            # Find an active kube-apiserver pod
            for active_pod in "${!pods[@]}"; do
              if [[ "$active_pod" != "$pod" ]]; then
                active_ip="${pods[$active_pod]}"
                break
              fi
            done
            echo "Deleting $pod"
            kubectl -n "$NAMESPACE" --server "https://${active_ip}:${PORT}" delete pod "$pod"
            sleep 120
          done
          cilium status --wait --wait-duration=5m
          kubectl get pods -n kube-system

      - name: Gather metrics
        uses: ./.github/actions/gather-metrics
        with:
          job: "${{ env.job_name }}-${{ matrix.ipFamily }}"

      - name: Post-test information gathering
        if: ${{ !success() && steps.install-cilium.outcome != 'skipped' }}
        run: |
          # Move the all artifacts to cilium-junits directory since that's the
          # directory used in the common post steps.
          mv _artifacts cilium-junits
          mkdir -p ./_artifacts/logs
          /usr/local/bin/kind export logs --name  ${{ env.cluster_name }} --verbosity=3 ./_artifacts/logs
        shell: bash {0} # Disable default fail-fast behaviour so that all commands run independently

      - name: Upload cluster logs
        if: ${{ !success() }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: "kind-logs-${{ matrix.ipFamily }}"
          path: ./_artifacts/logs
          retention-days: 5

      - name: Run common post steps
        if: ${{ always() }}
        uses: ./.github/actions/post-logic
        with:
          artifacts_suffix: "${{ matrix.ipFamily }}"
          job_status: "${{ job.status }}"
