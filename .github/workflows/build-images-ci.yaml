name: Image CI Build

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request_target:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - v1.16
      - ft/v1.16/**
  merge_group:
    types: [checks_requested]

permissions:
  # To be able to access the repository with `actions/checkout`
  contents: read
  # Required to generate OIDC tokens for `sigstore/cosign-installer` authentication
  id-token: write
  # To be able to check if base images were built
  actions: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after || (github.event_name == 'merge_group' && github.run_id) }}
  cancel-in-progress: true

jobs:
  wait-for-base-images:
    name: Wait for lint checks
    uses: ./.github/workflows/wait-for-status-check.yaml
    with:
      # Only run this job if the event is pull_request_target and if the PR
      # is not opened from a fork.
      # This is to avoid waiting for base images on push to main or merge_group
      # events as the lint-images-base does not run on those events.
      if: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.event.pull_request.base.repo.full_name }}
      sha: ${{ github.event.pull_request.head.sha || github.sha }}
      lint-workflows: "lint-images-base.yaml"
      timeout-minutes: 2
      poll-interval: 15

  build-and-push-prs:
    timeout-minutes: 45
    name: Build and Push Images
    runs-on: ${{ vars.GH_RUNNER_EXTRA_POWER_UBUNTU_LATEST || 'ubuntu-latest' }}
    needs: wait-for-base-images
    strategy:
      matrix:
        include:
          - name: cilium
            dockerfile: ./images/cilium/Dockerfile

          - name: operator-aws
            dockerfile: ./images/operator/Dockerfile

          - name: operator-azure
            dockerfile: ./images/operator/Dockerfile

          - name: operator-alibabacloud
            dockerfile: ./images/operator/Dockerfile

          - name: operator-generic
            dockerfile: ./images/operator/Dockerfile

          - name: hubble-relay
            dockerfile: ./images/hubble-relay/Dockerfile

          - name: clustermesh-apiserver
            dockerfile: ./images/clustermesh-apiserver/Dockerfile

          - name: docker-plugin
            dockerfile: ./images/cilium-docker-plugin/Dockerfile

    steps:
      - name: Checkout default branch (trusted)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Check for disk usage and cleanup /mnt
        shell: bash
        run: |
          echo "# Disk usage"
          df -h
          echo "# Usage for /mnt"
          sudo du --human-readable \
                --threshold 50m \
                -- /mnt
          echo "# Removing all contents of /mnt except /mnt/swapfile"
          sudo find /mnt -mindepth 1 ! -path /mnt/swapfile -exec rm -rf {} + || true

      - name: Setup docker volumes into /mnt
        # This allows us to make use of all available disk.
        shell: bash
        run: |
          sudo systemctl stop docker
          sudo mv /var/lib/docker/volumes /mnt/docker-volumes
          sudo ln -s /mnt/docker-volumes /var/lib/docker/volumes
          sudo systemctl start docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        # Disable GC entirely to avoid buildkit from GC caches.
        with:
          buildkitd-config-inline: |
            [worker.oci]
             gc=false

      - name: Login to quay.io for CI
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME_CI }}
          password: ${{ secrets.QUAY_PASSWORD_CI }}

      - name: Getting image tag
        id: tag
        run: |
          if [ "${{ github.event.pull_request.head.sha }}" != "" ]; then
            tag=${{ github.event.pull_request.head.sha }}
          else
            tag=${{ github.sha }}
          fi
          if [[ "${{ github.event_name == 'push' }}" == "true" ]]; then
            if [[ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
              floating_tag=latest
            else
              floating_tag="${{ github.ref_name }}"
            fi
            echo floating_tag=${floating_tag} >> $GITHUB_OUTPUT
          fi
          echo tag=${tag} >> $GITHUB_OUTPUT

          normal_tag="quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${tag}"
          race_tag="${normal_tag}-race"
          unstripped_tag="${normal_tag}-unstripped"

          if [ -n "${floating_tag}" ]; then
            floating_normal_tag="quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${floating_tag}"
            normal_tag="${normal_tag},${floating_normal_tag}"
          fi

          if [[ "${{ github.event_name }}" == 'merge_group' || "${{ github.event_name }}" == 'push' ]]; then
            # Don't build race and unstripped images for merge_group or push events.
            race_tag=""
            unstripped_tag=""
          fi

          echo normal_tag=${normal_tag} >> $GITHUB_OUTPUT
          echo race_tag=${race_tag} >> $GITHUB_OUTPUT
          echo unstripped_tag=${unstripped_tag} >> $GITHUB_OUTPUT

      # Warning: since this is a privileged workflow, subsequent workflow job
      # steps must take care not to execute untrusted code.
      - name: Checkout pull request branch (NOT TRUSTED)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
          ref: ${{ steps.tag.outputs.tag }}

      - name: Check for disk usage
        shell: bash
        run: |
          df -h

      # Load Golang cache build from GitHub
      - name: Restore Golang cache build from GitHub
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        id: go-cache
        with:
          path: /tmp/.cache/go
          key: ${{ runner.os }}-go-${{ matrix.name }}-cache-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.name }}-cache-

      - name: Check for disk usage
        shell: bash
        run: |
          df -h
          docker buildx du

      - name: Create cache directories if they don't exist
        if: ${{ steps.go-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p /tmp/.cache/go

      # Import GitHub's cache build to docker cache
      - name: Copy ${{ matrix.name }} Golang cache to docker cache
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          provenance: false
          context: /tmp/.cache/go
          file: ./images/cache/Dockerfile
          push: false
          platforms: linux/amd64
          target: import-cache

      - name: Check for disk usage
        shell: bash
        run: |
          df -h
          docker buildx du

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: CI Build ${{ matrix.name }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: docker_build_ci
        with:
          provenance: false
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.tag.outputs.normal_tag }}
          target: release
          build-args: |
            OPERATOR_VARIANT=${{ matrix.name }}

      - name: CI race detection Build ${{ matrix.name }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: docker_build_ci_detect_race_condition
        if: ${{ steps.check.outputs.build != '' && steps.tag.outputs.race_tag != ''}}
        with:
          provenance: false
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.tag.outputs.race_tag }}
          target: release
          build-args: |
            BASE_IMAGE=quay.io/cilium/cilium-runtime:b2b6decf661f7733e4714ec1da43539a9fd56c35@sha256:deb9f93a8b68761dbb802d8ae3a840dc901d702fd5c520f012304652dd0f1c09
            MODIFIERS="LOCKDEBUG=1 RACE=1"
            OPERATOR_VARIANT=${{ matrix.name }}

      - name: CI Unstripped Binaries Build ${{ matrix.name }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: docker_build_ci_unstripped
        if: ${{ steps.check.outputs.build != '' && steps.tag.outputs.unstripped_tag != ''}}
        with:
          provenance: false
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.tag.outputs.unstripped_tag }}
          target: release
          build-args: |
            MODIFIERS="NOSTRIP=1"
            OPERATOR_VARIANT=${{ matrix.name }}

      - name: Sign Container Images
        run: |
          cosign sign -y quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci.outputs.digest }}
          if [[ "${{ steps.docker_build_ci_detect_race_condition.outcome }}" != 'skipped' ]]; then
            cosign sign -y quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci_detect_race_condition.outputs.digest }}
          fi
          if [[ "${{ steps.docker_build_ci_unstripped.outcome }}" != 'skipped' ]]; then
            cosign sign -y quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci_unstripped.outputs.digest }}
          fi

      - name: Generate SBOM
        uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9
        with:
          artifact-name: sbom_ci_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          output-file: ./sbom_ci_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          image: quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}

      - name: Generate SBOM (race)
        if: ${{ matrix.name != 'cilium-cli' && steps.docker_build_ci_detect_race_condition.outcome != 'skipped' }}
        uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9
        with:
          artifact-name: sbom_ci_race_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          output-file: ./sbom_ci_race_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          image: quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race

      - name: Generate SBOM (unstripped)
        if: ${{ matrix.name != 'cilium-cli' && steps.docker_build_ci_unstripped.outcome != 'skipped' }}
        uses: anchore/sbom-action@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9
        with:
          artifact-name: sbom_ci_unstripped_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          output-file: ./sbom_ci_unstripped_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json
          image: quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-unstripped

      - name: Attach SBOM to Container Images
        run: |
          cosign attest -y --predicate sbom_ci_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json --type spdxjson quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci.outputs.digest }}
          if [[ "${{ steps.docker_build_ci_detect_race_condition.outcome }}" != 'skipped' ]]; then
            cosign attest -y --predicate sbom_ci_race_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json --type spdxjson quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci_detect_race_condition.outputs.digest }}
          fi
          if [[ "${{ steps.docker_build_ci_unstripped.outcome }}" != 'skipped' ]]; then
            cosign attest -y --predicate sbom_ci_unstripped_${{ matrix.name }}_${{ steps.tag.outputs.tag }}.spdx.json --type spdxjson quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci@${{ steps.docker_build_ci_unstripped.outputs.digest }}
          fi

      - name: CI Image Releases digests
        shell: bash
        run: |
          mkdir -p image-digest/
          if [ ${{ github.event_name == 'push' && !startsWith(github.ref_name, 'ft/') }} ]; then
            echo "quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.floating_tag }}@${{ steps.docker_build_ci.outputs.digest }}" > image-digest/${{ matrix.name }}.txt
          fi
          echo "quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}@${{ steps.docker_build_ci.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt
          if [[ "${{ steps.docker_build_ci_detect_race_condition.outcome }}" != 'skipped' ]]; then
            echo "quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-race@${{ steps.docker_build_ci_detect_race_condition.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt
          fi
          if [[ "${{ steps.docker_build_ci_unstripped.outcome }}" != 'skipped' ]]; then
            echo "quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/${{ matrix.name }}-ci:${{ steps.tag.outputs.tag }}-unstripped@${{ steps.docker_build_ci_unstripped.outputs.digest }}" >> image-digest/${{ matrix.name }}.txt
          fi

      # Upload artifact digests
      - name: Upload artifact digests
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5.0.0
        with:
          name: image-digest ${{ matrix.name }}
          path: image-digest
          retention-days: 1

      - name: Check for disk usage
        if: ${{ always() }}
        shell: bash
        run: |
          df -h

  image-digests:
    if: ${{ always() }}
    name: Display Digests
    runs-on: ubuntu-24.04
    needs: build-and-push-prs
    steps:
      - name: Downloading Image Digests
        shell: bash
        run: |
          mkdir -p image-digest/

      - name: Download digests of all images built
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6.0.0
        with:
          path: image-digest/
          pattern: "*image-digest *"

      - name: Image Digests Output
        shell: bash
        run: |
          cd image-digest/
          find -type f | sort | xargs -d '\n' cat

  pre-comment:
    # Avoid running the "Trigger CI from renovate PRs" environment if we don't need to.
    name: Pre-Comment
    needs: build-and-push-prs
    runs-on: ubuntu-24.04
    if: ${{
         github.event_name == 'pull_request_target' &&
         github.event.pull_request.user.login == vars.RENOVATE_BOT_USERNAME
        }}
    steps:
    - name: Debug
      run: |
        echo ${{ github.event.pull_request.user.login }}
        echo ${{ github.event.event_name }}

  comment:
    name: Post test comment for Renovate PRs after images built
    runs-on: ubuntu-24.04
    needs: pre-comment
    environment: "Trigger CI from renovate PRs"
    if: ${{
         github.event_name == 'pull_request_target' &&
         github.event.pull_request.user.login == vars.RENOVATE_BOT_USERNAME
        }}
    steps:
      - name: Post /test comment
        env:
          TOKEN: ${{ secrets.AUTO_COMMENT_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo ${TOKEN} | gh auth login --with-token
          gh pr --repo ${GITHUB_REPOSITORY} comment ${PULL_REQUEST_NUMBER} --body "/test"
