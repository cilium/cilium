name: Conformance ginkgo (ci-ginkgo)

# Any change in triggers needs to be reflected in the concurrency group.
on:
  issue_comment:
    types:
      - created
  # Run every 6 hours
  schedule:
    - cron:  '0 1/6 * * *'
  ### FOR TESTING PURPOSES
  # This workflow runs in the context of `main`, and ignores changes to
  # workflow files in PRs. For testing changes to this workflow from a PR:
  # - Make sure the PR uses a branch from the base repository (requires write
  #   privileges). It will not work with a branch from a fork (missing secrets).
  # - Uncomment the `pull_request` event below, commit separately with a `DO
  #   NOT MERGE` message, and push to the PR. As long as the commit is present,
  #   any push to the PR will trigger this workflow.
  # - Don't forget to remove the `DO NOT MERGE` commit once satisfied. The run
  #   will disappear from the PR checks: please provide a direct link to the
  #   successful workflow run (can be found from Actions tab) in a comment.
  #
  # pull_request: {}
  ###

# By specifying the access of one of the scopes, all of those that are not
# specified are set to 'none'.
permissions:
  # To be able to access the repository with actions/checkout
  contents: read
  # To allow retrieving information from the PR API
  pull-requests: read
  # So that Sibz/github-status-action can write into the status API
  statuses: write

concurrency:
  # Structure:
  # - Workflow name
  # - Event type
  # - A unique identifier depending on event type:
  #   - schedule: SHA
  #   - issue_comment: PR number
  #   - pull_request: PR number
  #
  # This structure ensures a unique concurrency group name is generated for each
  # type of testing:
  # - schedule: {name} schedule {SHA}
  # - issue_comment: {name} issue_comment {PR number}
  # - pull_request: {name} pull_request {PR number}
  #
  # Note: for `issue_comment` triggers, we additionally need to filter out based
  # on comment content, otherwise any comment will interrupt workflow runs.
  group: |
    ${{ github.workflow }}
    ${{ github.event_name }}
    ${{
      (github.event_name == 'schedule' && github.sha) ||
      (github.event_name == 'issue_comment' && (
        github.event.comment.body == '/ci-ginkgo' ||
        github.event.comment.body == '/test'
      ) && github.event.issue.number) ||
      (github.event_name == 'pull_request' && github.event.pull_request.number)
    }}
  cancel-in-progress: true

env:
  check_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  check_changes:
    name: Deduce required tests from code changes
    if: |
      (github.event_name == 'issue_comment' && (
        github.event.comment.body == '/ci-ginkgo' ||
        github.event.comment.body == '/test'
      )) ||
      github.event_name == 'schedule' ||
      github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      tested: ${{ steps.tested-tree.outputs.src }}
      matrix_sha: ${{ steps.sha.outputs.sha }}
      base_branch: ${{ steps.sha.outputs.base_branch }}
      sha: ${{ steps.sha.outputs.sha }}
      #
      # For bisect uncomment the base_branch and 'sha' lines below and comment
      # the two lines above this comment
      #
      #base_branch: <replace with the base branch name, should be 'main', not your branch name>
      #sha: <replace with the SHA of an existing docker image tag that you want to bisect>
    steps:
      # Because we run on issue comments, we need to checkout the code for
      # paths-filter to work.
      - name: Checkout code
        if: ${{ github.event.issue.pull_request }}
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          persist-credentials: false
      - name: Retrieve pull request's base and head
        id: sha
        run: |
          if [ ${{ github.event.issue.pull_request || github.event.pull_request }} ]; then
            curl ${{ github.event.issue.pull_request.url || github.event.pull_request.url }} > pr.json
            echo "base=$(jq -r '.base.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "head=$(jq -r '.head.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "sha=$(jq -r '.head.sha' pr.json)" >> $GITHUB_OUTPUT
            echo "base_branch=$(jq -r '.base.ref' pr.json)" >> $GITHUB_OUTPUT
          else
            echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "base_branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi
      - name: Check code changes
        if: ${{ github.event.issue.pull_request }}
        uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: tested-tree
        with:
          base: ${{ steps.sha.outputs.base }}
          ref: ${{ steps.sha.outputs.head }}
          filters: |
            src:
              - '!(Documentation)/**'

  skip-test-run:
    # If the modified files are not relevant for this test then we can skip
    # this test and mark it as successful.
    if: github.event.comment.body == '/test' && needs.check_changes.outputs.tested == 'false'
    runs-on: ubuntu-latest
    needs: check_changes
    name: Set commit status to success (skipped)
    steps:
      - name: Set commit status to success
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Ginkgo test skipped
          state: success
          target_url: ${{ env.check_url }}

  # Pre-build the ginkgo binary so that we don't have to build it for all
  # runners.
  build-ginkgo-binary:
    needs: check_changes
    runs-on: ubuntu-latest
    name: Build Ginkgo E2E
    timeout-minutes: 30
    if: |
      (github.event_name == 'issue_comment' && (
        github.event.comment.body == '/ci-ginkgo' ||
        (github.event.comment.body == '/test' && needs.check_changes.outputs.tested == 'true')
      )) ||
      github.event_name == 'schedule' ||
      github.event_name == 'pull_request'
    steps:
      - name: Set commit status to pending
        uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Ginkgo test in progress...
          state: pending
          target_url: ${{ env.check_url }}

      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ needs.check_changes.outputs.sha }}
          persist-credentials: false

      # If any of these steps are modified, please update the copy of these
      # steps further down under the 'setup-and-test' jobs.

      # Load Ginkgo build from GitHub
      - name: Load ginkgo E2E from GH cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-e2e-${{ hashFiles('**/*.go') }}

      - name: Install Go
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5

      - name: Build Ginkgo
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          go install github.com/onsi/ginkgo/ginkgo@v1.16.5
          mkdir -p /tmp/.ginkgo-build

      - name: Build Test
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd test
          /home/runner/go/bin/ginkgo build
          strip test.test
          tar -cz test.test -f test.tgz

      - name: Store Ginkgo Test in GitHub cache path
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p /tmp/.ginkgo-build/
          if [ -f test/test.tgz ]; then
            cp test/test.tgz /tmp/.ginkgo-build/
            echo "file copied"
          fi

  wait-for-images:
    needs: check_changes
    runs-on: ubuntu-latest
    name: Build Ginkgo E2E
    timeout-minutes: 30
    if: |
      (github.event_name == 'issue_comment' && (
        github.event.comment.body == '/ci-ginkgo' ||
        (github.event.comment.body == '/test' && needs.check_changes.outputs.tested == 'true')
      )) ||
      github.event_name == 'schedule' ||
      github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Wait for images to be available
        timeout-minutes: 10
        shell: bash
        run: |
          for image in cilium-ci operator-generic-ci hubble-relay-ci ; do
            until docker manifest inspect quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/$image:${{ needs.check_changes.outputs.sha }} &> /dev/null; do sleep 45s; done
          done

  generate-matrix:
    name: Generate Job Matrix from YAMLs
    needs: check_changes
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ needs.check_changes.outputs.matrix_sha }}
          persist-credentials: false

      - name: Convert YAML to JSON
        run: |
          work_dir=".github/actions/ginkgo"
          destination_directory="/tmp/generated/ginkgo"
          mkdir -p "${destination_directory}"
          for file in "${work_dir}"/${{ needs.check_changes.outputs.base_branch }}*.yaml; do
              if [[ -f "$file" ]]; then
                  filename=$(basename "$file")
                  new_filename="${filename%.yaml}.json"

                  yq -o=json "${file}" | jq . > "${destination_directory}/${new_filename}"
              fi
          done

      - name: Generate Matrix
        id: set-matrix
        run: |
          if ${{ github.event_name == 'schedule' }}; then
            k8s_versions_to_run='${{ needs.check_changes.outputs.base_branch }}-scheduled.json'
          else
            k8s_versions_to_run='${{ needs.check_changes.outputs.base_branch }}-prs.json'
          fi

          # Generate a Matrix from all k8s versions defined in '${k8s_versions_to_run}'
          # combined with '${{ needs.check_changes.outputs.base_branch }}-focus.yaml'.
          # Use '${{ needs.check_changes.outputs.base_branch }}-k8s-versions.yaml' to
          # retrieve which kernel versions should be used for which k8s version.

          dir="/tmp/generated/ginkgo"
          cd ${dir}
          jq --argjson prs "$(jq '.["k8s-version"]' ${k8s_versions_to_run})" \
            --argfile focus ${{ needs.check_changes.outputs.base_branch }}-focus.json \
            '.include |= map(select(.["k8s-version"] as $k | $prs[] | select($k == .))) + $focus.include |
            . + {"k8s-version": $prs} |
            .focus = $focus.focus | .exclude = $focus.exclude' \
            ${{ needs.check_changes.outputs.base_branch }}-k8s-versions.json> /tmp/merged.json
          echo "Generated matrix:"
          cat /tmp/merged.json
          echo "matrix=$(jq -c . < /tmp/merged.json)" >> $GITHUB_OUTPUT

  setup-and-test:
    needs: [check_changes, build-ginkgo-binary, generate-matrix, wait-for-images]
    runs-on:
      group: ginkgo-runners
    timeout-minutes: 35
    name: "E2E Test (${{ matrix.k8s-version }}, ${{matrix.focus}})"
    env:
      job_name: "E2E Test (${{ matrix.k8s-version }}, ${{matrix.focus}})"
    strategy:
      fail-fast: false
      max-parallel: 60
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ github.event.repository.default_branch }}
          persist-credentials: false

      - name: Set Environment Variables
        uses: ./.github/actions/set-env-variables

      - name: Checkout pull request for tests
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          ref: ${{ needs.check_changes.outputs.sha }}
          persist-credentials: false

      - name: Install cilium-cli
        shell: bash
        run: |
          cid=$(docker create quay.io/cilium/cilium-cli-ci:latest ls)
          docker cp $cid:/usr/local/bin/cilium ./cilium-cli
          docker rm $cid

      - name: Install helm
        shell: bash
        run: |
          HELM_VERSION=3.7.0
          wget "https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz"
          tar -xf "helm-v${HELM_VERSION}-linux-amd64.tar.gz"
          mv ./linux-amd64/helm ./helm

      - name: Provision LVH VMs
        uses: cilium/little-vm-helper@af4173a4a1c9132b7fb0a02dba74cd6233a175b5 # v0.0.6
        with:
          test-name: datapath-conformance
          install-dependencies: true
          image-version: ${{ matrix.kernel }}
          host-mount: ./
          cpu: 4
          mem: 12G
          dns-resolver: '1.1.1.1'
          cmd: |
            git config --global --add safe.directory /host
            mv /host/helm /usr/bin
            mv /host/cilium-cli /usr/bin

      - name: Provision kind
        timeout-minutes: 5
        uses: cilium/little-vm-helper@af4173a4a1c9132b7fb0a02dba74cd6233a175b5 # v0.0.6
        with:
          provision: 'false'
          cmd: |
            cd /host/
            if [[ "${{ matrix.kernel }}" == bpf-next-* ]]; then
              ./contrib/scripts/kind.sh "" 2 "" "${{ matrix.kube-image }}" "none" "${{ matrix.ip-family }}"
              kubectl label node kind-worker2 cilium.io/ci-node=kind-worker2
              # Avoid re-labeling this node by setting "node-role.kubernetes.io/controlplane"
              kubectl label node kind-worker2 node-role.kubernetes.io/controlplane=
            else
              ./contrib/scripts/kind.sh "" 1 "" "${{ matrix.kube-image }}" "iptables" "${{ matrix.ip-family }}"
            fi
            # Some tests using demo-customcalls.yaml are mounting this directoy
            mkdir -p /home/vagrant/go/src/github.com/cilium
            ln -s /host /home/vagrant/go/src/github.com/cilium/cilium
            git config --add safe.directory /cilium

      # Load Ginkgo build from GitHub
      - name: Load ${{ matrix.name }} Ginkgo build from GitHub
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-e2e-${{ hashFiles('**/*.go') }}

      # Re-build the tests if it was a cache miss.
      - name: Install Go
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5

      - name: Build Ginkgo
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          go install github.com/onsi/ginkgo/ginkgo@v1.16.5
          mkdir -p /tmp/.ginkgo-build

      - name: Build Test
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd test
          /home/runner/go/bin/ginkgo build
          strip test.test
          tar -cz test.test -f test.tgz

      - name: Store Ginkgo Test in GitHub cache path
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          mkdir -p /tmp/.ginkgo-build/
          if [ -f test/test.tgz ]; then
            cp test/test.tgz /tmp/.ginkgo-build/
            echo "file copied"
          fi

      - name: Copy Ginkgo binary
        shell: bash
        run: |
          cd test/
          tar -xf /tmp/.ginkgo-build/test.tgz

      - name: Run tests
        timeout-minutes: 40
        uses: cilium/little-vm-helper@af4173a4a1c9132b7fb0a02dba74cd6233a175b5 # v0.0.6
        with:
          provision: 'false'
          cmd: |
            cd /host/test/
            kubectl get ns -A -o wide
            kubectl get pods -A -o wide
            export K8S_NODES=2
            export NETNEXT=0
            if [[ "${{ matrix.kernel }}" == bpf-next-* ]]; then
               export KERNEL=net-next
               export NETNEXT=1
               export KUBEPROXY=0
               export K8S_NODES=3
               export NO_CILIUM_ON_NODES=kind-worker2
            elif [[ "${{ matrix.kernel }}" == 4.19-* ]]; then
               export KERNEL=419
            elif [[ "${{ matrix.kernel }}" == 5.4-* ]]; then
               export KERNEL=54
            fi
            export K8S_VERSION=${{ matrix.k8s-version }}
            export CNI_INTEGRATION=kind
            export INTEGRATION_TESTS=true
            # GitHub actions do not support IPv6 connectivity to outside
            # world.
            export CILIUM_NO_IPV6_OUTSIDE=true
            echo "/root/go/bin/ginkgo \
             --focus=\"${{ matrix.cliFocus }}\" \
             --skip=\"${{ matrix.cliSkip }}\" \
             --seed=1679952881 \
             -v -- \
             -cilium.provision=false \
             -cilium.image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/cilium-ci \
             -cilium.tag=${{ needs.check_changes.outputs.sha }}  \
             -cilium.operator-image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/operator \
             -cilium.operator-tag=${{ needs.check_changes.outputs.sha }} \
             -cilium.hubble-relay-image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/hubble-relay-ci \
             -cilium.hubble-relay-tag=${{ needs.check_changes.outputs.sha }} \
             -cilium.kubeconfig=/root/.kube/config \
             -cilium.provision-k8s=false \
             -cilium.operator-suffix=-ci"

              ./test.test \
               --ginkgo.focus="${{ matrix.cliFocus }}" \
               --ginkgo.skip="${{ matrix.cliSkip }}" \
               --ginkgo.seed=1679952881 \
               --ginkgo.v -- \
               -cilium.provision=false \
               -cilium.image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/cilium-ci \
               -cilium.tag=${{ needs.check_changes.outputs.sha }}  \
               -cilium.operator-image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/operator \
               -cilium.operator-tag=${{ needs.check_changes.outputs.sha }} \
               -cilium.hubble-relay-image=quay.io/${{ env.QUAY_ORGANIZATION_DEV }}/hubble-relay-ci \
               -cilium.hubble-relay-tag=${{ needs.check_changes.outputs.sha }} \
               -cilium.kubeconfig=/root/.kube/config \
               -cilium.provision-k8s=false \
               -cilium.operator-suffix=-ci

      - name: Fetch artifacts
        if: ${{ !success() }}
        uses: cilium/little-vm-helper@af4173a4a1c9132b7fb0a02dba74cd6233a175b5 # v0.0.6
        with:
          provision: 'false'
          cmd: |
            cd /host
            kubectl get pods --all-namespaces -o wide
            tar -zcf "test_results-${{ env.job_name }}.tar.gz" /host/test/test_results

      - name: Upload artifacts
        if: ${{ !success() }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: cilium-sysdumps
          path: |
            cilium-sysdump-*.zip
            bugtool-*.tar.gz
            test_results-*.tar.gz
          retention-days: 5

      - name: Fetch JUnits
        if: ${{ always() }}
        shell: bash
        run: |
          mkdir -p cilium-junits
          cd test/
          junit_filename="${{ env.job_name }}.xml"
          for filename in *.xml; do cp "${filename}" "../cilium-junits/${junit_filename}"; done;

      - name: Upload JUnits [junit]
        if: ${{ always() }}
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: cilium-junits
          path: |
            cilium-junits/*.xml
          retention-days: 2

      - name: Publish Test Results As GitHub Summary
        if: ${{ always() }}
        uses: aanm/junit2md@332ebf0fddd34e91b03a832cfafaa826306558f9 # v0.0.3
        with:
          junit-directory: "cilium-junits"

  report-success:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to success
    if: ${{ success() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test successful
          state: success
          target_url: ${{ env.check_url }}

  report-failure:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to failure
    if: ${{ failure() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test failed
          state: failure
          target_url: ${{ env.check_url }}

  report-cancelled:
    runs-on: ubuntu-latest
    needs: [check_changes, setup-and-test]
    name: Set commit status to cancelled
    if: ${{ cancelled() }}
    steps:
      - uses: Sibz/github-status-action@650dd1a882a76dbbbc4576fb5974b8d22f29847f # v1.1.6
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          sha: ${{ needs.check_changes.outputs.sha }}
          context: ${{ github.workflow }}
          description: Gingko test cancelled
          state: error
          target_url: ${{ env.check_url }}
