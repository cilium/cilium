name: Go-related checks

# Any change in triggers needs to be reflected in the concurrency group.
on:
  pull_request: {}
  push:
    branches:
      - main
      - ft/main/**

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.after }}
  cancel-in-progress: true

jobs:
  go-mod:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
      - name: Check module vendoring
        run: |
          go mod tidy
          go mod vendor
          test -z "$(git status --porcelain)" || (echo "please run 'go mod tidy && go mod vendor', and submit your changes"; exit 1)

  golangci:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@5f1fec7010f6ae3b84ea4f7b2129beb8639b564f # v3.5.0
        with:
          # renovate: datasource=docker depName=golangci/golangci-lint
          version: v1.53.2
          skip-cache: true
          args: "--out-${NO_FUTURE}format colored-line-number --verbose --modules-download-mode=vendor"

  precheck:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
          # hard-code the path instead of using ${{ github.repository }} to make sure it works for forked repo as well
          path: src/github.com/cilium/cilium
      - name: Go code prechecks
        run: |
          cd src/github.com/cilium/cilium
          make precheck

  generate-api:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
          # hard-code the path instead of using ${{ github.repository }} to make sure it works for forked repo as well
          path: src/github.com/cilium/cilium
      - name: Check api generated files
        run: |
          cd src/github.com/cilium/cilium
          contrib/scripts/check-api-code-gen.sh

  generate-k8s-api:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.5
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
          # hard-code the path instead of using ${{ github.repository }} to make sure it works for forked repo as well
          path: src/github.com/cilium/cilium
      - name: Install protobuf dependencies
        env:
          PROTOBUF_VERSION: 3.12.4
        run: |
          curl -Lo protoc-$PROTOBUF_VERSION-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOBUF_VERSION/protoc-$PROTOBUF_VERSION-linux-x86_64.zip
          unzip protoc-$PROTOBUF_VERSION-linux-x86_64.zip
          sudo chmod +x bin/protoc && sudo cp bin/protoc /usr/local/bin
      - name: Check k8s generated files
        run: |
          # Set GOBIN to ensure 'go install' binaries end up in the same directory
          # as the one actions/setup-go adds to PATH, regardless of GOPATH.
          export GOBIN="$HOME/go/bin"

          cd src/github.com/cilium/cilium
          contrib/scripts/check-k8s-code-gen.sh

  ginkgo-workflow-comments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          persist-credentials: false
          # hard-code the path instead of using ${{ github.repository }} to make sure it works for forked repo as well
          path: src/github.com/cilium/cilium

      # Load Ginkgo build from GitHub
      - name: Load ginkgo linter from GH cache
        uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
        id: cache
        with:
          path: /tmp/.ginkgo-build/
          key: ${{ runner.os }}-ginkgo-linter-${{ hashFiles('src/github.com/cilium/cilium/**/*.go') }}

      - name: Install Go
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          # renovate: datasource=golang-version depName=go
          go-version: 1.20.4

      - name: Build Ginkgo
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd src/github.com/cilium/cilium
          go install github.com/onsi/ginkgo/ginkgo@v1.16.5
          mkdir -p /tmp/.ginkgo-build

      - name: Building Ginkgo Linter Test
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd src/github.com/cilium/cilium
          git apply contrib/testing/ginkgo-get-all-test-names.patch

          cd test
          /home/runner/go/bin/ginkgo build
          strip test.test
          tar -cz test.test -f test.tgz

      - name: Store Ginkgo Linter Test in GitHub cache path
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: |
          cd src/github.com/cilium/cilium
          mkdir -p /tmp/.ginkgo-build/
          if [ -f test/test.tgz ]; then
            cp test/test.tgz /tmp/.ginkgo-build/
            echo "file copied"
          fi

      - name: Copy Ginkgo binary
        if: ${{ steps.cache.outputs.cache-hit == 'true' }}
        shell: bash
        run: |
          cd src/github.com/cilium/cilium/test/
          tar -xf /tmp/.ginkgo-build/test.tgz

      - name: Reading Comments From Workflows
        shell: bash
        run: |
          cd src/github.com/cilium/cilium

          grep '# K8s' .github/workflows/conformance-ginkgo.yaml | \
          sed -e 's/^[[:space:]]\+# //g' | \
          sort -u > /tmp/ginkgo-workflow-comments.txt

          grep '# Runtime' .github/workflows/conformance-runtime.yaml | \
          sed -e 's/^[[:space:]]\+# //g' | \
          sort -u > /tmp/runtime-workflow-comments.txt

      - name: Getting test runs output
        shell: bash
        run: |
          cd src/github.com/cilium/cilium/test

          ./test.test -ginkgo.failFast -ginkgo.dryRun -- --cilium.testScope=K8s | \
          grep TestRun | \
          grep -v 'TestRun\[Top Level\] Runtime' | \
          sed 's/TestRun\[Top Level\]\ //g' | \
          sort -u > /tmp/ginkgo-tests.txt

          ./test.test -ginkgo.failFast -ginkgo.dryRun -- --cilium.testScope=Runtime | \
          grep TestRun | \
          grep -v 'TestRun\[Top Level\] K8s' | \
          sed 's/TestRun\[Top Level\]\ //g' | \
          sort -u > /tmp/runtime-tests.txt

      - name: Checking diff Ginkgo Workflow
        shell: bash
        run: |
          diff /tmp/ginkgo-workflow-comments.txt /tmp/ginkgo-tests.txt --suppress-common-lines

          if [ $? -ne 0 ]; then
            echo ""
            echo "Ginkgo tests out of sync with comments from GH workflow:"
            echo "$diff"
            echo "Please fix the comments from .github/workflows/conformance-ginkgo.yaml accordingly"
            echo ""
            exit 1
          fi

      - name: Checking diff Runtime Workflow
        shell: bash
        run: |
          diff /tmp/runtime-workflow-comments.txt /tmp/runtime-tests.txt --suppress-common-lines

          if [ $? -ne 0 ]; then
            echo ""
            echo "Ginkgo tests out of sync with comments from GH workflow:"
            echo "$diff"
            echo ""
            echo "Please fix the comments from .github/workflows/conformance-runtime.yaml accordingly"
            exit 1
          fi
