name: Get Kubeconfig for cloud clusters
description: Creates service account, token and kubeconfig to be used by cilium-cli

inputs:
  kubeconfig:
    description: "Kubeconfig used to communicate with control plane"
    default: "~/.kube/config"

outputs:
  kubeconfig_path:
    description: "Path to the generated kubeconfig"
    value: ${{ steps.service-account-create.outputs.kubeconfig_path }}

runs:
  using: composite
  steps:
    - name: Create service account and kubeconfig for cilium-cli
      id: service-account-create
      shell: bash
      run: |
        kubectl --kubeconfig ${{ inputs.kubeconfig }} create serviceaccount -n kube-system cilium-cli
        kubectl --kubeconfig ${{ inputs.kubeconfig }} create clusterrolebinding -n kube-system cilium-cli-binding --clusterrole cluster-admin --serviceaccount "kube-system:cilium-cli"
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Secret
        type: kubernetes.io/service-account-token
        metadata:
          name: cilium-cli-secret
          namespace: kube-system
          annotations:
            kubernetes.io/service-account.name: cilium-cli
        EOF
        kubectl --kubeconfig ${{ inputs.kubeconfig }} wait --for=jsonpath='{.data.token}' secrets/cilium-cli-secret -n kube-system
        kubectl --kubeconfig ${{ inputs.kubeconfig }} wait --for=jsonpath='{.data.ca\.crt}' secrets/cilium-cli-secret -n kube-system
        api_endpoint=$(kubectl --kubeconfig ${{ inputs.kubeconfig }} config view --minify --output jsonpath="{.clusters[*].cluster.server}")
        cluster_name=$(kubectl --kubeconfig ${{ inputs.kubeconfig }} config view --minify -o jsonpath='{.clusters[].name}')
        # Cilium CLI relies on context name to detect cluster flavor for GKE
        context_name=$(kubectl --kubeconfig ${{ inputs.kubeconfig }} config view --minify -o jsonpath='{.contexts[].name}')
        ca=$(kubectl --kubeconfig ${{ inputs.kubeconfig }} get secret -n kube-system cilium-cli-secret --output jsonpath='{.data.ca\.crt}')
        token=$(kubectl --kubeconfig ${{ inputs.kubeconfig }} get secret -n kube-system cilium-cli-secret --output jsonpath='{.data.token}' | base64 --decode)
        DIR=$(mktemp -d)
        KUBECONFIG_PATH=$DIR/control-plane-kubeconfig.yaml
        cat <<EOF > $KUBECONFIG_PATH
        apiVersion: v1
        kind: Config
        clusters:
          - name: ${cluster_name}
            cluster:
              certificate-authority-data: ${ca}
              server: ${api_endpoint}
        contexts:
          - name: ${context_name}
            context:
              cluster: ${cluster_name}
              namespace: default
              user: cilium-cli
        users:
          - name: cilium-cli
            user:
              token: ${token}
        current-context: ${context_name}
        EOF
        echo "kubeconfig_path=$KUBECONFIG_PATH" >> $GITHUB_OUTPUT