name: 'Generate SBOM and Sign with Cosign'
description: 'Generate SBOM, sign container images, and attach SBOM attestations'
inputs:
  image:
    description: 'Container image to sign (format: "quay.io/org/image@digest")'
    required: true
  image_tag:
    description: 'Container image tag for SBOM generation (format: "quay.io/org/image:tag")'
    required: false
  sbom_name:
    description: 'Name for the SBOM artifact and file (e.g., "cilium_v1.2.3")'
    required: true
  generate_sbom:
    description: 'Generate SBOM'
    required: false
    default: 'true'
  install_cosign:
    description: 'Whether to install cosign (set to false if already installed)'
    required: false
    default: 'true'
  upload_sbom_release_assets:
    description: 'Upload SBOM as a release asset'
    required: false
    default: 'true'
  max_attempts:
    description: 'Maximum number of retry attempts'
    required: false
    default: '5'
  initial_delay:
    description: 'Initial delay in seconds before first retry'
    required: false
    default: '10'

runs:
  using: 'composite'
  steps:
    - name: Install Cosign
      if: ${{ inputs.install_cosign == 'true' }}
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

    - name: Generate SBOM
      if: ${{ inputs.generate_sbom == 'true' }}
      uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5
      with:
        artifact-name: sbom_${{ inputs.sbom_name }}.spdx.json
        output-file: ./sbom_${{ inputs.sbom_name }}.spdx.json
        image: ${{ inputs.image_tag }}
        upload-release-assets: ${{ inputs.upload_sbom_release_assets  }}

    - name: Sign Container Image
      shell: bash
      run: |
        # Function to retry cosign signing with exponential backoff
        sign_with_retry() {
          local image="$1"
          local max_attempts=${{ inputs.max_attempts }}
          local delay=${{ inputs.initial_delay }}

          for attempt in $(seq 1 $max_attempts); do
            echo "Attempt $attempt/$max_attempts: Signing $image"
            if cosign sign -y "$image"; then
              echo "Successfully signed $image"
              return 0
            else
              echo "Failed to sign $image (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting ${delay}s before retry..."
                sleep $delay
                delay=$((delay * 2))  # Exponential backoff
              fi
            fi
          done

          echo "ERROR: Failed to sign $image after $max_attempts attempts"
          return 1
        }

        sign_with_retry "${{ inputs.image }}"

    - name: Attach SBOM Attestation
      shell: bash
      run: |
        # Function to retry cosign attestation with exponential backoff
        attest_with_retry() {
          local predicate="$1"
          local image="$2"
          local max_attempts=${{ inputs.max_attempts }}
          local delay=${{ inputs.initial_delay }}

          for attempt in $(seq 1 $max_attempts); do
            echo "Attempt $attempt/$max_attempts: Attesting $image with $predicate"
            if cosign attest -y --predicate "$predicate" --type spdxjson "$image"; then
              echo "Successfully attested $image"
              return 0
            else
              echo "Failed to attest $image (attempt $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting ${delay}s before retry..."
                sleep $delay
                delay=$((delay * 2))  # Exponential backoff
              fi
            fi
          done

          echo "ERROR: Failed to attest $image after $max_attempts attempts"
          return 1
        }

        image="${{ inputs.image }}"
        sbom_file="./sbom_${{ inputs.sbom_name }}.spdx.json"
        attest_with_retry "${sbom_file}" "${image}"
