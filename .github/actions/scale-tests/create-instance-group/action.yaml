name: 'Add new Instance Group to cluster'
description: "Workflow that cleans up kops cluster"
inputs:
  cluster_name:
    description: "Name of the cluster"
    required: true
  kops_state:
    description: "Bucket with kops state"
    required: true
  node_size:
    description: "Node size"
    required: true
  node_count:
    description: "Number of nodes"
    required: true
  ig_name:
    description: "Name of instanceGroup"
    required: true
runs:
  using: "composite"
  steps:
    - name: Create initial Instance Group
      shell: bash
      run: |
          ./kops create ig ${{ inputs.ig_name }} --subnet us-west1 \
            --role node \
            --name ${{ inputs.cluster_name }} \
            --state ${{ inputs.kops_state }} \
            --edit=false

    - name: Edit Instance Group parameters
      shell: bash
      run: |
          # Unset and then set spec.zones so operation is idempotent.
          # and guaranteed to be what we set it to.
          # Otherwise, the value given will be appended to the zone list.
          ./kops edit ig ${{ inputs.ig_name }} \
            --state ${{ inputs.kops_state }} \
            --set spec.maxSize=${{ inputs.node_count }} \
            --set spec.minSize=${{ inputs.node_count }} \
            --set spec.machineType=${{ inputs.node_size }} \
            --unset spec.zones \
            --set spec.zones=us-west1-a

    - name: Dump Instance Group config
      shell: bash
      run: |
          ./kops get instancegroups ${{ inputs.ig_name }} \
            --state ${{ inputs.kops_state }} \
            -o yaml

    - name: Ensure cluster state matches config
      shell: bash
      run: |
        # Note, this will create nodes in the ig but will not wait for
        # them to join the cluster. Use the validate-cluster action to do so.
        ./kops update cluster \
          ${{ inputs.cluster_name }} \
          --state ${{ inputs.kops_state }} \
          --yes
