{{$TestImage := .CL2_EGW_TEST_IMAGE}}
{{$GatewayAddress := .CL2_EGW_GATEWAY_ADDRESS}}
{{$ExternalTarget := .CL2_EGW_EXTERNAL_TARGET}}

{{$NumEGWClients := DefaultParam .CL2_NUM_EGW_CLIENTS 9}}
{{$NumSyntheticEPs := DefaultParam .CL2_EGW_NUM_SYNTHETIC_EPS 2000}}
{{$NumSyntheticNodes := DefaultParam .CL2_EGW_NUM_SYNTHETIC_NODES 200}}
{{$NumSyntheticCEGPs := DefaultParam .CL2_EGW_NUM_SYNTHETIC_CEGPs 5}}
{{$QPS := DefaultParam .CL2_EGW_CLIENTS_QPS 3}}
{{$CreateEGWPolicy := DefaultParam .CL2_EGW_CREATE_POLICY false}}
{{$EGWPolicyTemplate := DefaultParam .CL2_EGW_POLICY_TEMPLATE "manifests/egw-policy.yaml"}}
{{$ManifestsDir := DefaultParam .CL2_EGW_MANIFESTS_DIR "manifests"}}
{{$UDPMessageSize := DefaultParam .CL2_EGW_PERF_UDP_MSG_SIZE 1024}}

name: egw-scale-perf-test
namespace:
  number: 1
  deleteAutomanagedNamespaces: false
tuningSets:
- name: Uniform1qps
  qpsLoad:
    qps: 1
- name: UniformParamqps
  qpsLoad:
    qps: {{$QPS}}
- name: RandomizedSaturationTimeLimited
  RandomizedTimeLimitedLoad:
    timeLimit: 1m
steps:
{{ if $CreateEGWPolicy }}
- name: Create Egress Gateway Policy
  phases:
  - replicasPerNamespace: 1
    tuningSet: Uniform1qps
    objectBundle:
    - basename: egw-scale-test-route-external
      objectTemplatePath: {{$EGWPolicyTemplate}}
      templateFillMap:
        ExternalTarget: {{$ExternalTarget}}
        NodeSelector: |
          role.scaffolding/egw-node: "true"
{{ end }}

- name: Create External Target Pod
  phases:
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: 3
    tuningSet: Uniform1qps
    objectBundle:
    - basename: egw-external-target
      objectTemplatePath: manifests/external-target-pod.yaml
      templateFillMap:
        Image: {{$TestImage}}
        AllowedCIDR: {{ if $CreateEGWPolicy }}{{$GatewayAddress}}/32{{ else }}0.0.0.0/0{{ end }}

- name: Wait for external target pod to be running
  measurements:
  - Identifier: WaitForRunningPods
    Method: WaitForRunningPods
    Params:
      labelSelector: app.kubernetes.io/name=egw-external-target
      desiredPodCount: 3
      timeout: 60s

- name: Create bootstrap EGW client Pod
  phases:
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: 1
    tuningSet: Uniform1qps
    objectBundle:
    - basename: egw-client-pod-bootstrap
      objectTemplatePath: manifests/client-pod.yaml
      templateFillMap:
        Image: {{$TestImage}}
        Instance: "bootstrap"
        ExternalTarget: {{$ExternalTarget}}
        ExternalTargetPort: 1337
        ClientConnectTimeout: "60s"
        Stress: false

- name: Wait for EGW bootstrap pod to be running
  measurements:
  - Identifier: WaitForRunningPods
    Method: WaitForRunningPods
    Params:
      labelSelector: app.kubernetes.io/name=egw-client,app.kubernetes.io/instance=bootstrap
      desiredPodCount: 1
      timeout: 55s

- name: Wait for EGW Client Prometheus target to appear
  measurements:
    - Identifier: ExecCommand
      Method: Exec
      Params:
        retries: 60
        backoffDelay: 5s
        timeout: 5s
        command:
        - /bin/sh
        - -c
        - >
          ! kubectl get podmonitor -n monitoring egw-client > /dev/null || \
            kubectl get --raw '/api/v1/namespaces/monitoring/services/prometheus-k8s:9090/proxy/api/v1/targets' | \
              grep -q egw-client

- module:
    path: ../cilium-agent-pprofs.yaml
    params:
      action: start

# Run a first iteration of the masquerade delay test.
- module:
    path: modules/masq-test.yaml
    params:
      image: {{$TestImage}}
      instance: test-1
      externalTarget: {{$ExternalTarget}}
      replicas: {{$NumEGWClients}}
      metricsSuffix: LowScale

# The CiliumIdentity is created via an exec command because we need to control
# its name, which doesn't appear to be possible with normal templating (it
# always appends the index as a suffix).
- name: Create synthetic CiliumIdentity
  measurements:
  - Identifier: ExecCommand
    Method: Exec
    Params:
      command:
      - kubectl
      - apply
      - -f
      - {{$ManifestsDir}}/synthetic-identity.yaml

- name: Create synthetic CiliumEndpoints/CiliumNodes
  phases:
  - namespaceRange:
      min: 1
      max: 1
    replicasPerNamespace: {{$NumSyntheticEPs}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: egw-client-pod-synthetic
      objectTemplatePath: manifests/synthetic-endpoint.yaml
  - replicasPerNamespace: {{$NumSyntheticNodes}}
    tuningSet: RandomizedSaturationTimeLimited
    objectBundle:
    - basename: egw-node-synthetic
      objectTemplatePath: manifests/synthetic-node.yaml
      templateFillMap:
        NumSyntheticCEGPs: {{$NumSyntheticCEGPs}}

{{ if $CreateEGWPolicy }}
- name: Create extra Egress Gateway Policies
  phases:
{{range $i := Loop $NumSyntheticCEGPs}}
  - replicasPerNamespace: 1
    tuningSet: Uniform1qps
    objectBundle:
    - basename: egw-scale-test-dummy-{{ $i }}
      objectTemplatePath: {{$EGWPolicyTemplate}}
      templateFillMap:
        ExternalTarget: 1.2.3.{{ AddInt 1 $i }}
        NodeSelector: |
          app.kubernetes.io/component: synthetic-{{ $i }}
{{ end }}
{{ end }}

- name: Sleep to allow convergence
  measurements:
  - Identifier: SleepWaitConvergence
    Method: Sleep
    Params:
      duration: 10s

# Run a second iteration of the masquerade delay test, now that we increased the
# overall scale by creating a bunch of synthetic objects.
- module:
    path: modules/masq-test.yaml
    params:
      image: {{$TestImage}}
      instance: test-2
      externalTarget: {{$ExternalTarget}}
      replicas: {{$NumEGWClients}}
      metricsSuffix: HighScale

# Run the performance test.
- module:
    path: modules/perf-test.yaml
    params:
      gatewayAddress: {{$GatewayAddress}}
      udpMessageSize: {{$UDPMessageSize}}
      hasEGWPolicy: {{$CreateEGWPolicy}}

# Run the connections stress test.
- module:
    path: modules/stress-test.yaml
    params:
      image: {{$TestImage}}
      externalTarget: {{$ExternalTarget}}
      instance: stress

- module:
    path: ../cilium-agent-pprofs.yaml
    params:
      action: gather
