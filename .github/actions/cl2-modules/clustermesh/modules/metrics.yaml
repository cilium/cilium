# Valid actions: "start", "gather"
{{$action := .action}}

steps:
- name: "{{$action}}ing measurements"
  measurements:

  - Identifier: BPFMapPressure
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: BPF Map Pressure
      metricVersion: v1
      unit: "%"
      queries:
      - name: BPF Map Pressure (Max)
        query: max_over_time(max(cilium_bpf_map_pressure)[%v:]) * 100
        threshold: 90

  - Identifier: WarningErrorLogs
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: Warning and Error Logs
      metricVersion: v1
      unit: count
      queries:
      - name: Warnings
        query: sum(cilium_errors_warnings_total{level="warning"})
        threshold: 10
      - name: Errors
        query: sum(cilium_errors_warnings_total{level="error"})
        threshold: 10

  - Identifier: ClusterMeshReconnections
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: ClusterMesh Reconnections
      metricVersion: v1
      unit: count
      queries:
      - name: Agents
        query: sum(cilium_clustermesh_remote_cluster_failures)
        threshold: 0
      - name: KVStoreMesh
        query: sum(cilium_kvstoremesh_remote_cluster_failures)
        threshold: 0

  - Identifier: KVStoreMeshDataSynchronization
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: KVStoreMesh Data Synchronization
      metricVersion: v1
      unit: count
      queries:
      - name: Sync Queue Size
        query: max_over_time(sum(cilium_kvstoremesh_kvstore_sync_queue_size)[%v:])
        threshold: 1000
      - name: Sync Errors
        query: sum(cilium_kvstoremesh_kvstore_sync_errors_total)
        threshold: 0

  - Identifier: KVStoreMeshBootstrap
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: KVStoreMesh Bootstrap
      metricVersion: v1
      unit: s
      queries:
      - name: Bootstrap Time
        query: sum(cilium_kvstoremesh_bootstrap_seconds)
        threshold: 60

  - Identifier: KVStoreOperationsDurations
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: KVStore Operations Durations (KVStoreMesh)
      metricVersion: v1
      unit: s
      queries:
      - name: Upserts - Perc 50
        query: histogram_quantile(0.5, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Update"}[%v])) by (le))
      - name: Upserts - Perc 90
        query: histogram_quantile(0.9, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Update"}[%v])) by (le))
      - name: Upserts - Perc 99
        query: histogram_quantile(0.99, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Update"}[%v])) by (le))
      - name: Deletes - Perc 50
        query: histogram_quantile(0.5, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Delete"}[%v])) by (le))
      - name: Deletes - Perc 90
        query: histogram_quantile(0.9, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Delete"}[%v])) by (le))
      - name: Deletes - Perc 99
        query: histogram_quantile(0.99, sum(rate(cilium_kvstoremesh_kvstore_operations_duration_seconds_bucket{action="Delete"}[%v])) by (le))

  - Identifier: KVStoreEventsQueueTime
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: KVStore Events Queue Time (Agents)
      metricVersion: v1
      unit: s
      queries:
      - name: Nodes - Perc50
        query: histogram_quantile(0.5, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="nodes/v1"}[%v])) by (le))
      - name: Nodes - Perc90
        query: histogram_quantile(0.9, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="nodes/v1"}[%v])) by (le))
      - name: Nodes - Perc99
        query: histogram_quantile(0.99, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="nodes/v1"}[%v])) by (le))
      - name: Endpoints - Perc50
        query: histogram_quantile(0.5, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="ip/v1"}[%v])) by (le))
      - name: Endpoints - Perc90
        query: histogram_quantile(0.9, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="ip/v1"}[%v])) by (le))
      - name: Endpoints - Perc99
        query: histogram_quantile(0.99, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="ip/v1"}[%v])) by (le))
      - name: Identities - Perc50
        query: histogram_quantile(0.5, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="identities/v1"}[%v])) by (le))
      - name: Identities - Perc90
        query: histogram_quantile(0.9, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="identities/v1"}[%v])) by (le))
      - name: Identities - Perc99
        query: histogram_quantile(0.99, sum(rate(cilium_kvstore_events_queue_seconds_bucket{scope="identities/v1"}[%v])) by (le))

  - Identifier: EtcdResources
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: Etcd Resources
      metricVersion: v1
      unit: MB
      queries:
      - name: DB Size (Mocker)
        query: max_over_time(sum(etcd_mvcc_db_total_size_in_bytes{job="cmapisrv-mock-metrics", container="etcd"})[%v:]) / 1e6
      - name: Process resident set (Mocker)
        query: max_over_time(sum(process_resident_memory_bytes{job="cmapisrv-mock-metrics", container="etcd"})[%v:]) / 1e6
      - name: DB Size (KVStoreMesh)
        query: max_over_time(sum(etcd_mvcc_db_total_size_in_bytes{job="clustermesh-apiserver-metrics", container="etcd"})[%v:]) / 1e6
      - name: Process resident set (KVStoreMesh)
        query: max_over_time(sum(process_resident_memory_bytes{job="clustermesh-apiserver-metrics", container="etcd"})[%v:]) / 1e6

  - Identifier: EtcdWatchers
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: Etcd Watchers
      metricVersion: v1
      unit: count
      queries:
      - name: Total watch streams (Mocker)
        query: max_over_time(sum(etcd_debugging_mvcc_watch_stream_total{job="cmapisrv-mock-metrics", container="etcd"})[%v:])
      - name: Total watchers (Mocker)
        query: max_over_time(sum(etcd_debugging_mvcc_watcher_total{job="cmapisrv-mock-metrics", container="etcd"})[%v:])
      - name: Total slow watchers (Mocker)
        query: max_over_time(sum(etcd_debugging_mvcc_slow_watcher_total{job="cmapisrv-mock-metrics", container="etcd"})[%v:])
      - name: Total watch streams (KVStoreMesh)
        query: max_over_time(sum(etcd_debugging_mvcc_watch_stream_total{job="clustermesh-apiserver-metrics", container="etcd"})[%v:])
      - name: Total watchers (KVStoreMesh)
        query: max_over_time(sum(etcd_debugging_mvcc_watcher_total{job="clustermesh-apiserver-metrics", container="etcd"})[%v:])
      - name: Total slow watchers (KVStoreMesh)
        query: max_over_time(sum(etcd_debugging_mvcc_slow_watcher_total{job="clustermesh-apiserver-metrics", container="etcd"})[%v:])

  # For debugging cardinality of metrics, fetch prometheus snapshot and use
  # following query to get the cardinality of metrics:
  # topk(10, count by (__name__)({__name__=~"cilium_.+"}))
  - Identifier: CiliumMetricsCardinality
    Method: GenericPrometheusQuery
    Params:
      action: {{$action}}
      metricName: Metrics Cardinality
      metricVersion: v1
      unit: count
      queries:
      - name: Max
        query: max_over_time(count({__name__=~"cilium_.+"})[%v:])
