// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BGPStatus Status of an individual component
//
// swagger:model BGPStatus
type BGPStatus struct {

	// Internal state of the BGP component
	Mode string `json:"mode,omitempty"`

	// Human readable status/error/warning message
	Msg string `json:"msg,omitempty"`

	// State the component is in
	// Enum: ["Ok","Warning","Failure","Disabled"]
	State string `json:"state,omitempty"`
}

// Validate validates this b g p status
func (m *BGPStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var bGPStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ok","Warning","Failure","Disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bGPStatusTypeStatePropEnum = append(bGPStatusTypeStatePropEnum, v)
	}
}

const (

	// BGPStatusStateOk captures enum value "Ok"
	BGPStatusStateOk string = "Ok"

	// BGPStatusStateWarning captures enum value "Warning"
	BGPStatusStateWarning string = "Warning"

	// BGPStatusStateFailure captures enum value "Failure"
	BGPStatusStateFailure string = "Failure"

	// BGPStatusStateDisabled captures enum value "Disabled"
	BGPStatusStateDisabled string = "Disabled"
)

// prop value enum
func (m *BGPStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, bGPStatusTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BGPStatus) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this b g p status based on context it is used
func (m *BGPStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *BGPStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BGPStatus) UnmarshalBinary(b []byte) error {
	var res BGPStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
