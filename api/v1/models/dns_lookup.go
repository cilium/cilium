// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DNSLookup An IP -> DNS mapping, with metadata
// swagger:model DNSLookup

type DNSLookup struct {

	// The endpoint that made this lookup, or 0 for the agent itself.
	EndpointID int64 `json:"endpoint-id,omitempty"`

	// The absolute time when this data will expire in this cache
	ExpirationTime strfmt.DateTime `json:"expiration-time,omitempty"`

	// DNS name
	Fqdn string `json:"fqdn,omitempty"`

	// IP addresses returned in this lookup
	Ips []string `json:"ips"`

	// The absolute time when this data was recieved
	LookupTime strfmt.DateTime `json:"lookup-time,omitempty"`

	// The TTL in the DNS response
	TTL int64 `json:"ttl,omitempty"`
}

/* polymorph DNSLookup endpoint-id false */

/* polymorph DNSLookup expiration-time false */

/* polymorph DNSLookup fqdn false */

/* polymorph DNSLookup ips false */

/* polymorph DNSLookup lookup-time false */

/* polymorph DNSLookup ttl false */

// Validate validates this DNS lookup
func (m *DNSLookup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIps(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DNSLookup) validateIps(formats strfmt.Registry) error {

	if swag.IsZero(m.Ips) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DNSLookup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DNSLookup) UnmarshalBinary(b []byte) error {
	var res DNSLookup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
