// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Notice Notice is an informational message to the cluster operator.
// They are shown as part of the "cilium status" output.
//
// +k8s:deepcopy-gen=true
//
// swagger:model Notice
type Notice struct {

	// Human readable notice message
	Message string `json:"message,omitempty"`

	// Timestamp for when the notice was posted
	// Format: date-time
	PostedAt strfmt.DateTime `json:"posted-at,omitempty"`

	// Notice title
	Title string `json:"title,omitempty"`
}

// Validate validates this notice
func (m *Notice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Notice) validatePostedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("posted-at", "body", "date-time", m.PostedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this notice based on context it is used
func (m *Notice) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Notice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Notice) UnmarshalBinary(b []byte) error {
	var res Notice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
