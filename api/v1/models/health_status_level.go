// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HealthStatusLevel Level of health status update
//
// swagger:model HealthStatusLevel
type HealthStatusLevel string

func NewHealthStatusLevel(value HealthStatusLevel) *HealthStatusLevel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HealthStatusLevel.
func (m HealthStatusLevel) Pointer() *HealthStatusLevel {
	return &m
}

const (

	// HealthStatusLevelOk captures enum value "ok"
	HealthStatusLevelOk HealthStatusLevel = "ok"

	// HealthStatusLevelDegraded captures enum value "degraded"
	HealthStatusLevelDegraded HealthStatusLevel = "degraded"

	// HealthStatusLevelStopped captures enum value "stopped"
	HealthStatusLevelStopped HealthStatusLevel = "stopped"

	// HealthStatusLevelUnknown captures enum value "unknown"
	HealthStatusLevelUnknown HealthStatusLevel = "unknown"
)

// for schema
var healthStatusLevelEnum []interface{}

func init() {
	var res []HealthStatusLevel
	if err := json.Unmarshal([]byte(`["ok","degraded","stopped","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		healthStatusLevelEnum = append(healthStatusLevelEnum, v)
	}
}

func (m HealthStatusLevel) validateHealthStatusLevelEnum(path, location string, value HealthStatusLevel) error {
	if err := validate.EnumCase(path, location, value, healthStatusLevelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this health status level
func (m HealthStatusLevel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHealthStatusLevelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this health status level based on context it is used
func (m HealthStatusLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
