// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DaemonConfigurationResponse Response to a daemon configuration request. Contains the addressing
// information and configuration settings.
//
// swagger:model DaemonConfigurationResponse

type DaemonConfigurationResponse struct {

	// addressing
	Addressing *NodeAddressing `json:"addressing,omitempty"`

	// configuration
	Configuration *Configuration `json:"configuration,omitempty"`

	// k8s configuration
	K8sConfiguration string `json:"k8s-configuration,omitempty"`

	// k8s endpoint
	K8sEndpoint string `json:"k8s-endpoint,omitempty"`

	// kvstore configuration
	KvstoreConfiguration *KVstoreConfiguration `json:"kvstoreConfiguration,omitempty"`

	// Status of the node monitor
	NodeMonitor *MonitorStatus `json:"nodeMonitor,omitempty"`

	// policy enforcement
	PolicyEnforcement string `json:"policy-enforcement,omitempty"`
}

/* polymorph DaemonConfigurationResponse addressing false */

/* polymorph DaemonConfigurationResponse configuration false */

/* polymorph DaemonConfigurationResponse k8s-configuration false */

/* polymorph DaemonConfigurationResponse k8s-endpoint false */

/* polymorph DaemonConfigurationResponse kvstoreConfiguration false */

/* polymorph DaemonConfigurationResponse nodeMonitor false */

/* polymorph DaemonConfigurationResponse policy-enforcement false */

// Validate validates this daemon configuration response
func (m *DaemonConfigurationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressing(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKvstoreConfiguration(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNodeMonitor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DaemonConfigurationResponse) validateAddressing(formats strfmt.Registry) error {

	if swag.IsZero(m.Addressing) { // not required
		return nil
	}

	if m.Addressing != nil {

		if err := m.Addressing.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("addressing")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationResponse) validateConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.Configuration) { // not required
		return nil
	}

	if m.Configuration != nil {

		if err := m.Configuration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("configuration")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationResponse) validateKvstoreConfiguration(formats strfmt.Registry) error {

	if swag.IsZero(m.KvstoreConfiguration) { // not required
		return nil
	}

	if m.KvstoreConfiguration != nil {

		if err := m.KvstoreConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvstoreConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *DaemonConfigurationResponse) validateNodeMonitor(formats strfmt.Registry) error {

	if swag.IsZero(m.NodeMonitor) { // not required
		return nil
	}

	if m.NodeMonitor != nil {

		if err := m.NodeMonitor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodeMonitor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DaemonConfigurationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DaemonConfigurationResponse) UnmarshalBinary(b []byte) error {
	var res DaemonConfigurationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
