// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoutingConfiguration RoutingConfiguration is the configuration of the node that defines how to
// reach endpoints running on the node
//
// swagger:model RoutingConfiguration

type RoutingConfiguration struct {

	// DirectRouting is the direct configuration announced and used
	DirectRouting *DirectRoutingConfiguration `json:"directRouting,omitempty"`

	// Encapsulation defines whether and how the endpoints on the node can
	// be reached using network encapsulation. Encapsulation is always the
	// preferred routing mode unless it is explicitly disabled.
	//
	Encapsulation string `json:"encapsulation,omitempty"`
}

/* polymorph RoutingConfiguration directRouting false */

/* polymorph RoutingConfiguration encapsulation false */

// Validate validates this routing configuration
func (m *RoutingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectRouting(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEncapsulation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoutingConfiguration) validateDirectRouting(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectRouting) { // not required
		return nil
	}

	if m.DirectRouting != nil {

		if err := m.DirectRouting.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directRouting")
			}
			return err
		}
	}

	return nil
}

var routingConfigurationTypeEncapsulationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disabled","vxlan","geneve"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		routingConfigurationTypeEncapsulationPropEnum = append(routingConfigurationTypeEncapsulationPropEnum, v)
	}
}

const (
	// RoutingConfigurationEncapsulationDisabled captures enum value "disabled"
	RoutingConfigurationEncapsulationDisabled string = "disabled"
	// RoutingConfigurationEncapsulationVxlan captures enum value "vxlan"
	RoutingConfigurationEncapsulationVxlan string = "vxlan"
	// RoutingConfigurationEncapsulationGeneve captures enum value "geneve"
	RoutingConfigurationEncapsulationGeneve string = "geneve"
)

// prop value enum
func (m *RoutingConfiguration) validateEncapsulationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, routingConfigurationTypeEncapsulationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RoutingConfiguration) validateEncapsulation(formats strfmt.Registry) error {

	if swag.IsZero(m.Encapsulation) { // not required
		return nil
	}

	// value enum
	if err := m.validateEncapsulationEnum("encapsulation", "body", m.Encapsulation); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoutingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoutingConfiguration) UnmarshalBinary(b []byte) error {
	var res RoutingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
