package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeletePolicyPathHandlerFunc turns a function with the right signature into a delete policy path handler
type DeletePolicyPathHandlerFunc func(DeletePolicyPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeletePolicyPathHandlerFunc) Handle(params DeletePolicyPathParams) middleware.Responder {
	return fn(params)
}

// DeletePolicyPathHandler interface for that can handle valid delete policy path params
type DeletePolicyPathHandler interface {
	Handle(DeletePolicyPathParams) middleware.Responder
}

// NewDeletePolicyPath creates a new http.Handler for the delete policy path operation
func NewDeletePolicyPath(ctx *middleware.Context, handler DeletePolicyPathHandler) *DeletePolicyPath {
	return &DeletePolicyPath{Context: ctx, Handler: handler}
}

/*DeletePolicyPath swagger:route DELETE /policy/{path} policy deletePolicyPath

Delete a policy (sub)tree

*/
type DeletePolicyPath struct {
	Context *middleware.Context
	Handler DeletePolicyPathHandler
}

func (o *DeletePolicyPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeletePolicyPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
