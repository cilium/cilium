package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PutPolicyPathHandlerFunc turns a function with the right signature into a put policy path handler
type PutPolicyPathHandlerFunc func(PutPolicyPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutPolicyPathHandlerFunc) Handle(params PutPolicyPathParams) middleware.Responder {
	return fn(params)
}

// PutPolicyPathHandler interface for that can handle valid put policy path params
type PutPolicyPathHandler interface {
	Handle(PutPolicyPathParams) middleware.Responder
}

// NewPutPolicyPath creates a new http.Handler for the put policy path operation
func NewPutPolicyPath(ctx *middleware.Context, handler PutPolicyPathHandler) *PutPolicyPath {
	return &PutPolicyPath{Context: ctx, Handler: handler}
}

/*PutPolicyPath swagger:route PUT /policy/{path} policy putPolicyPath

Create or update a policy (sub)tree

*/
type PutPolicyPath struct {
	Context *middleware.Context
	Handler PutPolicyPathHandler
}

func (o *PutPolicyPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPutPolicyPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
