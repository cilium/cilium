// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/cilium/cilium/api/v1/models"
)

// GetFqdnCacheIDOKCode is the HTTP code returned for type GetFqdnCacheIDOK
const GetFqdnCacheIDOKCode int = 200

/*GetFqdnCacheIDOK Success

swagger:response getFqdnCacheIdOK
*/
type GetFqdnCacheIDOK struct {

	/*
	  In: Body
	*/
	Payload []*models.DNSLookup `json:"body,omitempty"`
}

// NewGetFqdnCacheIDOK creates GetFqdnCacheIDOK with default headers values
func NewGetFqdnCacheIDOK() *GetFqdnCacheIDOK {

	return &GetFqdnCacheIDOK{}
}

// WithPayload adds the payload to the get fqdn cache Id o k response
func (o *GetFqdnCacheIDOK) WithPayload(payload []*models.DNSLookup) *GetFqdnCacheIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fqdn cache Id o k response
func (o *GetFqdnCacheIDOK) SetPayload(payload []*models.DNSLookup) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFqdnCacheIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.DNSLookup, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFqdnCacheIDBadRequestCode is the HTTP code returned for type GetFqdnCacheIDBadRequest
const GetFqdnCacheIDBadRequestCode int = 400

/*GetFqdnCacheIDBadRequest Invalid request (error parsing parameters)

swagger:response getFqdnCacheIdBadRequest
*/
type GetFqdnCacheIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload models.Error `json:"body,omitempty"`
}

// NewGetFqdnCacheIDBadRequest creates GetFqdnCacheIDBadRequest with default headers values
func NewGetFqdnCacheIDBadRequest() *GetFqdnCacheIDBadRequest {

	return &GetFqdnCacheIDBadRequest{}
}

// WithPayload adds the payload to the get fqdn cache Id bad request response
func (o *GetFqdnCacheIDBadRequest) WithPayload(payload models.Error) *GetFqdnCacheIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get fqdn cache Id bad request response
func (o *GetFqdnCacheIDBadRequest) SetPayload(payload models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFqdnCacheIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFqdnCacheIDNotFoundCode is the HTTP code returned for type GetFqdnCacheIDNotFound
const GetFqdnCacheIDNotFoundCode int = 404

/*GetFqdnCacheIDNotFound No DNS data with provided parameters found

swagger:response getFqdnCacheIdNotFound
*/
type GetFqdnCacheIDNotFound struct {
}

// NewGetFqdnCacheIDNotFound creates GetFqdnCacheIDNotFound with default headers values
func NewGetFqdnCacheIDNotFound() *GetFqdnCacheIDNotFound {

	return &GetFqdnCacheIDNotFound{}
}

// WriteResponse to the client
func (o *GetFqdnCacheIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}
