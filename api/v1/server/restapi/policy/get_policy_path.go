package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPolicyPathHandlerFunc turns a function with the right signature into a get policy path handler
type GetPolicyPathHandlerFunc func(GetPolicyPathParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPolicyPathHandlerFunc) Handle(params GetPolicyPathParams) middleware.Responder {
	return fn(params)
}

// GetPolicyPathHandler interface for that can handle valid get policy path params
type GetPolicyPathHandler interface {
	Handle(GetPolicyPathParams) middleware.Responder
}

// NewGetPolicyPath creates a new http.Handler for the get policy path operation
func NewGetPolicyPath(ctx *middleware.Context, handler GetPolicyPathHandler) *GetPolicyPath {
	return &GetPolicyPath{Context: ctx, Handler: handler}
}

/*GetPolicyPath swagger:route GET /policy/{path} policy getPolicyPath

Retrieve policy subtree

Returns the policy node at path with all its children


*/
type GetPolicyPath struct {
	Context *middleware.Context
	Handler GetPolicyPathHandler
}

func (o *GetPolicyPath) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetPolicyPathParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
