// Code generated by go-swagger; DO NOT EDIT.

// Copyright Authors of Cilium
// SPDX-License-Identifier: Apache-2.0

package statedb

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetStatedbQueryTableHandlerFunc turns a function with the right signature into a get statedb query table handler
type GetStatedbQueryTableHandlerFunc func(GetStatedbQueryTableParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetStatedbQueryTableHandlerFunc) Handle(params GetStatedbQueryTableParams) middleware.Responder {
	return fn(params)
}

// GetStatedbQueryTableHandler interface for that can handle valid get statedb query table params
type GetStatedbQueryTableHandler interface {
	Handle(GetStatedbQueryTableParams) middleware.Responder
}

// NewGetStatedbQueryTable creates a new http.Handler for the get statedb query table operation
func NewGetStatedbQueryTable(ctx *middleware.Context, handler GetStatedbQueryTableHandler) *GetStatedbQueryTable {
	return &GetStatedbQueryTable{Context: ctx, Handler: handler}
}

/*
	GetStatedbQueryTable swagger:route GET /statedb/query/{table} statedb getStatedbQueryTable

Perform a query against a StateDB table
*/
type GetStatedbQueryTable struct {
	Context *middleware.Context
	Handler GetStatedbQueryTableHandler
}

func (o *GetStatedbQueryTable) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetStatedbQueryTableParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
