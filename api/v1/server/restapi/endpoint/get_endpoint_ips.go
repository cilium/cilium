// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetEndpointIpsHandlerFunc turns a function with the right signature into a get endpoint ips handler
type GetEndpointIpsHandlerFunc func(GetEndpointIpsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEndpointIpsHandlerFunc) Handle(params GetEndpointIpsParams) middleware.Responder {
	return fn(params)
}

// GetEndpointIpsHandler interface for that can handle valid get endpoint ips params
type GetEndpointIpsHandler interface {
	Handle(GetEndpointIpsParams) middleware.Responder
}

// NewGetEndpointIps creates a new http.Handler for the get endpoint ips operation
func NewGetEndpointIps(ctx *middleware.Context, handler GetEndpointIpsHandler) *GetEndpointIps {
	return &GetEndpointIps{Context: ctx, Handler: handler}
}

/*GetEndpointIps swagger:route GET /endpointIPs endpoint getEndpointIps

Retrieves a list of all endpoint IPs in the cluster and their corresponding security identities.

Retrieves a list of all endpoint IPs in the cluster and their corresponding security identities.


*/
type GetEndpointIps struct {
	Context *middleware.Context
	Handler GetEndpointIpsHandler
}

func (o *GetEndpointIps) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetEndpointIpsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
