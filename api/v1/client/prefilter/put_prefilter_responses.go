// Code generated by go-swagger; DO NOT EDIT.

package prefilter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/api/v1/models"
)

// PutPrefilterReader is a Reader for the PutPrefilter structure.
type PutPrefilterReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutPrefilterReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutPrefilterOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 461:
		result := NewPutPrefilterInvalidCIDR()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutPrefilterFailure()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutPrefilterOK creates a PutPrefilterOK with default headers values
func NewPutPrefilterOK() *PutPrefilterOK {
	return &PutPrefilterOK{}
}

/*PutPrefilterOK handles this case with default header values.

Updated
*/
type PutPrefilterOK struct {
}

func (o *PutPrefilterOK) Error() string {
	return fmt.Sprintf("[PUT /prefilter][%d] putPrefilterOK ", 200)
}

func (o *PutPrefilterOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutPrefilterInvalidCIDR creates a PutPrefilterInvalidCIDR with default headers values
func NewPutPrefilterInvalidCIDR() *PutPrefilterInvalidCIDR {
	return &PutPrefilterInvalidCIDR{}
}

/*PutPrefilterInvalidCIDR handles this case with default header values.

Invalid CIDR prefix
*/
type PutPrefilterInvalidCIDR struct {
	Payload models.Error
}

func (o *PutPrefilterInvalidCIDR) Error() string {
	return fmt.Sprintf("[PUT /prefilter][%d] putPrefilterInvalidCIdR  %+v", 461, o.Payload)
}

func (o *PutPrefilterInvalidCIDR) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutPrefilterFailure creates a PutPrefilterFailure with default headers values
func NewPutPrefilterFailure() *PutPrefilterFailure {
	return &PutPrefilterFailure{}
}

/*PutPrefilterFailure handles this case with default header values.

CIDR update failed
*/
type PutPrefilterFailure struct {
	Payload models.Error
}

func (o *PutPrefilterFailure) Error() string {
	return fmt.Sprintf("[PUT /prefilter][%d] putPrefilterFailure  %+v", 500, o.Payload)
}

func (o *PutPrefilterFailure) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
