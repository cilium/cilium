// Code generated by go-swagger; DO NOT EDIT.

package endpoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/api/v1/models"
)

// PutEndpointIDLabelsReader is a Reader for the PutEndpointIDLabels structure.
type PutEndpointIDLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutEndpointIDLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutEndpointIDLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewPutEndpointIDLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 460:
		result := NewPutEndpointIDLabelsLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewPutEndpointIDLabelsUpdateFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutEndpointIDLabelsOK creates a PutEndpointIDLabelsOK with default headers values
func NewPutEndpointIDLabelsOK() *PutEndpointIDLabelsOK {
	return &PutEndpointIDLabelsOK{}
}

/*PutEndpointIDLabelsOK handles this case with default header values.

Success
*/
type PutEndpointIDLabelsOK struct {
}

func (o *PutEndpointIDLabelsOK) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{id}/labels][%d] putEndpointIdLabelsOK ", 200)
}

func (o *PutEndpointIDLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutEndpointIDLabelsNotFound creates a PutEndpointIDLabelsNotFound with default headers values
func NewPutEndpointIDLabelsNotFound() *PutEndpointIDLabelsNotFound {
	return &PutEndpointIDLabelsNotFound{}
}

/*PutEndpointIDLabelsNotFound handles this case with default header values.

Endpoint not found
*/
type PutEndpointIDLabelsNotFound struct {
}

func (o *PutEndpointIDLabelsNotFound) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{id}/labels][%d] putEndpointIdLabelsNotFound ", 404)
}

func (o *PutEndpointIDLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutEndpointIDLabelsLabelNotFound creates a PutEndpointIDLabelsLabelNotFound with default headers values
func NewPutEndpointIDLabelsLabelNotFound() *PutEndpointIDLabelsLabelNotFound {
	return &PutEndpointIDLabelsLabelNotFound{}
}

/*PutEndpointIDLabelsLabelNotFound handles this case with default header values.

Label to be deleted not found
*/
type PutEndpointIDLabelsLabelNotFound struct {
	Payload models.Error
}

func (o *PutEndpointIDLabelsLabelNotFound) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{id}/labels][%d] putEndpointIdLabelsLabelNotFound  %+v", 460, o.Payload)
}

func (o *PutEndpointIDLabelsLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEndpointIDLabelsUpdateFailed creates a PutEndpointIDLabelsUpdateFailed with default headers values
func NewPutEndpointIDLabelsUpdateFailed() *PutEndpointIDLabelsUpdateFailed {
	return &PutEndpointIDLabelsUpdateFailed{}
}

/*PutEndpointIDLabelsUpdateFailed handles this case with default header values.

Error while updating labels
*/
type PutEndpointIDLabelsUpdateFailed struct {
	Payload models.Error
}

func (o *PutEndpointIDLabelsUpdateFailed) Error() string {
	return fmt.Sprintf("[PUT /endpoint/{id}/labels][%d] putEndpointIdLabelsUpdateFailed  %+v", 500, o.Payload)
}

func (o *PutEndpointIDLabelsUpdateFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
