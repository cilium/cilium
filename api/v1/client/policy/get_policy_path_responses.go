package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/cilium/cilium/api/v1/models"
)

// GetPolicyPathReader is a Reader for the GetPolicyPath structure.
type GetPolicyPathReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPolicyPathReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPolicyPathOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPolicyPathInvalid()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPolicyPathNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetPolicyPathOK creates a GetPolicyPathOK with default headers values
func NewGetPolicyPathOK() *GetPolicyPathOK {
	return &GetPolicyPathOK{}
}

/*GetPolicyPathOK handles this case with default header values.

Success
*/
type GetPolicyPathOK struct {
	Payload models.PolicyTree
}

func (o *GetPolicyPathOK) Error() string {
	return fmt.Sprintf("[GET /policy/{path}][%d] getPolicyPathOK  %+v", 200, o.Payload)
}

func (o *GetPolicyPathOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyPathInvalid creates a GetPolicyPathInvalid with default headers values
func NewGetPolicyPathInvalid() *GetPolicyPathInvalid {
	return &GetPolicyPathInvalid{}
}

/*GetPolicyPathInvalid handles this case with default header values.

Invalid policy path
*/
type GetPolicyPathInvalid struct {
	Payload models.Error
}

func (o *GetPolicyPathInvalid) Error() string {
	return fmt.Sprintf("[GET /policy/{path}][%d] getPolicyPathInvalid  %+v", 400, o.Payload)
}

func (o *GetPolicyPathInvalid) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyPathNotFound creates a GetPolicyPathNotFound with default headers values
func NewGetPolicyPathNotFound() *GetPolicyPathNotFound {
	return &GetPolicyPathNotFound{}
}

/*GetPolicyPathNotFound handles this case with default header values.

Policy tree not found
*/
type GetPolicyPathNotFound struct {
}

func (o *GetPolicyPathNotFound) Error() string {
	return fmt.Sprintf("[GET /policy/{path}][%d] getPolicyPathNotFound ", 404)
}

func (o *GetPolicyPathNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
