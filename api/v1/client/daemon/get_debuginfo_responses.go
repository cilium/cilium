// Code generated by go-swagger; DO NOT EDIT.

package daemon

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cilium/cilium/api/v1/models"
)

// GetDebuginfoReader is a Reader for the GetDebuginfo structure.
type GetDebuginfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDebuginfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDebuginfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetDebuginfoFailure()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetDebuginfoOK creates a GetDebuginfoOK with default headers values
func NewGetDebuginfoOK() *GetDebuginfoOK {
	return &GetDebuginfoOK{}
}

/*GetDebuginfoOK handles this case with default header values.

Success
*/
type GetDebuginfoOK struct {
	Payload *models.DebugInfo
}

func (o *GetDebuginfoOK) Error() string {
	return fmt.Sprintf("[GET /debuginfo][%d] getDebuginfoOK  %+v", 200, o.Payload)
}

func (o *GetDebuginfoOK) GetPayload() *models.DebugInfo {
	return o.Payload
}

func (o *GetDebuginfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DebugInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDebuginfoFailure creates a GetDebuginfoFailure with default headers values
func NewGetDebuginfoFailure() *GetDebuginfoFailure {
	return &GetDebuginfoFailure{}
}

/*GetDebuginfoFailure handles this case with default header values.

DebugInfo get failed
*/
type GetDebuginfoFailure struct {
	Payload models.Error
}

func (o *GetDebuginfoFailure) Error() string {
	return fmt.Sprintf("[GET /debuginfo][%d] getDebuginfoFailure  %+v", 500, o.Payload)
}

func (o *GetDebuginfoFailure) GetPayload() models.Error {
	return o.Payload
}

func (o *GetDebuginfoFailure) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
