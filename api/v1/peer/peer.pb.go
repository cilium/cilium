// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/peer.proto

package peer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ChangeNotificationType defines the peer change notification type.
type ChangeNotificationType int32

const (
	ChangeNotificationType_UNKNOWN      ChangeNotificationType = 0
	ChangeNotificationType_PEER_ADDED   ChangeNotificationType = 1
	ChangeNotificationType_PEER_DELETED ChangeNotificationType = 2
	ChangeNotificationType_PEER_UPDATED ChangeNotificationType = 3
)

var ChangeNotificationType_name = map[int32]string{
	0: "UNKNOWN",
	1: "PEER_ADDED",
	2: "PEER_DELETED",
	3: "PEER_UPDATED",
}

var ChangeNotificationType_value = map[string]int32{
	"UNKNOWN":      0,
	"PEER_ADDED":   1,
	"PEER_DELETED": 2,
	"PEER_UPDATED": 3,
}

func (x ChangeNotificationType) String() string {
	return proto.EnumName(ChangeNotificationType_name, int32(x))
}

func (ChangeNotificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{0}
}

type NotifyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRequest) Reset()         { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()    {}
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{0}
}

func (m *NotifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyRequest.Unmarshal(m, b)
}
func (m *NotifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyRequest.Marshal(b, m, deterministic)
}
func (m *NotifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRequest.Merge(m, src)
}
func (m *NotifyRequest) XXX_Size() int {
	return xxx_messageInfo_NotifyRequest.Size(m)
}
func (m *NotifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRequest proto.InternalMessageInfo

// ChangeNotification indicates a change regarding a hubble peer.
type ChangeNotification struct {
	// Name is the name of the peer, typically the hostname. The name includes
	// the cluster name if a value other than default has been specified.
	// This value can be used to uniquely identify the host.
	// When the cluster name is not the default, the cluster name is prepended
	// to the peer name and a forward slash is added.
	//
	// Examples:
	//  - runtime1
	//  - testcluster/runtime1
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address is the address of the peer's gRPC service.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// ChangeNotificationType indicates the type of change, ie whether the peer
	// was added, deleted or updated.
	Type                 ChangeNotificationType `protobuf:"varint,3,opt,name=type,proto3,enum=peer.ChangeNotificationType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ChangeNotification) Reset()         { *m = ChangeNotification{} }
func (m *ChangeNotification) String() string { return proto.CompactTextString(m) }
func (*ChangeNotification) ProtoMessage()    {}
func (*ChangeNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_c302117fbb08ad42, []int{1}
}

func (m *ChangeNotification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeNotification.Unmarshal(m, b)
}
func (m *ChangeNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeNotification.Marshal(b, m, deterministic)
}
func (m *ChangeNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeNotification.Merge(m, src)
}
func (m *ChangeNotification) XXX_Size() int {
	return xxx_messageInfo_ChangeNotification.Size(m)
}
func (m *ChangeNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeNotification proto.InternalMessageInfo

func (m *ChangeNotification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChangeNotification) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChangeNotification) GetType() ChangeNotificationType {
	if m != nil {
		return m.Type
	}
	return ChangeNotificationType_UNKNOWN
}

func init() {
	proto.RegisterEnum("peer.ChangeNotificationType", ChangeNotificationType_name, ChangeNotificationType_value)
	proto.RegisterType((*NotifyRequest)(nil), "peer.NotifyRequest")
	proto.RegisterType((*ChangeNotification)(nil), "peer.ChangeNotification")
}

func init() { proto.RegisterFile("peer/peer.proto", fileDescriptor_c302117fbb08ad42) }

var fileDescriptor_c302117fbb08ad42 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0x4d, 0x2d,
	0xd2, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0x20, 0xb6, 0x12, 0x3f, 0x17,
	0xaf, 0x5f, 0x7e, 0x49, 0x66, 0x5a, 0x65, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x52, 0x09,
	0x97, 0x90, 0x73, 0x46, 0x62, 0x5e, 0x7a, 0x2a, 0x58, 0x38, 0x33, 0x39, 0xb1, 0x24, 0x33, 0x3f,
	0x4f, 0x48, 0x88, 0x8b, 0x25, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08,
	0xcc, 0x16, 0x92, 0xe0, 0x62, 0x4f, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x96, 0x60, 0x02, 0x0b,
	0xc3, 0xb8, 0x42, 0x06, 0x5c, 0x2c, 0x25, 0x95, 0x05, 0xa9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x7c,
	0x46, 0x32, 0x7a, 0x60, 0x5b, 0x31, 0x4d, 0x0d, 0xa9, 0x2c, 0x48, 0x0d, 0x02, 0xab, 0xd4, 0x8a,
	0xe4, 0x12, 0xc3, 0x2e, 0x2f, 0xc4, 0xcd, 0xc5, 0x1e, 0xea, 0xe7, 0xed, 0xe7, 0x1f, 0xee, 0x27,
	0xc0, 0x20, 0xc4, 0xc7, 0xc5, 0x15, 0xe0, 0xea, 0x1a, 0x14, 0xef, 0xe8, 0xe2, 0xe2, 0xea, 0x22,
	0xc0, 0x28, 0x24, 0xc0, 0xc5, 0x03, 0xe6, 0xbb, 0xb8, 0xfa, 0xb8, 0x86, 0xb8, 0xba, 0x08, 0x30,
	0xc1, 0x45, 0x42, 0x03, 0x5c, 0x1c, 0x41, 0x22, 0xcc, 0x46, 0xce, 0x5c, 0x2c, 0x01, 0xa9, 0xa9,
	0x45, 0x42, 0xd6, 0x5c, 0x6c, 0x10, 0x9f, 0x0a, 0x09, 0x43, 0x1c, 0x84, 0xe2, 0x6f, 0x29, 0x09,
	0x5c, 0xae, 0x54, 0x62, 0x30, 0x60, 0x4c, 0x62, 0x03, 0x87, 0x99, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0xb0, 0xb8, 0x13, 0x41, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerClient is the client API for Peer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerClient interface {
	// Notify sends information about hubble peers in the cluster.
	// When Notify is called, it sends information about all the peers that are
	// already part of the cluster (with the type as PEER_ADDED). It
	// subsequently notifies of any change.
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (Peer_NotifyClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (Peer_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Peer_serviceDesc.Streams[0], "/peer.Peer/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Peer_NotifyClient interface {
	Recv() (*ChangeNotification, error)
	grpc.ClientStream
}

type peerNotifyClient struct {
	grpc.ClientStream
}

func (x *peerNotifyClient) Recv() (*ChangeNotification, error) {
	m := new(ChangeNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServer is the server API for Peer service.
type PeerServer interface {
	// Notify sends information about hubble peers in the cluster.
	// When Notify is called, it sends information about all the peers that are
	// already part of the cluster (with the type as PEER_ADDED). It
	// subsequently notifies of any change.
	Notify(*NotifyRequest, Peer_NotifyServer) error
}

// UnimplementedPeerServer can be embedded to have forward compatible implementations.
type UnimplementedPeerServer struct {
}

func (*UnimplementedPeerServer) Notify(req *NotifyRequest, srv Peer_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServer).Notify(m, &peerNotifyServer{stream})
}

type Peer_NotifyServer interface {
	Send(*ChangeNotification) error
	grpc.ServerStream
}

type peerNotifyServer struct {
	grpc.ServerStream
}

func (x *peerNotifyServer) Send(m *ChangeNotification) error {
	return x.ServerStream.SendMsg(m)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "peer.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _Peer_Notify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "peer/peer.proto",
}
