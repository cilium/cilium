// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PathStatus Connectivity status via different paths, for example using different
// policies or service redirection
//
// swagger:model PathStatus

type PathStatus struct {

	// Connectivity status without policy applied
	HTTP *ConnectivityStatus `json:"http,omitempty"`

	// Connectivity status with L7 policy applied
	HTTPViaL7 *ConnectivityStatus `json:"http-via-l7,omitempty"`

	// Connectivity status through a service redirect
	HTTPViaService *ConnectivityStatus `json:"http-via-service,omitempty"`

	// Connectivity status through a service redirect with L7 policy
	//
	HTTPViaServiceL7 *ConnectivityStatus `json:"http-via-service-l7,omitempty"`

	// Basic ping connectivity status to node IP
	Icmp *ConnectivityStatus `json:"icmp,omitempty"`

	// IP address queried for the connectivity status
	IP string `json:"ip,omitempty"`
}

/* polymorph PathStatus http false */

/* polymorph PathStatus http-via-l7 false */

/* polymorph PathStatus http-via-service false */

/* polymorph PathStatus http-via-service-l7 false */

/* polymorph PathStatus icmp false */

/* polymorph PathStatus ip false */

// Validate validates this path status
func (m *PathStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHTTP(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPViaL7(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPViaService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPViaServiceL7(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIcmp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PathStatus) validateHTTP(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTP) { // not required
		return nil
	}

	if m.HTTP != nil {

		if err := m.HTTP.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http")
			}
			return err
		}
	}

	return nil
}

func (m *PathStatus) validateHTTPViaL7(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPViaL7) { // not required
		return nil
	}

	if m.HTTPViaL7 != nil {

		if err := m.HTTPViaL7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http-via-l7")
			}
			return err
		}
	}

	return nil
}

func (m *PathStatus) validateHTTPViaService(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPViaService) { // not required
		return nil
	}

	if m.HTTPViaService != nil {

		if err := m.HTTPViaService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http-via-service")
			}
			return err
		}
	}

	return nil
}

func (m *PathStatus) validateHTTPViaServiceL7(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPViaServiceL7) { // not required
		return nil
	}

	if m.HTTPViaServiceL7 != nil {

		if err := m.HTTPViaServiceL7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http-via-service-l7")
			}
			return err
		}
	}

	return nil
}

func (m *PathStatus) validateIcmp(formats strfmt.Registry) error {

	if swag.IsZero(m.Icmp) { // not required
		return nil
	}

	if m.Icmp != nil {

		if err := m.Icmp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icmp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PathStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PathStatus) UnmarshalBinary(b []byte) error {
	var res PathStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
