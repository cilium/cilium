package common

import (
	"net"
	"testing"

	. "gopkg.in/check.v1"
)

var (
	EpAddr          = net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0x12, 0x34, 0x11, 0x11, 0x11, 0x12}
	NodeAddr        = net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0x12, 0x34, 0, 0, 0, 0}
	NodeID   uint32 = 0xaaaa1234
	EpID     uint16 = 0x1112
)

// Hook up gocheck into the "go test" runner.
func Test(t *testing.T) {
	TestingT(t)
}

type CommonSuite struct{}

var _ = Suite(&CommonSuite{})

func (s *CommonSuite) TestEpAddrEndpointAddress(c *C) {
	c.Assert(ValidEndpointAddress(EpAddr), Equals, true,
		Commentf("unexpected invalid EP address %s", EpAddr.String()))

	c.Assert(ValidEndpointAddress(NodeAddr), Equals, false,
		Commentf("unexpected valid node address %s", NodeAddr.String()))
}

func (s *CommonSuite) TestNodeAddrEndpointAddress(c *C) {
	c.Assert(ValidNodeAddress(EpAddr), Equals, false,
		Commentf("unexpected valid EP address %s", EpAddr.String()))

	c.Assert(ValidNodeAddress(NodeAddr), Equals, true,
		Commentf("unexpected invalid node address %s", NodeAddr.String()))
}

func (s *CommonSuite) TestNodeAddr2ID(c *C) {
	id := NodeAddr2ID(NodeAddr)

	c.Assert(id, Equals, NodeID,
		Commentf("NodeAddr2ID failed: %s != %x != %x", NodeAddr.String(), id, NodeID))
}

func (s *CommonSuite) TestEndpointAddr2ID(c *C) {
	id := EndpointAddr2ID(EpAddr)

	c.Assert(id, Equals, EpID,
		Commentf("EndpointAddr2ID failed: %s != %x != %x", EpAddr.String(), id, EpID))
}

func (s *CommonSuite) TestNextNetwork(c *C) {
	var tests = []struct {
		n  net.IPNet
		nn net.IP
	}{
		{
			net.IPNet{
				IP:   net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x12},
				Mask: net.CIDRMask(112, 128),
			},
			net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x12, 0x0, 0x0},
		},
		{
			net.IPNet{
				IP:   net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x12},
				Mask: net.CIDRMask(113, 128),
			},
			net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x80, 0x0},
		},
		{
			net.IPNet{
				IP:   net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x11, 0x12},
				Mask: net.CIDRMask(115, 128),
			},
			net.IP{0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xbe, 0xef, 0xaa, 0xaa, 0xaa, 0xaa, 0x11, 0x11, 0x20, 0x0},
		},
		{
			net.IPNet{
				IP:   net.IP{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0},
				Mask: net.CIDRMask(127, 128),
			},
			net.IP{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd2},
		},
		{
			net.IPNet{
				IP:   net.IP{0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
				Mask: net.CIDRMask(128, 128),
			},
			net.IPv6zero,
		},
		{
			net.IPNet{
				IP:   net.IP{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0xad},
				Mask: net.CIDRMask(120, 128),
			},
			net.IP{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdf, 0x00},
		},
	}
	for _, test := range tests {
		answer := NextNetwork(test.n)
		c.Assert(answer, DeepEquals, test.nn,
			Commentf("NextNetwork failed: input: %s, answer: %s != %s", test.n.String(), answer, test.nn))
	}
}
