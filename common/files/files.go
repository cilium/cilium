// Copyright 2016-2018 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package files

import (
	"bufio"
	"fmt"
	"os"
)

// FileScanner is a struct which reads the content of given file path and allows
// to read it line by line. Wrapping into a struct simplifies closing the file
// descriptor.
type FileScanner struct {
	fd      *os.File
	scanner *bufio.Scanner
}

// Close closes the FileScanner, rendering it unusable for I/O. It returns an
// error, if any.
func (ms *FileScanner) Close() error {
	return ms.fd.Close()
}

// Scan advances the FileScanner to the next token, which will then be
// available through the Bytes or Text method. It returns false when the
// scan stops, either by reaching the end of the input or an error.
// After Scan returns false, the Err method will return any error that
// occurred during scanning, except that if it was io.EOF, Err
// will return nil.
// Scan panics if the split function returns too many empty
// tokens without advancing the input. This is a common error mode for
// scanners.
func (ms *FileScanner) Scan() bool {
	return ms.scanner.Scan()
}

// Text returns the most recent token generated by a call to Scan
// as a newly allocated string holding its bytes.
func (ms *FileScanner) Text() string {
	return ms.scanner.Text()
}

// NewFileScanner creates a new FileScanner object
func NewFileScanner(filepath string) (*FileScanner, error) {
	fMounts, err := os.Open(filepath)
	if err != nil {
		return nil, fmt.Errorf("failed to open %s: %s", filepath, err)
	}

	scanner := bufio.NewScanner(fMounts)
	scanner.Split(bufio.ScanLines)

	return &FileScanner{
		fd:      fMounts,
		scanner: scanner,
	}, nil
}
