# Copyright 2017-2020 Authors of Cilium
# SPDX-License-Identifier: Apache-2.0

FLAGS := -I$(ROOT_DIR)/bpf/include -I$(ROOT_DIR)/bpf -D__NR_CPUS__=$(shell nproc --all) -O2 -g

CLANG_FLAGS := ${FLAGS} -target bpf -std=gnu89 -nostdinc -emit-llvm
# eBPF verifier enforces unaligned access checks where necessary, so don't
# let clang complain too early.
CLANG_FLAGS += -Wall -Wextra -Werror -Wshadow
CLANG_FLAGS += -Wno-address-of-packed-member
CLANG_FLAGS += -Wno-unknown-warning-option
CLANG_FLAGS += -Wno-gnu-variable-sized-type-not-at-end
CLANG_FLAGS += -Wdeclaration-after-statement
LLC_FLAGS   := -march=bpf -mcpu=probe -mattr=dwarfris

# BUILD_PERMUTATIONS_DEP is a dummy file dependency that ensures all targets
# are rebuilt when the 'build_all' target is run.
BUILD_PERMUTATIONS_DEP := .rebuild_all
LIB := $(shell find $(ROOT_DIR)/bpf -name '*.h') $(BUILD_PERMUTATIONS_DEP)
BPF_C := $(patsubst %.o,%.c,$(BPF))
BPF_ASM := $(patsubst %.o,%.s,$(BPF))

CLANG ?= clang
LLC   ?= llc

HOST_CC    ?= gcc
HOST_STRIP ?= strip

ifeq ($(IMAGE_CROSS_TARGET_PLATFORM),linux/arm64)
  HOST_CC = aarch64-linux-gnu-gcc
  HOST_STRIP = aarch64-linux-gnu-strip
endif

# Define all at the top here so that Makefiles which include this one will hit
# the 'all' target first (which we expect to be overridden by the includer).
all:

.PHONY: $(BUILD_PERMUTATIONS_DEP)
$(BUILD_PERMUTATIONS_DEP):
	@touch $(BUILD_PERMUTATIONS_DEP)

force:

%.ll: %.c $(LIB)
	@$(ECHO_CC)
	$(QUIET) ${CLANG} ${CLANG_FLAGS} -c $< -o $@

%.s: %.ll
	@$(ECHO_CC)
	$(QUIET) ${LLC} $(LLC_FLAGS) -filetype=asm -o $@ $(patsubst %.s,%.ll,$@)

checkpatch:
	@$(ECHO_CHECK) "(checkpatch)"
	$(QUIET) $(CONTAINER_ENGINE) container run --rm \
		--workdir /workspace \
		--volume $(CURDIR)/..:/workspace \
		--user "$(shell id -u):$(shell id -g)" \
		cilium/cilium-checkpatch:5b099019bf0db775b33b3f32cd5ecea55dd15f21

coccicheck:
	$(QUIET) $(foreach TARGET,$(shell find $(ROOT_DIR)/contrib/coccinelle/ -name '*.cocci'), \
		spatch --no-show-diff --sp-file ${TARGET} --include-headers --very-quiet --dir . ; )

check: coccicheck checkpatch
	@$(ECHO_CHECK)/*.c
	$(QUIET) sparse -Wsparse-all ${FLAGS} $(ROOT_DIR)/$(RELATIVE_DIR)/*.c
	$(QUIET) $(CLANG) ${CLANG_FLAGS} --analyze $(ROOT_DIR)/$(RELATIVE_DIR)/*.c
	$(QUIET) $(foreach SUBDIR,$(SUBDIRS), \
		$(MAKE) $(SUBMAKEOPTS) -C $(SUBDIR) $@ &&) true

preprocess: $(LIB)
	$(QUIET) $(foreach TARGET,$(shell find $(ROOT_DIR)/$(RELATIVE_DIR)/ -name 'bpf_*.c'), \
		echo "  GEN   $(patsubst %.c,%.i,${TARGET})"; \
		${CLANG} $(FLAGS) -E -target bpf -c ${TARGET} -o $(patsubst %.c,%.i,${TARGET}); )
	$(QUIET) $(foreach SUBDIR,$(SUBDIRS), \
		$(MAKE) $(SUBMAKEOPTS) -C $(SUBDIR) $@ &&) true

assembly: $(BPF_C) $(LIB) $(BPF_ASM)
	$(QUIET) $(foreach SUBDIR,$(SUBDIRS), \
		$(MAKE) $(SUBMAKEOPTS) -C $(SUBDIR) $@ &&) true

.PHONY: all force checkpatch coccicheck check preprocess assembly
