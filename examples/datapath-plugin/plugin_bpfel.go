// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPlugin returns the embedded CollectionSpec for plugin.
func loadPlugin() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PluginBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load plugin: %w", err)
	}

	return spec, err
}

// loadPluginObjects loads plugin and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*pluginObjects
//	*pluginPrograms
//	*pluginMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPluginObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPlugin()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pluginSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pluginSpecs struct {
	pluginProgramSpecs
	pluginMapSpecs
	pluginVariableSpecs
}

// pluginProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pluginProgramSpecs struct {
	FromClient *ebpf.ProgramSpec `ebpf:"from_client"`
}

// pluginMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pluginMapSpecs struct {
	CiliumReturn *ebpf.MapSpec `ebpf:"cilium_return"`
}

// pluginVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pluginVariableSpecs struct {
	ProxyPort *ebpf.VariableSpec `ebpf:"proxy_port"`
}

// pluginObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPluginObjects or ebpf.CollectionSpec.LoadAndAssign.
type pluginObjects struct {
	pluginPrograms
	pluginMaps
	pluginVariables
}

func (o *pluginObjects) Close() error {
	return _PluginClose(
		&o.pluginPrograms,
		&o.pluginMaps,
	)
}

// pluginMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPluginObjects or ebpf.CollectionSpec.LoadAndAssign.
type pluginMaps struct {
	CiliumReturn *ebpf.Map `ebpf:"cilium_return"`
}

func (m *pluginMaps) Close() error {
	return _PluginClose(
		m.CiliumReturn,
	)
}

// pluginVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPluginObjects or ebpf.CollectionSpec.LoadAndAssign.
type pluginVariables struct {
	ProxyPort *ebpf.Variable `ebpf:"proxy_port"`
}

// pluginPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPluginObjects or ebpf.CollectionSpec.LoadAndAssign.
type pluginPrograms struct {
	FromClient *ebpf.Program `ebpf:"from_client"`
}

func (p *pluginPrograms) Close() error {
	return _PluginClose(
		p.FromClient,
	)
}

func _PluginClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed plugin_bpfel.o
var _PluginBytes []byte
